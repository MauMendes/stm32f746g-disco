
stm32f746gdisco-Rtc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012608  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  080127d8  080127d8  000227d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012880  08012880  00030094  2**0
                  CONTENTS
  4 .ARM          00000008  08012880  08012880  00022880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012888  08012888  00030094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012888  08012888  00022888  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801288c  0801288c  0002288c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08012890  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009748  20000094  08012924  00030094  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200097dc  08012924  000397dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030094  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003f2ea  00000000  00000000  000300c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007984  00000000  00000000  0006f3ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00003098  00000000  00000000  00076d38  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002d18  00000000  00000000  00079dd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000360a7  00000000  00000000  0007cae8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002f947  00000000  00000000  000b2b8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0012be29  00000000  00000000  000e24d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0020e2ff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000cf10  00000000  00000000  0020e37c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000094 	.word	0x20000094
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080127c0 	.word	0x080127c0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000098 	.word	0x20000098
 800020c:	080127c0 	.word	0x080127c0

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b972 	b.w	800050c <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	4688      	mov	r8, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14b      	bne.n	80002e6 <__udivmoddi4+0xa6>
 800024e:	428a      	cmp	r2, r1
 8000250:	4615      	mov	r5, r2
 8000252:	d967      	bls.n	8000324 <__udivmoddi4+0xe4>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b14a      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025a:	f1c2 0720 	rsb	r7, r2, #32
 800025e:	fa01 f302 	lsl.w	r3, r1, r2
 8000262:	fa20 f707 	lsr.w	r7, r0, r7
 8000266:	4095      	lsls	r5, r2
 8000268:	ea47 0803 	orr.w	r8, r7, r3
 800026c:	4094      	lsls	r4, r2
 800026e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000272:	0c23      	lsrs	r3, r4, #16
 8000274:	fbb8 f7fe 	udiv	r7, r8, lr
 8000278:	fa1f fc85 	uxth.w	ip, r5
 800027c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000280:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000284:	fb07 f10c 	mul.w	r1, r7, ip
 8000288:	4299      	cmp	r1, r3
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x60>
 800028c:	18eb      	adds	r3, r5, r3
 800028e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000292:	f080 811b 	bcs.w	80004cc <__udivmoddi4+0x28c>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 8118 	bls.w	80004cc <__udivmoddi4+0x28c>
 800029c:	3f02      	subs	r7, #2
 800029e:	442b      	add	r3, r5
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002b4:	45a4      	cmp	ip, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x8c>
 80002b8:	192c      	adds	r4, r5, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 8107 	bcs.w	80004d0 <__udivmoddi4+0x290>
 80002c2:	45a4      	cmp	ip, r4
 80002c4:	f240 8104 	bls.w	80004d0 <__udivmoddi4+0x290>
 80002c8:	3802      	subs	r0, #2
 80002ca:	442c      	add	r4, r5
 80002cc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d0:	eba4 040c 	sub.w	r4, r4, ip
 80002d4:	2700      	movs	r7, #0
 80002d6:	b11e      	cbz	r6, 80002e0 <__udivmoddi4+0xa0>
 80002d8:	40d4      	lsrs	r4, r2
 80002da:	2300      	movs	r3, #0
 80002dc:	e9c6 4300 	strd	r4, r3, [r6]
 80002e0:	4639      	mov	r1, r7
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d909      	bls.n	80002fe <__udivmoddi4+0xbe>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80eb 	beq.w	80004c6 <__udivmoddi4+0x286>
 80002f0:	2700      	movs	r7, #0
 80002f2:	e9c6 0100 	strd	r0, r1, [r6]
 80002f6:	4638      	mov	r0, r7
 80002f8:	4639      	mov	r1, r7
 80002fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fe:	fab3 f783 	clz	r7, r3
 8000302:	2f00      	cmp	r7, #0
 8000304:	d147      	bne.n	8000396 <__udivmoddi4+0x156>
 8000306:	428b      	cmp	r3, r1
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xd0>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 80fa 	bhi.w	8000504 <__udivmoddi4+0x2c4>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb61 0303 	sbc.w	r3, r1, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4698      	mov	r8, r3
 800031a:	2e00      	cmp	r6, #0
 800031c:	d0e0      	beq.n	80002e0 <__udivmoddi4+0xa0>
 800031e:	e9c6 4800 	strd	r4, r8, [r6]
 8000322:	e7dd      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000324:	b902      	cbnz	r2, 8000328 <__udivmoddi4+0xe8>
 8000326:	deff      	udf	#255	; 0xff
 8000328:	fab2 f282 	clz	r2, r2
 800032c:	2a00      	cmp	r2, #0
 800032e:	f040 808f 	bne.w	8000450 <__udivmoddi4+0x210>
 8000332:	1b49      	subs	r1, r1, r5
 8000334:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000338:	fa1f f885 	uxth.w	r8, r5
 800033c:	2701      	movs	r7, #1
 800033e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fb0e 111c 	mls	r1, lr, ip, r1
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb08 f10c 	mul.w	r1, r8, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x124>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f10c 30ff 	add.w	r0, ip, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4299      	cmp	r1, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2bc>
 8000362:	4684      	mov	ip, r0
 8000364:	1a59      	subs	r1, r3, r1
 8000366:	b2a3      	uxth	r3, r4
 8000368:	fbb1 f0fe 	udiv	r0, r1, lr
 800036c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000370:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000374:	fb08 f800 	mul.w	r8, r8, r0
 8000378:	45a0      	cmp	r8, r4
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x14c>
 800037c:	192c      	adds	r4, r5, r4
 800037e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x14a>
 8000384:	45a0      	cmp	r8, r4
 8000386:	f200 80b6 	bhi.w	80004f6 <__udivmoddi4+0x2b6>
 800038a:	4618      	mov	r0, r3
 800038c:	eba4 0408 	sub.w	r4, r4, r8
 8000390:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000394:	e79f      	b.n	80002d6 <__udivmoddi4+0x96>
 8000396:	f1c7 0c20 	rsb	ip, r7, #32
 800039a:	40bb      	lsls	r3, r7
 800039c:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003a4:	fa01 f407 	lsl.w	r4, r1, r7
 80003a8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003ac:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003b4:	4325      	orrs	r5, r4
 80003b6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ba:	0c2c      	lsrs	r4, r5, #16
 80003bc:	fb08 3319 	mls	r3, r8, r9, r3
 80003c0:	fa1f fa8e 	uxth.w	sl, lr
 80003c4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003c8:	fb09 f40a 	mul.w	r4, r9, sl
 80003cc:	429c      	cmp	r4, r3
 80003ce:	fa02 f207 	lsl.w	r2, r2, r7
 80003d2:	fa00 f107 	lsl.w	r1, r0, r7
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1e 0303 	adds.w	r3, lr, r3
 80003dc:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e0:	f080 8087 	bcs.w	80004f2 <__udivmoddi4+0x2b2>
 80003e4:	429c      	cmp	r4, r3
 80003e6:	f240 8084 	bls.w	80004f2 <__udivmoddi4+0x2b2>
 80003ea:	f1a9 0902 	sub.w	r9, r9, #2
 80003ee:	4473      	add	r3, lr
 80003f0:	1b1b      	subs	r3, r3, r4
 80003f2:	b2ad      	uxth	r5, r5
 80003f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003f8:	fb08 3310 	mls	r3, r8, r0, r3
 80003fc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000400:	fb00 fa0a 	mul.w	sl, r0, sl
 8000404:	45a2      	cmp	sl, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1e 0404 	adds.w	r4, lr, r4
 800040c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000410:	d26b      	bcs.n	80004ea <__udivmoddi4+0x2aa>
 8000412:	45a2      	cmp	sl, r4
 8000414:	d969      	bls.n	80004ea <__udivmoddi4+0x2aa>
 8000416:	3802      	subs	r0, #2
 8000418:	4474      	add	r4, lr
 800041a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800041e:	fba0 8902 	umull	r8, r9, r0, r2
 8000422:	eba4 040a 	sub.w	r4, r4, sl
 8000426:	454c      	cmp	r4, r9
 8000428:	46c2      	mov	sl, r8
 800042a:	464b      	mov	r3, r9
 800042c:	d354      	bcc.n	80004d8 <__udivmoddi4+0x298>
 800042e:	d051      	beq.n	80004d4 <__udivmoddi4+0x294>
 8000430:	2e00      	cmp	r6, #0
 8000432:	d069      	beq.n	8000508 <__udivmoddi4+0x2c8>
 8000434:	ebb1 050a 	subs.w	r5, r1, sl
 8000438:	eb64 0403 	sbc.w	r4, r4, r3
 800043c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000440:	40fd      	lsrs	r5, r7
 8000442:	40fc      	lsrs	r4, r7
 8000444:	ea4c 0505 	orr.w	r5, ip, r5
 8000448:	e9c6 5400 	strd	r5, r4, [r6]
 800044c:	2700      	movs	r7, #0
 800044e:	e747      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000450:	f1c2 0320 	rsb	r3, r2, #32
 8000454:	fa20 f703 	lsr.w	r7, r0, r3
 8000458:	4095      	lsls	r5, r2
 800045a:	fa01 f002 	lsl.w	r0, r1, r2
 800045e:	fa21 f303 	lsr.w	r3, r1, r3
 8000462:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000466:	4338      	orrs	r0, r7
 8000468:	0c01      	lsrs	r1, r0, #16
 800046a:	fbb3 f7fe 	udiv	r7, r3, lr
 800046e:	fa1f f885 	uxth.w	r8, r5
 8000472:	fb0e 3317 	mls	r3, lr, r7, r3
 8000476:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047a:	fb07 f308 	mul.w	r3, r7, r8
 800047e:	428b      	cmp	r3, r1
 8000480:	fa04 f402 	lsl.w	r4, r4, r2
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x256>
 8000486:	1869      	adds	r1, r5, r1
 8000488:	f107 3cff 	add.w	ip, r7, #4294967295
 800048c:	d22f      	bcs.n	80004ee <__udivmoddi4+0x2ae>
 800048e:	428b      	cmp	r3, r1
 8000490:	d92d      	bls.n	80004ee <__udivmoddi4+0x2ae>
 8000492:	3f02      	subs	r7, #2
 8000494:	4429      	add	r1, r5
 8000496:	1acb      	subs	r3, r1, r3
 8000498:	b281      	uxth	r1, r0
 800049a:	fbb3 f0fe 	udiv	r0, r3, lr
 800049e:	fb0e 3310 	mls	r3, lr, r0, r3
 80004a2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a6:	fb00 f308 	mul.w	r3, r0, r8
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x27e>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004b4:	d217      	bcs.n	80004e6 <__udivmoddi4+0x2a6>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d915      	bls.n	80004e6 <__udivmoddi4+0x2a6>
 80004ba:	3802      	subs	r0, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004c4:	e73b      	b.n	800033e <__udivmoddi4+0xfe>
 80004c6:	4637      	mov	r7, r6
 80004c8:	4630      	mov	r0, r6
 80004ca:	e709      	b.n	80002e0 <__udivmoddi4+0xa0>
 80004cc:	4607      	mov	r7, r0
 80004ce:	e6e7      	b.n	80002a0 <__udivmoddi4+0x60>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6fb      	b.n	80002cc <__udivmoddi4+0x8c>
 80004d4:	4541      	cmp	r1, r8
 80004d6:	d2ab      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004d8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004dc:	eb69 020e 	sbc.w	r2, r9, lr
 80004e0:	3801      	subs	r0, #1
 80004e2:	4613      	mov	r3, r2
 80004e4:	e7a4      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e6:	4660      	mov	r0, ip
 80004e8:	e7e9      	b.n	80004be <__udivmoddi4+0x27e>
 80004ea:	4618      	mov	r0, r3
 80004ec:	e795      	b.n	800041a <__udivmoddi4+0x1da>
 80004ee:	4667      	mov	r7, ip
 80004f0:	e7d1      	b.n	8000496 <__udivmoddi4+0x256>
 80004f2:	4681      	mov	r9, r0
 80004f4:	e77c      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	442c      	add	r4, r5
 80004fa:	e747      	b.n	800038c <__udivmoddi4+0x14c>
 80004fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000500:	442b      	add	r3, r5
 8000502:	e72f      	b.n	8000364 <__udivmoddi4+0x124>
 8000504:	4638      	mov	r0, r7
 8000506:	e708      	b.n	800031a <__udivmoddi4+0xda>
 8000508:	4637      	mov	r7, r6
 800050a:	e6e9      	b.n	80002e0 <__udivmoddi4+0xa0>

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000514:	bf00      	nop
 8000516:	46bd      	mov	sp, r7
 8000518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051c:	4770      	bx	lr

0800051e <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 800051e:	b480      	push	{r7}
 8000520:	b083      	sub	sp, #12
 8000522:	af00      	add	r7, sp, #0
 8000524:	6078      	str	r0, [r7, #4]
 8000526:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000528:	bf00      	nop
 800052a:	370c      	adds	r7, #12
 800052c:	46bd      	mov	sp, r7
 800052e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000532:	4770      	bx	lr

08000534 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000538:	bf00      	nop
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr
	...

08000544 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000544:	b480      	push	{r7}
 8000546:	b085      	sub	sp, #20
 8000548:	af00      	add	r7, sp, #0
 800054a:	60f8      	str	r0, [r7, #12]
 800054c:	60b9      	str	r1, [r7, #8]
 800054e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000550:	68fb      	ldr	r3, [r7, #12]
 8000552:	4a07      	ldr	r2, [pc, #28]	; (8000570 <vApplicationGetIdleTaskMemory+0x2c>)
 8000554:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000556:	68bb      	ldr	r3, [r7, #8]
 8000558:	4a06      	ldr	r2, [pc, #24]	; (8000574 <vApplicationGetIdleTaskMemory+0x30>)
 800055a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	2280      	movs	r2, #128	; 0x80
 8000560:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000562:	bf00      	nop
 8000564:	3714      	adds	r7, #20
 8000566:	46bd      	mov	sp, r7
 8000568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop
 8000570:	200000b0 	.word	0x200000b0
 8000574:	20000108 	.word	0x20000108

08000578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000578:	b5b0      	push	{r4, r5, r7, lr}
 800057a:	b088      	sub	sp, #32
 800057c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057e:	f002 fb74 	bl	8002c6a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000582:	f000 f84b 	bl	800061c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000586:	f001 f843 	bl	8001610 <MX_GPIO_Init>
  MX_ADC3_Init();
 800058a:	f000 f90d 	bl	80007a8 <MX_ADC3_Init>
  MX_CRC_Init();
 800058e:	f000 f95d 	bl	800084c <MX_CRC_Init>
  MX_DCMI_Init();
 8000592:	f000 f97d 	bl	8000890 <MX_DCMI_Init>
  MX_DMA2D_Init();
 8000596:	f000 f9af 	bl	80008f8 <MX_DMA2D_Init>
  MX_ETH_Init();
 800059a:	f000 f9df 	bl	800095c <MX_ETH_Init>
  MX_FMC_Init();
 800059e:	f000 ffe7 	bl	8001570 <MX_FMC_Init>
  MX_I2C1_Init();
 80005a2:	f000 fa1b 	bl	80009dc <MX_I2C1_Init>
  MX_I2C3_Init();
 80005a6:	f000 fa59 	bl	8000a5c <MX_I2C3_Init>
  MX_LTDC_Init();
 80005aa:	f000 fa97 	bl	8000adc <MX_LTDC_Init>
  MX_QUADSPI_Init();
 80005ae:	f000 fb4b 	bl	8000c48 <MX_QUADSPI_Init>
  MX_RTC_Init();
 80005b2:	f000 fb75 	bl	8000ca0 <MX_RTC_Init>
  MX_SAI2_Init();
 80005b6:	f000 fb99 	bl	8000cec <MX_SAI2_Init>
  MX_SDMMC1_SD_Init();
 80005ba:	f000 fc3f 	bl	8000e3c <MX_SDMMC1_SD_Init>
  MX_SPDIFRX_Init();
 80005be:	f000 fc5d 	bl	8000e7c <MX_SPDIFRX_Init>
  MX_SPI2_Init();
 80005c2:	f000 fc8b 	bl	8000edc <MX_SPI2_Init>
  MX_TIM1_Init();
 80005c6:	f000 fcc7 	bl	8000f58 <MX_TIM1_Init>
  MX_TIM2_Init();
 80005ca:	f000 fd71 	bl	80010b0 <MX_TIM2_Init>
  MX_TIM3_Init();
 80005ce:	f000 fde5 	bl	800119c <MX_TIM3_Init>
  MX_TIM5_Init();
 80005d2:	f000 fe5b 	bl	800128c <MX_TIM5_Init>
  MX_TIM8_Init();
 80005d6:	f000 fed1 	bl	800137c <MX_TIM8_Init>
  MX_TIM12_Init();
 80005da:	f000 ff23 	bl	8001424 <MX_TIM12_Init>
  MX_USART1_UART_Init();
 80005de:	f000 ff67 	bl	80014b0 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 80005e2:	f000 ff95 	bl	8001510 <MX_USART6_UART_Init>
  MX_FATFS_Init();
 80005e6:	f00c fe0d 	bl	800d204 <MX_FATFS_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 80005ea:	4b0a      	ldr	r3, [pc, #40]	; (8000614 <main+0x9c>)
 80005ec:	1d3c      	adds	r4, r7, #4
 80005ee:	461d      	mov	r5, r3
 80005f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005fc:	1d3b      	adds	r3, r7, #4
 80005fe:	2100      	movs	r1, #0
 8000600:	4618      	mov	r0, r3
 8000602:	f00f fa4d 	bl	800faa0 <osThreadCreate>
 8000606:	4602      	mov	r2, r0
 8000608:	4b03      	ldr	r3, [pc, #12]	; (8000618 <main+0xa0>)
 800060a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800060c:	f00f fa25 	bl	800fa5a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000610:	e7fe      	b.n	8000610 <main+0x98>
 8000612:	bf00      	nop
 8000614:	080127e4 	.word	0x080127e4
 8000618:	20008504 	.word	0x20008504

0800061c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b0b4      	sub	sp, #208	; 0xd0
 8000620:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000622:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000626:	2230      	movs	r2, #48	; 0x30
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f012 f805 	bl	801263a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000630:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	60da      	str	r2, [r3, #12]
 800063e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000640:	f107 0308 	add.w	r3, r7, #8
 8000644:	2284      	movs	r2, #132	; 0x84
 8000646:	2100      	movs	r1, #0
 8000648:	4618      	mov	r0, r3
 800064a:	f011 fff6 	bl	801263a <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800064e:	f006 fa79 	bl	8006b44 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000652:	4b52      	ldr	r3, [pc, #328]	; (800079c <SystemClock_Config+0x180>)
 8000654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000656:	4a51      	ldr	r2, [pc, #324]	; (800079c <SystemClock_Config+0x180>)
 8000658:	f023 0318 	bic.w	r3, r3, #24
 800065c:	6713      	str	r3, [r2, #112]	; 0x70
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800065e:	4b4f      	ldr	r3, [pc, #316]	; (800079c <SystemClock_Config+0x180>)
 8000660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000662:	4a4e      	ldr	r2, [pc, #312]	; (800079c <SystemClock_Config+0x180>)
 8000664:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000668:	6413      	str	r3, [r2, #64]	; 0x40
 800066a:	4b4c      	ldr	r3, [pc, #304]	; (800079c <SystemClock_Config+0x180>)
 800066c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800066e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000672:	607b      	str	r3, [r7, #4]
 8000674:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000676:	4b4a      	ldr	r3, [pc, #296]	; (80007a0 <SystemClock_Config+0x184>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	4a49      	ldr	r2, [pc, #292]	; (80007a0 <SystemClock_Config+0x184>)
 800067c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000680:	6013      	str	r3, [r2, #0]
 8000682:	4b47      	ldr	r3, [pc, #284]	; (80007a0 <SystemClock_Config+0x184>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800068a:	603b      	str	r3, [r7, #0]
 800068c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 800068e:	2305      	movs	r3, #5
 8000690:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000694:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000698:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800069c:	2301      	movs	r3, #1
 800069e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a2:	2302      	movs	r3, #2
 80006a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006a8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006ac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 80006b0:	2319      	movs	r3, #25
 80006b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 80006b6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80006ba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006be:	2302      	movs	r3, #2
 80006c0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80006c4:	2309      	movs	r3, #9
 80006c6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ca:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80006ce:	4618      	mov	r0, r3
 80006d0:	f006 fb5a 	bl	8006d88 <HAL_RCC_OscConfig>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006da:	f001 f9ad 	bl	8001a38 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006de:	f006 fa41 	bl	8006b64 <HAL_PWREx_EnableOverDrive>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80006e8:	f001 f9a6 	bl	8001a38 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ec:	230f      	movs	r3, #15
 80006ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f2:	2302      	movs	r3, #2
 80006f4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f8:	2300      	movs	r3, #0
 80006fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006fe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000702:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000706:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800070a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800070e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000712:	2106      	movs	r1, #6
 8000714:	4618      	mov	r0, r3
 8000716:	f006 fddb 	bl	80072d0 <HAL_RCC_ClockConfig>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <SystemClock_Config+0x108>
  {
    Error_Handler();
 8000720:	f001 f98a 	bl	8001a38 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 8000724:	4b1f      	ldr	r3, [pc, #124]	; (80007a4 <SystemClock_Config+0x188>)
 8000726:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_SAI2
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C3
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 8000728:	2364      	movs	r3, #100	; 0x64
 800072a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 800072c:	2302      	movs	r3, #2
 800072e:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000730:	2302      	movs	r3, #2
 8000732:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8000734:	2302      	movs	r3, #2
 8000736:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8000738:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800073c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 800073e:	2305      	movs	r3, #5
 8000740:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000742:	2302      	movs	r3, #2
 8000744:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8000746:	2303      	movs	r3, #3
 8000748:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 800074a:	2301      	movs	r3, #1
 800074c:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 800074e:	2301      	movs	r3, #1
 8000750:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000752:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000756:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000758:	f44f 7380 	mov.w	r3, #256	; 0x100
 800075c:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 800075e:	2300      	movs	r3, #0
 8000760:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000762:	2300      	movs	r3, #0
 8000764:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8000766:	2300      	movs	r3, #0
 8000768:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800076a:	2300      	movs	r3, #0
 800076c:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800076e:	2300      	movs	r3, #0
 8000770:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8000772:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000776:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 800077a:	2300      	movs	r3, #0
 800077c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000780:	f107 0308 	add.w	r3, r7, #8
 8000784:	4618      	mov	r0, r3
 8000786:	f006 ffa7 	bl	80076d8 <HAL_RCCEx_PeriphCLKConfig>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <SystemClock_Config+0x178>
  {
    Error_Handler();
 8000790:	f001 f952 	bl	8001a38 <Error_Handler>
  }
}
 8000794:	bf00      	nop
 8000796:	37d0      	adds	r7, #208	; 0xd0
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	40023800 	.word	0x40023800
 80007a0:	40007000 	.word	0x40007000
 80007a4:	01b14868 	.word	0x01b14868

080007a8 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b084      	sub	sp, #16
 80007ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007ae:	463b      	mov	r3, r7
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	605a      	str	r2, [r3, #4]
 80007b6:	609a      	str	r2, [r3, #8]
 80007b8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80007ba:	4b21      	ldr	r3, [pc, #132]	; (8000840 <MX_ADC3_Init+0x98>)
 80007bc:	4a21      	ldr	r2, [pc, #132]	; (8000844 <MX_ADC3_Init+0x9c>)
 80007be:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007c0:	4b1f      	ldr	r3, [pc, #124]	; (8000840 <MX_ADC3_Init+0x98>)
 80007c2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80007c6:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80007c8:	4b1d      	ldr	r3, [pc, #116]	; (8000840 <MX_ADC3_Init+0x98>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007ce:	4b1c      	ldr	r3, [pc, #112]	; (8000840 <MX_ADC3_Init+0x98>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80007d4:	4b1a      	ldr	r3, [pc, #104]	; (8000840 <MX_ADC3_Init+0x98>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80007da:	4b19      	ldr	r3, [pc, #100]	; (8000840 <MX_ADC3_Init+0x98>)
 80007dc:	2200      	movs	r2, #0
 80007de:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007e2:	4b17      	ldr	r3, [pc, #92]	; (8000840 <MX_ADC3_Init+0x98>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007e8:	4b15      	ldr	r3, [pc, #84]	; (8000840 <MX_ADC3_Init+0x98>)
 80007ea:	4a17      	ldr	r2, [pc, #92]	; (8000848 <MX_ADC3_Init+0xa0>)
 80007ec:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007ee:	4b14      	ldr	r3, [pc, #80]	; (8000840 <MX_ADC3_Init+0x98>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80007f4:	4b12      	ldr	r3, [pc, #72]	; (8000840 <MX_ADC3_Init+0x98>)
 80007f6:	2201      	movs	r2, #1
 80007f8:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80007fa:	4b11      	ldr	r3, [pc, #68]	; (8000840 <MX_ADC3_Init+0x98>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000802:	4b0f      	ldr	r3, [pc, #60]	; (8000840 <MX_ADC3_Init+0x98>)
 8000804:	2201      	movs	r2, #1
 8000806:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000808:	480d      	ldr	r0, [pc, #52]	; (8000840 <MX_ADC3_Init+0x98>)
 800080a:	f002 fa7d 	bl	8002d08 <HAL_ADC_Init>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000814:	f001 f910 	bl	8001a38 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000818:	2304      	movs	r3, #4
 800081a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800081c:	2301      	movs	r3, #1
 800081e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000820:	2300      	movs	r3, #0
 8000822:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000824:	463b      	mov	r3, r7
 8000826:	4619      	mov	r1, r3
 8000828:	4805      	ldr	r0, [pc, #20]	; (8000840 <MX_ADC3_Init+0x98>)
 800082a:	f002 fab1 	bl	8002d90 <HAL_ADC_ConfigChannel>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000834:	f001 f900 	bl	8001a38 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000838:	bf00      	nop
 800083a:	3710      	adds	r7, #16
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	200088fc 	.word	0x200088fc
 8000844:	40012200 	.word	0x40012200
 8000848:	0f000001 	.word	0x0f000001

0800084c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000850:	4b0d      	ldr	r3, [pc, #52]	; (8000888 <MX_CRC_Init+0x3c>)
 8000852:	4a0e      	ldr	r2, [pc, #56]	; (800088c <MX_CRC_Init+0x40>)
 8000854:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000856:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <MX_CRC_Init+0x3c>)
 8000858:	2200      	movs	r2, #0
 800085a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800085c:	4b0a      	ldr	r3, [pc, #40]	; (8000888 <MX_CRC_Init+0x3c>)
 800085e:	2200      	movs	r2, #0
 8000860:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000862:	4b09      	ldr	r3, [pc, #36]	; (8000888 <MX_CRC_Init+0x3c>)
 8000864:	2200      	movs	r2, #0
 8000866:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000868:	4b07      	ldr	r3, [pc, #28]	; (8000888 <MX_CRC_Init+0x3c>)
 800086a:	2200      	movs	r2, #0
 800086c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800086e:	4b06      	ldr	r3, [pc, #24]	; (8000888 <MX_CRC_Init+0x3c>)
 8000870:	2201      	movs	r2, #1
 8000872:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000874:	4804      	ldr	r0, [pc, #16]	; (8000888 <MX_CRC_Init+0x3c>)
 8000876:	f002 fdb1 	bl	80033dc <HAL_CRC_Init>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000880:	f001 f8da 	bl	8001a38 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000884:	bf00      	nop
 8000886:	bd80      	pop	{r7, pc}
 8000888:	2000872c 	.word	0x2000872c
 800088c:	40023000 	.word	0x40023000

08000890 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000894:	4b16      	ldr	r3, [pc, #88]	; (80008f0 <MX_DCMI_Init+0x60>)
 8000896:	4a17      	ldr	r2, [pc, #92]	; (80008f4 <MX_DCMI_Init+0x64>)
 8000898:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 800089a:	4b15      	ldr	r3, [pc, #84]	; (80008f0 <MX_DCMI_Init+0x60>)
 800089c:	2200      	movs	r2, #0
 800089e:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 80008a0:	4b13      	ldr	r3, [pc, #76]	; (80008f0 <MX_DCMI_Init+0x60>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 80008a6:	4b12      	ldr	r3, [pc, #72]	; (80008f0 <MX_DCMI_Init+0x60>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 80008ac:	4b10      	ldr	r3, [pc, #64]	; (80008f0 <MX_DCMI_Init+0x60>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80008b2:	4b0f      	ldr	r3, [pc, #60]	; (80008f0 <MX_DCMI_Init+0x60>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 80008b8:	4b0d      	ldr	r3, [pc, #52]	; (80008f0 <MX_DCMI_Init+0x60>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 80008be:	4b0c      	ldr	r3, [pc, #48]	; (80008f0 <MX_DCMI_Init+0x60>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 80008c4:	4b0a      	ldr	r3, [pc, #40]	; (80008f0 <MX_DCMI_Init+0x60>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 80008ca:	4b09      	ldr	r3, [pc, #36]	; (80008f0 <MX_DCMI_Init+0x60>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 80008d0:	4b07      	ldr	r3, [pc, #28]	; (80008f0 <MX_DCMI_Init+0x60>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 80008d6:	4b06      	ldr	r3, [pc, #24]	; (80008f0 <MX_DCMI_Init+0x60>)
 80008d8:	2200      	movs	r2, #0
 80008da:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 80008dc:	4804      	ldr	r0, [pc, #16]	; (80008f0 <MX_DCMI_Init+0x60>)
 80008de:	f002 fe67 	bl	80035b0 <HAL_DCMI_Init>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 80008e8:	f001 f8a6 	bl	8001a38 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 80008ec:	bf00      	nop
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	20008944 	.word	0x20008944
 80008f4:	50050000 	.word	0x50050000

080008f8 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80008fc:	4b15      	ldr	r3, [pc, #84]	; (8000954 <MX_DMA2D_Init+0x5c>)
 80008fe:	4a16      	ldr	r2, [pc, #88]	; (8000958 <MX_DMA2D_Init+0x60>)
 8000900:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000902:	4b14      	ldr	r3, [pc, #80]	; (8000954 <MX_DMA2D_Init+0x5c>)
 8000904:	2200      	movs	r2, #0
 8000906:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000908:	4b12      	ldr	r3, [pc, #72]	; (8000954 <MX_DMA2D_Init+0x5c>)
 800090a:	2200      	movs	r2, #0
 800090c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800090e:	4b11      	ldr	r3, [pc, #68]	; (8000954 <MX_DMA2D_Init+0x5c>)
 8000910:	2200      	movs	r2, #0
 8000912:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000914:	4b0f      	ldr	r3, [pc, #60]	; (8000954 <MX_DMA2D_Init+0x5c>)
 8000916:	2200      	movs	r2, #0
 8000918:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800091a:	4b0e      	ldr	r3, [pc, #56]	; (8000954 <MX_DMA2D_Init+0x5c>)
 800091c:	2200      	movs	r2, #0
 800091e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000920:	4b0c      	ldr	r3, [pc, #48]	; (8000954 <MX_DMA2D_Init+0x5c>)
 8000922:	2200      	movs	r2, #0
 8000924:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000926:	4b0b      	ldr	r3, [pc, #44]	; (8000954 <MX_DMA2D_Init+0x5c>)
 8000928:	2200      	movs	r2, #0
 800092a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800092c:	4809      	ldr	r0, [pc, #36]	; (8000954 <MX_DMA2D_Init+0x5c>)
 800092e:	f002 ff53 	bl	80037d8 <HAL_DMA2D_Init>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000938:	f001 f87e 	bl	8001a38 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800093c:	2101      	movs	r1, #1
 800093e:	4805      	ldr	r0, [pc, #20]	; (8000954 <MX_DMA2D_Init+0x5c>)
 8000940:	f003 f8a4 	bl	8003a8c <HAL_DMA2D_ConfigLayer>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800094a:	f001 f875 	bl	8001a38 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800094e:	bf00      	nop
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	20008af8 	.word	0x20008af8
 8000958:	4002b000 	.word	0x4002b000

0800095c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000960:	4b1c      	ldr	r3, [pc, #112]	; (80009d4 <MX_ETH_Init+0x78>)
 8000962:	4a1d      	ldr	r2, [pc, #116]	; (80009d8 <MX_ETH_Init+0x7c>)
 8000964:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8000966:	4b1b      	ldr	r3, [pc, #108]	; (80009d4 <MX_ETH_Init+0x78>)
 8000968:	2201      	movs	r2, #1
 800096a:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800096c:	4b19      	ldr	r3, [pc, #100]	; (80009d4 <MX_ETH_Init+0x78>)
 800096e:	2200      	movs	r2, #0
 8000970:	821a      	strh	r2, [r3, #16]
  heth.Init.MACAddr[0] =   0x00;
 8000972:	4b18      	ldr	r3, [pc, #96]	; (80009d4 <MX_ETH_Init+0x78>)
 8000974:	695b      	ldr	r3, [r3, #20]
 8000976:	2200      	movs	r2, #0
 8000978:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 800097a:	4b16      	ldr	r3, [pc, #88]	; (80009d4 <MX_ETH_Init+0x78>)
 800097c:	695b      	ldr	r3, [r3, #20]
 800097e:	3301      	adds	r3, #1
 8000980:	2280      	movs	r2, #128	; 0x80
 8000982:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 8000984:	4b13      	ldr	r3, [pc, #76]	; (80009d4 <MX_ETH_Init+0x78>)
 8000986:	695b      	ldr	r3, [r3, #20]
 8000988:	3302      	adds	r3, #2
 800098a:	22e1      	movs	r2, #225	; 0xe1
 800098c:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 800098e:	4b11      	ldr	r3, [pc, #68]	; (80009d4 <MX_ETH_Init+0x78>)
 8000990:	695b      	ldr	r3, [r3, #20]
 8000992:	3303      	adds	r3, #3
 8000994:	2200      	movs	r2, #0
 8000996:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 8000998:	4b0e      	ldr	r3, [pc, #56]	; (80009d4 <MX_ETH_Init+0x78>)
 800099a:	695b      	ldr	r3, [r3, #20]
 800099c:	3304      	adds	r3, #4
 800099e:	2200      	movs	r2, #0
 80009a0:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 80009a2:	4b0c      	ldr	r3, [pc, #48]	; (80009d4 <MX_ETH_Init+0x78>)
 80009a4:	695b      	ldr	r3, [r3, #20]
 80009a6:	3305      	adds	r3, #5
 80009a8:	2200      	movs	r2, #0
 80009aa:	701a      	strb	r2, [r3, #0]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 80009ac:	4b09      	ldr	r3, [pc, #36]	; (80009d4 <MX_ETH_Init+0x78>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80009b2:	4b08      	ldr	r3, [pc, #32]	; (80009d4 <MX_ETH_Init+0x78>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80009b8:	4b06      	ldr	r3, [pc, #24]	; (80009d4 <MX_ETH_Init+0x78>)
 80009ba:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80009be:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80009c0:	4804      	ldr	r0, [pc, #16]	; (80009d4 <MX_ETH_Init+0x78>)
 80009c2:	f003 f8f5 	bl	8003bb0 <HAL_ETH_Init>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_ETH_Init+0x74>
  {
    Error_Handler();
 80009cc:	f001 f834 	bl	8001a38 <Error_Handler>
  }
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80009d0:	bf00      	nop
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	20008bec 	.word	0x20008bec
 80009d8:	40028000 	.word	0x40028000

080009dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009e0:	4b1b      	ldr	r3, [pc, #108]	; (8000a50 <MX_I2C1_Init+0x74>)
 80009e2:	4a1c      	ldr	r2, [pc, #112]	; (8000a54 <MX_I2C1_Init+0x78>)
 80009e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 80009e6:	4b1a      	ldr	r3, [pc, #104]	; (8000a50 <MX_I2C1_Init+0x74>)
 80009e8:	4a1b      	ldr	r2, [pc, #108]	; (8000a58 <MX_I2C1_Init+0x7c>)
 80009ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80009ec:	4b18      	ldr	r3, [pc, #96]	; (8000a50 <MX_I2C1_Init+0x74>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009f2:	4b17      	ldr	r3, [pc, #92]	; (8000a50 <MX_I2C1_Init+0x74>)
 80009f4:	2201      	movs	r2, #1
 80009f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009f8:	4b15      	ldr	r3, [pc, #84]	; (8000a50 <MX_I2C1_Init+0x74>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80009fe:	4b14      	ldr	r3, [pc, #80]	; (8000a50 <MX_I2C1_Init+0x74>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a04:	4b12      	ldr	r3, [pc, #72]	; (8000a50 <MX_I2C1_Init+0x74>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a0a:	4b11      	ldr	r3, [pc, #68]	; (8000a50 <MX_I2C1_Init+0x74>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a10:	4b0f      	ldr	r3, [pc, #60]	; (8000a50 <MX_I2C1_Init+0x74>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a16:	480e      	ldr	r0, [pc, #56]	; (8000a50 <MX_I2C1_Init+0x74>)
 8000a18:	f005 fc02 	bl	8006220 <HAL_I2C_Init>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a22:	f001 f809 	bl	8001a38 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a26:	2100      	movs	r1, #0
 8000a28:	4809      	ldr	r0, [pc, #36]	; (8000a50 <MX_I2C1_Init+0x74>)
 8000a2a:	f005 fc89 	bl	8006340 <HAL_I2CEx_ConfigAnalogFilter>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a34:	f001 f800 	bl	8001a38 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a38:	2100      	movs	r1, #0
 8000a3a:	4805      	ldr	r0, [pc, #20]	; (8000a50 <MX_I2C1_Init+0x74>)
 8000a3c:	f005 fccb 	bl	80063d6 <HAL_I2CEx_ConfigDigitalFilter>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a46:	f000 fff7 	bl	8001a38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a4a:	bf00      	nop
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	200086c8 	.word	0x200086c8
 8000a54:	40005400 	.word	0x40005400
 8000a58:	00c0eaff 	.word	0x00c0eaff

08000a5c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000a60:	4b1b      	ldr	r3, [pc, #108]	; (8000ad0 <MX_I2C3_Init+0x74>)
 8000a62:	4a1c      	ldr	r2, [pc, #112]	; (8000ad4 <MX_I2C3_Init+0x78>)
 8000a64:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8000a66:	4b1a      	ldr	r3, [pc, #104]	; (8000ad0 <MX_I2C3_Init+0x74>)
 8000a68:	4a1b      	ldr	r2, [pc, #108]	; (8000ad8 <MX_I2C3_Init+0x7c>)
 8000a6a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000a6c:	4b18      	ldr	r3, [pc, #96]	; (8000ad0 <MX_I2C3_Init+0x74>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a72:	4b17      	ldr	r3, [pc, #92]	; (8000ad0 <MX_I2C3_Init+0x74>)
 8000a74:	2201      	movs	r2, #1
 8000a76:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a78:	4b15      	ldr	r3, [pc, #84]	; (8000ad0 <MX_I2C3_Init+0x74>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000a7e:	4b14      	ldr	r3, [pc, #80]	; (8000ad0 <MX_I2C3_Init+0x74>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a84:	4b12      	ldr	r3, [pc, #72]	; (8000ad0 <MX_I2C3_Init+0x74>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a8a:	4b11      	ldr	r3, [pc, #68]	; (8000ad0 <MX_I2C3_Init+0x74>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a90:	4b0f      	ldr	r3, [pc, #60]	; (8000ad0 <MX_I2C3_Init+0x74>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000a96:	480e      	ldr	r0, [pc, #56]	; (8000ad0 <MX_I2C3_Init+0x74>)
 8000a98:	f005 fbc2 	bl	8006220 <HAL_I2C_Init>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000aa2:	f000 ffc9 	bl	8001a38 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	4809      	ldr	r0, [pc, #36]	; (8000ad0 <MX_I2C3_Init+0x74>)
 8000aaa:	f005 fc49 	bl	8006340 <HAL_I2CEx_ConfigAnalogFilter>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000ab4:	f000 ffc0 	bl	8001a38 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000ab8:	2100      	movs	r1, #0
 8000aba:	4805      	ldr	r0, [pc, #20]	; (8000ad0 <MX_I2C3_Init+0x74>)
 8000abc:	f005 fc8b 	bl	80063d6 <HAL_I2CEx_ConfigDigitalFilter>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000ac6:	f000 ffb7 	bl	8001a38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000aca:	bf00      	nop
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	20008508 	.word	0x20008508
 8000ad4:	40005c00 	.word	0x40005c00
 8000ad8:	00c0eaff 	.word	0x00c0eaff

08000adc <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b09a      	sub	sp, #104	; 0x68
 8000ae0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000ae2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ae6:	2234      	movs	r2, #52	; 0x34
 8000ae8:	2100      	movs	r1, #0
 8000aea:	4618      	mov	r0, r3
 8000aec:	f011 fda5 	bl	801263a <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8000af0:	463b      	mov	r3, r7
 8000af2:	2234      	movs	r2, #52	; 0x34
 8000af4:	2100      	movs	r1, #0
 8000af6:	4618      	mov	r0, r3
 8000af8:	f011 fd9f 	bl	801263a <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000afc:	4b50      	ldr	r3, [pc, #320]	; (8000c40 <MX_LTDC_Init+0x164>)
 8000afe:	4a51      	ldr	r2, [pc, #324]	; (8000c44 <MX_LTDC_Init+0x168>)
 8000b00:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000b02:	4b4f      	ldr	r3, [pc, #316]	; (8000c40 <MX_LTDC_Init+0x164>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000b08:	4b4d      	ldr	r3, [pc, #308]	; (8000c40 <MX_LTDC_Init+0x164>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000b0e:	4b4c      	ldr	r3, [pc, #304]	; (8000c40 <MX_LTDC_Init+0x164>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000b14:	4b4a      	ldr	r3, [pc, #296]	; (8000c40 <MX_LTDC_Init+0x164>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8000b1a:	4b49      	ldr	r3, [pc, #292]	; (8000c40 <MX_LTDC_Init+0x164>)
 8000b1c:	2228      	movs	r2, #40	; 0x28
 8000b1e:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8000b20:	4b47      	ldr	r3, [pc, #284]	; (8000c40 <MX_LTDC_Init+0x164>)
 8000b22:	2209      	movs	r2, #9
 8000b24:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8000b26:	4b46      	ldr	r3, [pc, #280]	; (8000c40 <MX_LTDC_Init+0x164>)
 8000b28:	2235      	movs	r2, #53	; 0x35
 8000b2a:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8000b2c:	4b44      	ldr	r3, [pc, #272]	; (8000c40 <MX_LTDC_Init+0x164>)
 8000b2e:	220b      	movs	r2, #11
 8000b30:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8000b32:	4b43      	ldr	r3, [pc, #268]	; (8000c40 <MX_LTDC_Init+0x164>)
 8000b34:	f240 2215 	movw	r2, #533	; 0x215
 8000b38:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8000b3a:	4b41      	ldr	r3, [pc, #260]	; (8000c40 <MX_LTDC_Init+0x164>)
 8000b3c:	f240 121b 	movw	r2, #283	; 0x11b
 8000b40:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8000b42:	4b3f      	ldr	r3, [pc, #252]	; (8000c40 <MX_LTDC_Init+0x164>)
 8000b44:	f240 2235 	movw	r2, #565	; 0x235
 8000b48:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8000b4a:	4b3d      	ldr	r3, [pc, #244]	; (8000c40 <MX_LTDC_Init+0x164>)
 8000b4c:	f240 121d 	movw	r2, #285	; 0x11d
 8000b50:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000b52:	4b3b      	ldr	r3, [pc, #236]	; (8000c40 <MX_LTDC_Init+0x164>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000b5a:	4b39      	ldr	r3, [pc, #228]	; (8000c40 <MX_LTDC_Init+0x164>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000b62:	4b37      	ldr	r3, [pc, #220]	; (8000c40 <MX_LTDC_Init+0x164>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000b6a:	4835      	ldr	r0, [pc, #212]	; (8000c40 <MX_LTDC_Init+0x164>)
 8000b6c:	f005 fc80 	bl	8006470 <HAL_LTDC_Init>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8000b76:	f000 ff5f 	bl	8001a38 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 480;
 8000b7e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000b82:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8000b84:	2300      	movs	r3, #0
 8000b86:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 272;
 8000b88:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000b8c:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000b8e:	2302      	movs	r3, #2
 8000b90:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 255;
 8000b92:	23ff      	movs	r3, #255	; 0xff
 8000b94:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8000b96:	2300      	movs	r3, #0
 8000b98:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000b9a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b9e:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000ba0:	2307      	movs	r3, #7
 8000ba2:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0xC0000000;
 8000ba4:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8000ba8:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 480;
 8000baa:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000bae:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 272;
 8000bb0:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000bb4:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000bc8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000bcc:	2200      	movs	r2, #0
 8000bce:	4619      	mov	r1, r3
 8000bd0:	481b      	ldr	r0, [pc, #108]	; (8000c40 <MX_LTDC_Init+0x164>)
 8000bd2:	f005 fddf 	bl	8006794 <HAL_LTDC_ConfigLayer>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <MX_LTDC_Init+0x104>
  {
    Error_Handler();
 8000bdc:	f000 ff2c 	bl	8001a38 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8000be0:	2300      	movs	r3, #0
 8000be2:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8000be4:	2300      	movs	r3, #0
 8000be6:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8000be8:	2300      	movs	r3, #0
 8000bea:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8000bec:	2300      	movs	r3, #0
 8000bee:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.Alpha = 0;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000bf8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bfc:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000bfe:	2305      	movs	r3, #5
 8000c00:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8000c02:	2300      	movs	r3, #0
 8000c04:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8000c06:	2300      	movs	r3, #0
 8000c08:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8000c14:	2300      	movs	r3, #0
 8000c16:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8000c20:	463b      	mov	r3, r7
 8000c22:	2201      	movs	r2, #1
 8000c24:	4619      	mov	r1, r3
 8000c26:	4806      	ldr	r0, [pc, #24]	; (8000c40 <MX_LTDC_Init+0x164>)
 8000c28:	f005 fdb4 	bl	8006794 <HAL_LTDC_ConfigLayer>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <MX_LTDC_Init+0x15a>
  {
    Error_Handler();
 8000c32:	f000 ff01 	bl	8001a38 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000c36:	bf00      	nop
 8000c38:	3768      	adds	r7, #104	; 0x68
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	20008854 	.word	0x20008854
 8000c44:	40016800 	.word	0x40016800

08000c48 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000c4c:	4b12      	ldr	r3, [pc, #72]	; (8000c98 <MX_QUADSPI_Init+0x50>)
 8000c4e:	4a13      	ldr	r2, [pc, #76]	; (8000c9c <MX_QUADSPI_Init+0x54>)
 8000c50:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8000c52:	4b11      	ldr	r3, [pc, #68]	; (8000c98 <MX_QUADSPI_Init+0x50>)
 8000c54:	22ff      	movs	r2, #255	; 0xff
 8000c56:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000c58:	4b0f      	ldr	r3, [pc, #60]	; (8000c98 <MX_QUADSPI_Init+0x50>)
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000c5e:	4b0e      	ldr	r3, [pc, #56]	; (8000c98 <MX_QUADSPI_Init+0x50>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000c64:	4b0c      	ldr	r3, [pc, #48]	; (8000c98 <MX_QUADSPI_Init+0x50>)
 8000c66:	2201      	movs	r2, #1
 8000c68:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000c6a:	4b0b      	ldr	r3, [pc, #44]	; (8000c98 <MX_QUADSPI_Init+0x50>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000c70:	4b09      	ldr	r3, [pc, #36]	; (8000c98 <MX_QUADSPI_Init+0x50>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000c76:	4b08      	ldr	r3, [pc, #32]	; (8000c98 <MX_QUADSPI_Init+0x50>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000c7c:	4b06      	ldr	r3, [pc, #24]	; (8000c98 <MX_QUADSPI_Init+0x50>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000c82:	4805      	ldr	r0, [pc, #20]	; (8000c98 <MX_QUADSPI_Init+0x50>)
 8000c84:	f005 ffbe 	bl	8006c04 <HAL_QSPI_Init>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8000c8e:	f000 fed3 	bl	8001a38 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000c92:	bf00      	nop
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	20008c34 	.word	0x20008c34
 8000c9c:	a0001000 	.word	0xa0001000

08000ca0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000ca4:	4b0f      	ldr	r3, [pc, #60]	; (8000ce4 <MX_RTC_Init+0x44>)
 8000ca6:	4a10      	ldr	r2, [pc, #64]	; (8000ce8 <MX_RTC_Init+0x48>)
 8000ca8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000caa:	4b0e      	ldr	r3, [pc, #56]	; (8000ce4 <MX_RTC_Init+0x44>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000cb0:	4b0c      	ldr	r3, [pc, #48]	; (8000ce4 <MX_RTC_Init+0x44>)
 8000cb2:	227f      	movs	r2, #127	; 0x7f
 8000cb4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000cb6:	4b0b      	ldr	r3, [pc, #44]	; (8000ce4 <MX_RTC_Init+0x44>)
 8000cb8:	22ff      	movs	r2, #255	; 0xff
 8000cba:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000cbc:	4b09      	ldr	r3, [pc, #36]	; (8000ce4 <MX_RTC_Init+0x44>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000cc2:	4b08      	ldr	r3, [pc, #32]	; (8000ce4 <MX_RTC_Init+0x44>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000cc8:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <MX_RTC_Init+0x44>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000cce:	4805      	ldr	r0, [pc, #20]	; (8000ce4 <MX_RTC_Init+0x44>)
 8000cd0:	f007 fa24 	bl	800811c <HAL_RTC_Init>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000cda:	f000 fead 	bl	8001a38 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	20008a18 	.word	0x20008a18
 8000ce8:	40002800 	.word	0x40002800

08000cec <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8000cf0:	4b4d      	ldr	r3, [pc, #308]	; (8000e28 <MX_SAI2_Init+0x13c>)
 8000cf2:	4a4e      	ldr	r2, [pc, #312]	; (8000e2c <MX_SAI2_Init+0x140>)
 8000cf4:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000cf6:	4b4c      	ldr	r3, [pc, #304]	; (8000e28 <MX_SAI2_Init+0x13c>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8000cfc:	4b4a      	ldr	r3, [pc, #296]	; (8000e28 <MX_SAI2_Init+0x13c>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8000d02:	4b49      	ldr	r3, [pc, #292]	; (8000e28 <MX_SAI2_Init+0x13c>)
 8000d04:	2240      	movs	r2, #64	; 0x40
 8000d06:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000d08:	4b47      	ldr	r3, [pc, #284]	; (8000e28 <MX_SAI2_Init+0x13c>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000d0e:	4b46      	ldr	r3, [pc, #280]	; (8000e28 <MX_SAI2_Init+0x13c>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8000d14:	4b44      	ldr	r3, [pc, #272]	; (8000e28 <MX_SAI2_Init+0x13c>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000d1a:	4b43      	ldr	r3, [pc, #268]	; (8000e28 <MX_SAI2_Init+0x13c>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000d20:	4b41      	ldr	r3, [pc, #260]	; (8000e28 <MX_SAI2_Init+0x13c>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000d26:	4b40      	ldr	r3, [pc, #256]	; (8000e28 <MX_SAI2_Init+0x13c>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000d2c:	4b3e      	ldr	r3, [pc, #248]	; (8000e28 <MX_SAI2_Init+0x13c>)
 8000d2e:	4a40      	ldr	r2, [pc, #256]	; (8000e30 <MX_SAI2_Init+0x144>)
 8000d30:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000d32:	4b3d      	ldr	r3, [pc, #244]	; (8000e28 <MX_SAI2_Init+0x13c>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000d38:	4b3b      	ldr	r3, [pc, #236]	; (8000e28 <MX_SAI2_Init+0x13c>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000d3e:	4b3a      	ldr	r3, [pc, #232]	; (8000e28 <MX_SAI2_Init+0x13c>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000d44:	4b38      	ldr	r3, [pc, #224]	; (8000e28 <MX_SAI2_Init+0x13c>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8000d4a:	4b37      	ldr	r3, [pc, #220]	; (8000e28 <MX_SAI2_Init+0x13c>)
 8000d4c:	2208      	movs	r2, #8
 8000d4e:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8000d50:	4b35      	ldr	r3, [pc, #212]	; (8000e28 <MX_SAI2_Init+0x13c>)
 8000d52:	2201      	movs	r2, #1
 8000d54:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000d56:	4b34      	ldr	r3, [pc, #208]	; (8000e28 <MX_SAI2_Init+0x13c>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000d5c:	4b32      	ldr	r3, [pc, #200]	; (8000e28 <MX_SAI2_Init+0x13c>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000d62:	4b31      	ldr	r3, [pc, #196]	; (8000e28 <MX_SAI2_Init+0x13c>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8000d68:	4b2f      	ldr	r3, [pc, #188]	; (8000e28 <MX_SAI2_Init+0x13c>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000d6e:	4b2e      	ldr	r3, [pc, #184]	; (8000e28 <MX_SAI2_Init+0x13c>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8000d74:	4b2c      	ldr	r3, [pc, #176]	; (8000e28 <MX_SAI2_Init+0x13c>)
 8000d76:	2201      	movs	r2, #1
 8000d78:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8000d7a:	4b2b      	ldr	r3, [pc, #172]	; (8000e28 <MX_SAI2_Init+0x13c>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8000d80:	4829      	ldr	r0, [pc, #164]	; (8000e28 <MX_SAI2_Init+0x13c>)
 8000d82:	f007 fceb 	bl	800875c <HAL_SAI_Init>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <MX_SAI2_Init+0xa4>
  {
    Error_Handler();
 8000d8c:	f000 fe54 	bl	8001a38 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8000d90:	4b28      	ldr	r3, [pc, #160]	; (8000e34 <MX_SAI2_Init+0x148>)
 8000d92:	4a29      	ldr	r2, [pc, #164]	; (8000e38 <MX_SAI2_Init+0x14c>)
 8000d94:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000d96:	4b27      	ldr	r3, [pc, #156]	; (8000e34 <MX_SAI2_Init+0x148>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8000d9c:	4b25      	ldr	r3, [pc, #148]	; (8000e34 <MX_SAI2_Init+0x148>)
 8000d9e:	2203      	movs	r2, #3
 8000da0:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8000da2:	4b24      	ldr	r3, [pc, #144]	; (8000e34 <MX_SAI2_Init+0x148>)
 8000da4:	2240      	movs	r2, #64	; 0x40
 8000da6:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000da8:	4b22      	ldr	r3, [pc, #136]	; (8000e34 <MX_SAI2_Init+0x148>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000dae:	4b21      	ldr	r3, [pc, #132]	; (8000e34 <MX_SAI2_Init+0x148>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8000db4:	4b1f      	ldr	r3, [pc, #124]	; (8000e34 <MX_SAI2_Init+0x148>)
 8000db6:	2201      	movs	r2, #1
 8000db8:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000dba:	4b1e      	ldr	r3, [pc, #120]	; (8000e34 <MX_SAI2_Init+0x148>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000dc0:	4b1c      	ldr	r3, [pc, #112]	; (8000e34 <MX_SAI2_Init+0x148>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000dc6:	4b1b      	ldr	r3, [pc, #108]	; (8000e34 <MX_SAI2_Init+0x148>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000dcc:	4b19      	ldr	r3, [pc, #100]	; (8000e34 <MX_SAI2_Init+0x148>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000dd2:	4b18      	ldr	r3, [pc, #96]	; (8000e34 <MX_SAI2_Init+0x148>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000dd8:	4b16      	ldr	r3, [pc, #88]	; (8000e34 <MX_SAI2_Init+0x148>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 8;
 8000dde:	4b15      	ldr	r3, [pc, #84]	; (8000e34 <MX_SAI2_Init+0x148>)
 8000de0:	2208      	movs	r2, #8
 8000de2:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8000de4:	4b13      	ldr	r3, [pc, #76]	; (8000e34 <MX_SAI2_Init+0x148>)
 8000de6:	2201      	movs	r2, #1
 8000de8:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000dea:	4b12      	ldr	r3, [pc, #72]	; (8000e34 <MX_SAI2_Init+0x148>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000df0:	4b10      	ldr	r3, [pc, #64]	; (8000e34 <MX_SAI2_Init+0x148>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000df6:	4b0f      	ldr	r3, [pc, #60]	; (8000e34 <MX_SAI2_Init+0x148>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8000dfc:	4b0d      	ldr	r3, [pc, #52]	; (8000e34 <MX_SAI2_Init+0x148>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000e02:	4b0c      	ldr	r3, [pc, #48]	; (8000e34 <MX_SAI2_Init+0x148>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8000e08:	4b0a      	ldr	r3, [pc, #40]	; (8000e34 <MX_SAI2_Init+0x148>)
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8000e0e:	4b09      	ldr	r3, [pc, #36]	; (8000e34 <MX_SAI2_Init+0x148>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8000e14:	4807      	ldr	r0, [pc, #28]	; (8000e34 <MX_SAI2_Init+0x148>)
 8000e16:	f007 fca1 	bl	800875c <HAL_SAI_Init>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <MX_SAI2_Init+0x138>
  {
    Error_Handler();
 8000e20:	f000 fe0a 	bl	8001a38 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8000e24:	bf00      	nop
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	20008644 	.word	0x20008644
 8000e2c:	40015c04 	.word	0x40015c04
 8000e30:	0002ee00 	.word	0x0002ee00
 8000e34:	20008480 	.word	0x20008480
 8000e38:	40015c24 	.word	0x40015c24

08000e3c <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000e40:	4b0c      	ldr	r3, [pc, #48]	; (8000e74 <MX_SDMMC1_SD_Init+0x38>)
 8000e42:	4a0d      	ldr	r2, [pc, #52]	; (8000e78 <MX_SDMMC1_SD_Init+0x3c>)
 8000e44:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000e46:	4b0b      	ldr	r3, [pc, #44]	; (8000e74 <MX_SDMMC1_SD_Init+0x38>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8000e4c:	4b09      	ldr	r3, [pc, #36]	; (8000e74 <MX_SDMMC1_SD_Init+0x38>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000e52:	4b08      	ldr	r3, [pc, #32]	; (8000e74 <MX_SDMMC1_SD_Init+0x38>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000e58:	4b06      	ldr	r3, [pc, #24]	; (8000e74 <MX_SDMMC1_SD_Init+0x38>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000e5e:	4b05      	ldr	r3, [pc, #20]	; (8000e74 <MX_SDMMC1_SD_Init+0x38>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8000e64:	4b03      	ldr	r3, [pc, #12]	; (8000e74 <MX_SDMMC1_SD_Init+0x38>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000e6a:	bf00      	nop
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr
 8000e74:	20008750 	.word	0x20008750
 8000e78:	40012c00 	.word	0x40012c00

08000e7c <MX_SPDIFRX_Init>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8000e80:	4b15      	ldr	r3, [pc, #84]	; (8000ed8 <MX_SPDIFRX_Init+0x5c>)
 8000e82:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8000e86:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8000e88:	4b13      	ldr	r3, [pc, #76]	; (8000ed8 <MX_SPDIFRX_Init+0x5c>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8000e8e:	4b12      	ldr	r3, [pc, #72]	; (8000ed8 <MX_SPDIFRX_Init+0x5c>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8000e94:	4b10      	ldr	r3, [pc, #64]	; (8000ed8 <MX_SPDIFRX_Init+0x5c>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8000e9a:	4b0f      	ldr	r3, [pc, #60]	; (8000ed8 <MX_SPDIFRX_Init+0x5c>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8000ea0:	4b0d      	ldr	r3, [pc, #52]	; (8000ed8 <MX_SPDIFRX_Init+0x5c>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8000ea6:	4b0c      	ldr	r3, [pc, #48]	; (8000ed8 <MX_SPDIFRX_Init+0x5c>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8000eac:	4b0a      	ldr	r3, [pc, #40]	; (8000ed8 <MX_SPDIFRX_Init+0x5c>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8000eb2:	4b09      	ldr	r3, [pc, #36]	; (8000ed8 <MX_SPDIFRX_Init+0x5c>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8000eb8:	4b07      	ldr	r3, [pc, #28]	; (8000ed8 <MX_SPDIFRX_Init+0x5c>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8000ebe:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <MX_SPDIFRX_Init+0x5c>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8000ec4:	4804      	ldr	r0, [pc, #16]	; (8000ed8 <MX_SPDIFRX_Init+0x5c>)
 8000ec6:	f008 fe91 	bl	8009bec <HAL_SPDIFRX_Init>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_SPDIFRX_Init+0x58>
  {
    Error_Handler();
 8000ed0:	f000 fdb2 	bl	8001a38 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 8000ed4:	bf00      	nop
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	200085f8 	.word	0x200085f8

08000edc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000ee0:	4b1b      	ldr	r3, [pc, #108]	; (8000f50 <MX_SPI2_Init+0x74>)
 8000ee2:	4a1c      	ldr	r2, [pc, #112]	; (8000f54 <MX_SPI2_Init+0x78>)
 8000ee4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000ee6:	4b1a      	ldr	r3, [pc, #104]	; (8000f50 <MX_SPI2_Init+0x74>)
 8000ee8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000eec:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000eee:	4b18      	ldr	r3, [pc, #96]	; (8000f50 <MX_SPI2_Init+0x74>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000ef4:	4b16      	ldr	r3, [pc, #88]	; (8000f50 <MX_SPI2_Init+0x74>)
 8000ef6:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000efa:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000efc:	4b14      	ldr	r3, [pc, #80]	; (8000f50 <MX_SPI2_Init+0x74>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f02:	4b13      	ldr	r3, [pc, #76]	; (8000f50 <MX_SPI2_Init+0x74>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000f08:	4b11      	ldr	r3, [pc, #68]	; (8000f50 <MX_SPI2_Init+0x74>)
 8000f0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f0e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f10:	4b0f      	ldr	r3, [pc, #60]	; (8000f50 <MX_SPI2_Init+0x74>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f16:	4b0e      	ldr	r3, [pc, #56]	; (8000f50 <MX_SPI2_Init+0x74>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f1c:	4b0c      	ldr	r3, [pc, #48]	; (8000f50 <MX_SPI2_Init+0x74>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f22:	4b0b      	ldr	r3, [pc, #44]	; (8000f50 <MX_SPI2_Init+0x74>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000f28:	4b09      	ldr	r3, [pc, #36]	; (8000f50 <MX_SPI2_Init+0x74>)
 8000f2a:	2207      	movs	r2, #7
 8000f2c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f2e:	4b08      	ldr	r3, [pc, #32]	; (8000f50 <MX_SPI2_Init+0x74>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f34:	4b06      	ldr	r3, [pc, #24]	; (8000f50 <MX_SPI2_Init+0x74>)
 8000f36:	2208      	movs	r2, #8
 8000f38:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000f3a:	4805      	ldr	r0, [pc, #20]	; (8000f50 <MX_SPI2_Init+0x74>)
 8000f3c:	f008 feb2 	bl	8009ca4 <HAL_SPI_Init>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000f46:	f000 fd77 	bl	8001a38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000f4a:	bf00      	nop
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	20008554 	.word	0x20008554
 8000f54:	40003800 	.word	0x40003800

08000f58 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b09a      	sub	sp, #104	; 0x68
 8000f5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f5e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000f62:	2200      	movs	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]
 8000f66:	605a      	str	r2, [r3, #4]
 8000f68:	609a      	str	r2, [r3, #8]
 8000f6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f6c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	605a      	str	r2, [r3, #4]
 8000f76:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f78:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	605a      	str	r2, [r3, #4]
 8000f82:	609a      	str	r2, [r3, #8]
 8000f84:	60da      	str	r2, [r3, #12]
 8000f86:	611a      	str	r2, [r3, #16]
 8000f88:	615a      	str	r2, [r3, #20]
 8000f8a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f8c:	1d3b      	adds	r3, r7, #4
 8000f8e:	222c      	movs	r2, #44	; 0x2c
 8000f90:	2100      	movs	r1, #0
 8000f92:	4618      	mov	r0, r3
 8000f94:	f011 fb51 	bl	801263a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f98:	4b43      	ldr	r3, [pc, #268]	; (80010a8 <MX_TIM1_Init+0x150>)
 8000f9a:	4a44      	ldr	r2, [pc, #272]	; (80010ac <MX_TIM1_Init+0x154>)
 8000f9c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000f9e:	4b42      	ldr	r3, [pc, #264]	; (80010a8 <MX_TIM1_Init+0x150>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fa4:	4b40      	ldr	r3, [pc, #256]	; (80010a8 <MX_TIM1_Init+0x150>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000faa:	4b3f      	ldr	r3, [pc, #252]	; (80010a8 <MX_TIM1_Init+0x150>)
 8000fac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fb0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fb2:	4b3d      	ldr	r3, [pc, #244]	; (80010a8 <MX_TIM1_Init+0x150>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000fb8:	4b3b      	ldr	r3, [pc, #236]	; (80010a8 <MX_TIM1_Init+0x150>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fbe:	4b3a      	ldr	r3, [pc, #232]	; (80010a8 <MX_TIM1_Init+0x150>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000fc4:	4838      	ldr	r0, [pc, #224]	; (80010a8 <MX_TIM1_Init+0x150>)
 8000fc6:	f008 feff 	bl	8009dc8 <HAL_TIM_Base_Init>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000fd0:	f000 fd32 	bl	8001a38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fd8:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000fda:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4831      	ldr	r0, [pc, #196]	; (80010a8 <MX_TIM1_Init+0x150>)
 8000fe2:	f009 f9a9 	bl	800a338 <HAL_TIM_ConfigClockSource>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000fec:	f000 fd24 	bl	8001a38 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000ff0:	482d      	ldr	r0, [pc, #180]	; (80010a8 <MX_TIM1_Init+0x150>)
 8000ff2:	f008 ff3f 	bl	8009e74 <HAL_TIM_PWM_Init>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000ffc:	f000 fd1c 	bl	8001a38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001000:	2300      	movs	r3, #0
 8001002:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001004:	2300      	movs	r3, #0
 8001006:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001008:	2300      	movs	r3, #0
 800100a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800100c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001010:	4619      	mov	r1, r3
 8001012:	4825      	ldr	r0, [pc, #148]	; (80010a8 <MX_TIM1_Init+0x150>)
 8001014:	f009 fe0a 	bl	800ac2c <HAL_TIMEx_MasterConfigSynchronization>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800101e:	f000 fd0b 	bl	8001a38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001022:	2360      	movs	r3, #96	; 0x60
 8001024:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001026:	2300      	movs	r3, #0
 8001028:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800102a:	2300      	movs	r3, #0
 800102c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800102e:	2300      	movs	r3, #0
 8001030:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001032:	2300      	movs	r3, #0
 8001034:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001036:	2300      	movs	r3, #0
 8001038:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800103a:	2300      	movs	r3, #0
 800103c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800103e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001042:	2200      	movs	r2, #0
 8001044:	4619      	mov	r1, r3
 8001046:	4818      	ldr	r0, [pc, #96]	; (80010a8 <MX_TIM1_Init+0x150>)
 8001048:	f009 f85e 	bl	800a108 <HAL_TIM_PWM_ConfigChannel>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001052:	f000 fcf1 	bl	8001a38 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001056:	2300      	movs	r3, #0
 8001058:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800105a:	2300      	movs	r3, #0
 800105c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800105e:	2300      	movs	r3, #0
 8001060:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001062:	2300      	movs	r3, #0
 8001064:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001066:	2300      	movs	r3, #0
 8001068:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800106a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800106e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001070:	2300      	movs	r3, #0
 8001072:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001074:	2300      	movs	r3, #0
 8001076:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001078:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800107c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800107e:	2300      	movs	r3, #0
 8001080:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001082:	2300      	movs	r3, #0
 8001084:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001086:	1d3b      	adds	r3, r7, #4
 8001088:	4619      	mov	r1, r3
 800108a:	4807      	ldr	r0, [pc, #28]	; (80010a8 <MX_TIM1_Init+0x150>)
 800108c:	f009 fe5c 	bl	800ad48 <HAL_TIMEx_ConfigBreakDeadTime>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001096:	f000 fccf 	bl	8001a38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800109a:	4803      	ldr	r0, [pc, #12]	; (80010a8 <MX_TIM1_Init+0x150>)
 800109c:	f001 fa70 	bl	8002580 <HAL_TIM_MspPostInit>

}
 80010a0:	bf00      	nop
 80010a2:	3768      	adds	r7, #104	; 0x68
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	20008a38 	.word	0x20008a38
 80010ac:	40010000 	.word	0x40010000

080010b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b08e      	sub	sp, #56	; 0x38
 80010b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010ba:	2200      	movs	r2, #0
 80010bc:	601a      	str	r2, [r3, #0]
 80010be:	605a      	str	r2, [r3, #4]
 80010c0:	609a      	str	r2, [r3, #8]
 80010c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010c4:	f107 031c 	add.w	r3, r7, #28
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	605a      	str	r2, [r3, #4]
 80010ce:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010d0:	463b      	mov	r3, r7
 80010d2:	2200      	movs	r2, #0
 80010d4:	601a      	str	r2, [r3, #0]
 80010d6:	605a      	str	r2, [r3, #4]
 80010d8:	609a      	str	r2, [r3, #8]
 80010da:	60da      	str	r2, [r3, #12]
 80010dc:	611a      	str	r2, [r3, #16]
 80010de:	615a      	str	r2, [r3, #20]
 80010e0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010e2:	4b2d      	ldr	r3, [pc, #180]	; (8001198 <MX_TIM2_Init+0xe8>)
 80010e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010e8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80010ea:	4b2b      	ldr	r3, [pc, #172]	; (8001198 <MX_TIM2_Init+0xe8>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010f0:	4b29      	ldr	r3, [pc, #164]	; (8001198 <MX_TIM2_Init+0xe8>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80010f6:	4b28      	ldr	r3, [pc, #160]	; (8001198 <MX_TIM2_Init+0xe8>)
 80010f8:	f04f 32ff 	mov.w	r2, #4294967295
 80010fc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010fe:	4b26      	ldr	r3, [pc, #152]	; (8001198 <MX_TIM2_Init+0xe8>)
 8001100:	2200      	movs	r2, #0
 8001102:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001104:	4b24      	ldr	r3, [pc, #144]	; (8001198 <MX_TIM2_Init+0xe8>)
 8001106:	2200      	movs	r2, #0
 8001108:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800110a:	4823      	ldr	r0, [pc, #140]	; (8001198 <MX_TIM2_Init+0xe8>)
 800110c:	f008 fe5c 	bl	8009dc8 <HAL_TIM_Base_Init>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001116:	f000 fc8f 	bl	8001a38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800111a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800111e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001120:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001124:	4619      	mov	r1, r3
 8001126:	481c      	ldr	r0, [pc, #112]	; (8001198 <MX_TIM2_Init+0xe8>)
 8001128:	f009 f906 	bl	800a338 <HAL_TIM_ConfigClockSource>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001132:	f000 fc81 	bl	8001a38 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001136:	4818      	ldr	r0, [pc, #96]	; (8001198 <MX_TIM2_Init+0xe8>)
 8001138:	f008 fe9c 	bl	8009e74 <HAL_TIM_PWM_Init>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001142:	f000 fc79 	bl	8001a38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001146:	2300      	movs	r3, #0
 8001148:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800114a:	2300      	movs	r3, #0
 800114c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800114e:	f107 031c 	add.w	r3, r7, #28
 8001152:	4619      	mov	r1, r3
 8001154:	4810      	ldr	r0, [pc, #64]	; (8001198 <MX_TIM2_Init+0xe8>)
 8001156:	f009 fd69 	bl	800ac2c <HAL_TIMEx_MasterConfigSynchronization>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001160:	f000 fc6a 	bl	8001a38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001164:	2360      	movs	r3, #96	; 0x60
 8001166:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001168:	2300      	movs	r3, #0
 800116a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800116c:	2300      	movs	r3, #0
 800116e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001170:	2300      	movs	r3, #0
 8001172:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001174:	463b      	mov	r3, r7
 8001176:	2200      	movs	r2, #0
 8001178:	4619      	mov	r1, r3
 800117a:	4807      	ldr	r0, [pc, #28]	; (8001198 <MX_TIM2_Init+0xe8>)
 800117c:	f008 ffc4 	bl	800a108 <HAL_TIM_PWM_ConfigChannel>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001186:	f000 fc57 	bl	8001a38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800118a:	4803      	ldr	r0, [pc, #12]	; (8001198 <MX_TIM2_Init+0xe8>)
 800118c:	f001 f9f8 	bl	8002580 <HAL_TIM_MspPostInit>

}
 8001190:	bf00      	nop
 8001192:	3738      	adds	r7, #56	; 0x38
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	20008b38 	.word	0x20008b38

0800119c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b08e      	sub	sp, #56	; 0x38
 80011a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011a6:	2200      	movs	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]
 80011aa:	605a      	str	r2, [r3, #4]
 80011ac:	609a      	str	r2, [r3, #8]
 80011ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011b0:	f107 031c 	add.w	r3, r7, #28
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	605a      	str	r2, [r3, #4]
 80011ba:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011bc:	463b      	mov	r3, r7
 80011be:	2200      	movs	r2, #0
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	605a      	str	r2, [r3, #4]
 80011c4:	609a      	str	r2, [r3, #8]
 80011c6:	60da      	str	r2, [r3, #12]
 80011c8:	611a      	str	r2, [r3, #16]
 80011ca:	615a      	str	r2, [r3, #20]
 80011cc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011ce:	4b2d      	ldr	r3, [pc, #180]	; (8001284 <MX_TIM3_Init+0xe8>)
 80011d0:	4a2d      	ldr	r2, [pc, #180]	; (8001288 <MX_TIM3_Init+0xec>)
 80011d2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80011d4:	4b2b      	ldr	r3, [pc, #172]	; (8001284 <MX_TIM3_Init+0xe8>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011da:	4b2a      	ldr	r3, [pc, #168]	; (8001284 <MX_TIM3_Init+0xe8>)
 80011dc:	2200      	movs	r2, #0
 80011de:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80011e0:	4b28      	ldr	r3, [pc, #160]	; (8001284 <MX_TIM3_Init+0xe8>)
 80011e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011e6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011e8:	4b26      	ldr	r3, [pc, #152]	; (8001284 <MX_TIM3_Init+0xe8>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011ee:	4b25      	ldr	r3, [pc, #148]	; (8001284 <MX_TIM3_Init+0xe8>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80011f4:	4823      	ldr	r0, [pc, #140]	; (8001284 <MX_TIM3_Init+0xe8>)
 80011f6:	f008 fde7 	bl	8009dc8 <HAL_TIM_Base_Init>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001200:	f000 fc1a 	bl	8001a38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001204:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001208:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800120a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800120e:	4619      	mov	r1, r3
 8001210:	481c      	ldr	r0, [pc, #112]	; (8001284 <MX_TIM3_Init+0xe8>)
 8001212:	f009 f891 	bl	800a338 <HAL_TIM_ConfigClockSource>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 800121c:	f000 fc0c 	bl	8001a38 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001220:	4818      	ldr	r0, [pc, #96]	; (8001284 <MX_TIM3_Init+0xe8>)
 8001222:	f008 fe27 	bl	8009e74 <HAL_TIM_PWM_Init>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800122c:	f000 fc04 	bl	8001a38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001230:	2300      	movs	r3, #0
 8001232:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001234:	2300      	movs	r3, #0
 8001236:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001238:	f107 031c 	add.w	r3, r7, #28
 800123c:	4619      	mov	r1, r3
 800123e:	4811      	ldr	r0, [pc, #68]	; (8001284 <MX_TIM3_Init+0xe8>)
 8001240:	f009 fcf4 	bl	800ac2c <HAL_TIMEx_MasterConfigSynchronization>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800124a:	f000 fbf5 	bl	8001a38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800124e:	2360      	movs	r3, #96	; 0x60
 8001250:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001252:	2300      	movs	r3, #0
 8001254:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001256:	2300      	movs	r3, #0
 8001258:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800125a:	2300      	movs	r3, #0
 800125c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800125e:	463b      	mov	r3, r7
 8001260:	2200      	movs	r2, #0
 8001262:	4619      	mov	r1, r3
 8001264:	4807      	ldr	r0, [pc, #28]	; (8001284 <MX_TIM3_Init+0xe8>)
 8001266:	f008 ff4f 	bl	800a108 <HAL_TIM_PWM_ConfigChannel>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001270:	f000 fbe2 	bl	8001a38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001274:	4803      	ldr	r0, [pc, #12]	; (8001284 <MX_TIM3_Init+0xe8>)
 8001276:	f001 f983 	bl	8002580 <HAL_TIM_MspPostInit>

}
 800127a:	bf00      	nop
 800127c:	3738      	adds	r7, #56	; 0x38
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	20008814 	.word	0x20008814
 8001288:	40000400 	.word	0x40000400

0800128c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b08e      	sub	sp, #56	; 0x38
 8001290:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001292:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001296:	2200      	movs	r2, #0
 8001298:	601a      	str	r2, [r3, #0]
 800129a:	605a      	str	r2, [r3, #4]
 800129c:	609a      	str	r2, [r3, #8]
 800129e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012a0:	f107 031c 	add.w	r3, r7, #28
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	605a      	str	r2, [r3, #4]
 80012aa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012ac:	463b      	mov	r3, r7
 80012ae:	2200      	movs	r2, #0
 80012b0:	601a      	str	r2, [r3, #0]
 80012b2:	605a      	str	r2, [r3, #4]
 80012b4:	609a      	str	r2, [r3, #8]
 80012b6:	60da      	str	r2, [r3, #12]
 80012b8:	611a      	str	r2, [r3, #16]
 80012ba:	615a      	str	r2, [r3, #20]
 80012bc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80012be:	4b2d      	ldr	r3, [pc, #180]	; (8001374 <MX_TIM5_Init+0xe8>)
 80012c0:	4a2d      	ldr	r2, [pc, #180]	; (8001378 <MX_TIM5_Init+0xec>)
 80012c2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80012c4:	4b2b      	ldr	r3, [pc, #172]	; (8001374 <MX_TIM5_Init+0xe8>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ca:	4b2a      	ldr	r3, [pc, #168]	; (8001374 <MX_TIM5_Init+0xe8>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80012d0:	4b28      	ldr	r3, [pc, #160]	; (8001374 <MX_TIM5_Init+0xe8>)
 80012d2:	f04f 32ff 	mov.w	r2, #4294967295
 80012d6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012d8:	4b26      	ldr	r3, [pc, #152]	; (8001374 <MX_TIM5_Init+0xe8>)
 80012da:	2200      	movs	r2, #0
 80012dc:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012de:	4b25      	ldr	r3, [pc, #148]	; (8001374 <MX_TIM5_Init+0xe8>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80012e4:	4823      	ldr	r0, [pc, #140]	; (8001374 <MX_TIM5_Init+0xe8>)
 80012e6:	f008 fd6f 	bl	8009dc8 <HAL_TIM_Base_Init>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 80012f0:	f000 fba2 	bl	8001a38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012f8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80012fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012fe:	4619      	mov	r1, r3
 8001300:	481c      	ldr	r0, [pc, #112]	; (8001374 <MX_TIM5_Init+0xe8>)
 8001302:	f009 f819 	bl	800a338 <HAL_TIM_ConfigClockSource>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 800130c:	f000 fb94 	bl	8001a38 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001310:	4818      	ldr	r0, [pc, #96]	; (8001374 <MX_TIM5_Init+0xe8>)
 8001312:	f008 fdaf 	bl	8009e74 <HAL_TIM_PWM_Init>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 800131c:	f000 fb8c 	bl	8001a38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001320:	2300      	movs	r3, #0
 8001322:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001324:	2300      	movs	r3, #0
 8001326:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001328:	f107 031c 	add.w	r3, r7, #28
 800132c:	4619      	mov	r1, r3
 800132e:	4811      	ldr	r0, [pc, #68]	; (8001374 <MX_TIM5_Init+0xe8>)
 8001330:	f009 fc7c 	bl	800ac2c <HAL_TIMEx_MasterConfigSynchronization>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 800133a:	f000 fb7d 	bl	8001a38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800133e:	2360      	movs	r3, #96	; 0x60
 8001340:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001342:	2300      	movs	r3, #0
 8001344:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001346:	2300      	movs	r3, #0
 8001348:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800134a:	2300      	movs	r3, #0
 800134c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800134e:	463b      	mov	r3, r7
 8001350:	220c      	movs	r2, #12
 8001352:	4619      	mov	r1, r3
 8001354:	4807      	ldr	r0, [pc, #28]	; (8001374 <MX_TIM5_Init+0xe8>)
 8001356:	f008 fed7 	bl	800a108 <HAL_TIM_PWM_ConfigChannel>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8001360:	f000 fb6a 	bl	8001a38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001364:	4803      	ldr	r0, [pc, #12]	; (8001374 <MX_TIM5_Init+0xe8>)
 8001366:	f001 f90b 	bl	8002580 <HAL_TIM_MspPostInit>

}
 800136a:	bf00      	nop
 800136c:	3738      	adds	r7, #56	; 0x38
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	200087d4 	.word	0x200087d4
 8001378:	40000c00 	.word	0x40000c00

0800137c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b088      	sub	sp, #32
 8001380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001382:	f107 0310 	add.w	r3, r7, #16
 8001386:	2200      	movs	r2, #0
 8001388:	601a      	str	r2, [r3, #0]
 800138a:	605a      	str	r2, [r3, #4]
 800138c:	609a      	str	r2, [r3, #8]
 800138e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001390:	1d3b      	adds	r3, r7, #4
 8001392:	2200      	movs	r2, #0
 8001394:	601a      	str	r2, [r3, #0]
 8001396:	605a      	str	r2, [r3, #4]
 8001398:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800139a:	4b20      	ldr	r3, [pc, #128]	; (800141c <MX_TIM8_Init+0xa0>)
 800139c:	4a20      	ldr	r2, [pc, #128]	; (8001420 <MX_TIM8_Init+0xa4>)
 800139e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80013a0:	4b1e      	ldr	r3, [pc, #120]	; (800141c <MX_TIM8_Init+0xa0>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013a6:	4b1d      	ldr	r3, [pc, #116]	; (800141c <MX_TIM8_Init+0xa0>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80013ac:	4b1b      	ldr	r3, [pc, #108]	; (800141c <MX_TIM8_Init+0xa0>)
 80013ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013b2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013b4:	4b19      	ldr	r3, [pc, #100]	; (800141c <MX_TIM8_Init+0xa0>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80013ba:	4b18      	ldr	r3, [pc, #96]	; (800141c <MX_TIM8_Init+0xa0>)
 80013bc:	2200      	movs	r2, #0
 80013be:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013c0:	4b16      	ldr	r3, [pc, #88]	; (800141c <MX_TIM8_Init+0xa0>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80013c6:	4815      	ldr	r0, [pc, #84]	; (800141c <MX_TIM8_Init+0xa0>)
 80013c8:	f008 fcfe 	bl	8009dc8 <HAL_TIM_Base_Init>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 80013d2:	f000 fb31 	bl	8001a38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013da:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80013dc:	f107 0310 	add.w	r3, r7, #16
 80013e0:	4619      	mov	r1, r3
 80013e2:	480e      	ldr	r0, [pc, #56]	; (800141c <MX_TIM8_Init+0xa0>)
 80013e4:	f008 ffa8 	bl	800a338 <HAL_TIM_ConfigClockSource>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 80013ee:	f000 fb23 	bl	8001a38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013f2:	2300      	movs	r3, #0
 80013f4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80013f6:	2300      	movs	r3, #0
 80013f8:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013fa:	2300      	movs	r3, #0
 80013fc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80013fe:	1d3b      	adds	r3, r7, #4
 8001400:	4619      	mov	r1, r3
 8001402:	4806      	ldr	r0, [pc, #24]	; (800141c <MX_TIM8_Init+0xa0>)
 8001404:	f009 fc12 	bl	800ac2c <HAL_TIMEx_MasterConfigSynchronization>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800140e:	f000 fb13 	bl	8001a38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001412:	bf00      	nop
 8001414:	3720      	adds	r7, #32
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	200085b8 	.word	0x200085b8
 8001420:	40010400 	.word	0x40010400

08001424 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b088      	sub	sp, #32
 8001428:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800142a:	1d3b      	adds	r3, r7, #4
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	605a      	str	r2, [r3, #4]
 8001432:	609a      	str	r2, [r3, #8]
 8001434:	60da      	str	r2, [r3, #12]
 8001436:	611a      	str	r2, [r3, #16]
 8001438:	615a      	str	r2, [r3, #20]
 800143a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800143c:	4b1a      	ldr	r3, [pc, #104]	; (80014a8 <MX_TIM12_Init+0x84>)
 800143e:	4a1b      	ldr	r2, [pc, #108]	; (80014ac <MX_TIM12_Init+0x88>)
 8001440:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8001442:	4b19      	ldr	r3, [pc, #100]	; (80014a8 <MX_TIM12_Init+0x84>)
 8001444:	2200      	movs	r2, #0
 8001446:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001448:	4b17      	ldr	r3, [pc, #92]	; (80014a8 <MX_TIM12_Init+0x84>)
 800144a:	2200      	movs	r2, #0
 800144c:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 800144e:	4b16      	ldr	r3, [pc, #88]	; (80014a8 <MX_TIM12_Init+0x84>)
 8001450:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001454:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001456:	4b14      	ldr	r3, [pc, #80]	; (80014a8 <MX_TIM12_Init+0x84>)
 8001458:	2200      	movs	r2, #0
 800145a:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800145c:	4b12      	ldr	r3, [pc, #72]	; (80014a8 <MX_TIM12_Init+0x84>)
 800145e:	2200      	movs	r2, #0
 8001460:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001462:	4811      	ldr	r0, [pc, #68]	; (80014a8 <MX_TIM12_Init+0x84>)
 8001464:	f008 fd06 	bl	8009e74 <HAL_TIM_PWM_Init>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 800146e:	f000 fae3 	bl	8001a38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001472:	2360      	movs	r3, #96	; 0x60
 8001474:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001476:	2300      	movs	r3, #0
 8001478:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800147a:	2300      	movs	r3, #0
 800147c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800147e:	2300      	movs	r3, #0
 8001480:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001482:	1d3b      	adds	r3, r7, #4
 8001484:	2200      	movs	r2, #0
 8001486:	4619      	mov	r1, r3
 8001488:	4807      	ldr	r0, [pc, #28]	; (80014a8 <MX_TIM12_Init+0x84>)
 800148a:	f008 fe3d 	bl	800a108 <HAL_TIM_PWM_ConfigChannel>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8001494:	f000 fad0 	bl	8001a38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001498:	4803      	ldr	r0, [pc, #12]	; (80014a8 <MX_TIM12_Init+0x84>)
 800149a:	f001 f871 	bl	8002580 <HAL_TIM_MspPostInit>

}
 800149e:	bf00      	nop
 80014a0:	3720      	adds	r7, #32
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	20008b78 	.word	0x20008b78
 80014ac:	40001800 	.word	0x40001800

080014b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014b4:	4b14      	ldr	r3, [pc, #80]	; (8001508 <MX_USART1_UART_Init+0x58>)
 80014b6:	4a15      	ldr	r2, [pc, #84]	; (800150c <MX_USART1_UART_Init+0x5c>)
 80014b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80014ba:	4b13      	ldr	r3, [pc, #76]	; (8001508 <MX_USART1_UART_Init+0x58>)
 80014bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014c2:	4b11      	ldr	r3, [pc, #68]	; (8001508 <MX_USART1_UART_Init+0x58>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014c8:	4b0f      	ldr	r3, [pc, #60]	; (8001508 <MX_USART1_UART_Init+0x58>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014ce:	4b0e      	ldr	r3, [pc, #56]	; (8001508 <MX_USART1_UART_Init+0x58>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014d4:	4b0c      	ldr	r3, [pc, #48]	; (8001508 <MX_USART1_UART_Init+0x58>)
 80014d6:	220c      	movs	r2, #12
 80014d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014da:	4b0b      	ldr	r3, [pc, #44]	; (8001508 <MX_USART1_UART_Init+0x58>)
 80014dc:	2200      	movs	r2, #0
 80014de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014e0:	4b09      	ldr	r3, [pc, #36]	; (8001508 <MX_USART1_UART_Init+0x58>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014e6:	4b08      	ldr	r3, [pc, #32]	; (8001508 <MX_USART1_UART_Init+0x58>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014ec:	4b06      	ldr	r3, [pc, #24]	; (8001508 <MX_USART1_UART_Init+0x58>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014f2:	4805      	ldr	r0, [pc, #20]	; (8001508 <MX_USART1_UART_Init+0x58>)
 80014f4:	f009 fcc4 	bl	800ae80 <HAL_UART_Init>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80014fe:	f000 fa9b 	bl	8001a38 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001502:	bf00      	nop
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	20008994 	.word	0x20008994
 800150c:	40011000 	.word	0x40011000

08001510 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001514:	4b14      	ldr	r3, [pc, #80]	; (8001568 <MX_USART6_UART_Init+0x58>)
 8001516:	4a15      	ldr	r2, [pc, #84]	; (800156c <MX_USART6_UART_Init+0x5c>)
 8001518:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800151a:	4b13      	ldr	r3, [pc, #76]	; (8001568 <MX_USART6_UART_Init+0x58>)
 800151c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001520:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001522:	4b11      	ldr	r3, [pc, #68]	; (8001568 <MX_USART6_UART_Init+0x58>)
 8001524:	2200      	movs	r2, #0
 8001526:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001528:	4b0f      	ldr	r3, [pc, #60]	; (8001568 <MX_USART6_UART_Init+0x58>)
 800152a:	2200      	movs	r2, #0
 800152c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800152e:	4b0e      	ldr	r3, [pc, #56]	; (8001568 <MX_USART6_UART_Init+0x58>)
 8001530:	2200      	movs	r2, #0
 8001532:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001534:	4b0c      	ldr	r3, [pc, #48]	; (8001568 <MX_USART6_UART_Init+0x58>)
 8001536:	220c      	movs	r2, #12
 8001538:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800153a:	4b0b      	ldr	r3, [pc, #44]	; (8001568 <MX_USART6_UART_Init+0x58>)
 800153c:	2200      	movs	r2, #0
 800153e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001540:	4b09      	ldr	r3, [pc, #36]	; (8001568 <MX_USART6_UART_Init+0x58>)
 8001542:	2200      	movs	r2, #0
 8001544:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001546:	4b08      	ldr	r3, [pc, #32]	; (8001568 <MX_USART6_UART_Init+0x58>)
 8001548:	2200      	movs	r2, #0
 800154a:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800154c:	4b06      	ldr	r3, [pc, #24]	; (8001568 <MX_USART6_UART_Init+0x58>)
 800154e:	2200      	movs	r2, #0
 8001550:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001552:	4805      	ldr	r0, [pc, #20]	; (8001568 <MX_USART6_UART_Init+0x58>)
 8001554:	f009 fc94 	bl	800ae80 <HAL_UART_Init>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 800155e:	f000 fa6b 	bl	8001a38 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001562:	bf00      	nop
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	20008a78 	.word	0x20008a78
 800156c:	40011400 	.word	0x40011400

08001570 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b088      	sub	sp, #32
 8001574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001576:	1d3b      	adds	r3, r7, #4
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	605a      	str	r2, [r3, #4]
 800157e:	609a      	str	r2, [r3, #8]
 8001580:	60da      	str	r2, [r3, #12]
 8001582:	611a      	str	r2, [r3, #16]
 8001584:	615a      	str	r2, [r3, #20]
 8001586:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001588:	4b1f      	ldr	r3, [pc, #124]	; (8001608 <MX_FMC_Init+0x98>)
 800158a:	4a20      	ldr	r2, [pc, #128]	; (800160c <MX_FMC_Init+0x9c>)
 800158c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800158e:	4b1e      	ldr	r3, [pc, #120]	; (8001608 <MX_FMC_Init+0x98>)
 8001590:	2200      	movs	r2, #0
 8001592:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001594:	4b1c      	ldr	r3, [pc, #112]	; (8001608 <MX_FMC_Init+0x98>)
 8001596:	2200      	movs	r2, #0
 8001598:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800159a:	4b1b      	ldr	r3, [pc, #108]	; (8001608 <MX_FMC_Init+0x98>)
 800159c:	2204      	movs	r2, #4
 800159e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80015a0:	4b19      	ldr	r3, [pc, #100]	; (8001608 <MX_FMC_Init+0x98>)
 80015a2:	2210      	movs	r2, #16
 80015a4:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80015a6:	4b18      	ldr	r3, [pc, #96]	; (8001608 <MX_FMC_Init+0x98>)
 80015a8:	2240      	movs	r2, #64	; 0x40
 80015aa:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80015ac:	4b16      	ldr	r3, [pc, #88]	; (8001608 <MX_FMC_Init+0x98>)
 80015ae:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80015b2:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80015b4:	4b14      	ldr	r3, [pc, #80]	; (8001608 <MX_FMC_Init+0x98>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80015ba:	4b13      	ldr	r3, [pc, #76]	; (8001608 <MX_FMC_Init+0x98>)
 80015bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015c0:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80015c2:	4b11      	ldr	r3, [pc, #68]	; (8001608 <MX_FMC_Init+0x98>)
 80015c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015c8:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80015ca:	4b0f      	ldr	r3, [pc, #60]	; (8001608 <MX_FMC_Init+0x98>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80015d0:	2302      	movs	r3, #2
 80015d2:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80015d4:	2307      	movs	r3, #7
 80015d6:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80015d8:	2304      	movs	r3, #4
 80015da:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80015dc:	2307      	movs	r3, #7
 80015de:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80015e0:	2303      	movs	r3, #3
 80015e2:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80015e4:	2302      	movs	r3, #2
 80015e6:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80015e8:	2302      	movs	r3, #2
 80015ea:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80015ec:	1d3b      	adds	r3, r7, #4
 80015ee:	4619      	mov	r1, r3
 80015f0:	4805      	ldr	r0, [pc, #20]	; (8001608 <MX_FMC_Init+0x98>)
 80015f2:	f008 fac7 	bl	8009b84 <HAL_SDRAM_Init>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80015fc:	f000 fa1c 	bl	8001a38 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001600:	bf00      	nop
 8001602:	3720      	adds	r7, #32
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	20008bb8 	.word	0x20008bb8
 800160c:	a0000140 	.word	0xa0000140

08001610 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b090      	sub	sp, #64	; 0x40
 8001614:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001616:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800161a:	2200      	movs	r2, #0
 800161c:	601a      	str	r2, [r3, #0]
 800161e:	605a      	str	r2, [r3, #4]
 8001620:	609a      	str	r2, [r3, #8]
 8001622:	60da      	str	r2, [r3, #12]
 8001624:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001626:	4baf      	ldr	r3, [pc, #700]	; (80018e4 <MX_GPIO_Init+0x2d4>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	4aae      	ldr	r2, [pc, #696]	; (80018e4 <MX_GPIO_Init+0x2d4>)
 800162c:	f043 0310 	orr.w	r3, r3, #16
 8001630:	6313      	str	r3, [r2, #48]	; 0x30
 8001632:	4bac      	ldr	r3, [pc, #688]	; (80018e4 <MX_GPIO_Init+0x2d4>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001636:	f003 0310 	and.w	r3, r3, #16
 800163a:	62bb      	str	r3, [r7, #40]	; 0x28
 800163c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800163e:	4ba9      	ldr	r3, [pc, #676]	; (80018e4 <MX_GPIO_Init+0x2d4>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001642:	4aa8      	ldr	r2, [pc, #672]	; (80018e4 <MX_GPIO_Init+0x2d4>)
 8001644:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001648:	6313      	str	r3, [r2, #48]	; 0x30
 800164a:	4ba6      	ldr	r3, [pc, #664]	; (80018e4 <MX_GPIO_Init+0x2d4>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001652:	627b      	str	r3, [r7, #36]	; 0x24
 8001654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001656:	4ba3      	ldr	r3, [pc, #652]	; (80018e4 <MX_GPIO_Init+0x2d4>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165a:	4aa2      	ldr	r2, [pc, #648]	; (80018e4 <MX_GPIO_Init+0x2d4>)
 800165c:	f043 0302 	orr.w	r3, r3, #2
 8001660:	6313      	str	r3, [r2, #48]	; 0x30
 8001662:	4ba0      	ldr	r3, [pc, #640]	; (80018e4 <MX_GPIO_Init+0x2d4>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001666:	f003 0302 	and.w	r3, r3, #2
 800166a:	623b      	str	r3, [r7, #32]
 800166c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800166e:	4b9d      	ldr	r3, [pc, #628]	; (80018e4 <MX_GPIO_Init+0x2d4>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001672:	4a9c      	ldr	r2, [pc, #624]	; (80018e4 <MX_GPIO_Init+0x2d4>)
 8001674:	f043 0308 	orr.w	r3, r3, #8
 8001678:	6313      	str	r3, [r2, #48]	; 0x30
 800167a:	4b9a      	ldr	r3, [pc, #616]	; (80018e4 <MX_GPIO_Init+0x2d4>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167e:	f003 0308 	and.w	r3, r3, #8
 8001682:	61fb      	str	r3, [r7, #28]
 8001684:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001686:	4b97      	ldr	r3, [pc, #604]	; (80018e4 <MX_GPIO_Init+0x2d4>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168a:	4a96      	ldr	r2, [pc, #600]	; (80018e4 <MX_GPIO_Init+0x2d4>)
 800168c:	f043 0304 	orr.w	r3, r3, #4
 8001690:	6313      	str	r3, [r2, #48]	; 0x30
 8001692:	4b94      	ldr	r3, [pc, #592]	; (80018e4 <MX_GPIO_Init+0x2d4>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001696:	f003 0304 	and.w	r3, r3, #4
 800169a:	61bb      	str	r3, [r7, #24]
 800169c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800169e:	4b91      	ldr	r3, [pc, #580]	; (80018e4 <MX_GPIO_Init+0x2d4>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a2:	4a90      	ldr	r2, [pc, #576]	; (80018e4 <MX_GPIO_Init+0x2d4>)
 80016a4:	f043 0301 	orr.w	r3, r3, #1
 80016a8:	6313      	str	r3, [r2, #48]	; 0x30
 80016aa:	4b8e      	ldr	r3, [pc, #568]	; (80018e4 <MX_GPIO_Init+0x2d4>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	f003 0301 	and.w	r3, r3, #1
 80016b2:	617b      	str	r3, [r7, #20]
 80016b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80016b6:	4b8b      	ldr	r3, [pc, #556]	; (80018e4 <MX_GPIO_Init+0x2d4>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ba:	4a8a      	ldr	r2, [pc, #552]	; (80018e4 <MX_GPIO_Init+0x2d4>)
 80016bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016c0:	6313      	str	r3, [r2, #48]	; 0x30
 80016c2:	4b88      	ldr	r3, [pc, #544]	; (80018e4 <MX_GPIO_Init+0x2d4>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016ca:	613b      	str	r3, [r7, #16]
 80016cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80016ce:	4b85      	ldr	r3, [pc, #532]	; (80018e4 <MX_GPIO_Init+0x2d4>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d2:	4a84      	ldr	r2, [pc, #528]	; (80018e4 <MX_GPIO_Init+0x2d4>)
 80016d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016d8:	6313      	str	r3, [r2, #48]	; 0x30
 80016da:	4b82      	ldr	r3, [pc, #520]	; (80018e4 <MX_GPIO_Init+0x2d4>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016e2:	60fb      	str	r3, [r7, #12]
 80016e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80016e6:	4b7f      	ldr	r3, [pc, #508]	; (80018e4 <MX_GPIO_Init+0x2d4>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ea:	4a7e      	ldr	r2, [pc, #504]	; (80018e4 <MX_GPIO_Init+0x2d4>)
 80016ec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016f0:	6313      	str	r3, [r2, #48]	; 0x30
 80016f2:	4b7c      	ldr	r3, [pc, #496]	; (80018e4 <MX_GPIO_Init+0x2d4>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016fa:	60bb      	str	r3, [r7, #8]
 80016fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016fe:	4b79      	ldr	r3, [pc, #484]	; (80018e4 <MX_GPIO_Init+0x2d4>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001702:	4a78      	ldr	r2, [pc, #480]	; (80018e4 <MX_GPIO_Init+0x2d4>)
 8001704:	f043 0320 	orr.w	r3, r3, #32
 8001708:	6313      	str	r3, [r2, #48]	; 0x30
 800170a:	4b76      	ldr	r3, [pc, #472]	; (80018e4 <MX_GPIO_Init+0x2d4>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170e:	f003 0320 	and.w	r3, r3, #32
 8001712:	607b      	str	r3, [r7, #4]
 8001714:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001716:	4b73      	ldr	r3, [pc, #460]	; (80018e4 <MX_GPIO_Init+0x2d4>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	4a72      	ldr	r2, [pc, #456]	; (80018e4 <MX_GPIO_Init+0x2d4>)
 800171c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001720:	6313      	str	r3, [r2, #48]	; 0x30
 8001722:	4b70      	ldr	r3, [pc, #448]	; (80018e4 <MX_GPIO_Init+0x2d4>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800172a:	603b      	str	r3, [r7, #0]
 800172c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800172e:	2201      	movs	r2, #1
 8001730:	2120      	movs	r1, #32
 8001732:	486d      	ldr	r0, [pc, #436]	; (80018e8 <MX_GPIO_Init+0x2d8>)
 8001734:	f003 f86a 	bl	800480c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 8001738:	2200      	movs	r2, #0
 800173a:	210c      	movs	r1, #12
 800173c:	486b      	ldr	r0, [pc, #428]	; (80018ec <MX_GPIO_Init+0x2dc>)
 800173e:	f003 f865 	bl	800480c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8001742:	2201      	movs	r2, #1
 8001744:	2108      	movs	r1, #8
 8001746:	486a      	ldr	r0, [pc, #424]	; (80018f0 <MX_GPIO_Init+0x2e0>)
 8001748:	f003 f860 	bl	800480c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 800174c:	2201      	movs	r2, #1
 800174e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001752:	4866      	ldr	r0, [pc, #408]	; (80018ec <MX_GPIO_Init+0x2dc>)
 8001754:	f003 f85a 	bl	800480c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8001758:	2200      	movs	r2, #0
 800175a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800175e:	4865      	ldr	r0, [pc, #404]	; (80018f4 <MX_GPIO_Init+0x2e4>)
 8001760:	f003 f854 	bl	800480c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8001764:	2200      	movs	r2, #0
 8001766:	21c8      	movs	r1, #200	; 0xc8
 8001768:	4863      	ldr	r0, [pc, #396]	; (80018f8 <MX_GPIO_Init+0x2e8>)
 800176a:	f003 f84f 	bl	800480c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 800176e:	2308      	movs	r3, #8
 8001770:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001772:	2300      	movs	r3, #0
 8001774:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001776:	2300      	movs	r3, #0
 8001778:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800177a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800177e:	4619      	mov	r1, r3
 8001780:	485e      	ldr	r0, [pc, #376]	; (80018fc <MX_GPIO_Init+0x2ec>)
 8001782:	f002 fe81 	bl	8004488 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8001786:	f643 4323 	movw	r3, #15395	; 0x3c23
 800178a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800178c:	2302      	movs	r3, #2
 800178e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001790:	2300      	movs	r3, #0
 8001792:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001794:	2303      	movs	r3, #3
 8001796:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001798:	230a      	movs	r3, #10
 800179a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800179c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017a0:	4619      	mov	r1, r3
 80017a2:	4857      	ldr	r0, [pc, #348]	; (8001900 <MX_GPIO_Init+0x2f0>)
 80017a4:	f002 fe70 	bl	8004488 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 80017a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017ae:	2300      	movs	r3, #0
 80017b0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b2:	2300      	movs	r3, #0
 80017b4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80017b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017ba:	4619      	mov	r1, r3
 80017bc:	4851      	ldr	r0, [pc, #324]	; (8001904 <MX_GPIO_Init+0x2f4>)
 80017be:	f002 fe63 	bl	8004488 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 80017c2:	2340      	movs	r3, #64	; 0x40
 80017c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80017c6:	4b50      	ldr	r3, [pc, #320]	; (8001908 <MX_GPIO_Init+0x2f8>)
 80017c8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ca:	2300      	movs	r3, #0
 80017cc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 80017ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017d2:	4619      	mov	r1, r3
 80017d4:	4844      	ldr	r0, [pc, #272]	; (80018e8 <MX_GPIO_Init+0x2d8>)
 80017d6:	f002 fe57 	bl	8004488 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80017da:	2320      	movs	r3, #32
 80017dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017de:	2301      	movs	r3, #1
 80017e0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e2:	2300      	movs	r3, #0
 80017e4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e6:	2300      	movs	r3, #0
 80017e8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80017ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017ee:	4619      	mov	r1, r3
 80017f0:	483d      	ldr	r0, [pc, #244]	; (80018e8 <MX_GPIO_Init+0x2d8>)
 80017f2:	f002 fe49 	bl	8004488 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 80017f6:	f241 030c 	movw	r3, #4108	; 0x100c
 80017fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017fc:	2301      	movs	r3, #1
 80017fe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001800:	2300      	movs	r3, #0
 8001802:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001804:	2300      	movs	r3, #0
 8001806:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001808:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800180c:	4619      	mov	r1, r3
 800180e:	4837      	ldr	r0, [pc, #220]	; (80018ec <MX_GPIO_Init+0x2dc>)
 8001810:	f002 fe3a 	bl	8004488 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001814:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001818:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800181a:	2300      	movs	r3, #0
 800181c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181e:	2300      	movs	r3, #0
 8001820:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001822:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001826:	4619      	mov	r1, r3
 8001828:	4838      	ldr	r0, [pc, #224]	; (800190c <MX_GPIO_Init+0x2fc>)
 800182a:	f002 fe2d 	bl	8004488 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 800182e:	2308      	movs	r3, #8
 8001830:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001832:	2301      	movs	r3, #1
 8001834:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001836:	2300      	movs	r3, #0
 8001838:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800183a:	2300      	movs	r3, #0
 800183c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800183e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001842:	4619      	mov	r1, r3
 8001844:	482a      	ldr	r0, [pc, #168]	; (80018f0 <MX_GPIO_Init+0x2e0>)
 8001846:	f002 fe1f 	bl	8004488 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800184a:	2310      	movs	r3, #16
 800184c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800184e:	2300      	movs	r3, #0
 8001850:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001852:	2300      	movs	r3, #0
 8001854:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001856:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800185a:	4619      	mov	r1, r3
 800185c:	4822      	ldr	r0, [pc, #136]	; (80018e8 <MX_GPIO_Init+0x2d8>)
 800185e:	f002 fe13 	bl	8004488 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8001862:	f248 0304 	movw	r3, #32772	; 0x8004
 8001866:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001868:	2300      	movs	r3, #0
 800186a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186c:	2300      	movs	r3, #0
 800186e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001870:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001874:	4619      	mov	r1, r3
 8001876:	481f      	ldr	r0, [pc, #124]	; (80018f4 <MX_GPIO_Init+0x2e4>)
 8001878:	f002 fe06 	bl	8004488 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 800187c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001880:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001882:	2301      	movs	r3, #1
 8001884:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001886:	2300      	movs	r3, #0
 8001888:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188a:	2300      	movs	r3, #0
 800188c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800188e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001892:	4619      	mov	r1, r3
 8001894:	4817      	ldr	r0, [pc, #92]	; (80018f4 <MX_GPIO_Init+0x2e4>)
 8001896:	f002 fdf7 	bl	8004488 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 800189a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800189e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80018a0:	4b19      	ldr	r3, [pc, #100]	; (8001908 <MX_GPIO_Init+0x2f8>)
 80018a2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a4:	2300      	movs	r3, #0
 80018a6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80018a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018ac:	4619      	mov	r1, r3
 80018ae:	480f      	ldr	r0, [pc, #60]	; (80018ec <MX_GPIO_Init+0x2dc>)
 80018b0:	f002 fdea 	bl	8004488 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 80018b4:	2310      	movs	r3, #16
 80018b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b8:	2302      	movs	r3, #2
 80018ba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018bc:	2300      	movs	r3, #0
 80018be:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018c0:	2303      	movs	r3, #3
 80018c2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80018c4:	230a      	movs	r3, #10
 80018c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 80018c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018cc:	4619      	mov	r1, r3
 80018ce:	4809      	ldr	r0, [pc, #36]	; (80018f4 <MX_GPIO_Init+0x2e4>)
 80018d0:	f002 fdda 	bl	8004488 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 80018d4:	23c8      	movs	r3, #200	; 0xc8
 80018d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018d8:	2301      	movs	r3, #1
 80018da:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018dc:	2300      	movs	r3, #0
 80018de:	637b      	str	r3, [r7, #52]	; 0x34
 80018e0:	e016      	b.n	8001910 <MX_GPIO_Init+0x300>
 80018e2:	bf00      	nop
 80018e4:	40023800 	.word	0x40023800
 80018e8:	40020c00 	.word	0x40020c00
 80018ec:	40022000 	.word	0x40022000
 80018f0:	40022800 	.word	0x40022800
 80018f4:	40021c00 	.word	0x40021c00
 80018f8:	40021800 	.word	0x40021800
 80018fc:	40021000 	.word	0x40021000
 8001900:	40020400 	.word	0x40020400
 8001904:	40022400 	.word	0x40022400
 8001908:	10120000 	.word	0x10120000
 800190c:	40020800 	.word	0x40020800
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001910:	2300      	movs	r3, #0
 8001912:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001914:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001918:	4619      	mov	r1, r3
 800191a:	4819      	ldr	r0, [pc, #100]	; (8001980 <MX_GPIO_Init+0x370>)
 800191c:	f002 fdb4 	bl	8004488 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001920:	2305      	movs	r3, #5
 8001922:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001924:	2302      	movs	r3, #2
 8001926:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001928:	2300      	movs	r3, #0
 800192a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800192c:	2303      	movs	r3, #3
 800192e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001930:	230a      	movs	r3, #10
 8001932:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001934:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001938:	4619      	mov	r1, r3
 800193a:	4812      	ldr	r0, [pc, #72]	; (8001984 <MX_GPIO_Init+0x374>)
 800193c:	f002 fda4 	bl	8004488 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8001940:	2304      	movs	r3, #4
 8001942:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001944:	2300      	movs	r3, #0
 8001946:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001948:	2300      	movs	r3, #0
 800194a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 800194c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001950:	4619      	mov	r1, r3
 8001952:	480b      	ldr	r0, [pc, #44]	; (8001980 <MX_GPIO_Init+0x370>)
 8001954:	f002 fd98 	bl	8004488 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001958:	2328      	movs	r3, #40	; 0x28
 800195a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800195c:	2302      	movs	r3, #2
 800195e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001960:	2300      	movs	r3, #0
 8001962:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001964:	2303      	movs	r3, #3
 8001966:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001968:	230a      	movs	r3, #10
 800196a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800196c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001970:	4619      	mov	r1, r3
 8001972:	4805      	ldr	r0, [pc, #20]	; (8001988 <MX_GPIO_Init+0x378>)
 8001974:	f002 fd88 	bl	8004488 <HAL_GPIO_Init>

}
 8001978:	bf00      	nop
 800197a:	3740      	adds	r7, #64	; 0x40
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	40021800 	.word	0x40021800
 8001984:	40020800 	.word	0x40020800
 8001988:	40020000 	.word	0x40020000

0800198c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b08a      	sub	sp, #40	; 0x28
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8001994:	f010 fb16 	bl	8011fc4 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  RTC_TimeTypeDef sTime;
  RTC_DateTypeDef sDate;
  uint8_t TmpSeconds = 0;
 8001998:	2300      	movs	r3, #0
 800199a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  sDate.Date = 16;
 800199e:	2310      	movs	r3, #16
 80019a0:	72bb      	strb	r3, [r7, #10]
  sDate.Month = 9;
 80019a2:	2309      	movs	r3, #9
 80019a4:	727b      	strb	r3, [r7, #9]
  sDate.Year = 20;
 80019a6:	2314      	movs	r3, #20
 80019a8:	72fb      	strb	r3, [r7, #11]
  sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 80019aa:	2303      	movs	r3, #3
 80019ac:	723b      	strb	r3, [r7, #8]
  sTime.Hours = 16;
 80019ae:	2310      	movs	r3, #16
 80019b0:	733b      	strb	r3, [r7, #12]
  sTime.Minutes = 30;
 80019b2:	231e      	movs	r3, #30
 80019b4:	737b      	strb	r3, [r7, #13]
  sTime.Seconds = 0;
 80019b6:	2300      	movs	r3, #0
 80019b8:	73bb      	strb	r3, [r7, #14]

  HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN );
 80019ba:	f107 0308 	add.w	r3, r7, #8
 80019be:	2200      	movs	r2, #0
 80019c0:	4619      	mov	r1, r3
 80019c2:	4813      	ldr	r0, [pc, #76]	; (8001a10 <StartDefaultTask+0x84>)
 80019c4:	f006 fd42 	bl	800844c <HAL_RTC_SetDate>
  HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN );
 80019c8:	f107 030c 	add.w	r3, r7, #12
 80019cc:	2200      	movs	r2, #0
 80019ce:	4619      	mov	r1, r3
 80019d0:	480f      	ldr	r0, [pc, #60]	; (8001a10 <StartDefaultTask+0x84>)
 80019d2:	f006 fc1f 	bl	8008214 <HAL_RTC_SetTime>

  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80019d6:	2001      	movs	r0, #1
 80019d8:	f00e f8ae 	bl	800fb38 <osDelay>

    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80019dc:	f107 030c 	add.w	r3, r7, #12
 80019e0:	2200      	movs	r2, #0
 80019e2:	4619      	mov	r1, r3
 80019e4:	480a      	ldr	r0, [pc, #40]	; (8001a10 <StartDefaultTask+0x84>)
 80019e6:	f006 fcd3 	bl	8008390 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80019ea:	f107 0308 	add.w	r3, r7, #8
 80019ee:	2200      	movs	r2, #0
 80019f0:	4619      	mov	r1, r3
 80019f2:	4807      	ldr	r0, [pc, #28]	; (8001a10 <StartDefaultTask+0x84>)
 80019f4:	f006 fdd2 	bl	800859c <HAL_RTC_GetDate>

    if ( TmpSeconds != sTime.Seconds )
 80019f8:	7bbb      	ldrb	r3, [r7, #14]
 80019fa:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d002      	beq.n	8001a08 <StartDefaultTask+0x7c>
    {
    	TmpSeconds = sTime.Seconds;
 8001a02:	7bbb      	ldrb	r3, [r7, #14]
 8001a04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    osDelay(10);
 8001a08:	200a      	movs	r0, #10
 8001a0a:	f00e f895 	bl	800fb38 <osDelay>
    osDelay(1);
 8001a0e:	e7e2      	b.n	80019d6 <StartDefaultTask+0x4a>
 8001a10:	20008a18 	.word	0x20008a18

08001a14 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a04      	ldr	r2, [pc, #16]	; (8001a34 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d101      	bne.n	8001a2a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001a26:	f001 f92d 	bl	8002c84 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001a2a:	bf00      	nop
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	40001000 	.word	0x40001000

08001a38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001a3c:	bf00      	nop
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
	...

08001a48 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001a4e:	4b11      	ldr	r3, [pc, #68]	; (8001a94 <HAL_MspInit+0x4c>)
 8001a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a52:	4a10      	ldr	r2, [pc, #64]	; (8001a94 <HAL_MspInit+0x4c>)
 8001a54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a58:	6413      	str	r3, [r2, #64]	; 0x40
 8001a5a:	4b0e      	ldr	r3, [pc, #56]	; (8001a94 <HAL_MspInit+0x4c>)
 8001a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a62:	607b      	str	r3, [r7, #4]
 8001a64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a66:	4b0b      	ldr	r3, [pc, #44]	; (8001a94 <HAL_MspInit+0x4c>)
 8001a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a6a:	4a0a      	ldr	r2, [pc, #40]	; (8001a94 <HAL_MspInit+0x4c>)
 8001a6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a70:	6453      	str	r3, [r2, #68]	; 0x44
 8001a72:	4b08      	ldr	r3, [pc, #32]	; (8001a94 <HAL_MspInit+0x4c>)
 8001a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a7a:	603b      	str	r3, [r7, #0]
 8001a7c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001a7e:	2200      	movs	r2, #0
 8001a80:	210f      	movs	r1, #15
 8001a82:	f06f 0001 	mvn.w	r0, #1
 8001a86:	f001 fc7f 	bl	8003388 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a8a:	bf00      	nop
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	40023800 	.word	0x40023800

08001a98 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b08a      	sub	sp, #40	; 0x28
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa0:	f107 0314 	add.w	r3, r7, #20
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]
 8001aa8:	605a      	str	r2, [r3, #4]
 8001aaa:	609a      	str	r2, [r3, #8]
 8001aac:	60da      	str	r2, [r3, #12]
 8001aae:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a21      	ldr	r2, [pc, #132]	; (8001b3c <HAL_ADC_MspInit+0xa4>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d13c      	bne.n	8001b34 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001aba:	4b21      	ldr	r3, [pc, #132]	; (8001b40 <HAL_ADC_MspInit+0xa8>)
 8001abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001abe:	4a20      	ldr	r2, [pc, #128]	; (8001b40 <HAL_ADC_MspInit+0xa8>)
 8001ac0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ac4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ac6:	4b1e      	ldr	r3, [pc, #120]	; (8001b40 <HAL_ADC_MspInit+0xa8>)
 8001ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ace:	613b      	str	r3, [r7, #16]
 8001ad0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ad2:	4b1b      	ldr	r3, [pc, #108]	; (8001b40 <HAL_ADC_MspInit+0xa8>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad6:	4a1a      	ldr	r2, [pc, #104]	; (8001b40 <HAL_ADC_MspInit+0xa8>)
 8001ad8:	f043 0320 	orr.w	r3, r3, #32
 8001adc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ade:	4b18      	ldr	r3, [pc, #96]	; (8001b40 <HAL_ADC_MspInit+0xa8>)
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae2:	f003 0320 	and.w	r3, r3, #32
 8001ae6:	60fb      	str	r3, [r7, #12]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aea:	4b15      	ldr	r3, [pc, #84]	; (8001b40 <HAL_ADC_MspInit+0xa8>)
 8001aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aee:	4a14      	ldr	r2, [pc, #80]	; (8001b40 <HAL_ADC_MspInit+0xa8>)
 8001af0:	f043 0301 	orr.w	r3, r3, #1
 8001af4:	6313      	str	r3, [r2, #48]	; 0x30
 8001af6:	4b12      	ldr	r3, [pc, #72]	; (8001b40 <HAL_ADC_MspInit+0xa8>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afa:	f003 0301 	and.w	r3, r3, #1
 8001afe:	60bb      	str	r3, [r7, #8]
 8001b00:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8001b02:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8001b06:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001b10:	f107 0314 	add.w	r3, r7, #20
 8001b14:	4619      	mov	r1, r3
 8001b16:	480b      	ldr	r0, [pc, #44]	; (8001b44 <HAL_ADC_MspInit+0xac>)
 8001b18:	f002 fcb6 	bl	8004488 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b20:	2303      	movs	r3, #3
 8001b22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b24:	2300      	movs	r3, #0
 8001b26:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8001b28:	f107 0314 	add.w	r3, r7, #20
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	4806      	ldr	r0, [pc, #24]	; (8001b48 <HAL_ADC_MspInit+0xb0>)
 8001b30:	f002 fcaa 	bl	8004488 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001b34:	bf00      	nop
 8001b36:	3728      	adds	r7, #40	; 0x28
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	40012200 	.word	0x40012200
 8001b40:	40023800 	.word	0x40023800
 8001b44:	40021400 	.word	0x40021400
 8001b48:	40020000 	.word	0x40020000

08001b4c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b085      	sub	sp, #20
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a0a      	ldr	r2, [pc, #40]	; (8001b84 <HAL_CRC_MspInit+0x38>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d10b      	bne.n	8001b76 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001b5e:	4b0a      	ldr	r3, [pc, #40]	; (8001b88 <HAL_CRC_MspInit+0x3c>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b62:	4a09      	ldr	r2, [pc, #36]	; (8001b88 <HAL_CRC_MspInit+0x3c>)
 8001b64:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b68:	6313      	str	r3, [r2, #48]	; 0x30
 8001b6a:	4b07      	ldr	r3, [pc, #28]	; (8001b88 <HAL_CRC_MspInit+0x3c>)
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b72:	60fb      	str	r3, [r7, #12]
 8001b74:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001b76:	bf00      	nop
 8001b78:	3714      	adds	r7, #20
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	40023000 	.word	0x40023000
 8001b88:	40023800 	.word	0x40023800

08001b8c <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b08e      	sub	sp, #56	; 0x38
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b98:	2200      	movs	r2, #0
 8001b9a:	601a      	str	r2, [r3, #0]
 8001b9c:	605a      	str	r2, [r3, #4]
 8001b9e:	609a      	str	r2, [r3, #8]
 8001ba0:	60da      	str	r2, [r3, #12]
 8001ba2:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a50      	ldr	r2, [pc, #320]	; (8001cec <HAL_DCMI_MspInit+0x160>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	f040 809a 	bne.w	8001ce4 <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8001bb0:	4b4f      	ldr	r3, [pc, #316]	; (8001cf0 <HAL_DCMI_MspInit+0x164>)
 8001bb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bb4:	4a4e      	ldr	r2, [pc, #312]	; (8001cf0 <HAL_DCMI_MspInit+0x164>)
 8001bb6:	f043 0301 	orr.w	r3, r3, #1
 8001bba:	6353      	str	r3, [r2, #52]	; 0x34
 8001bbc:	4b4c      	ldr	r3, [pc, #304]	; (8001cf0 <HAL_DCMI_MspInit+0x164>)
 8001bbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bc0:	f003 0301 	and.w	r3, r3, #1
 8001bc4:	623b      	str	r3, [r7, #32]
 8001bc6:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001bc8:	4b49      	ldr	r3, [pc, #292]	; (8001cf0 <HAL_DCMI_MspInit+0x164>)
 8001bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bcc:	4a48      	ldr	r2, [pc, #288]	; (8001cf0 <HAL_DCMI_MspInit+0x164>)
 8001bce:	f043 0310 	orr.w	r3, r3, #16
 8001bd2:	6313      	str	r3, [r2, #48]	; 0x30
 8001bd4:	4b46      	ldr	r3, [pc, #280]	; (8001cf0 <HAL_DCMI_MspInit+0x164>)
 8001bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd8:	f003 0310 	and.w	r3, r3, #16
 8001bdc:	61fb      	str	r3, [r7, #28]
 8001bde:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001be0:	4b43      	ldr	r3, [pc, #268]	; (8001cf0 <HAL_DCMI_MspInit+0x164>)
 8001be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be4:	4a42      	ldr	r2, [pc, #264]	; (8001cf0 <HAL_DCMI_MspInit+0x164>)
 8001be6:	f043 0308 	orr.w	r3, r3, #8
 8001bea:	6313      	str	r3, [r2, #48]	; 0x30
 8001bec:	4b40      	ldr	r3, [pc, #256]	; (8001cf0 <HAL_DCMI_MspInit+0x164>)
 8001bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf0:	f003 0308 	and.w	r3, r3, #8
 8001bf4:	61bb      	str	r3, [r7, #24]
 8001bf6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001bf8:	4b3d      	ldr	r3, [pc, #244]	; (8001cf0 <HAL_DCMI_MspInit+0x164>)
 8001bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfc:	4a3c      	ldr	r2, [pc, #240]	; (8001cf0 <HAL_DCMI_MspInit+0x164>)
 8001bfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c02:	6313      	str	r3, [r2, #48]	; 0x30
 8001c04:	4b3a      	ldr	r3, [pc, #232]	; (8001cf0 <HAL_DCMI_MspInit+0x164>)
 8001c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c0c:	617b      	str	r3, [r7, #20]
 8001c0e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c10:	4b37      	ldr	r3, [pc, #220]	; (8001cf0 <HAL_DCMI_MspInit+0x164>)
 8001c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c14:	4a36      	ldr	r2, [pc, #216]	; (8001cf0 <HAL_DCMI_MspInit+0x164>)
 8001c16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c1a:	6313      	str	r3, [r2, #48]	; 0x30
 8001c1c:	4b34      	ldr	r3, [pc, #208]	; (8001cf0 <HAL_DCMI_MspInit+0x164>)
 8001c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c24:	613b      	str	r3, [r7, #16]
 8001c26:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c28:	4b31      	ldr	r3, [pc, #196]	; (8001cf0 <HAL_DCMI_MspInit+0x164>)
 8001c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2c:	4a30      	ldr	r2, [pc, #192]	; (8001cf0 <HAL_DCMI_MspInit+0x164>)
 8001c2e:	f043 0301 	orr.w	r3, r3, #1
 8001c32:	6313      	str	r3, [r2, #48]	; 0x30
 8001c34:	4b2e      	ldr	r3, [pc, #184]	; (8001cf0 <HAL_DCMI_MspInit+0x164>)
 8001c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c38:	f003 0301 	and.w	r3, r3, #1
 8001c3c:	60fb      	str	r3, [r7, #12]
 8001c3e:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8001c40:	2360      	movs	r3, #96	; 0x60
 8001c42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c44:	2302      	movs	r3, #2
 8001c46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001c50:	230d      	movs	r3, #13
 8001c52:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4826      	ldr	r0, [pc, #152]	; (8001cf4 <HAL_DCMI_MspInit+0x168>)
 8001c5c:	f002 fc14 	bl	8004488 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8001c60:	2308      	movs	r3, #8
 8001c62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c64:	2302      	movs	r3, #2
 8001c66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001c70:	230d      	movs	r3, #13
 8001c72:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8001c74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c78:	4619      	mov	r1, r3
 8001c7a:	481f      	ldr	r0, [pc, #124]	; (8001cf8 <HAL_DCMI_MspInit+0x16c>)
 8001c7c:	f002 fc04 	bl	8004488 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8001c80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c86:	2302      	movs	r3, #2
 8001c88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001c92:	230d      	movs	r3, #13
 8001c94:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8001c96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	4817      	ldr	r0, [pc, #92]	; (8001cfc <HAL_DCMI_MspInit+0x170>)
 8001c9e:	f002 fbf3 	bl	8004488 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8001ca2:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8001ca6:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca8:	2302      	movs	r3, #2
 8001caa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cac:	2300      	movs	r3, #0
 8001cae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001cb4:	230d      	movs	r3, #13
 8001cb6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001cb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	4810      	ldr	r0, [pc, #64]	; (8001d00 <HAL_DCMI_MspInit+0x174>)
 8001cc0:	f002 fbe2 	bl	8004488 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8001cc4:	2350      	movs	r3, #80	; 0x50
 8001cc6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc8:	2302      	movs	r3, #2
 8001cca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001cd4:	230d      	movs	r3, #13
 8001cd6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cdc:	4619      	mov	r1, r3
 8001cde:	4809      	ldr	r0, [pc, #36]	; (8001d04 <HAL_DCMI_MspInit+0x178>)
 8001ce0:	f002 fbd2 	bl	8004488 <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8001ce4:	bf00      	nop
 8001ce6:	3738      	adds	r7, #56	; 0x38
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	50050000 	.word	0x50050000
 8001cf0:	40023800 	.word	0x40023800
 8001cf4:	40021000 	.word	0x40021000
 8001cf8:	40020c00 	.word	0x40020c00
 8001cfc:	40021800 	.word	0x40021800
 8001d00:	40021c00 	.word	0x40021c00
 8001d04:	40020000 	.word	0x40020000

08001d08 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b084      	sub	sp, #16
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a0d      	ldr	r2, [pc, #52]	; (8001d4c <HAL_DMA2D_MspInit+0x44>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d113      	bne.n	8001d42 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001d1a:	4b0d      	ldr	r3, [pc, #52]	; (8001d50 <HAL_DMA2D_MspInit+0x48>)
 8001d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1e:	4a0c      	ldr	r2, [pc, #48]	; (8001d50 <HAL_DMA2D_MspInit+0x48>)
 8001d20:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001d24:	6313      	str	r3, [r2, #48]	; 0x30
 8001d26:	4b0a      	ldr	r3, [pc, #40]	; (8001d50 <HAL_DMA2D_MspInit+0x48>)
 8001d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001d2e:	60fb      	str	r3, [r7, #12]
 8001d30:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8001d32:	2200      	movs	r2, #0
 8001d34:	2100      	movs	r1, #0
 8001d36:	205a      	movs	r0, #90	; 0x5a
 8001d38:	f001 fb26 	bl	8003388 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001d3c:	205a      	movs	r0, #90	; 0x5a
 8001d3e:	f001 fb3f 	bl	80033c0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001d42:	bf00      	nop
 8001d44:	3710      	adds	r7, #16
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	4002b000 	.word	0x4002b000
 8001d50:	40023800 	.word	0x40023800

08001d54 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b08e      	sub	sp, #56	; 0x38
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d60:	2200      	movs	r2, #0
 8001d62:	601a      	str	r2, [r3, #0]
 8001d64:	605a      	str	r2, [r3, #4]
 8001d66:	609a      	str	r2, [r3, #8]
 8001d68:	60da      	str	r2, [r3, #12]
 8001d6a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a3f      	ldr	r2, [pc, #252]	; (8001e70 <HAL_ETH_MspInit+0x11c>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d178      	bne.n	8001e68 <HAL_ETH_MspInit+0x114>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001d76:	4b3f      	ldr	r3, [pc, #252]	; (8001e74 <HAL_ETH_MspInit+0x120>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7a:	4a3e      	ldr	r2, [pc, #248]	; (8001e74 <HAL_ETH_MspInit+0x120>)
 8001d7c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d80:	6313      	str	r3, [r2, #48]	; 0x30
 8001d82:	4b3c      	ldr	r3, [pc, #240]	; (8001e74 <HAL_ETH_MspInit+0x120>)
 8001d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d8a:	623b      	str	r3, [r7, #32]
 8001d8c:	6a3b      	ldr	r3, [r7, #32]
 8001d8e:	4b39      	ldr	r3, [pc, #228]	; (8001e74 <HAL_ETH_MspInit+0x120>)
 8001d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d92:	4a38      	ldr	r2, [pc, #224]	; (8001e74 <HAL_ETH_MspInit+0x120>)
 8001d94:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001d98:	6313      	str	r3, [r2, #48]	; 0x30
 8001d9a:	4b36      	ldr	r3, [pc, #216]	; (8001e74 <HAL_ETH_MspInit+0x120>)
 8001d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001da2:	61fb      	str	r3, [r7, #28]
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	4b33      	ldr	r3, [pc, #204]	; (8001e74 <HAL_ETH_MspInit+0x120>)
 8001da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001daa:	4a32      	ldr	r2, [pc, #200]	; (8001e74 <HAL_ETH_MspInit+0x120>)
 8001dac:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001db0:	6313      	str	r3, [r2, #48]	; 0x30
 8001db2:	4b30      	ldr	r3, [pc, #192]	; (8001e74 <HAL_ETH_MspInit+0x120>)
 8001db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001dba:	61bb      	str	r3, [r7, #24]
 8001dbc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001dbe:	4b2d      	ldr	r3, [pc, #180]	; (8001e74 <HAL_ETH_MspInit+0x120>)
 8001dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc2:	4a2c      	ldr	r2, [pc, #176]	; (8001e74 <HAL_ETH_MspInit+0x120>)
 8001dc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dca:	4b2a      	ldr	r3, [pc, #168]	; (8001e74 <HAL_ETH_MspInit+0x120>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dd2:	617b      	str	r3, [r7, #20]
 8001dd4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dd6:	4b27      	ldr	r3, [pc, #156]	; (8001e74 <HAL_ETH_MspInit+0x120>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dda:	4a26      	ldr	r2, [pc, #152]	; (8001e74 <HAL_ETH_MspInit+0x120>)
 8001ddc:	f043 0304 	orr.w	r3, r3, #4
 8001de0:	6313      	str	r3, [r2, #48]	; 0x30
 8001de2:	4b24      	ldr	r3, [pc, #144]	; (8001e74 <HAL_ETH_MspInit+0x120>)
 8001de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de6:	f003 0304 	and.w	r3, r3, #4
 8001dea:	613b      	str	r3, [r7, #16]
 8001dec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dee:	4b21      	ldr	r3, [pc, #132]	; (8001e74 <HAL_ETH_MspInit+0x120>)
 8001df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df2:	4a20      	ldr	r2, [pc, #128]	; (8001e74 <HAL_ETH_MspInit+0x120>)
 8001df4:	f043 0301 	orr.w	r3, r3, #1
 8001df8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dfa:	4b1e      	ldr	r3, [pc, #120]	; (8001e74 <HAL_ETH_MspInit+0x120>)
 8001dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfe:	f003 0301 	and.w	r3, r3, #1
 8001e02:	60fb      	str	r3, [r7, #12]
 8001e04:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV
    */
    GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8001e06:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8001e0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e10:	2300      	movs	r3, #0
 8001e12:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e14:	2303      	movs	r3, #3
 8001e16:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001e18:	230b      	movs	r3, #11
 8001e1a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e20:	4619      	mov	r1, r3
 8001e22:	4815      	ldr	r0, [pc, #84]	; (8001e78 <HAL_ETH_MspInit+0x124>)
 8001e24:	f002 fb30 	bl	8004488 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001e28:	2332      	movs	r3, #50	; 0x32
 8001e2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e2c:	2302      	movs	r3, #2
 8001e2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e30:	2300      	movs	r3, #0
 8001e32:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e34:	2303      	movs	r3, #3
 8001e36:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001e38:	230b      	movs	r3, #11
 8001e3a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e40:	4619      	mov	r1, r3
 8001e42:	480e      	ldr	r0, [pc, #56]	; (8001e7c <HAL_ETH_MspInit+0x128>)
 8001e44:	f002 fb20 	bl	8004488 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001e48:	2386      	movs	r3, #134	; 0x86
 8001e4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e50:	2300      	movs	r3, #0
 8001e52:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e54:	2303      	movs	r3, #3
 8001e56:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001e58:	230b      	movs	r3, #11
 8001e5a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e60:	4619      	mov	r1, r3
 8001e62:	4807      	ldr	r0, [pc, #28]	; (8001e80 <HAL_ETH_MspInit+0x12c>)
 8001e64:	f002 fb10 	bl	8004488 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001e68:	bf00      	nop
 8001e6a:	3738      	adds	r7, #56	; 0x38
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	40028000 	.word	0x40028000
 8001e74:	40023800 	.word	0x40023800
 8001e78:	40021800 	.word	0x40021800
 8001e7c:	40020800 	.word	0x40020800
 8001e80:	40020000 	.word	0x40020000

08001e84 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b08c      	sub	sp, #48	; 0x30
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e8c:	f107 031c 	add.w	r3, r7, #28
 8001e90:	2200      	movs	r2, #0
 8001e92:	601a      	str	r2, [r3, #0]
 8001e94:	605a      	str	r2, [r3, #4]
 8001e96:	609a      	str	r2, [r3, #8]
 8001e98:	60da      	str	r2, [r3, #12]
 8001e9a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a2f      	ldr	r2, [pc, #188]	; (8001f60 <HAL_I2C_MspInit+0xdc>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d129      	bne.n	8001efa <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ea6:	4b2f      	ldr	r3, [pc, #188]	; (8001f64 <HAL_I2C_MspInit+0xe0>)
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eaa:	4a2e      	ldr	r2, [pc, #184]	; (8001f64 <HAL_I2C_MspInit+0xe0>)
 8001eac:	f043 0302 	orr.w	r3, r3, #2
 8001eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001eb2:	4b2c      	ldr	r3, [pc, #176]	; (8001f64 <HAL_I2C_MspInit+0xe0>)
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb6:	f003 0302 	and.w	r3, r3, #2
 8001eba:	61bb      	str	r3, [r7, #24]
 8001ebc:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8001ebe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ec2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ec4:	2312      	movs	r3, #18
 8001ec6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ed0:	2304      	movs	r3, #4
 8001ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ed4:	f107 031c 	add.w	r3, r7, #28
 8001ed8:	4619      	mov	r1, r3
 8001eda:	4823      	ldr	r0, [pc, #140]	; (8001f68 <HAL_I2C_MspInit+0xe4>)
 8001edc:	f002 fad4 	bl	8004488 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ee0:	4b20      	ldr	r3, [pc, #128]	; (8001f64 <HAL_I2C_MspInit+0xe0>)
 8001ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee4:	4a1f      	ldr	r2, [pc, #124]	; (8001f64 <HAL_I2C_MspInit+0xe0>)
 8001ee6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001eea:	6413      	str	r3, [r2, #64]	; 0x40
 8001eec:	4b1d      	ldr	r3, [pc, #116]	; (8001f64 <HAL_I2C_MspInit+0xe0>)
 8001eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ef4:	617b      	str	r3, [r7, #20]
 8001ef6:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001ef8:	e02d      	b.n	8001f56 <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C3)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a1b      	ldr	r2, [pc, #108]	; (8001f6c <HAL_I2C_MspInit+0xe8>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d128      	bne.n	8001f56 <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f04:	4b17      	ldr	r3, [pc, #92]	; (8001f64 <HAL_I2C_MspInit+0xe0>)
 8001f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f08:	4a16      	ldr	r2, [pc, #88]	; (8001f64 <HAL_I2C_MspInit+0xe0>)
 8001f0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f0e:	6313      	str	r3, [r2, #48]	; 0x30
 8001f10:	4b14      	ldr	r3, [pc, #80]	; (8001f64 <HAL_I2C_MspInit+0xe0>)
 8001f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f18:	613b      	str	r3, [r7, #16]
 8001f1a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8001f1c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001f20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f22:	2312      	movs	r3, #18
 8001f24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f26:	2301      	movs	r3, #1
 8001f28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001f2e:	2304      	movs	r3, #4
 8001f30:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001f32:	f107 031c 	add.w	r3, r7, #28
 8001f36:	4619      	mov	r1, r3
 8001f38:	480d      	ldr	r0, [pc, #52]	; (8001f70 <HAL_I2C_MspInit+0xec>)
 8001f3a:	f002 faa5 	bl	8004488 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001f3e:	4b09      	ldr	r3, [pc, #36]	; (8001f64 <HAL_I2C_MspInit+0xe0>)
 8001f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f42:	4a08      	ldr	r2, [pc, #32]	; (8001f64 <HAL_I2C_MspInit+0xe0>)
 8001f44:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001f48:	6413      	str	r3, [r2, #64]	; 0x40
 8001f4a:	4b06      	ldr	r3, [pc, #24]	; (8001f64 <HAL_I2C_MspInit+0xe0>)
 8001f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f52:	60fb      	str	r3, [r7, #12]
 8001f54:	68fb      	ldr	r3, [r7, #12]
}
 8001f56:	bf00      	nop
 8001f58:	3730      	adds	r7, #48	; 0x30
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	40005400 	.word	0x40005400
 8001f64:	40023800 	.word	0x40023800
 8001f68:	40020400 	.word	0x40020400
 8001f6c:	40005c00 	.word	0x40005c00
 8001f70:	40021c00 	.word	0x40021c00

08001f74 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b08e      	sub	sp, #56	; 0x38
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]
 8001f84:	605a      	str	r2, [r3, #4]
 8001f86:	609a      	str	r2, [r3, #8]
 8001f88:	60da      	str	r2, [r3, #12]
 8001f8a:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a55      	ldr	r2, [pc, #340]	; (80020e8 <HAL_LTDC_MspInit+0x174>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	f040 80a3 	bne.w	80020de <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001f98:	4b54      	ldr	r3, [pc, #336]	; (80020ec <HAL_LTDC_MspInit+0x178>)
 8001f9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f9c:	4a53      	ldr	r2, [pc, #332]	; (80020ec <HAL_LTDC_MspInit+0x178>)
 8001f9e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001fa2:	6453      	str	r3, [r2, #68]	; 0x44
 8001fa4:	4b51      	ldr	r3, [pc, #324]	; (80020ec <HAL_LTDC_MspInit+0x178>)
 8001fa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fa8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001fac:	623b      	str	r3, [r7, #32]
 8001fae:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fb0:	4b4e      	ldr	r3, [pc, #312]	; (80020ec <HAL_LTDC_MspInit+0x178>)
 8001fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb4:	4a4d      	ldr	r2, [pc, #308]	; (80020ec <HAL_LTDC_MspInit+0x178>)
 8001fb6:	f043 0310 	orr.w	r3, r3, #16
 8001fba:	6313      	str	r3, [r2, #48]	; 0x30
 8001fbc:	4b4b      	ldr	r3, [pc, #300]	; (80020ec <HAL_LTDC_MspInit+0x178>)
 8001fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc0:	f003 0310 	and.w	r3, r3, #16
 8001fc4:	61fb      	str	r3, [r7, #28]
 8001fc6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001fc8:	4b48      	ldr	r3, [pc, #288]	; (80020ec <HAL_LTDC_MspInit+0x178>)
 8001fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fcc:	4a47      	ldr	r2, [pc, #284]	; (80020ec <HAL_LTDC_MspInit+0x178>)
 8001fce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fd2:	6313      	str	r3, [r2, #48]	; 0x30
 8001fd4:	4b45      	ldr	r3, [pc, #276]	; (80020ec <HAL_LTDC_MspInit+0x178>)
 8001fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fdc:	61bb      	str	r3, [r7, #24]
 8001fde:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8001fe0:	4b42      	ldr	r3, [pc, #264]	; (80020ec <HAL_LTDC_MspInit+0x178>)
 8001fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe4:	4a41      	ldr	r2, [pc, #260]	; (80020ec <HAL_LTDC_MspInit+0x178>)
 8001fe6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fea:	6313      	str	r3, [r2, #48]	; 0x30
 8001fec:	4b3f      	ldr	r3, [pc, #252]	; (80020ec <HAL_LTDC_MspInit+0x178>)
 8001fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ff4:	617b      	str	r3, [r7, #20]
 8001ff6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001ff8:	4b3c      	ldr	r3, [pc, #240]	; (80020ec <HAL_LTDC_MspInit+0x178>)
 8001ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffc:	4a3b      	ldr	r2, [pc, #236]	; (80020ec <HAL_LTDC_MspInit+0x178>)
 8001ffe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002002:	6313      	str	r3, [r2, #48]	; 0x30
 8002004:	4b39      	ldr	r3, [pc, #228]	; (80020ec <HAL_LTDC_MspInit+0x178>)
 8002006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002008:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800200c:	613b      	str	r3, [r7, #16]
 800200e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002010:	4b36      	ldr	r3, [pc, #216]	; (80020ec <HAL_LTDC_MspInit+0x178>)
 8002012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002014:	4a35      	ldr	r2, [pc, #212]	; (80020ec <HAL_LTDC_MspInit+0x178>)
 8002016:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800201a:	6313      	str	r3, [r2, #48]	; 0x30
 800201c:	4b33      	ldr	r3, [pc, #204]	; (80020ec <HAL_LTDC_MspInit+0x178>)
 800201e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002020:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002024:	60fb      	str	r3, [r7, #12]
 8002026:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8002028:	2310      	movs	r3, #16
 800202a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800202c:	2302      	movs	r3, #2
 800202e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002030:	2300      	movs	r3, #0
 8002032:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002034:	2300      	movs	r3, #0
 8002036:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002038:	230e      	movs	r3, #14
 800203a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 800203c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002040:	4619      	mov	r1, r3
 8002042:	482b      	ldr	r0, [pc, #172]	; (80020f0 <HAL_LTDC_MspInit+0x17c>)
 8002044:	f002 fa20 	bl	8004488 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8002048:	f64e 73ff 	movw	r3, #61439	; 0xefff
 800204c:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800204e:	2302      	movs	r3, #2
 8002050:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002052:	2300      	movs	r3, #0
 8002054:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002056:	2300      	movs	r3, #0
 8002058:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800205a:	230e      	movs	r3, #14
 800205c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800205e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002062:	4619      	mov	r1, r3
 8002064:	4823      	ldr	r0, [pc, #140]	; (80020f4 <HAL_LTDC_MspInit+0x180>)
 8002066:	f002 fa0f 	bl	8004488 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 800206a:	23f7      	movs	r3, #247	; 0xf7
 800206c:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800206e:	2302      	movs	r3, #2
 8002070:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002072:	2300      	movs	r3, #0
 8002074:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002076:	2300      	movs	r3, #0
 8002078:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800207a:	230e      	movs	r3, #14
 800207c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800207e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002082:	4619      	mov	r1, r3
 8002084:	481c      	ldr	r0, [pc, #112]	; (80020f8 <HAL_LTDC_MspInit+0x184>)
 8002086:	f002 f9ff 	bl	8004488 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 800208a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800208e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002090:	2302      	movs	r3, #2
 8002092:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002094:	2300      	movs	r3, #0
 8002096:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002098:	2300      	movs	r3, #0
 800209a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800209c:	2309      	movs	r3, #9
 800209e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 80020a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020a4:	4619      	mov	r1, r3
 80020a6:	4815      	ldr	r0, [pc, #84]	; (80020fc <HAL_LTDC_MspInit+0x188>)
 80020a8:	f002 f9ee 	bl	8004488 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 80020ac:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 80020b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b2:	2302      	movs	r3, #2
 80020b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b6:	2300      	movs	r3, #0
 80020b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ba:	2300      	movs	r3, #0
 80020bc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80020be:	230e      	movs	r3, #14
 80020c0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80020c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020c6:	4619      	mov	r1, r3
 80020c8:	480d      	ldr	r0, [pc, #52]	; (8002100 <HAL_LTDC_MspInit+0x18c>)
 80020ca:	f002 f9dd 	bl	8004488 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 80020ce:	2200      	movs	r2, #0
 80020d0:	2100      	movs	r1, #0
 80020d2:	2058      	movs	r0, #88	; 0x58
 80020d4:	f001 f958 	bl	8003388 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80020d8:	2058      	movs	r0, #88	; 0x58
 80020da:	f001 f971 	bl	80033c0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80020de:	bf00      	nop
 80020e0:	3738      	adds	r7, #56	; 0x38
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	40016800 	.word	0x40016800
 80020ec:	40023800 	.word	0x40023800
 80020f0:	40021000 	.word	0x40021000
 80020f4:	40022400 	.word	0x40022400
 80020f8:	40022800 	.word	0x40022800
 80020fc:	40021800 	.word	0x40021800
 8002100:	40022000 	.word	0x40022000

08002104 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b08c      	sub	sp, #48	; 0x30
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800210c:	f107 031c 	add.w	r3, r7, #28
 8002110:	2200      	movs	r2, #0
 8002112:	601a      	str	r2, [r3, #0]
 8002114:	605a      	str	r2, [r3, #4]
 8002116:	609a      	str	r2, [r3, #8]
 8002118:	60da      	str	r2, [r3, #12]
 800211a:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a3b      	ldr	r2, [pc, #236]	; (8002210 <HAL_QSPI_MspInit+0x10c>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d170      	bne.n	8002208 <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8002126:	4b3b      	ldr	r3, [pc, #236]	; (8002214 <HAL_QSPI_MspInit+0x110>)
 8002128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800212a:	4a3a      	ldr	r2, [pc, #232]	; (8002214 <HAL_QSPI_MspInit+0x110>)
 800212c:	f043 0302 	orr.w	r3, r3, #2
 8002130:	6393      	str	r3, [r2, #56]	; 0x38
 8002132:	4b38      	ldr	r3, [pc, #224]	; (8002214 <HAL_QSPI_MspInit+0x110>)
 8002134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002136:	f003 0302 	and.w	r3, r3, #2
 800213a:	61bb      	str	r3, [r7, #24]
 800213c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800213e:	4b35      	ldr	r3, [pc, #212]	; (8002214 <HAL_QSPI_MspInit+0x110>)
 8002140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002142:	4a34      	ldr	r2, [pc, #208]	; (8002214 <HAL_QSPI_MspInit+0x110>)
 8002144:	f043 0310 	orr.w	r3, r3, #16
 8002148:	6313      	str	r3, [r2, #48]	; 0x30
 800214a:	4b32      	ldr	r3, [pc, #200]	; (8002214 <HAL_QSPI_MspInit+0x110>)
 800214c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214e:	f003 0310 	and.w	r3, r3, #16
 8002152:	617b      	str	r3, [r7, #20]
 8002154:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002156:	4b2f      	ldr	r3, [pc, #188]	; (8002214 <HAL_QSPI_MspInit+0x110>)
 8002158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215a:	4a2e      	ldr	r2, [pc, #184]	; (8002214 <HAL_QSPI_MspInit+0x110>)
 800215c:	f043 0302 	orr.w	r3, r3, #2
 8002160:	6313      	str	r3, [r2, #48]	; 0x30
 8002162:	4b2c      	ldr	r3, [pc, #176]	; (8002214 <HAL_QSPI_MspInit+0x110>)
 8002164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002166:	f003 0302 	and.w	r3, r3, #2
 800216a:	613b      	str	r3, [r7, #16]
 800216c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800216e:	4b29      	ldr	r3, [pc, #164]	; (8002214 <HAL_QSPI_MspInit+0x110>)
 8002170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002172:	4a28      	ldr	r2, [pc, #160]	; (8002214 <HAL_QSPI_MspInit+0x110>)
 8002174:	f043 0308 	orr.w	r3, r3, #8
 8002178:	6313      	str	r3, [r2, #48]	; 0x30
 800217a:	4b26      	ldr	r3, [pc, #152]	; (8002214 <HAL_QSPI_MspInit+0x110>)
 800217c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217e:	f003 0308 	and.w	r3, r3, #8
 8002182:	60fb      	str	r3, [r7, #12]
 8002184:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8002186:	2304      	movs	r3, #4
 8002188:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800218a:	2302      	movs	r3, #2
 800218c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218e:	2300      	movs	r3, #0
 8002190:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002192:	2303      	movs	r3, #3
 8002194:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002196:	2309      	movs	r3, #9
 8002198:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 800219a:	f107 031c 	add.w	r3, r7, #28
 800219e:	4619      	mov	r1, r3
 80021a0:	481d      	ldr	r0, [pc, #116]	; (8002218 <HAL_QSPI_MspInit+0x114>)
 80021a2:	f002 f971 	bl	8004488 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 80021a6:	2340      	movs	r3, #64	; 0x40
 80021a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021aa:	2302      	movs	r3, #2
 80021ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ae:	2300      	movs	r3, #0
 80021b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021b2:	2303      	movs	r3, #3
 80021b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80021b6:	230a      	movs	r3, #10
 80021b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 80021ba:	f107 031c 	add.w	r3, r7, #28
 80021be:	4619      	mov	r1, r3
 80021c0:	4816      	ldr	r0, [pc, #88]	; (800221c <HAL_QSPI_MspInit+0x118>)
 80021c2:	f002 f961 	bl	8004488 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80021c6:	2304      	movs	r3, #4
 80021c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ca:	2302      	movs	r3, #2
 80021cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ce:	2300      	movs	r3, #0
 80021d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021d2:	2303      	movs	r3, #3
 80021d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80021d6:	2309      	movs	r3, #9
 80021d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021da:	f107 031c 	add.w	r3, r7, #28
 80021de:	4619      	mov	r1, r3
 80021e0:	480e      	ldr	r0, [pc, #56]	; (800221c <HAL_QSPI_MspInit+0x118>)
 80021e2:	f002 f951 	bl	8004488 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 80021e6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80021ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ec:	2302      	movs	r3, #2
 80021ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f0:	2300      	movs	r3, #0
 80021f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021f4:	2303      	movs	r3, #3
 80021f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80021f8:	2309      	movs	r3, #9
 80021fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021fc:	f107 031c 	add.w	r3, r7, #28
 8002200:	4619      	mov	r1, r3
 8002202:	4807      	ldr	r0, [pc, #28]	; (8002220 <HAL_QSPI_MspInit+0x11c>)
 8002204:	f002 f940 	bl	8004488 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8002208:	bf00      	nop
 800220a:	3730      	adds	r7, #48	; 0x30
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	a0001000 	.word	0xa0001000
 8002214:	40023800 	.word	0x40023800
 8002218:	40021000 	.word	0x40021000
 800221c:	40020400 	.word	0x40020400
 8002220:	40020c00 	.word	0x40020c00

08002224 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a07      	ldr	r2, [pc, #28]	; (8002250 <HAL_RTC_MspInit+0x2c>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d105      	bne.n	8002242 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002236:	4b07      	ldr	r3, [pc, #28]	; (8002254 <HAL_RTC_MspInit+0x30>)
 8002238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800223a:	4a06      	ldr	r2, [pc, #24]	; (8002254 <HAL_RTC_MspInit+0x30>)
 800223c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002240:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002242:	bf00      	nop
 8002244:	370c      	adds	r7, #12
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	40002800 	.word	0x40002800
 8002254:	40023800 	.word	0x40023800

08002258 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b08a      	sub	sp, #40	; 0x28
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002260:	f107 0314 	add.w	r3, r7, #20
 8002264:	2200      	movs	r2, #0
 8002266:	601a      	str	r2, [r3, #0]
 8002268:	605a      	str	r2, [r3, #4]
 800226a:	609a      	str	r2, [r3, #8]
 800226c:	60da      	str	r2, [r3, #12]
 800226e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a25      	ldr	r2, [pc, #148]	; (800230c <HAL_SD_MspInit+0xb4>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d144      	bne.n	8002304 <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800227a:	4b25      	ldr	r3, [pc, #148]	; (8002310 <HAL_SD_MspInit+0xb8>)
 800227c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800227e:	4a24      	ldr	r2, [pc, #144]	; (8002310 <HAL_SD_MspInit+0xb8>)
 8002280:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002284:	6453      	str	r3, [r2, #68]	; 0x44
 8002286:	4b22      	ldr	r3, [pc, #136]	; (8002310 <HAL_SD_MspInit+0xb8>)
 8002288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800228a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800228e:	613b      	str	r3, [r7, #16]
 8002290:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002292:	4b1f      	ldr	r3, [pc, #124]	; (8002310 <HAL_SD_MspInit+0xb8>)
 8002294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002296:	4a1e      	ldr	r2, [pc, #120]	; (8002310 <HAL_SD_MspInit+0xb8>)
 8002298:	f043 0304 	orr.w	r3, r3, #4
 800229c:	6313      	str	r3, [r2, #48]	; 0x30
 800229e:	4b1c      	ldr	r3, [pc, #112]	; (8002310 <HAL_SD_MspInit+0xb8>)
 80022a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a2:	f003 0304 	and.w	r3, r3, #4
 80022a6:	60fb      	str	r3, [r7, #12]
 80022a8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022aa:	4b19      	ldr	r3, [pc, #100]	; (8002310 <HAL_SD_MspInit+0xb8>)
 80022ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ae:	4a18      	ldr	r2, [pc, #96]	; (8002310 <HAL_SD_MspInit+0xb8>)
 80022b0:	f043 0308 	orr.w	r3, r3, #8
 80022b4:	6313      	str	r3, [r2, #48]	; 0x30
 80022b6:	4b16      	ldr	r3, [pc, #88]	; (8002310 <HAL_SD_MspInit+0xb8>)
 80022b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ba:	f003 0308 	and.w	r3, r3, #8
 80022be:	60bb      	str	r3, [r7, #8]
 80022c0:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 80022c2:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80022c6:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c8:	2302      	movs	r3, #2
 80022ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022cc:	2300      	movs	r3, #0
 80022ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022d0:	2303      	movs	r3, #3
 80022d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80022d4:	230c      	movs	r3, #12
 80022d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022d8:	f107 0314 	add.w	r3, r7, #20
 80022dc:	4619      	mov	r1, r3
 80022de:	480d      	ldr	r0, [pc, #52]	; (8002314 <HAL_SD_MspInit+0xbc>)
 80022e0:	f002 f8d2 	bl	8004488 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 80022e4:	2304      	movs	r3, #4
 80022e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e8:	2302      	movs	r3, #2
 80022ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ec:	2300      	movs	r3, #0
 80022ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022f0:	2303      	movs	r3, #3
 80022f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80022f4:	230c      	movs	r3, #12
 80022f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 80022f8:	f107 0314 	add.w	r3, r7, #20
 80022fc:	4619      	mov	r1, r3
 80022fe:	4806      	ldr	r0, [pc, #24]	; (8002318 <HAL_SD_MspInit+0xc0>)
 8002300:	f002 f8c2 	bl	8004488 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8002304:	bf00      	nop
 8002306:	3728      	adds	r7, #40	; 0x28
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	40012c00 	.word	0x40012c00
 8002310:	40023800 	.word	0x40023800
 8002314:	40020800 	.word	0x40020800
 8002318:	40020c00 	.word	0x40020c00

0800231c <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b08a      	sub	sp, #40	; 0x28
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002324:	f107 0314 	add.w	r3, r7, #20
 8002328:	2200      	movs	r2, #0
 800232a:	601a      	str	r2, [r3, #0]
 800232c:	605a      	str	r2, [r3, #4]
 800232e:	609a      	str	r2, [r3, #8]
 8002330:	60da      	str	r2, [r3, #12]
 8002332:	611a      	str	r2, [r3, #16]
  if(hspdifrx->Instance==SPDIFRX)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 800233c:	d127      	bne.n	800238e <HAL_SPDIFRX_MspInit+0x72>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 800233e:	4b16      	ldr	r3, [pc, #88]	; (8002398 <HAL_SPDIFRX_MspInit+0x7c>)
 8002340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002342:	4a15      	ldr	r2, [pc, #84]	; (8002398 <HAL_SPDIFRX_MspInit+0x7c>)
 8002344:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002348:	6413      	str	r3, [r2, #64]	; 0x40
 800234a:	4b13      	ldr	r3, [pc, #76]	; (8002398 <HAL_SPDIFRX_MspInit+0x7c>)
 800234c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002352:	613b      	str	r3, [r7, #16]
 8002354:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002356:	4b10      	ldr	r3, [pc, #64]	; (8002398 <HAL_SPDIFRX_MspInit+0x7c>)
 8002358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235a:	4a0f      	ldr	r2, [pc, #60]	; (8002398 <HAL_SPDIFRX_MspInit+0x7c>)
 800235c:	f043 0308 	orr.w	r3, r3, #8
 8002360:	6313      	str	r3, [r2, #48]	; 0x30
 8002362:	4b0d      	ldr	r3, [pc, #52]	; (8002398 <HAL_SPDIFRX_MspInit+0x7c>)
 8002364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002366:	f003 0308 	and.w	r3, r3, #8
 800236a:	60fb      	str	r3, [r7, #12]
 800236c:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration
    PD7     ------> SPDIFRX_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 800236e:	2380      	movs	r3, #128	; 0x80
 8002370:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002372:	2302      	movs	r3, #2
 8002374:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002376:	2300      	movs	r3, #0
 8002378:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800237a:	2300      	movs	r3, #0
 800237c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 800237e:	2308      	movs	r3, #8
 8002380:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8002382:	f107 0314 	add.w	r3, r7, #20
 8002386:	4619      	mov	r1, r3
 8002388:	4804      	ldr	r0, [pc, #16]	; (800239c <HAL_SPDIFRX_MspInit+0x80>)
 800238a:	f002 f87d 	bl	8004488 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 800238e:	bf00      	nop
 8002390:	3728      	adds	r7, #40	; 0x28
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	40023800 	.word	0x40023800
 800239c:	40020c00 	.word	0x40020c00

080023a0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b08a      	sub	sp, #40	; 0x28
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023a8:	f107 0314 	add.w	r3, r7, #20
 80023ac:	2200      	movs	r2, #0
 80023ae:	601a      	str	r2, [r3, #0]
 80023b0:	605a      	str	r2, [r3, #4]
 80023b2:	609a      	str	r2, [r3, #8]
 80023b4:	60da      	str	r2, [r3, #12]
 80023b6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a25      	ldr	r2, [pc, #148]	; (8002454 <HAL_SPI_MspInit+0xb4>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d144      	bne.n	800244c <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80023c2:	4b25      	ldr	r3, [pc, #148]	; (8002458 <HAL_SPI_MspInit+0xb8>)
 80023c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c6:	4a24      	ldr	r2, [pc, #144]	; (8002458 <HAL_SPI_MspInit+0xb8>)
 80023c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023cc:	6413      	str	r3, [r2, #64]	; 0x40
 80023ce:	4b22      	ldr	r3, [pc, #136]	; (8002458 <HAL_SPI_MspInit+0xb8>)
 80023d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023d6:	613b      	str	r3, [r7, #16]
 80023d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 80023da:	4b1f      	ldr	r3, [pc, #124]	; (8002458 <HAL_SPI_MspInit+0xb8>)
 80023dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023de:	4a1e      	ldr	r2, [pc, #120]	; (8002458 <HAL_SPI_MspInit+0xb8>)
 80023e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023e4:	6313      	str	r3, [r2, #48]	; 0x30
 80023e6:	4b1c      	ldr	r3, [pc, #112]	; (8002458 <HAL_SPI_MspInit+0xb8>)
 80023e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ee:	60fb      	str	r3, [r7, #12]
 80023f0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023f2:	4b19      	ldr	r3, [pc, #100]	; (8002458 <HAL_SPI_MspInit+0xb8>)
 80023f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f6:	4a18      	ldr	r2, [pc, #96]	; (8002458 <HAL_SPI_MspInit+0xb8>)
 80023f8:	f043 0302 	orr.w	r3, r3, #2
 80023fc:	6313      	str	r3, [r2, #48]	; 0x30
 80023fe:	4b16      	ldr	r3, [pc, #88]	; (8002458 <HAL_SPI_MspInit+0xb8>)
 8002400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002402:	f003 0302 	and.w	r3, r3, #2
 8002406:	60bb      	str	r3, [r7, #8]
 8002408:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 800240a:	2302      	movs	r3, #2
 800240c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800240e:	2302      	movs	r3, #2
 8002410:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002412:	2300      	movs	r3, #0
 8002414:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002416:	2300      	movs	r3, #0
 8002418:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800241a:	2305      	movs	r3, #5
 800241c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 800241e:	f107 0314 	add.w	r3, r7, #20
 8002422:	4619      	mov	r1, r3
 8002424:	480d      	ldr	r0, [pc, #52]	; (800245c <HAL_SPI_MspInit+0xbc>)
 8002426:	f002 f82f 	bl	8004488 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 800242a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800242e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002430:	2302      	movs	r3, #2
 8002432:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002434:	2300      	movs	r3, #0
 8002436:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002438:	2300      	movs	r3, #0
 800243a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800243c:	2305      	movs	r3, #5
 800243e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002440:	f107 0314 	add.w	r3, r7, #20
 8002444:	4619      	mov	r1, r3
 8002446:	4806      	ldr	r0, [pc, #24]	; (8002460 <HAL_SPI_MspInit+0xc0>)
 8002448:	f002 f81e 	bl	8004488 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800244c:	bf00      	nop
 800244e:	3728      	adds	r7, #40	; 0x28
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}
 8002454:	40003800 	.word	0x40003800
 8002458:	40023800 	.word	0x40023800
 800245c:	40022000 	.word	0x40022000
 8002460:	40020400 	.word	0x40020400

08002464 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002464:	b480      	push	{r7}
 8002466:	b089      	sub	sp, #36	; 0x24
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a2e      	ldr	r2, [pc, #184]	; (800252c <HAL_TIM_Base_MspInit+0xc8>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d10c      	bne.n	8002490 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002476:	4b2e      	ldr	r3, [pc, #184]	; (8002530 <HAL_TIM_Base_MspInit+0xcc>)
 8002478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800247a:	4a2d      	ldr	r2, [pc, #180]	; (8002530 <HAL_TIM_Base_MspInit+0xcc>)
 800247c:	f043 0301 	orr.w	r3, r3, #1
 8002480:	6453      	str	r3, [r2, #68]	; 0x44
 8002482:	4b2b      	ldr	r3, [pc, #172]	; (8002530 <HAL_TIM_Base_MspInit+0xcc>)
 8002484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002486:	f003 0301 	and.w	r3, r3, #1
 800248a:	61fb      	str	r3, [r7, #28]
 800248c:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800248e:	e046      	b.n	800251e <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002498:	d10c      	bne.n	80024b4 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800249a:	4b25      	ldr	r3, [pc, #148]	; (8002530 <HAL_TIM_Base_MspInit+0xcc>)
 800249c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249e:	4a24      	ldr	r2, [pc, #144]	; (8002530 <HAL_TIM_Base_MspInit+0xcc>)
 80024a0:	f043 0301 	orr.w	r3, r3, #1
 80024a4:	6413      	str	r3, [r2, #64]	; 0x40
 80024a6:	4b22      	ldr	r3, [pc, #136]	; (8002530 <HAL_TIM_Base_MspInit+0xcc>)
 80024a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024aa:	f003 0301 	and.w	r3, r3, #1
 80024ae:	61bb      	str	r3, [r7, #24]
 80024b0:	69bb      	ldr	r3, [r7, #24]
}
 80024b2:	e034      	b.n	800251e <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a1e      	ldr	r2, [pc, #120]	; (8002534 <HAL_TIM_Base_MspInit+0xd0>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d10c      	bne.n	80024d8 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80024be:	4b1c      	ldr	r3, [pc, #112]	; (8002530 <HAL_TIM_Base_MspInit+0xcc>)
 80024c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c2:	4a1b      	ldr	r2, [pc, #108]	; (8002530 <HAL_TIM_Base_MspInit+0xcc>)
 80024c4:	f043 0302 	orr.w	r3, r3, #2
 80024c8:	6413      	str	r3, [r2, #64]	; 0x40
 80024ca:	4b19      	ldr	r3, [pc, #100]	; (8002530 <HAL_TIM_Base_MspInit+0xcc>)
 80024cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ce:	f003 0302 	and.w	r3, r3, #2
 80024d2:	617b      	str	r3, [r7, #20]
 80024d4:	697b      	ldr	r3, [r7, #20]
}
 80024d6:	e022      	b.n	800251e <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a16      	ldr	r2, [pc, #88]	; (8002538 <HAL_TIM_Base_MspInit+0xd4>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d10c      	bne.n	80024fc <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80024e2:	4b13      	ldr	r3, [pc, #76]	; (8002530 <HAL_TIM_Base_MspInit+0xcc>)
 80024e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e6:	4a12      	ldr	r2, [pc, #72]	; (8002530 <HAL_TIM_Base_MspInit+0xcc>)
 80024e8:	f043 0308 	orr.w	r3, r3, #8
 80024ec:	6413      	str	r3, [r2, #64]	; 0x40
 80024ee:	4b10      	ldr	r3, [pc, #64]	; (8002530 <HAL_TIM_Base_MspInit+0xcc>)
 80024f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f2:	f003 0308 	and.w	r3, r3, #8
 80024f6:	613b      	str	r3, [r7, #16]
 80024f8:	693b      	ldr	r3, [r7, #16]
}
 80024fa:	e010      	b.n	800251e <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a0e      	ldr	r2, [pc, #56]	; (800253c <HAL_TIM_Base_MspInit+0xd8>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d10b      	bne.n	800251e <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002506:	4b0a      	ldr	r3, [pc, #40]	; (8002530 <HAL_TIM_Base_MspInit+0xcc>)
 8002508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800250a:	4a09      	ldr	r2, [pc, #36]	; (8002530 <HAL_TIM_Base_MspInit+0xcc>)
 800250c:	f043 0302 	orr.w	r3, r3, #2
 8002510:	6453      	str	r3, [r2, #68]	; 0x44
 8002512:	4b07      	ldr	r3, [pc, #28]	; (8002530 <HAL_TIM_Base_MspInit+0xcc>)
 8002514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002516:	f003 0302 	and.w	r3, r3, #2
 800251a:	60fb      	str	r3, [r7, #12]
 800251c:	68fb      	ldr	r3, [r7, #12]
}
 800251e:	bf00      	nop
 8002520:	3724      	adds	r7, #36	; 0x24
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	40010000 	.word	0x40010000
 8002530:	40023800 	.word	0x40023800
 8002534:	40000400 	.word	0x40000400
 8002538:	40000c00 	.word	0x40000c00
 800253c:	40010400 	.word	0x40010400

08002540 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002540:	b480      	push	{r7}
 8002542:	b085      	sub	sp, #20
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a0a      	ldr	r2, [pc, #40]	; (8002578 <HAL_TIM_PWM_MspInit+0x38>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d10b      	bne.n	800256a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002552:	4b0a      	ldr	r3, [pc, #40]	; (800257c <HAL_TIM_PWM_MspInit+0x3c>)
 8002554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002556:	4a09      	ldr	r2, [pc, #36]	; (800257c <HAL_TIM_PWM_MspInit+0x3c>)
 8002558:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800255c:	6413      	str	r3, [r2, #64]	; 0x40
 800255e:	4b07      	ldr	r3, [pc, #28]	; (800257c <HAL_TIM_PWM_MspInit+0x3c>)
 8002560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002566:	60fb      	str	r3, [r7, #12]
 8002568:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 800256a:	bf00      	nop
 800256c:	3714      	adds	r7, #20
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop
 8002578:	40001800 	.word	0x40001800
 800257c:	40023800 	.word	0x40023800

08002580 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b08c      	sub	sp, #48	; 0x30
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002588:	f107 031c 	add.w	r3, r7, #28
 800258c:	2200      	movs	r2, #0
 800258e:	601a      	str	r2, [r3, #0]
 8002590:	605a      	str	r2, [r3, #4]
 8002592:	609a      	str	r2, [r3, #8]
 8002594:	60da      	str	r2, [r3, #12]
 8002596:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a56      	ldr	r2, [pc, #344]	; (80026f8 <HAL_TIM_MspPostInit+0x178>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d11d      	bne.n	80025de <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025a2:	4b56      	ldr	r3, [pc, #344]	; (80026fc <HAL_TIM_MspPostInit+0x17c>)
 80025a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a6:	4a55      	ldr	r2, [pc, #340]	; (80026fc <HAL_TIM_MspPostInit+0x17c>)
 80025a8:	f043 0301 	orr.w	r3, r3, #1
 80025ac:	6313      	str	r3, [r2, #48]	; 0x30
 80025ae:	4b53      	ldr	r3, [pc, #332]	; (80026fc <HAL_TIM_MspPostInit+0x17c>)
 80025b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	61bb      	str	r3, [r7, #24]
 80025b8:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 80025ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c0:	2302      	movs	r3, #2
 80025c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c4:	2300      	movs	r3, #0
 80025c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025c8:	2300      	movs	r3, #0
 80025ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80025cc:	2301      	movs	r3, #1
 80025ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 80025d0:	f107 031c 	add.w	r3, r7, #28
 80025d4:	4619      	mov	r1, r3
 80025d6:	484a      	ldr	r0, [pc, #296]	; (8002700 <HAL_TIM_MspPostInit+0x180>)
 80025d8:	f001 ff56 	bl	8004488 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80025dc:	e087      	b.n	80026ee <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM2)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025e6:	d11d      	bne.n	8002624 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025e8:	4b44      	ldr	r3, [pc, #272]	; (80026fc <HAL_TIM_MspPostInit+0x17c>)
 80025ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ec:	4a43      	ldr	r2, [pc, #268]	; (80026fc <HAL_TIM_MspPostInit+0x17c>)
 80025ee:	f043 0301 	orr.w	r3, r3, #1
 80025f2:	6313      	str	r3, [r2, #48]	; 0x30
 80025f4:	4b41      	ldr	r3, [pc, #260]	; (80026fc <HAL_TIM_MspPostInit+0x17c>)
 80025f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f8:	f003 0301 	and.w	r3, r3, #1
 80025fc:	617b      	str	r3, [r7, #20]
 80025fe:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8002600:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002604:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002606:	2302      	movs	r3, #2
 8002608:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800260a:	2300      	movs	r3, #0
 800260c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800260e:	2300      	movs	r3, #0
 8002610:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002612:	2301      	movs	r3, #1
 8002614:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8002616:	f107 031c 	add.w	r3, r7, #28
 800261a:	4619      	mov	r1, r3
 800261c:	4838      	ldr	r0, [pc, #224]	; (8002700 <HAL_TIM_MspPostInit+0x180>)
 800261e:	f001 ff33 	bl	8004488 <HAL_GPIO_Init>
}
 8002622:	e064      	b.n	80026ee <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a36      	ldr	r2, [pc, #216]	; (8002704 <HAL_TIM_MspPostInit+0x184>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d11c      	bne.n	8002668 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800262e:	4b33      	ldr	r3, [pc, #204]	; (80026fc <HAL_TIM_MspPostInit+0x17c>)
 8002630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002632:	4a32      	ldr	r2, [pc, #200]	; (80026fc <HAL_TIM_MspPostInit+0x17c>)
 8002634:	f043 0302 	orr.w	r3, r3, #2
 8002638:	6313      	str	r3, [r2, #48]	; 0x30
 800263a:	4b30      	ldr	r3, [pc, #192]	; (80026fc <HAL_TIM_MspPostInit+0x17c>)
 800263c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263e:	f003 0302 	and.w	r3, r3, #2
 8002642:	613b      	str	r3, [r7, #16]
 8002644:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8002646:	2310      	movs	r3, #16
 8002648:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800264a:	2302      	movs	r3, #2
 800264c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800264e:	2300      	movs	r3, #0
 8002650:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002652:	2300      	movs	r3, #0
 8002654:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002656:	2302      	movs	r3, #2
 8002658:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 800265a:	f107 031c 	add.w	r3, r7, #28
 800265e:	4619      	mov	r1, r3
 8002660:	4829      	ldr	r0, [pc, #164]	; (8002708 <HAL_TIM_MspPostInit+0x188>)
 8002662:	f001 ff11 	bl	8004488 <HAL_GPIO_Init>
}
 8002666:	e042      	b.n	80026ee <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM5)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a27      	ldr	r2, [pc, #156]	; (800270c <HAL_TIM_MspPostInit+0x18c>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d11c      	bne.n	80026ac <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002672:	4b22      	ldr	r3, [pc, #136]	; (80026fc <HAL_TIM_MspPostInit+0x17c>)
 8002674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002676:	4a21      	ldr	r2, [pc, #132]	; (80026fc <HAL_TIM_MspPostInit+0x17c>)
 8002678:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800267c:	6313      	str	r3, [r2, #48]	; 0x30
 800267e:	4b1f      	ldr	r3, [pc, #124]	; (80026fc <HAL_TIM_MspPostInit+0x17c>)
 8002680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002682:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002686:	60fb      	str	r3, [r7, #12]
 8002688:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 800268a:	2301      	movs	r3, #1
 800268c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800268e:	2302      	movs	r3, #2
 8002690:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002692:	2300      	movs	r3, #0
 8002694:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002696:	2300      	movs	r3, #0
 8002698:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800269a:	2302      	movs	r3, #2
 800269c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 800269e:	f107 031c 	add.w	r3, r7, #28
 80026a2:	4619      	mov	r1, r3
 80026a4:	481a      	ldr	r0, [pc, #104]	; (8002710 <HAL_TIM_MspPostInit+0x190>)
 80026a6:	f001 feef 	bl	8004488 <HAL_GPIO_Init>
}
 80026aa:	e020      	b.n	80026ee <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM12)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a18      	ldr	r2, [pc, #96]	; (8002714 <HAL_TIM_MspPostInit+0x194>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d11b      	bne.n	80026ee <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80026b6:	4b11      	ldr	r3, [pc, #68]	; (80026fc <HAL_TIM_MspPostInit+0x17c>)
 80026b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ba:	4a10      	ldr	r2, [pc, #64]	; (80026fc <HAL_TIM_MspPostInit+0x17c>)
 80026bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026c0:	6313      	str	r3, [r2, #48]	; 0x30
 80026c2:	4b0e      	ldr	r3, [pc, #56]	; (80026fc <HAL_TIM_MspPostInit+0x17c>)
 80026c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026ca:	60bb      	str	r3, [r7, #8]
 80026cc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 80026ce:	2340      	movs	r3, #64	; 0x40
 80026d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026d2:	2302      	movs	r3, #2
 80026d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d6:	2300      	movs	r3, #0
 80026d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026da:	2300      	movs	r3, #0
 80026dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80026de:	2309      	movs	r3, #9
 80026e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 80026e2:	f107 031c 	add.w	r3, r7, #28
 80026e6:	4619      	mov	r1, r3
 80026e8:	480b      	ldr	r0, [pc, #44]	; (8002718 <HAL_TIM_MspPostInit+0x198>)
 80026ea:	f001 fecd 	bl	8004488 <HAL_GPIO_Init>
}
 80026ee:	bf00      	nop
 80026f0:	3730      	adds	r7, #48	; 0x30
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	40010000 	.word	0x40010000
 80026fc:	40023800 	.word	0x40023800
 8002700:	40020000 	.word	0x40020000
 8002704:	40000400 	.word	0x40000400
 8002708:	40020400 	.word	0x40020400
 800270c:	40000c00 	.word	0x40000c00
 8002710:	40022000 	.word	0x40022000
 8002714:	40001800 	.word	0x40001800
 8002718:	40021c00 	.word	0x40021c00

0800271c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b08c      	sub	sp, #48	; 0x30
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002724:	f107 031c 	add.w	r3, r7, #28
 8002728:	2200      	movs	r2, #0
 800272a:	601a      	str	r2, [r3, #0]
 800272c:	605a      	str	r2, [r3, #4]
 800272e:	609a      	str	r2, [r3, #8]
 8002730:	60da      	str	r2, [r3, #12]
 8002732:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a3c      	ldr	r2, [pc, #240]	; (800282c <HAL_UART_MspInit+0x110>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d145      	bne.n	80027ca <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800273e:	4b3c      	ldr	r3, [pc, #240]	; (8002830 <HAL_UART_MspInit+0x114>)
 8002740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002742:	4a3b      	ldr	r2, [pc, #236]	; (8002830 <HAL_UART_MspInit+0x114>)
 8002744:	f043 0310 	orr.w	r3, r3, #16
 8002748:	6453      	str	r3, [r2, #68]	; 0x44
 800274a:	4b39      	ldr	r3, [pc, #228]	; (8002830 <HAL_UART_MspInit+0x114>)
 800274c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800274e:	f003 0310 	and.w	r3, r3, #16
 8002752:	61bb      	str	r3, [r7, #24]
 8002754:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002756:	4b36      	ldr	r3, [pc, #216]	; (8002830 <HAL_UART_MspInit+0x114>)
 8002758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275a:	4a35      	ldr	r2, [pc, #212]	; (8002830 <HAL_UART_MspInit+0x114>)
 800275c:	f043 0302 	orr.w	r3, r3, #2
 8002760:	6313      	str	r3, [r2, #48]	; 0x30
 8002762:	4b33      	ldr	r3, [pc, #204]	; (8002830 <HAL_UART_MspInit+0x114>)
 8002764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002766:	f003 0302 	and.w	r3, r3, #2
 800276a:	617b      	str	r3, [r7, #20]
 800276c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800276e:	4b30      	ldr	r3, [pc, #192]	; (8002830 <HAL_UART_MspInit+0x114>)
 8002770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002772:	4a2f      	ldr	r2, [pc, #188]	; (8002830 <HAL_UART_MspInit+0x114>)
 8002774:	f043 0301 	orr.w	r3, r3, #1
 8002778:	6313      	str	r3, [r2, #48]	; 0x30
 800277a:	4b2d      	ldr	r3, [pc, #180]	; (8002830 <HAL_UART_MspInit+0x114>)
 800277c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277e:	f003 0301 	and.w	r3, r3, #1
 8002782:	613b      	str	r3, [r7, #16]
 8002784:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8002786:	2380      	movs	r3, #128	; 0x80
 8002788:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800278a:	2302      	movs	r3, #2
 800278c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800278e:	2300      	movs	r3, #0
 8002790:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002792:	2300      	movs	r3, #0
 8002794:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002796:	2307      	movs	r3, #7
 8002798:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800279a:	f107 031c 	add.w	r3, r7, #28
 800279e:	4619      	mov	r1, r3
 80027a0:	4824      	ldr	r0, [pc, #144]	; (8002834 <HAL_UART_MspInit+0x118>)
 80027a2:	f001 fe71 	bl	8004488 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80027a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ac:	2302      	movs	r3, #2
 80027ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b0:	2300      	movs	r3, #0
 80027b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027b4:	2300      	movs	r3, #0
 80027b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80027b8:	2307      	movs	r3, #7
 80027ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80027bc:	f107 031c 	add.w	r3, r7, #28
 80027c0:	4619      	mov	r1, r3
 80027c2:	481d      	ldr	r0, [pc, #116]	; (8002838 <HAL_UART_MspInit+0x11c>)
 80027c4:	f001 fe60 	bl	8004488 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80027c8:	e02c      	b.n	8002824 <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART6)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a1b      	ldr	r2, [pc, #108]	; (800283c <HAL_UART_MspInit+0x120>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d127      	bne.n	8002824 <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART6_CLK_ENABLE();
 80027d4:	4b16      	ldr	r3, [pc, #88]	; (8002830 <HAL_UART_MspInit+0x114>)
 80027d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d8:	4a15      	ldr	r2, [pc, #84]	; (8002830 <HAL_UART_MspInit+0x114>)
 80027da:	f043 0320 	orr.w	r3, r3, #32
 80027de:	6453      	str	r3, [r2, #68]	; 0x44
 80027e0:	4b13      	ldr	r3, [pc, #76]	; (8002830 <HAL_UART_MspInit+0x114>)
 80027e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027e4:	f003 0320 	and.w	r3, r3, #32
 80027e8:	60fb      	str	r3, [r7, #12]
 80027ea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027ec:	4b10      	ldr	r3, [pc, #64]	; (8002830 <HAL_UART_MspInit+0x114>)
 80027ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f0:	4a0f      	ldr	r2, [pc, #60]	; (8002830 <HAL_UART_MspInit+0x114>)
 80027f2:	f043 0304 	orr.w	r3, r3, #4
 80027f6:	6313      	str	r3, [r2, #48]	; 0x30
 80027f8:	4b0d      	ldr	r3, [pc, #52]	; (8002830 <HAL_UART_MspInit+0x114>)
 80027fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fc:	f003 0304 	and.w	r3, r3, #4
 8002800:	60bb      	str	r3, [r7, #8]
 8002802:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8002804:	23c0      	movs	r3, #192	; 0xc0
 8002806:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002808:	2302      	movs	r3, #2
 800280a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800280c:	2300      	movs	r3, #0
 800280e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002810:	2303      	movs	r3, #3
 8002812:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002814:	2308      	movs	r3, #8
 8002816:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002818:	f107 031c 	add.w	r3, r7, #28
 800281c:	4619      	mov	r1, r3
 800281e:	4808      	ldr	r0, [pc, #32]	; (8002840 <HAL_UART_MspInit+0x124>)
 8002820:	f001 fe32 	bl	8004488 <HAL_GPIO_Init>
}
 8002824:	bf00      	nop
 8002826:	3730      	adds	r7, #48	; 0x30
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}
 800282c:	40011000 	.word	0x40011000
 8002830:	40023800 	.word	0x40023800
 8002834:	40020400 	.word	0x40020400
 8002838:	40020000 	.word	0x40020000
 800283c:	40011400 	.word	0x40011400
 8002840:	40020800 	.word	0x40020800

08002844 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002844:	b580      	push	{r7, lr}
 8002846:	b086      	sub	sp, #24
 8002848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800284a:	1d3b      	adds	r3, r7, #4
 800284c:	2200      	movs	r2, #0
 800284e:	601a      	str	r2, [r3, #0]
 8002850:	605a      	str	r2, [r3, #4]
 8002852:	609a      	str	r2, [r3, #8]
 8002854:	60da      	str	r2, [r3, #12]
 8002856:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002858:	4b3a      	ldr	r3, [pc, #232]	; (8002944 <HAL_FMC_MspInit+0x100>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d16d      	bne.n	800293c <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8002860:	4b38      	ldr	r3, [pc, #224]	; (8002944 <HAL_FMC_MspInit+0x100>)
 8002862:	2201      	movs	r2, #1
 8002864:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002866:	4b38      	ldr	r3, [pc, #224]	; (8002948 <HAL_FMC_MspInit+0x104>)
 8002868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800286a:	4a37      	ldr	r2, [pc, #220]	; (8002948 <HAL_FMC_MspInit+0x104>)
 800286c:	f043 0301 	orr.w	r3, r3, #1
 8002870:	6393      	str	r3, [r2, #56]	; 0x38
 8002872:	4b35      	ldr	r3, [pc, #212]	; (8002948 <HAL_FMC_MspInit+0x104>)
 8002874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002876:	f003 0301 	and.w	r3, r3, #1
 800287a:	603b      	str	r3, [r7, #0]
 800287c:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 800287e:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002882:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002884:	2302      	movs	r3, #2
 8002886:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002888:	2300      	movs	r3, #0
 800288a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800288c:	2303      	movs	r3, #3
 800288e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002890:	230c      	movs	r3, #12
 8002892:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002894:	1d3b      	adds	r3, r7, #4
 8002896:	4619      	mov	r1, r3
 8002898:	482c      	ldr	r0, [pc, #176]	; (800294c <HAL_FMC_MspInit+0x108>)
 800289a:	f001 fdf5 	bl	8004488 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 800289e:	f248 1333 	movw	r3, #33075	; 0x8133
 80028a2:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028a4:	2302      	movs	r3, #2
 80028a6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a8:	2300      	movs	r3, #0
 80028aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028ac:	2303      	movs	r3, #3
 80028ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80028b0:	230c      	movs	r3, #12
 80028b2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80028b4:	1d3b      	adds	r3, r7, #4
 80028b6:	4619      	mov	r1, r3
 80028b8:	4825      	ldr	r0, [pc, #148]	; (8002950 <HAL_FMC_MspInit+0x10c>)
 80028ba:	f001 fde5 	bl	8004488 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 80028be:	f24c 7303 	movw	r3, #50947	; 0xc703
 80028c2:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028c4:	2302      	movs	r3, #2
 80028c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c8:	2300      	movs	r3, #0
 80028ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028cc:	2303      	movs	r3, #3
 80028ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80028d0:	230c      	movs	r3, #12
 80028d2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028d4:	1d3b      	adds	r3, r7, #4
 80028d6:	4619      	mov	r1, r3
 80028d8:	481e      	ldr	r0, [pc, #120]	; (8002954 <HAL_FMC_MspInit+0x110>)
 80028da:	f001 fdd5 	bl	8004488 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 80028de:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80028e2:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028e4:	2302      	movs	r3, #2
 80028e6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e8:	2300      	movs	r3, #0
 80028ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028ec:	2303      	movs	r3, #3
 80028ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80028f0:	230c      	movs	r3, #12
 80028f2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80028f4:	1d3b      	adds	r3, r7, #4
 80028f6:	4619      	mov	r1, r3
 80028f8:	4817      	ldr	r0, [pc, #92]	; (8002958 <HAL_FMC_MspInit+0x114>)
 80028fa:	f001 fdc5 	bl	8004488 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 80028fe:	2328      	movs	r3, #40	; 0x28
 8002900:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002902:	2302      	movs	r3, #2
 8002904:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002906:	2300      	movs	r3, #0
 8002908:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800290a:	2303      	movs	r3, #3
 800290c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800290e:	230c      	movs	r3, #12
 8002910:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002912:	1d3b      	adds	r3, r7, #4
 8002914:	4619      	mov	r1, r3
 8002916:	4811      	ldr	r0, [pc, #68]	; (800295c <HAL_FMC_MspInit+0x118>)
 8002918:	f001 fdb6 	bl	8004488 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 800291c:	2308      	movs	r3, #8
 800291e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002920:	2302      	movs	r3, #2
 8002922:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002924:	2300      	movs	r3, #0
 8002926:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002928:	2303      	movs	r3, #3
 800292a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800292c:	230c      	movs	r3, #12
 800292e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8002930:	1d3b      	adds	r3, r7, #4
 8002932:	4619      	mov	r1, r3
 8002934:	480a      	ldr	r0, [pc, #40]	; (8002960 <HAL_FMC_MspInit+0x11c>)
 8002936:	f001 fda7 	bl	8004488 <HAL_GPIO_Init>
 800293a:	e000      	b.n	800293e <HAL_FMC_MspInit+0xfa>
    return;
 800293c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800293e:	3718      	adds	r7, #24
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}
 8002944:	20000308 	.word	0x20000308
 8002948:	40023800 	.word	0x40023800
 800294c:	40021000 	.word	0x40021000
 8002950:	40021800 	.word	0x40021800
 8002954:	40020c00 	.word	0x40020c00
 8002958:	40021400 	.word	0x40021400
 800295c:	40021c00 	.word	0x40021c00
 8002960:	40020800 	.word	0x40020800

08002964 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800296c:	f7ff ff6a 	bl	8002844 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002970:	bf00      	nop
 8002972:	3708      	adds	r7, #8
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}

08002978 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b08a      	sub	sp, #40	; 0x28
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a2b      	ldr	r2, [pc, #172]	; (8002a34 <HAL_SAI_MspInit+0xbc>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d124      	bne.n	80029d4 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 800298a:	4b2b      	ldr	r3, [pc, #172]	; (8002a38 <HAL_SAI_MspInit+0xc0>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d10b      	bne.n	80029aa <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8002992:	4b2a      	ldr	r3, [pc, #168]	; (8002a3c <HAL_SAI_MspInit+0xc4>)
 8002994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002996:	4a29      	ldr	r2, [pc, #164]	; (8002a3c <HAL_SAI_MspInit+0xc4>)
 8002998:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800299c:	6453      	str	r3, [r2, #68]	; 0x44
 800299e:	4b27      	ldr	r3, [pc, #156]	; (8002a3c <HAL_SAI_MspInit+0xc4>)
 80029a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80029a6:	613b      	str	r3, [r7, #16]
 80029a8:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 80029aa:	4b23      	ldr	r3, [pc, #140]	; (8002a38 <HAL_SAI_MspInit+0xc0>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	3301      	adds	r3, #1
 80029b0:	4a21      	ldr	r2, [pc, #132]	; (8002a38 <HAL_SAI_MspInit+0xc0>)
 80029b2:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 80029b4:	23f0      	movs	r3, #240	; 0xf0
 80029b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029b8:	2302      	movs	r3, #2
 80029ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029bc:	2300      	movs	r3, #0
 80029be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029c0:	2300      	movs	r3, #0
 80029c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80029c4:	230a      	movs	r3, #10
 80029c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80029c8:	f107 0314 	add.w	r3, r7, #20
 80029cc:	4619      	mov	r1, r3
 80029ce:	481c      	ldr	r0, [pc, #112]	; (8002a40 <HAL_SAI_MspInit+0xc8>)
 80029d0:	f001 fd5a 	bl	8004488 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a1a      	ldr	r2, [pc, #104]	; (8002a44 <HAL_SAI_MspInit+0xcc>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d125      	bne.n	8002a2a <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 80029de:	4b16      	ldr	r3, [pc, #88]	; (8002a38 <HAL_SAI_MspInit+0xc0>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d10b      	bne.n	80029fe <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80029e6:	4b15      	ldr	r3, [pc, #84]	; (8002a3c <HAL_SAI_MspInit+0xc4>)
 80029e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ea:	4a14      	ldr	r2, [pc, #80]	; (8002a3c <HAL_SAI_MspInit+0xc4>)
 80029ec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80029f0:	6453      	str	r3, [r2, #68]	; 0x44
 80029f2:	4b12      	ldr	r3, [pc, #72]	; (8002a3c <HAL_SAI_MspInit+0xc4>)
 80029f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80029fa:	60fb      	str	r3, [r7, #12]
 80029fc:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 80029fe:	4b0e      	ldr	r3, [pc, #56]	; (8002a38 <HAL_SAI_MspInit+0xc0>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	3301      	adds	r3, #1
 8002a04:	4a0c      	ldr	r2, [pc, #48]	; (8002a38 <HAL_SAI_MspInit+0xc0>)
 8002a06:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8002a08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a0e:	2302      	movs	r3, #2
 8002a10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a12:	2300      	movs	r3, #0
 8002a14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a16:	2300      	movs	r3, #0
 8002a18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002a1a:	230a      	movs	r3, #10
 8002a1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8002a1e:	f107 0314 	add.w	r3, r7, #20
 8002a22:	4619      	mov	r1, r3
 8002a24:	4808      	ldr	r0, [pc, #32]	; (8002a48 <HAL_SAI_MspInit+0xd0>)
 8002a26:	f001 fd2f 	bl	8004488 <HAL_GPIO_Init>

    }
}
 8002a2a:	bf00      	nop
 8002a2c:	3728      	adds	r7, #40	; 0x28
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	40015c04 	.word	0x40015c04
 8002a38:	2000030c 	.word	0x2000030c
 8002a3c:	40023800 	.word	0x40023800
 8002a40:	40022000 	.word	0x40022000
 8002a44:	40015c24 	.word	0x40015c24
 8002a48:	40021800 	.word	0x40021800

08002a4c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b08c      	sub	sp, #48	; 0x30
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002a54:	2300      	movs	r3, #0
 8002a56:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	6879      	ldr	r1, [r7, #4]
 8002a60:	2036      	movs	r0, #54	; 0x36
 8002a62:	f000 fc91 	bl	8003388 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002a66:	2036      	movs	r0, #54	; 0x36
 8002a68:	f000 fcaa 	bl	80033c0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002a6c:	4b1f      	ldr	r3, [pc, #124]	; (8002aec <HAL_InitTick+0xa0>)
 8002a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a70:	4a1e      	ldr	r2, [pc, #120]	; (8002aec <HAL_InitTick+0xa0>)
 8002a72:	f043 0310 	orr.w	r3, r3, #16
 8002a76:	6413      	str	r3, [r2, #64]	; 0x40
 8002a78:	4b1c      	ldr	r3, [pc, #112]	; (8002aec <HAL_InitTick+0xa0>)
 8002a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7c:	f003 0310 	and.w	r3, r3, #16
 8002a80:	60fb      	str	r3, [r7, #12]
 8002a82:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002a84:	f107 0210 	add.w	r2, r7, #16
 8002a88:	f107 0314 	add.w	r3, r7, #20
 8002a8c:	4611      	mov	r1, r2
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f004 fdf0 	bl	8007674 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002a94:	f004 fdc6 	bl	8007624 <HAL_RCC_GetPCLK1Freq>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	005b      	lsls	r3, r3, #1
 8002a9c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aa0:	4a13      	ldr	r2, [pc, #76]	; (8002af0 <HAL_InitTick+0xa4>)
 8002aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8002aa6:	0c9b      	lsrs	r3, r3, #18
 8002aa8:	3b01      	subs	r3, #1
 8002aaa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002aac:	4b11      	ldr	r3, [pc, #68]	; (8002af4 <HAL_InitTick+0xa8>)
 8002aae:	4a12      	ldr	r2, [pc, #72]	; (8002af8 <HAL_InitTick+0xac>)
 8002ab0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8002ab2:	4b10      	ldr	r3, [pc, #64]	; (8002af4 <HAL_InitTick+0xa8>)
 8002ab4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002ab8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002aba:	4a0e      	ldr	r2, [pc, #56]	; (8002af4 <HAL_InitTick+0xa8>)
 8002abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002abe:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002ac0:	4b0c      	ldr	r3, [pc, #48]	; (8002af4 <HAL_InitTick+0xa8>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ac6:	4b0b      	ldr	r3, [pc, #44]	; (8002af4 <HAL_InitTick+0xa8>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002acc:	4809      	ldr	r0, [pc, #36]	; (8002af4 <HAL_InitTick+0xa8>)
 8002ace:	f007 f97b 	bl	8009dc8 <HAL_TIM_Base_Init>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d104      	bne.n	8002ae2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002ad8:	4806      	ldr	r0, [pc, #24]	; (8002af4 <HAL_InitTick+0xa8>)
 8002ada:	f007 f9a1 	bl	8009e20 <HAL_TIM_Base_Start_IT>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	e000      	b.n	8002ae4 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3730      	adds	r7, #48	; 0x30
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	40023800 	.word	0x40023800
 8002af0:	431bde83 	.word	0x431bde83
 8002af4:	20008c80 	.word	0x20008c80
 8002af8:	40001000 	.word	0x40001000

08002afc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002afc:	b480      	push	{r7}
 8002afe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002b00:	bf00      	nop
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr

08002b0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b0a:	b480      	push	{r7}
 8002b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b0e:	e7fe      	b.n	8002b0e <HardFault_Handler+0x4>

08002b10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b10:	b480      	push	{r7}
 8002b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b14:	e7fe      	b.n	8002b14 <MemManage_Handler+0x4>

08002b16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b16:	b480      	push	{r7}
 8002b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b1a:	e7fe      	b.n	8002b1a <BusFault_Handler+0x4>

08002b1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b20:	e7fe      	b.n	8002b20 <UsageFault_Handler+0x4>

08002b22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b22:	b480      	push	{r7}
 8002b24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b26:	bf00      	nop
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr

08002b30 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002b34:	4802      	ldr	r0, [pc, #8]	; (8002b40 <TIM6_DAC_IRQHandler+0x10>)
 8002b36:	f007 f9c8 	bl	8009eca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002b3a:	bf00      	nop
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	20008c80 	.word	0x20008c80

08002b44 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002b48:	4802      	ldr	r0, [pc, #8]	; (8002b54 <OTG_FS_IRQHandler+0x10>)
 8002b4a:	f002 f907 	bl	8004d5c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002b4e:	bf00      	nop
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	20009514 	.word	0x20009514

08002b58 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002b5c:	4802      	ldr	r0, [pc, #8]	; (8002b68 <LTDC_IRQHandler+0x10>)
 8002b5e:	f003 fd57 	bl	8006610 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8002b62:	bf00      	nop
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	20008854 	.word	0x20008854

08002b6c <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002b70:	4802      	ldr	r0, [pc, #8]	; (8002b7c <DMA2D_IRQHandler+0x10>)
 8002b72:	f000 fe7b 	bl	800386c <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8002b76:	bf00      	nop
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	20008af8 	.word	0x20008af8

08002b80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b086      	sub	sp, #24
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b88:	4a14      	ldr	r2, [pc, #80]	; (8002bdc <_sbrk+0x5c>)
 8002b8a:	4b15      	ldr	r3, [pc, #84]	; (8002be0 <_sbrk+0x60>)
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b94:	4b13      	ldr	r3, [pc, #76]	; (8002be4 <_sbrk+0x64>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d102      	bne.n	8002ba2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b9c:	4b11      	ldr	r3, [pc, #68]	; (8002be4 <_sbrk+0x64>)
 8002b9e:	4a12      	ldr	r2, [pc, #72]	; (8002be8 <_sbrk+0x68>)
 8002ba0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ba2:	4b10      	ldr	r3, [pc, #64]	; (8002be4 <_sbrk+0x64>)
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4413      	add	r3, r2
 8002baa:	693a      	ldr	r2, [r7, #16]
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d207      	bcs.n	8002bc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002bb0:	f00f fcfe 	bl	80125b0 <__errno>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	230c      	movs	r3, #12
 8002bb8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002bba:	f04f 33ff 	mov.w	r3, #4294967295
 8002bbe:	e009      	b.n	8002bd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002bc0:	4b08      	ldr	r3, [pc, #32]	; (8002be4 <_sbrk+0x64>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002bc6:	4b07      	ldr	r3, [pc, #28]	; (8002be4 <_sbrk+0x64>)
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4413      	add	r3, r2
 8002bce:	4a05      	ldr	r2, [pc, #20]	; (8002be4 <_sbrk+0x64>)
 8002bd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3718      	adds	r7, #24
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	20050000 	.word	0x20050000
 8002be0:	00000400 	.word	0x00000400
 8002be4:	20000310 	.word	0x20000310
 8002be8:	200097e0 	.word	0x200097e0

08002bec <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002bec:	b480      	push	{r7}
 8002bee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002bf0:	4b08      	ldr	r3, [pc, #32]	; (8002c14 <SystemInit+0x28>)
 8002bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bf6:	4a07      	ldr	r2, [pc, #28]	; (8002c14 <SystemInit+0x28>)
 8002bf8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002bfc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002c00:	4b04      	ldr	r3, [pc, #16]	; (8002c14 <SystemInit+0x28>)
 8002c02:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002c06:	609a      	str	r2, [r3, #8]
#endif
}
 8002c08:	bf00      	nop
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop
 8002c14:	e000ed00 	.word	0xe000ed00

08002c18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002c18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c50 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002c1c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002c1e:	e003      	b.n	8002c28 <LoopCopyDataInit>

08002c20 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002c20:	4b0c      	ldr	r3, [pc, #48]	; (8002c54 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002c22:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002c24:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002c26:	3104      	adds	r1, #4

08002c28 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002c28:	480b      	ldr	r0, [pc, #44]	; (8002c58 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002c2a:	4b0c      	ldr	r3, [pc, #48]	; (8002c5c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002c2c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002c2e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002c30:	d3f6      	bcc.n	8002c20 <CopyDataInit>
  ldr  r2, =_sbss
 8002c32:	4a0b      	ldr	r2, [pc, #44]	; (8002c60 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002c34:	e002      	b.n	8002c3c <LoopFillZerobss>

08002c36 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002c36:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002c38:	f842 3b04 	str.w	r3, [r2], #4

08002c3c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002c3c:	4b09      	ldr	r3, [pc, #36]	; (8002c64 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002c3e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002c40:	d3f9      	bcc.n	8002c36 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002c42:	f7ff ffd3 	bl	8002bec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c46:	f00f fcb9 	bl	80125bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c4a:	f7fd fc95 	bl	8000578 <main>
  bx  lr    
 8002c4e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002c50:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8002c54:	08012890 	.word	0x08012890
  ldr  r0, =_sdata
 8002c58:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002c5c:	20000094 	.word	0x20000094
  ldr  r2, =_sbss
 8002c60:	20000094 	.word	0x20000094
  ldr  r3, = _ebss
 8002c64:	200097dc 	.word	0x200097dc

08002c68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c68:	e7fe      	b.n	8002c68 <ADC_IRQHandler>

08002c6a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c6a:	b580      	push	{r7, lr}
 8002c6c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c6e:	2003      	movs	r0, #3
 8002c70:	f000 fb7f 	bl	8003372 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c74:	2000      	movs	r0, #0
 8002c76:	f7ff fee9 	bl	8002a4c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002c7a:	f7fe fee5 	bl	8001a48 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002c7e:	2300      	movs	r3, #0
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	bd80      	pop	{r7, pc}

08002c84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c84:	b480      	push	{r7}
 8002c86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c88:	4b06      	ldr	r3, [pc, #24]	; (8002ca4 <HAL_IncTick+0x20>)
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	4b06      	ldr	r3, [pc, #24]	; (8002ca8 <HAL_IncTick+0x24>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4413      	add	r3, r2
 8002c94:	4a04      	ldr	r2, [pc, #16]	; (8002ca8 <HAL_IncTick+0x24>)
 8002c96:	6013      	str	r3, [r2, #0]
}
 8002c98:	bf00      	nop
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop
 8002ca4:	20000008 	.word	0x20000008
 8002ca8:	20008cc0 	.word	0x20008cc0

08002cac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cac:	b480      	push	{r7}
 8002cae:	af00      	add	r7, sp, #0
  return uwTick;
 8002cb0:	4b03      	ldr	r3, [pc, #12]	; (8002cc0 <HAL_GetTick+0x14>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr
 8002cbe:	bf00      	nop
 8002cc0:	20008cc0 	.word	0x20008cc0

08002cc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b084      	sub	sp, #16
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ccc:	f7ff ffee 	bl	8002cac <HAL_GetTick>
 8002cd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cdc:	d005      	beq.n	8002cea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002cde:	4b09      	ldr	r3, [pc, #36]	; (8002d04 <HAL_Delay+0x40>)
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	4413      	add	r3, r2
 8002ce8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002cea:	bf00      	nop
 8002cec:	f7ff ffde 	bl	8002cac <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	68fa      	ldr	r2, [r7, #12]
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d8f7      	bhi.n	8002cec <HAL_Delay+0x28>
  {
  }
}
 8002cfc:	bf00      	nop
 8002cfe:	3710      	adds	r7, #16
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	20000008 	.word	0x20000008

08002d08 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d10:	2300      	movs	r3, #0
 8002d12:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d101      	bne.n	8002d1e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e031      	b.n	8002d82 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d109      	bne.n	8002d3a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f7fe feb6 	bl	8001a98 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3e:	f003 0310 	and.w	r3, r3, #16
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d116      	bne.n	8002d74 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d4a:	4b10      	ldr	r3, [pc, #64]	; (8002d8c <HAL_ADC_Init+0x84>)
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	f043 0202 	orr.w	r2, r3, #2
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f000 f964 	bl	8003024 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d66:	f023 0303 	bic.w	r3, r3, #3
 8002d6a:	f043 0201 	orr.w	r2, r3, #1
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	641a      	str	r2, [r3, #64]	; 0x40
 8002d72:	e001      	b.n	8002d78 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002d80:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3710      	adds	r7, #16
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	ffffeefd 	.word	0xffffeefd

08002d90 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b085      	sub	sp, #20
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d101      	bne.n	8002dac <HAL_ADC_ConfigChannel+0x1c>
 8002da8:	2302      	movs	r3, #2
 8002daa:	e12a      	b.n	8003002 <HAL_ADC_ConfigChannel+0x272>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2201      	movs	r2, #1
 8002db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	2b09      	cmp	r3, #9
 8002dba:	d93a      	bls.n	8002e32 <HAL_ADC_ConfigChannel+0xa2>
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002dc4:	d035      	beq.n	8002e32 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	68d9      	ldr	r1, [r3, #12]
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	005b      	lsls	r3, r3, #1
 8002dd8:	4413      	add	r3, r2
 8002dda:	3b1e      	subs	r3, #30
 8002ddc:	2207      	movs	r2, #7
 8002dde:	fa02 f303 	lsl.w	r3, r2, r3
 8002de2:	43da      	mvns	r2, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	400a      	ands	r2, r1
 8002dea:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a87      	ldr	r2, [pc, #540]	; (8003010 <HAL_ADC_ConfigChannel+0x280>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d10a      	bne.n	8002e0c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	68d9      	ldr	r1, [r3, #12]
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	061a      	lsls	r2, r3, #24
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	430a      	orrs	r2, r1
 8002e08:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e0a:	e035      	b.n	8002e78 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	68d9      	ldr	r1, [r3, #12]
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	689a      	ldr	r2, [r3, #8]
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	4603      	mov	r3, r0
 8002e20:	005b      	lsls	r3, r3, #1
 8002e22:	4403      	add	r3, r0
 8002e24:	3b1e      	subs	r3, #30
 8002e26:	409a      	lsls	r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	430a      	orrs	r2, r1
 8002e2e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e30:	e022      	b.n	8002e78 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	6919      	ldr	r1, [r3, #16]
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	461a      	mov	r2, r3
 8002e40:	4613      	mov	r3, r2
 8002e42:	005b      	lsls	r3, r3, #1
 8002e44:	4413      	add	r3, r2
 8002e46:	2207      	movs	r2, #7
 8002e48:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4c:	43da      	mvns	r2, r3
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	400a      	ands	r2, r1
 8002e54:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	6919      	ldr	r1, [r3, #16]
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	689a      	ldr	r2, [r3, #8]
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	4618      	mov	r0, r3
 8002e68:	4603      	mov	r3, r0
 8002e6a:	005b      	lsls	r3, r3, #1
 8002e6c:	4403      	add	r3, r0
 8002e6e:	409a      	lsls	r2, r3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	430a      	orrs	r2, r1
 8002e76:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	2b06      	cmp	r3, #6
 8002e7e:	d824      	bhi.n	8002eca <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	685a      	ldr	r2, [r3, #4]
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	4413      	add	r3, r2
 8002e90:	3b05      	subs	r3, #5
 8002e92:	221f      	movs	r2, #31
 8002e94:	fa02 f303 	lsl.w	r3, r2, r3
 8002e98:	43da      	mvns	r2, r3
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	400a      	ands	r2, r1
 8002ea0:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	4618      	mov	r0, r3
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	685a      	ldr	r2, [r3, #4]
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	4413      	add	r3, r2
 8002eba:	3b05      	subs	r3, #5
 8002ebc:	fa00 f203 	lsl.w	r2, r0, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	430a      	orrs	r2, r1
 8002ec6:	635a      	str	r2, [r3, #52]	; 0x34
 8002ec8:	e04c      	b.n	8002f64 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	2b0c      	cmp	r3, #12
 8002ed0:	d824      	bhi.n	8002f1c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	685a      	ldr	r2, [r3, #4]
 8002edc:	4613      	mov	r3, r2
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	4413      	add	r3, r2
 8002ee2:	3b23      	subs	r3, #35	; 0x23
 8002ee4:	221f      	movs	r2, #31
 8002ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eea:	43da      	mvns	r2, r3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	400a      	ands	r2, r1
 8002ef2:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	4618      	mov	r0, r3
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	685a      	ldr	r2, [r3, #4]
 8002f06:	4613      	mov	r3, r2
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	4413      	add	r3, r2
 8002f0c:	3b23      	subs	r3, #35	; 0x23
 8002f0e:	fa00 f203 	lsl.w	r2, r0, r3
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	430a      	orrs	r2, r1
 8002f18:	631a      	str	r2, [r3, #48]	; 0x30
 8002f1a:	e023      	b.n	8002f64 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	685a      	ldr	r2, [r3, #4]
 8002f26:	4613      	mov	r3, r2
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	4413      	add	r3, r2
 8002f2c:	3b41      	subs	r3, #65	; 0x41
 8002f2e:	221f      	movs	r2, #31
 8002f30:	fa02 f303 	lsl.w	r3, r2, r3
 8002f34:	43da      	mvns	r2, r3
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	400a      	ands	r2, r1
 8002f3c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	685a      	ldr	r2, [r3, #4]
 8002f50:	4613      	mov	r3, r2
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	4413      	add	r3, r2
 8002f56:	3b41      	subs	r3, #65	; 0x41
 8002f58:	fa00 f203 	lsl.w	r2, r0, r3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	430a      	orrs	r2, r1
 8002f62:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a2a      	ldr	r2, [pc, #168]	; (8003014 <HAL_ADC_ConfigChannel+0x284>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d10a      	bne.n	8002f84 <HAL_ADC_ConfigChannel+0x1f4>
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f76:	d105      	bne.n	8002f84 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002f78:	4b27      	ldr	r3, [pc, #156]	; (8003018 <HAL_ADC_ConfigChannel+0x288>)
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	4a26      	ldr	r2, [pc, #152]	; (8003018 <HAL_ADC_ConfigChannel+0x288>)
 8002f7e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002f82:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a22      	ldr	r2, [pc, #136]	; (8003014 <HAL_ADC_ConfigChannel+0x284>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d109      	bne.n	8002fa2 <HAL_ADC_ConfigChannel+0x212>
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	2b12      	cmp	r3, #18
 8002f94:	d105      	bne.n	8002fa2 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002f96:	4b20      	ldr	r3, [pc, #128]	; (8003018 <HAL_ADC_ConfigChannel+0x288>)
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	4a1f      	ldr	r2, [pc, #124]	; (8003018 <HAL_ADC_ConfigChannel+0x288>)
 8002f9c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002fa0:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a1b      	ldr	r2, [pc, #108]	; (8003014 <HAL_ADC_ConfigChannel+0x284>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d125      	bne.n	8002ff8 <HAL_ADC_ConfigChannel+0x268>
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a17      	ldr	r2, [pc, #92]	; (8003010 <HAL_ADC_ConfigChannel+0x280>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d003      	beq.n	8002fbe <HAL_ADC_ConfigChannel+0x22e>
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2b11      	cmp	r3, #17
 8002fbc:	d11c      	bne.n	8002ff8 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002fbe:	4b16      	ldr	r3, [pc, #88]	; (8003018 <HAL_ADC_ConfigChannel+0x288>)
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	4a15      	ldr	r2, [pc, #84]	; (8003018 <HAL_ADC_ConfigChannel+0x288>)
 8002fc4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002fc8:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a10      	ldr	r2, [pc, #64]	; (8003010 <HAL_ADC_ConfigChannel+0x280>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d111      	bne.n	8002ff8 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002fd4:	4b11      	ldr	r3, [pc, #68]	; (800301c <HAL_ADC_ConfigChannel+0x28c>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a11      	ldr	r2, [pc, #68]	; (8003020 <HAL_ADC_ConfigChannel+0x290>)
 8002fda:	fba2 2303 	umull	r2, r3, r2, r3
 8002fde:	0c9a      	lsrs	r2, r3, #18
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	4413      	add	r3, r2
 8002fe6:	005b      	lsls	r3, r3, #1
 8002fe8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002fea:	e002      	b.n	8002ff2 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	3b01      	subs	r3, #1
 8002ff0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d1f9      	bne.n	8002fec <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003000:	2300      	movs	r3, #0
}
 8003002:	4618      	mov	r0, r3
 8003004:	3714      	adds	r7, #20
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr
 800300e:	bf00      	nop
 8003010:	10000012 	.word	0x10000012
 8003014:	40012000 	.word	0x40012000
 8003018:	40012300 	.word	0x40012300
 800301c:	20000000 	.word	0x20000000
 8003020:	431bde83 	.word	0x431bde83

08003024 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800302c:	4b78      	ldr	r3, [pc, #480]	; (8003210 <ADC_Init+0x1ec>)
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	4a77      	ldr	r2, [pc, #476]	; (8003210 <ADC_Init+0x1ec>)
 8003032:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003036:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003038:	4b75      	ldr	r3, [pc, #468]	; (8003210 <ADC_Init+0x1ec>)
 800303a:	685a      	ldr	r2, [r3, #4]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	4973      	ldr	r1, [pc, #460]	; (8003210 <ADC_Init+0x1ec>)
 8003042:	4313      	orrs	r3, r2
 8003044:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	685a      	ldr	r2, [r3, #4]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003054:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	6859      	ldr	r1, [r3, #4]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	691b      	ldr	r3, [r3, #16]
 8003060:	021a      	lsls	r2, r3, #8
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	430a      	orrs	r2, r1
 8003068:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	685a      	ldr	r2, [r3, #4]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003078:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	6859      	ldr	r1, [r3, #4]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	689a      	ldr	r2, [r3, #8]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	430a      	orrs	r2, r1
 800308a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	689a      	ldr	r2, [r3, #8]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800309a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	6899      	ldr	r1, [r3, #8]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	68da      	ldr	r2, [r3, #12]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	430a      	orrs	r2, r1
 80030ac:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b2:	4a58      	ldr	r2, [pc, #352]	; (8003214 <ADC_Init+0x1f0>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d022      	beq.n	80030fe <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	689a      	ldr	r2, [r3, #8]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80030c6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	6899      	ldr	r1, [r3, #8]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	430a      	orrs	r2, r1
 80030d8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	689a      	ldr	r2, [r3, #8]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80030e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	6899      	ldr	r1, [r3, #8]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	430a      	orrs	r2, r1
 80030fa:	609a      	str	r2, [r3, #8]
 80030fc:	e00f      	b.n	800311e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	689a      	ldr	r2, [r3, #8]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800310c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	689a      	ldr	r2, [r3, #8]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800311c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	689a      	ldr	r2, [r3, #8]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f022 0202 	bic.w	r2, r2, #2
 800312c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	6899      	ldr	r1, [r3, #8]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	699b      	ldr	r3, [r3, #24]
 8003138:	005a      	lsls	r2, r3, #1
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	430a      	orrs	r2, r1
 8003140:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d01b      	beq.n	8003184 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	685a      	ldr	r2, [r3, #4]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800315a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	685a      	ldr	r2, [r3, #4]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800316a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	6859      	ldr	r1, [r3, #4]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003176:	3b01      	subs	r3, #1
 8003178:	035a      	lsls	r2, r3, #13
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	430a      	orrs	r2, r1
 8003180:	605a      	str	r2, [r3, #4]
 8003182:	e007      	b.n	8003194 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	685a      	ldr	r2, [r3, #4]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003192:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80031a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	69db      	ldr	r3, [r3, #28]
 80031ae:	3b01      	subs	r3, #1
 80031b0:	051a      	lsls	r2, r3, #20
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	430a      	orrs	r2, r1
 80031b8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	689a      	ldr	r2, [r3, #8]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80031c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	6899      	ldr	r1, [r3, #8]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80031d6:	025a      	lsls	r2, r3, #9
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	430a      	orrs	r2, r1
 80031de:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	689a      	ldr	r2, [r3, #8]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	6899      	ldr	r1, [r3, #8]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	695b      	ldr	r3, [r3, #20]
 80031fa:	029a      	lsls	r2, r3, #10
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	430a      	orrs	r2, r1
 8003202:	609a      	str	r2, [r3, #8]
}
 8003204:	bf00      	nop
 8003206:	370c      	adds	r7, #12
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr
 8003210:	40012300 	.word	0x40012300
 8003214:	0f000001 	.word	0x0f000001

08003218 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003218:	b480      	push	{r7}
 800321a:	b085      	sub	sp, #20
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f003 0307 	and.w	r3, r3, #7
 8003226:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003228:	4b0b      	ldr	r3, [pc, #44]	; (8003258 <__NVIC_SetPriorityGrouping+0x40>)
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800322e:	68ba      	ldr	r2, [r7, #8]
 8003230:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003234:	4013      	ands	r3, r2
 8003236:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003240:	4b06      	ldr	r3, [pc, #24]	; (800325c <__NVIC_SetPriorityGrouping+0x44>)
 8003242:	4313      	orrs	r3, r2
 8003244:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003246:	4a04      	ldr	r2, [pc, #16]	; (8003258 <__NVIC_SetPriorityGrouping+0x40>)
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	60d3      	str	r3, [r2, #12]
}
 800324c:	bf00      	nop
 800324e:	3714      	adds	r7, #20
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr
 8003258:	e000ed00 	.word	0xe000ed00
 800325c:	05fa0000 	.word	0x05fa0000

08003260 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003260:	b480      	push	{r7}
 8003262:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003264:	4b04      	ldr	r3, [pc, #16]	; (8003278 <__NVIC_GetPriorityGrouping+0x18>)
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	0a1b      	lsrs	r3, r3, #8
 800326a:	f003 0307 	and.w	r3, r3, #7
}
 800326e:	4618      	mov	r0, r3
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr
 8003278:	e000ed00 	.word	0xe000ed00

0800327c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	4603      	mov	r3, r0
 8003284:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800328a:	2b00      	cmp	r3, #0
 800328c:	db0b      	blt.n	80032a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800328e:	79fb      	ldrb	r3, [r7, #7]
 8003290:	f003 021f 	and.w	r2, r3, #31
 8003294:	4907      	ldr	r1, [pc, #28]	; (80032b4 <__NVIC_EnableIRQ+0x38>)
 8003296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800329a:	095b      	lsrs	r3, r3, #5
 800329c:	2001      	movs	r0, #1
 800329e:	fa00 f202 	lsl.w	r2, r0, r2
 80032a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80032a6:	bf00      	nop
 80032a8:	370c      	adds	r7, #12
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr
 80032b2:	bf00      	nop
 80032b4:	e000e100 	.word	0xe000e100

080032b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
 80032be:	4603      	mov	r3, r0
 80032c0:	6039      	str	r1, [r7, #0]
 80032c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	db0a      	blt.n	80032e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	b2da      	uxtb	r2, r3
 80032d0:	490c      	ldr	r1, [pc, #48]	; (8003304 <__NVIC_SetPriority+0x4c>)
 80032d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032d6:	0112      	lsls	r2, r2, #4
 80032d8:	b2d2      	uxtb	r2, r2
 80032da:	440b      	add	r3, r1
 80032dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032e0:	e00a      	b.n	80032f8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	b2da      	uxtb	r2, r3
 80032e6:	4908      	ldr	r1, [pc, #32]	; (8003308 <__NVIC_SetPriority+0x50>)
 80032e8:	79fb      	ldrb	r3, [r7, #7]
 80032ea:	f003 030f 	and.w	r3, r3, #15
 80032ee:	3b04      	subs	r3, #4
 80032f0:	0112      	lsls	r2, r2, #4
 80032f2:	b2d2      	uxtb	r2, r2
 80032f4:	440b      	add	r3, r1
 80032f6:	761a      	strb	r2, [r3, #24]
}
 80032f8:	bf00      	nop
 80032fa:	370c      	adds	r7, #12
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr
 8003304:	e000e100 	.word	0xe000e100
 8003308:	e000ed00 	.word	0xe000ed00

0800330c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800330c:	b480      	push	{r7}
 800330e:	b089      	sub	sp, #36	; 0x24
 8003310:	af00      	add	r7, sp, #0
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	60b9      	str	r1, [r7, #8]
 8003316:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f003 0307 	and.w	r3, r3, #7
 800331e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	f1c3 0307 	rsb	r3, r3, #7
 8003326:	2b04      	cmp	r3, #4
 8003328:	bf28      	it	cs
 800332a:	2304      	movcs	r3, #4
 800332c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	3304      	adds	r3, #4
 8003332:	2b06      	cmp	r3, #6
 8003334:	d902      	bls.n	800333c <NVIC_EncodePriority+0x30>
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	3b03      	subs	r3, #3
 800333a:	e000      	b.n	800333e <NVIC_EncodePriority+0x32>
 800333c:	2300      	movs	r3, #0
 800333e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003340:	f04f 32ff 	mov.w	r2, #4294967295
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	fa02 f303 	lsl.w	r3, r2, r3
 800334a:	43da      	mvns	r2, r3
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	401a      	ands	r2, r3
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003354:	f04f 31ff 	mov.w	r1, #4294967295
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	fa01 f303 	lsl.w	r3, r1, r3
 800335e:	43d9      	mvns	r1, r3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003364:	4313      	orrs	r3, r2
         );
}
 8003366:	4618      	mov	r0, r3
 8003368:	3724      	adds	r7, #36	; 0x24
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr

08003372 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003372:	b580      	push	{r7, lr}
 8003374:	b082      	sub	sp, #8
 8003376:	af00      	add	r7, sp, #0
 8003378:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f7ff ff4c 	bl	8003218 <__NVIC_SetPriorityGrouping>
}
 8003380:	bf00      	nop
 8003382:	3708      	adds	r7, #8
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}

08003388 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003388:	b580      	push	{r7, lr}
 800338a:	b086      	sub	sp, #24
 800338c:	af00      	add	r7, sp, #0
 800338e:	4603      	mov	r3, r0
 8003390:	60b9      	str	r1, [r7, #8]
 8003392:	607a      	str	r2, [r7, #4]
 8003394:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003396:	2300      	movs	r3, #0
 8003398:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800339a:	f7ff ff61 	bl	8003260 <__NVIC_GetPriorityGrouping>
 800339e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	68b9      	ldr	r1, [r7, #8]
 80033a4:	6978      	ldr	r0, [r7, #20]
 80033a6:	f7ff ffb1 	bl	800330c <NVIC_EncodePriority>
 80033aa:	4602      	mov	r2, r0
 80033ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033b0:	4611      	mov	r1, r2
 80033b2:	4618      	mov	r0, r3
 80033b4:	f7ff ff80 	bl	80032b8 <__NVIC_SetPriority>
}
 80033b8:	bf00      	nop
 80033ba:	3718      	adds	r7, #24
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}

080033c0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b082      	sub	sp, #8
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	4603      	mov	r3, r0
 80033c8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ce:	4618      	mov	r0, r3
 80033d0:	f7ff ff54 	bl	800327c <__NVIC_EnableIRQ>
}
 80033d4:	bf00      	nop
 80033d6:	3708      	adds	r7, #8
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}

080033dc <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b082      	sub	sp, #8
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d101      	bne.n	80033ee <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e054      	b.n	8003498 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	7f5b      	ldrb	r3, [r3, #29]
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d105      	bne.n	8003404 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f7fe fba4 	bl	8001b4c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2202      	movs	r2, #2
 8003408:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	791b      	ldrb	r3, [r3, #4]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d10c      	bne.n	800342c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a22      	ldr	r2, [pc, #136]	; (80034a0 <HAL_CRC_Init+0xc4>)
 8003418:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	689a      	ldr	r2, [r3, #8]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f022 0218 	bic.w	r2, r2, #24
 8003428:	609a      	str	r2, [r3, #8]
 800342a:	e00c      	b.n	8003446 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6899      	ldr	r1, [r3, #8]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	461a      	mov	r2, r3
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f000 f834 	bl	80034a4 <HAL_CRCEx_Polynomial_Set>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d001      	beq.n	8003446 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e028      	b.n	8003498 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	795b      	ldrb	r3, [r3, #5]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d105      	bne.n	800345a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f04f 32ff 	mov.w	r2, #4294967295
 8003456:	611a      	str	r2, [r3, #16]
 8003458:	e004      	b.n	8003464 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	6912      	ldr	r2, [r2, #16]
 8003462:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	695a      	ldr	r2, [r3, #20]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	430a      	orrs	r2, r1
 8003478:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	699a      	ldr	r2, [r3, #24]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	430a      	orrs	r2, r1
 800348e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2201      	movs	r2, #1
 8003494:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8003496:	2300      	movs	r3, #0
}
 8003498:	4618      	mov	r0, r3
 800349a:	3708      	adds	r7, #8
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	04c11db7 	.word	0x04c11db7

080034a4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b087      	sub	sp, #28
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	60f8      	str	r0, [r7, #12]
 80034ac:	60b9      	str	r1, [r7, #8]
 80034ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034b0:	2300      	movs	r3, #0
 80034b2:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80034b4:	231f      	movs	r3, #31
 80034b6:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80034b8:	bf00      	nop
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	1e5a      	subs	r2, r3, #1
 80034be:	613a      	str	r2, [r7, #16]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d009      	beq.n	80034d8 <HAL_CRCEx_Polynomial_Set+0x34>
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	f003 031f 	and.w	r3, r3, #31
 80034ca:	68ba      	ldr	r2, [r7, #8]
 80034cc:	fa22 f303 	lsr.w	r3, r2, r3
 80034d0:	f003 0301 	and.w	r3, r3, #1
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d0f0      	beq.n	80034ba <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2b18      	cmp	r3, #24
 80034dc:	d846      	bhi.n	800356c <HAL_CRCEx_Polynomial_Set+0xc8>
 80034de:	a201      	add	r2, pc, #4	; (adr r2, 80034e4 <HAL_CRCEx_Polynomial_Set+0x40>)
 80034e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034e4:	08003573 	.word	0x08003573
 80034e8:	0800356d 	.word	0x0800356d
 80034ec:	0800356d 	.word	0x0800356d
 80034f0:	0800356d 	.word	0x0800356d
 80034f4:	0800356d 	.word	0x0800356d
 80034f8:	0800356d 	.word	0x0800356d
 80034fc:	0800356d 	.word	0x0800356d
 8003500:	0800356d 	.word	0x0800356d
 8003504:	08003561 	.word	0x08003561
 8003508:	0800356d 	.word	0x0800356d
 800350c:	0800356d 	.word	0x0800356d
 8003510:	0800356d 	.word	0x0800356d
 8003514:	0800356d 	.word	0x0800356d
 8003518:	0800356d 	.word	0x0800356d
 800351c:	0800356d 	.word	0x0800356d
 8003520:	0800356d 	.word	0x0800356d
 8003524:	08003555 	.word	0x08003555
 8003528:	0800356d 	.word	0x0800356d
 800352c:	0800356d 	.word	0x0800356d
 8003530:	0800356d 	.word	0x0800356d
 8003534:	0800356d 	.word	0x0800356d
 8003538:	0800356d 	.word	0x0800356d
 800353c:	0800356d 	.word	0x0800356d
 8003540:	0800356d 	.word	0x0800356d
 8003544:	08003549 	.word	0x08003549
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	2b06      	cmp	r3, #6
 800354c:	d913      	bls.n	8003576 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003552:	e010      	b.n	8003576 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	2b07      	cmp	r3, #7
 8003558:	d90f      	bls.n	800357a <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800355e:	e00c      	b.n	800357a <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	2b0f      	cmp	r3, #15
 8003564:	d90b      	bls.n	800357e <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800356a:	e008      	b.n	800357e <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	75fb      	strb	r3, [r7, #23]
      break;
 8003570:	e006      	b.n	8003580 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003572:	bf00      	nop
 8003574:	e004      	b.n	8003580 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003576:	bf00      	nop
 8003578:	e002      	b.n	8003580 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800357a:	bf00      	nop
 800357c:	e000      	b.n	8003580 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800357e:	bf00      	nop
  }
  if (status == HAL_OK)
 8003580:	7dfb      	ldrb	r3, [r7, #23]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d10d      	bne.n	80035a2 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	68ba      	ldr	r2, [r7, #8]
 800358c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	f023 0118 	bic.w	r1, r3, #24
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	687a      	ldr	r2, [r7, #4]
 800359e:	430a      	orrs	r2, r1
 80035a0:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80035a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	371c      	adds	r7, #28
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr

080035b0 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b082      	sub	sp, #8
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d101      	bne.n	80035c2 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e069      	b.n	8003696 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d102      	bne.n	80035d4 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f7fe fadc 	bl	8001b8c <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2202      	movs	r2, #2
 80035d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	699b      	ldr	r3, [r3, #24]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d002      	beq.n	80035ea <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2200      	movs	r2, #0
 80035e8:	625a      	str	r2, [r3, #36]	; 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	6819      	ldr	r1, [r3, #0]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	4b2a      	ldr	r3, [pc, #168]	; (80036a0 <HAL_DCMI_Init+0xf0>)
 80035f6:	400b      	ands	r3, r1
 80035f8:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	6819      	ldr	r1, [r3, #0]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	685a      	ldr	r2, [r3, #4]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	695b      	ldr	r3, [r3, #20]
 8003608:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800360e:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	691b      	ldr	r3, [r3, #16]
 8003614:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800361a:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	699b      	ldr	r3, [r3, #24]
 8003620:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8003626:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362c:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8003632:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003638:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 800363e:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	430a      	orrs	r2, r1
 8003646:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	2b10      	cmp	r3, #16
 800364e:	d112      	bne.n	8003676 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	7f1b      	ldrb	r3, [r3, #28]
 8003654:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	7f5b      	ldrb	r3, [r3, #29]
 800365a:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800365c:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	7f9b      	ldrb	r3, [r3, #30]
 8003662:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8003664:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	7fdb      	ldrb	r3, [r3, #31]
 800366c:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8003672:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8003674:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	68da      	ldr	r2, [r3, #12]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f042 021e 	orr.w	r2, r2, #30
 8003684:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003694:	2300      	movs	r3, #0
}
 8003696:	4618      	mov	r0, r3
 8003698:	3708      	adds	r7, #8
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	ffe0f007 	.word	0xffe0f007

080036a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b086      	sub	sp, #24
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	60f8      	str	r0, [r7, #12]
 80036ac:	60b9      	str	r1, [r7, #8]
 80036ae:	607a      	str	r2, [r7, #4]
 80036b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036b2:	2300      	movs	r3, #0
 80036b4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ba:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d101      	bne.n	80036ca <HAL_DMA_Start_IT+0x26>
 80036c6:	2302      	movs	r3, #2
 80036c8:	e048      	b.n	800375c <HAL_DMA_Start_IT+0xb8>
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2201      	movs	r2, #1
 80036ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d137      	bne.n	800374e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2202      	movs	r2, #2
 80036e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2200      	movs	r2, #0
 80036ea:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	68b9      	ldr	r1, [r7, #8]
 80036f2:	68f8      	ldr	r0, [r7, #12]
 80036f4:	f000 f842 	bl	800377c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036fc:	223f      	movs	r2, #63	; 0x3f
 80036fe:	409a      	lsls	r2, r3
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f042 0216 	orr.w	r2, r2, #22
 8003712:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	695a      	ldr	r2, [r3, #20]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003722:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003728:	2b00      	cmp	r3, #0
 800372a:	d007      	beq.n	800373c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f042 0208 	orr.w	r2, r2, #8
 800373a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f042 0201 	orr.w	r2, r2, #1
 800374a:	601a      	str	r2, [r3, #0]
 800374c:	e005      	b.n	800375a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2200      	movs	r2, #0
 8003752:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003756:	2302      	movs	r3, #2
 8003758:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800375a:	7dfb      	ldrb	r3, [r7, #23]
}
 800375c:	4618      	mov	r0, r3
 800375e:	3718      	adds	r7, #24
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}

08003764 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003770:	4618      	mov	r0, r3
 8003772:	370c      	adds	r7, #12
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr

0800377c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800377c:	b480      	push	{r7}
 800377e:	b085      	sub	sp, #20
 8003780:	af00      	add	r7, sp, #0
 8003782:	60f8      	str	r0, [r7, #12]
 8003784:	60b9      	str	r1, [r7, #8]
 8003786:	607a      	str	r2, [r7, #4]
 8003788:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003798:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	683a      	ldr	r2, [r7, #0]
 80037a0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	2b40      	cmp	r3, #64	; 0x40
 80037a8:	d108      	bne.n	80037bc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	687a      	ldr	r2, [r7, #4]
 80037b0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	68ba      	ldr	r2, [r7, #8]
 80037b8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80037ba:	e007      	b.n	80037cc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	68ba      	ldr	r2, [r7, #8]
 80037c2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	60da      	str	r2, [r3, #12]
}
 80037cc:	bf00      	nop
 80037ce:	3714      	adds	r7, #20
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr

080037d8 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d101      	bne.n	80037ea <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e039      	b.n	800385e <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d106      	bne.n	8003804 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f7fe fa82 	bl	8001d08 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2202      	movs	r2, #2
 8003808:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	685a      	ldr	r2, [r3, #4]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	430a      	orrs	r2, r1
 8003820:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003828:	f023 0107 	bic.w	r1, r3, #7
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	689a      	ldr	r2, [r3, #8]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	430a      	orrs	r2, r1
 8003836:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800383e:	4b0a      	ldr	r3, [pc, #40]	; (8003868 <HAL_DMA2D_Init+0x90>)
 8003840:	4013      	ands	r3, r2
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	68d1      	ldr	r1, [r2, #12]
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	6812      	ldr	r2, [r2, #0]
 800384a:	430b      	orrs	r3, r1
 800384c:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2201      	movs	r2, #1
 8003858:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800385c:	2300      	movs	r3, #0
}
 800385e:	4618      	mov	r0, r3
 8003860:	3708      	adds	r7, #8
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	ffffc000 	.word	0xffffc000

0800386c <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b084      	sub	sp, #16
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f003 0301 	and.w	r3, r3, #1
 800388a:	2b00      	cmp	r3, #0
 800388c:	d026      	beq.n	80038dc <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003894:	2b00      	cmp	r3, #0
 8003896:	d021      	beq.n	80038dc <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038a6:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ac:	f043 0201 	orr.w	r2, r3, #1
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	2201      	movs	r2, #1
 80038ba:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2204      	movs	r2, #4
 80038c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	695b      	ldr	r3, [r3, #20]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d003      	beq.n	80038dc <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	695b      	ldr	r3, [r3, #20]
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f003 0320 	and.w	r3, r3, #32
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d026      	beq.n	8003934 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d021      	beq.n	8003934 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038fe:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2220      	movs	r2, #32
 8003906:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800390c:	f043 0202 	orr.w	r2, r3, #2
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2204      	movs	r2, #4
 8003918:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	695b      	ldr	r3, [r3, #20]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d003      	beq.n	8003934 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	695b      	ldr	r3, [r3, #20]
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f003 0308 	and.w	r3, r3, #8
 800393a:	2b00      	cmp	r3, #0
 800393c:	d026      	beq.n	800398c <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003944:	2b00      	cmp	r3, #0
 8003946:	d021      	beq.n	800398c <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003956:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	2208      	movs	r2, #8
 800395e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003964:	f043 0204 	orr.w	r2, r3, #4
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2204      	movs	r2, #4
 8003970:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	695b      	ldr	r3, [r3, #20]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d003      	beq.n	800398c <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	695b      	ldr	r3, [r3, #20]
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f003 0304 	and.w	r3, r3, #4
 8003992:	2b00      	cmp	r3, #0
 8003994:	d013      	beq.n	80039be <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800399c:	2b00      	cmp	r3, #0
 800399e:	d00e      	beq.n	80039be <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039ae:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	2204      	movs	r2, #4
 80039b6:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f000 f853 	bl	8003a64 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	f003 0302 	and.w	r3, r3, #2
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d024      	beq.n	8003a12 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d01f      	beq.n	8003a12 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80039e0:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	2202      	movs	r2, #2
 80039e8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2201      	movs	r2, #1
 80039f6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	691b      	ldr	r3, [r3, #16]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d003      	beq.n	8003a12 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	f003 0310 	and.w	r3, r3, #16
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d01f      	beq.n	8003a5c <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d01a      	beq.n	8003a5c <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003a34:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	2210      	movs	r2, #16
 8003a3c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2201      	movs	r2, #1
 8003a4a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f000 f80e 	bl	8003a78 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8003a5c:	bf00      	nop
 8003a5e:	3710      	adds	r7, #16
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8003a6c:	bf00      	nop
 8003a6e:	370c      	adds	r7, #12
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr

08003a78 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b083      	sub	sp, #12
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8003a80:	bf00      	nop
 8003a82:	370c      	adds	r7, #12
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr

08003a8c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b087      	sub	sp, #28
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d101      	bne.n	8003aac <HAL_DMA2D_ConfigLayer+0x20>
 8003aa8:	2302      	movs	r3, #2
 8003aaa:	e079      	b.n	8003ba0 <HAL_DMA2D_ConfigLayer+0x114>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2202      	movs	r2, #2
 8003ab8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	011b      	lsls	r3, r3, #4
 8003ac0:	3318      	adds	r3, #24
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	4413      	add	r3, r2
 8003ac6:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	685a      	ldr	r2, [r3, #4]
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	041b      	lsls	r3, r3, #16
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8003ad6:	4b35      	ldr	r3, [pc, #212]	; (8003bac <HAL_DMA2D_ConfigLayer+0x120>)
 8003ad8:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	2b0a      	cmp	r3, #10
 8003ae0:	d003      	beq.n	8003aea <HAL_DMA2D_ConfigLayer+0x5e>
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	2b09      	cmp	r3, #9
 8003ae8:	d107      	bne.n	8003afa <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003af2:	697a      	ldr	r2, [r7, #20]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	617b      	str	r3, [r7, #20]
 8003af8:	e005      	b.n	8003b06 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	68db      	ldr	r3, [r3, #12]
 8003afe:	061b      	lsls	r3, r3, #24
 8003b00:	697a      	ldr	r2, [r7, #20]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d120      	bne.n	8003b4e <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	43db      	mvns	r3, r3
 8003b16:	ea02 0103 	and.w	r1, r2, r3
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	697a      	ldr	r2, [r7, #20]
 8003b20:	430a      	orrs	r2, r1
 8003b22:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	693a      	ldr	r2, [r7, #16]
 8003b2a:	6812      	ldr	r2, [r2, #0]
 8003b2c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	2b0a      	cmp	r3, #10
 8003b34:	d003      	beq.n	8003b3e <HAL_DMA2D_ConfigLayer+0xb2>
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	2b09      	cmp	r3, #9
 8003b3c:	d127      	bne.n	8003b8e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	68da      	ldr	r2, [r3, #12]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003b4a:	629a      	str	r2, [r3, #40]	; 0x28
 8003b4c:	e01f      	b.n	8003b8e <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	69da      	ldr	r2, [r3, #28]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	43db      	mvns	r3, r3
 8003b58:	ea02 0103 	and.w	r1, r2, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	697a      	ldr	r2, [r7, #20]
 8003b62:	430a      	orrs	r2, r1
 8003b64:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	693a      	ldr	r2, [r7, #16]
 8003b6c:	6812      	ldr	r2, [r2, #0]
 8003b6e:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	2b0a      	cmp	r3, #10
 8003b76:	d003      	beq.n	8003b80 <HAL_DMA2D_ConfigLayer+0xf4>
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	2b09      	cmp	r3, #9
 8003b7e:	d106      	bne.n	8003b8e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	68da      	ldr	r2, [r3, #12]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003b8c:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2201      	movs	r2, #1
 8003b92:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003b9e:	2300      	movs	r3, #0
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	371c      	adds	r7, #28
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr
 8003bac:	ff03000f 	.word	0xff03000f

08003bb0 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b088      	sub	sp, #32
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	61fb      	str	r3, [r7, #28]
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8003bc0:	4ba9      	ldr	r3, [pc, #676]	; (8003e68 <HAL_ETH_Init+0x2b8>)
 8003bc2:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d101      	bne.n	8003bd6 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e183      	b.n	8003ede <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d106      	bne.n	8003bf0 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2200      	movs	r2, #0
 8003be6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f7fe f8b2 	bl	8001d54 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bf0:	4b9e      	ldr	r3, [pc, #632]	; (8003e6c <HAL_ETH_Init+0x2bc>)
 8003bf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bf4:	4a9d      	ldr	r2, [pc, #628]	; (8003e6c <HAL_ETH_Init+0x2bc>)
 8003bf6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003bfa:	6453      	str	r3, [r2, #68]	; 0x44
 8003bfc:	4b9b      	ldr	r3, [pc, #620]	; (8003e6c <HAL_ETH_Init+0x2bc>)
 8003bfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c04:	60bb      	str	r3, [r7, #8]
 8003c06:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003c08:	4b99      	ldr	r3, [pc, #612]	; (8003e70 <HAL_ETH_Init+0x2c0>)
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	4a98      	ldr	r2, [pc, #608]	; (8003e70 <HAL_ETH_Init+0x2c0>)
 8003c0e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003c12:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003c14:	4b96      	ldr	r3, [pc, #600]	; (8003e70 <HAL_ETH_Init+0x2c0>)
 8003c16:	685a      	ldr	r2, [r3, #4]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6a1b      	ldr	r3, [r3, #32]
 8003c1c:	4994      	ldr	r1, [pc, #592]	; (8003e70 <HAL_ETH_Init+0x2c0>)
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f042 0201 	orr.w	r2, r2, #1
 8003c34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c38:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8003c3a:	f7ff f837 	bl	8002cac <HAL_GetTick>
 8003c3e:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8003c40:	e011      	b.n	8003c66 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8003c42:	f7ff f833 	bl	8002cac <HAL_GetTick>
 8003c46:	4602      	mov	r2, r0
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	1ad3      	subs	r3, r2, r3
 8003c4c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003c50:	d909      	bls.n	8003c66 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2203      	movs	r2, #3
 8003c56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e13b      	b.n	8003ede <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 0301 	and.w	r3, r3, #1
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d1e4      	bne.n	8003c42 <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	691b      	ldr	r3, [r3, #16]
 8003c7e:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8003c80:	69fb      	ldr	r3, [r7, #28]
 8003c82:	f023 031c 	bic.w	r3, r3, #28
 8003c86:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003c88:	f003 fcc0 	bl	800760c <HAL_RCC_GetHCLKFreq>
 8003c8c:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8003c8e:	69bb      	ldr	r3, [r7, #24]
 8003c90:	4a78      	ldr	r2, [pc, #480]	; (8003e74 <HAL_ETH_Init+0x2c4>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d908      	bls.n	8003ca8 <HAL_ETH_Init+0xf8>
 8003c96:	69bb      	ldr	r3, [r7, #24]
 8003c98:	4a77      	ldr	r2, [pc, #476]	; (8003e78 <HAL_ETH_Init+0x2c8>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d804      	bhi.n	8003ca8 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8003c9e:	69fb      	ldr	r3, [r7, #28]
 8003ca0:	f043 0308 	orr.w	r3, r3, #8
 8003ca4:	61fb      	str	r3, [r7, #28]
 8003ca6:	e027      	b.n	8003cf8 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8003ca8:	69bb      	ldr	r3, [r7, #24]
 8003caa:	4a73      	ldr	r2, [pc, #460]	; (8003e78 <HAL_ETH_Init+0x2c8>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d908      	bls.n	8003cc2 <HAL_ETH_Init+0x112>
 8003cb0:	69bb      	ldr	r3, [r7, #24]
 8003cb2:	4a72      	ldr	r2, [pc, #456]	; (8003e7c <HAL_ETH_Init+0x2cc>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d804      	bhi.n	8003cc2 <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8003cb8:	69fb      	ldr	r3, [r7, #28]
 8003cba:	f043 030c 	orr.w	r3, r3, #12
 8003cbe:	61fb      	str	r3, [r7, #28]
 8003cc0:	e01a      	b.n	8003cf8 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8003cc2:	69bb      	ldr	r3, [r7, #24]
 8003cc4:	4a6d      	ldr	r2, [pc, #436]	; (8003e7c <HAL_ETH_Init+0x2cc>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d903      	bls.n	8003cd2 <HAL_ETH_Init+0x122>
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	4a6c      	ldr	r2, [pc, #432]	; (8003e80 <HAL_ETH_Init+0x2d0>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d911      	bls.n	8003cf6 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8003cd2:	69bb      	ldr	r3, [r7, #24]
 8003cd4:	4a6a      	ldr	r2, [pc, #424]	; (8003e80 <HAL_ETH_Init+0x2d0>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d908      	bls.n	8003cec <HAL_ETH_Init+0x13c>
 8003cda:	69bb      	ldr	r3, [r7, #24]
 8003cdc:	4a69      	ldr	r2, [pc, #420]	; (8003e84 <HAL_ETH_Init+0x2d4>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d804      	bhi.n	8003cec <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	f043 0304 	orr.w	r3, r3, #4
 8003ce8:	61fb      	str	r3, [r7, #28]
 8003cea:	e005      	b.n	8003cf8 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8003cec:	69fb      	ldr	r3, [r7, #28]
 8003cee:	f043 0310 	orr.w	r3, r3, #16
 8003cf2:	61fb      	str	r3, [r7, #28]
 8003cf4:	e000      	b.n	8003cf8 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8003cf6:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	69fa      	ldr	r2, [r7, #28]
 8003cfe:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8003d00:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003d04:	2100      	movs	r1, #0
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f000 f956 	bl	8003fb8 <HAL_ETH_WritePHYRegister>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d00b      	beq.n	8003d2a <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8003d16:	6939      	ldr	r1, [r7, #16]
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f000 f9b3 	bl	8004084 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2201      	movs	r2, #1
 8003d22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e0d9      	b.n	8003ede <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8003d2a:	f640 70ff 	movw	r0, #4095	; 0xfff
 8003d2e:	f7fe ffc9 	bl	8002cc4 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	f000 80a6 	beq.w	8003e88 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003d3c:	f7fe ffb6 	bl	8002cac <HAL_GetTick>
 8003d40:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8003d42:	f107 030c 	add.w	r3, r7, #12
 8003d46:	461a      	mov	r2, r3
 8003d48:	2101      	movs	r1, #1
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f000 f8cc 	bl	8003ee8 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8003d50:	f7fe ffac 	bl	8002cac <HAL_GetTick>
 8003d54:	4602      	mov	r2, r0
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d90f      	bls.n	8003d82 <HAL_ETH_Init+0x1d2>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8003d66:	6939      	ldr	r1, [r7, #16]
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f000 f98b 	bl	8004084 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2201      	movs	r2, #1
 8003d72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	e0ad      	b.n	8003ede <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	f003 0304 	and.w	r3, r3, #4
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d0da      	beq.n	8003d42 <HAL_ETH_Init+0x192>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8003d8c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003d90:	2100      	movs	r1, #0
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f000 f910 	bl	8003fb8 <HAL_ETH_WritePHYRegister>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d00b      	beq.n	8003db6 <HAL_ETH_Init+0x206>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8003da2:	6939      	ldr	r1, [r7, #16]
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f000 f96d 	bl	8004084 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2201      	movs	r2, #1
 8003dae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8003db2:	2301      	movs	r3, #1
 8003db4:	e093      	b.n	8003ede <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8003db6:	f7fe ff79 	bl	8002cac <HAL_GetTick>
 8003dba:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8003dbc:	f107 030c 	add.w	r3, r7, #12
 8003dc0:	461a      	mov	r2, r3
 8003dc2:	2101      	movs	r1, #1
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f000 f88f 	bl	8003ee8 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8003dca:	f7fe ff6f 	bl	8002cac <HAL_GetTick>
 8003dce:	4602      	mov	r2, r0
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	1ad3      	subs	r3, r2, r3
 8003dd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d90f      	bls.n	8003dfc <HAL_ETH_Init+0x24c>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8003de0:	6939      	ldr	r1, [r7, #16]
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f000 f94e 	bl	8004084 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2201      	movs	r2, #1
 8003dec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8003df8:	2303      	movs	r3, #3
 8003dfa:	e070      	b.n	8003ede <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f003 0320 	and.w	r3, r3, #32
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d0da      	beq.n	8003dbc <HAL_ETH_Init+0x20c>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8003e06:	f107 030c 	add.w	r3, r7, #12
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	211f      	movs	r1, #31
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f000 f86a 	bl	8003ee8 <HAL_ETH_ReadPHYRegister>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d00b      	beq.n	8003e32 <HAL_ETH_Init+0x282>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8003e1e:	6939      	ldr	r1, [r7, #16]
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	f000 f92f 	bl	8004084 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2201      	movs	r2, #1
 8003e2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e055      	b.n	8003ede <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	f003 0310 	and.w	r3, r3, #16
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d004      	beq.n	8003e46 <HAL_ETH_Init+0x296>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e42:	60da      	str	r2, [r3, #12]
 8003e44:	e002      	b.n	8003e4c <HAL_ETH_Init+0x29c>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f003 0304 	and.w	r3, r3, #4
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d003      	beq.n	8003e5e <HAL_ETH_Init+0x2ae>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	609a      	str	r2, [r3, #8]
 8003e5c:	e036      	b.n	8003ecc <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003e64:	609a      	str	r2, [r3, #8]
 8003e66:	e031      	b.n	8003ecc <HAL_ETH_Init+0x31c>
 8003e68:	03938700 	.word	0x03938700
 8003e6c:	40023800 	.word	0x40023800
 8003e70:	40013800 	.word	0x40013800
 8003e74:	01312cff 	.word	0x01312cff
 8003e78:	02160ebf 	.word	0x02160ebf
 8003e7c:	039386ff 	.word	0x039386ff
 8003e80:	05f5e0ff 	.word	0x05f5e0ff
 8003e84:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	08db      	lsrs	r3, r3, #3
 8003e8e:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	085b      	lsrs	r3, r3, #1
 8003e96:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	461a      	mov	r2, r3
 8003e9e:	2100      	movs	r1, #0
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f000 f889 	bl	8003fb8 <HAL_ETH_WritePHYRegister>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d00b      	beq.n	8003ec4 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8003eb0:	6939      	ldr	r1, [r7, #16]
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f000 f8e6 	bl	8004084 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e00c      	b.n	8003ede <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8003ec4:	f640 70ff 	movw	r0, #4095	; 0xfff
 8003ec8:	f7fe fefc 	bl	8002cc4 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8003ecc:	6939      	ldr	r1, [r7, #16]
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f000 f8d8 	bl	8004084 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8003edc:	2300      	movs	r3, #0
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3720      	adds	r7, #32
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop

08003ee8 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b086      	sub	sp, #24
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	60f8      	str	r0, [r7, #12]
 8003ef0:	460b      	mov	r3, r1
 8003ef2:	607a      	str	r2, [r7, #4]
 8003ef4:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8003efa:	2300      	movs	r3, #0
 8003efc:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	2b82      	cmp	r3, #130	; 0x82
 8003f08:	d101      	bne.n	8003f0e <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8003f0a:	2302      	movs	r3, #2
 8003f0c:	e050      	b.n	8003fb0 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2282      	movs	r2, #130	; 0x82
 8003f12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	691b      	ldr	r3, [r3, #16]
 8003f1c:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	f003 031c 	and.w	r3, r3, #28
 8003f24:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	8a1b      	ldrh	r3, [r3, #16]
 8003f2a:	02db      	lsls	r3, r3, #11
 8003f2c:	b29b      	uxth	r3, r3
 8003f2e:	697a      	ldr	r2, [r7, #20]
 8003f30:	4313      	orrs	r3, r2
 8003f32:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8003f34:	897b      	ldrh	r3, [r7, #10]
 8003f36:	019b      	lsls	r3, r3, #6
 8003f38:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8003f3c:	697a      	ldr	r2, [r7, #20]
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	f023 0302 	bic.w	r3, r3, #2
 8003f48:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	f043 0301 	orr.w	r3, r3, #1
 8003f50:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	697a      	ldr	r2, [r7, #20]
 8003f58:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8003f5a:	f7fe fea7 	bl	8002cac <HAL_GetTick>
 8003f5e:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003f60:	e015      	b.n	8003f8e <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8003f62:	f7fe fea3 	bl	8002cac <HAL_GetTick>
 8003f66:	4602      	mov	r2, r0
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f70:	d309      	bcc.n	8003f86 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2201      	movs	r2, #1
 8003f76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8003f82:	2303      	movs	r3, #3
 8003f84:	e014      	b.n	8003fb0 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	691b      	ldr	r3, [r3, #16]
 8003f8c:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	f003 0301 	and.w	r3, r3, #1
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d1e4      	bne.n	8003f62 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	695b      	ldr	r3, [r3, #20]
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2201      	movs	r2, #1
 8003faa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8003fae:	2300      	movs	r3, #0
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3718      	adds	r7, #24
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}

08003fb8 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b086      	sub	sp, #24
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	60f8      	str	r0, [r7, #12]
 8003fc0:	460b      	mov	r3, r1
 8003fc2:	607a      	str	r2, [r7, #4]
 8003fc4:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	2b42      	cmp	r3, #66	; 0x42
 8003fd8:	d101      	bne.n	8003fde <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8003fda:	2302      	movs	r3, #2
 8003fdc:	e04e      	b.n	800407c <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2242      	movs	r2, #66	; 0x42
 8003fe2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	691b      	ldr	r3, [r3, #16]
 8003fec:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	f003 031c 	and.w	r3, r3, #28
 8003ff4:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	8a1b      	ldrh	r3, [r3, #16]
 8003ffa:	02db      	lsls	r3, r3, #11
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	697a      	ldr	r2, [r7, #20]
 8004000:	4313      	orrs	r3, r2
 8004002:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8004004:	897b      	ldrh	r3, [r7, #10]
 8004006:	019b      	lsls	r3, r3, #6
 8004008:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800400c:	697a      	ldr	r2, [r7, #20]
 800400e:	4313      	orrs	r3, r2
 8004010:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	f043 0302 	orr.w	r3, r3, #2
 8004018:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	f043 0301 	orr.w	r3, r3, #1
 8004020:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	b29a      	uxth	r2, r3
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	697a      	ldr	r2, [r7, #20]
 8004032:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8004034:	f7fe fe3a 	bl	8002cac <HAL_GetTick>
 8004038:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800403a:	e015      	b.n	8004068 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 800403c:	f7fe fe36 	bl	8002cac <HAL_GetTick>
 8004040:	4602      	mov	r2, r0
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800404a:	d309      	bcc.n	8004060 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2201      	movs	r2, #1
 8004050:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2200      	movs	r2, #0
 8004058:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800405c:	2303      	movs	r3, #3
 800405e:	e00d      	b.n	800407c <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	691b      	ldr	r3, [r3, #16]
 8004066:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	f003 0301 	and.w	r3, r3, #1
 800406e:	2b00      	cmp	r3, #0
 8004070:	d1e4      	bne.n	800403c <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2201      	movs	r2, #1
 8004076:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 800407a:	2300      	movs	r3, #0
}
 800407c:	4618      	mov	r0, r3
 800407e:	3718      	adds	r7, #24
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}

08004084 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b0b0      	sub	sp, #192	; 0xc0
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 800408e:	2300      	movs	r3, #0
 8004090:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d007      	beq.n	80040aa <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80040a0:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80040a8:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80040aa:	2300      	movs	r3, #0
 80040ac:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80040ae:	2300      	movs	r3, #0
 80040b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80040b2:	2300      	movs	r3, #0
 80040b4:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80040b6:	2300      	movs	r3, #0
 80040b8:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80040ba:	2300      	movs	r3, #0
 80040bc:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 80040be:	2300      	movs	r3, #0
 80040c0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	69db      	ldr	r3, [r3, #28]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d103      	bne.n	80040d2 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80040ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80040ce:	663b      	str	r3, [r7, #96]	; 0x60
 80040d0:	e001      	b.n	80040d6 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80040d2:	2300      	movs	r3, #0
 80040d4:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 80040d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80040da:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 80040dc:	2300      	movs	r3, #0
 80040de:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80040e0:	2300      	movs	r3, #0
 80040e2:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 80040e4:	2300      	movs	r3, #0
 80040e6:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 80040e8:	2300      	movs	r3, #0
 80040ea:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 80040ec:	2300      	movs	r3, #0
 80040ee:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 80040f0:	2340      	movs	r3, #64	; 0x40
 80040f2:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 80040f4:	2300      	movs	r3, #0
 80040f6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 80040fa:	2300      	movs	r3, #0
 80040fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8004100:	2300      	movs	r3, #0
 8004102:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8004106:	2300      	movs	r3, #0
 8004108:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 800410c:	2300      	movs	r3, #0
 800410e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8004112:	2300      	movs	r3, #0
 8004114:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8004118:	2300      	movs	r3, #0
 800411a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 800411e:	2300      	movs	r3, #0
 8004120:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8004124:	2380      	movs	r3, #128	; 0x80
 8004126:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800412a:	2300      	movs	r3, #0
 800412c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8004130:	2300      	movs	r3, #0
 8004132:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8004136:	2300      	movs	r3, #0
 8004138:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 800413c:	2300      	movs	r3, #0
 800413e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8004142:	2300      	movs	r3, #0
 8004144:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8004148:	2300      	movs	r3, #0
 800414a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8004158:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800415c:	4bab      	ldr	r3, [pc, #684]	; (800440c <ETH_MACDMAConfig+0x388>)
 800415e:	4013      	ands	r3, r2
 8004160:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8004164:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8004166:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8004168:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 800416a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 800416c:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 800416e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8004170:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8004176:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8004178:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 800417a:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 800417c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 800417e:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8004184:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8004186:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8004188:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 800418a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 800418c:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 800418e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8004190:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8004192:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8004194:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8004196:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8004198:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800419a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800419e:	4313      	orrs	r3, r2
 80041a0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80041ac:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80041b8:	2001      	movs	r0, #1
 80041ba:	f7fe fd83 	bl	8002cc4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80041c6:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80041c8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 80041ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80041cc:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 80041ce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 80041d0:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 80041d2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 80041d6:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 80041d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 80041dc:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 80041de:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 80041e2:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 80041e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 80041e8:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 80041ec:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 80041f4:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80041f6:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8004202:	2001      	movs	r0, #1
 8004204:	f7fe fd5e 	bl	8002cc4 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004210:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800421a:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8004224:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	699b      	ldr	r3, [r3, #24]
 800422c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8004230:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004234:	f64f 7341 	movw	r3, #65345	; 0xff41
 8004238:	4013      	ands	r3, r2
 800423a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800423e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004242:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8004244:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8004248:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800424a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 800424e:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8004250:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8004254:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8004256:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 800425a:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 800425c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8004260:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8004262:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004266:	4313      	orrs	r3, r2
 8004268:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004274:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	699b      	ldr	r3, [r3, #24]
 800427c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8004280:	2001      	movs	r0, #1
 8004282:	f7fe fd1f 	bl	8002cc4 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800428e:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8004290:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8004294:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	430a      	orrs	r2, r1
 800429e:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	69db      	ldr	r3, [r3, #28]
 80042a6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80042aa:	2001      	movs	r0, #1
 80042ac:	f7fe fd0a 	bl	8002cc4 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80042b8:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80042ba:	2300      	movs	r3, #0
 80042bc:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80042be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80042c2:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80042c4:	2300      	movs	r3, #0
 80042c6:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 80042c8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80042cc:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80042ce:	2300      	movs	r3, #0
 80042d0:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 80042d2:	2300      	movs	r3, #0
 80042d4:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 80042d6:	2300      	movs	r3, #0
 80042d8:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80042da:	2300      	movs	r3, #0
 80042dc:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 80042de:	2304      	movs	r3, #4
 80042e0:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 80042e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80042e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 80042e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80042ec:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80042ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80042f2:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80042f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80042f8:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 80042fa:	2380      	movs	r3, #128	; 0x80
 80042fc:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 80042fe:	2300      	movs	r3, #0
 8004300:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8004302:	2300      	movs	r3, #0
 8004304:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	f241 0318 	movw	r3, #4120	; 0x1018
 800430e:	4413      	add	r3, r2
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8004316:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800431a:	4b3d      	ldr	r3, [pc, #244]	; (8004410 <ETH_MACDMAConfig+0x38c>)
 800431c:	4013      	ands	r3, r2
 800431e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8004322:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8004324:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8004326:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8004328:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 800432a:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 800432c:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 800432e:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8004330:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8004332:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8004334:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8004336:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8004338:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 800433a:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 800433c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 800433e:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8004340:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8004342:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8004344:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004348:	4313      	orrs	r3, r2
 800434a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	f241 0318 	movw	r3, #4120	; 0x1018
 8004356:	4413      	add	r3, r2
 8004358:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800435c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	f241 0318 	movw	r3, #4120	; 0x1018
 8004366:	4413      	add	r3, r2
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800436e:	2001      	movs	r0, #1
 8004370:	f7fe fca8 	bl	8002cc4 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	f241 0318 	movw	r3, #4120	; 0x1018
 800437c:	4413      	add	r3, r2
 800437e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004382:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8004384:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8004386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8004388:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800438a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 800438c:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 800438e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8004390:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8004392:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8004394:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 8004396:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004398:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 800439a:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 800439c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 800439e:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80043a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043ac:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80043bc:	2001      	movs	r0, #1
 80043be:	f7fe fc81 	bl	8002cc4 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043ca:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80043ce:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	699b      	ldr	r3, [r3, #24]
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d10d      	bne.n	80043f4 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	f241 031c 	movw	r3, #4124	; 0x101c
 80043e0:	4413      	add	r3, r2
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	687a      	ldr	r2, [r7, #4]
 80043e6:	6811      	ldr	r1, [r2, #0]
 80043e8:	4a0a      	ldr	r2, [pc, #40]	; (8004414 <ETH_MACDMAConfig+0x390>)
 80043ea:	431a      	orrs	r2, r3
 80043ec:	f241 031c 	movw	r3, #4124	; 0x101c
 80043f0:	440b      	add	r3, r1
 80043f2:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	695b      	ldr	r3, [r3, #20]
 80043f8:	461a      	mov	r2, r3
 80043fa:	2100      	movs	r1, #0
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f000 f80b 	bl	8004418 <ETH_MACAddressConfig>
}
 8004402:	bf00      	nop
 8004404:	37c0      	adds	r7, #192	; 0xc0
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}
 800440a:	bf00      	nop
 800440c:	ff20810f 	.word	0xff20810f
 8004410:	f8de3f23 	.word	0xf8de3f23
 8004414:	00010040 	.word	0x00010040

08004418 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8004418:	b480      	push	{r7}
 800441a:	b087      	sub	sp, #28
 800441c:	af00      	add	r7, sp, #0
 800441e:	60f8      	str	r0, [r7, #12]
 8004420:	60b9      	str	r1, [r7, #8]
 8004422:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	3305      	adds	r3, #5
 8004428:	781b      	ldrb	r3, [r3, #0]
 800442a:	021b      	lsls	r3, r3, #8
 800442c:	687a      	ldr	r2, [r7, #4]
 800442e:	3204      	adds	r2, #4
 8004430:	7812      	ldrb	r2, [r2, #0]
 8004432:	4313      	orrs	r3, r2
 8004434:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8004436:	68ba      	ldr	r2, [r7, #8]
 8004438:	4b11      	ldr	r3, [pc, #68]	; (8004480 <ETH_MACAddressConfig+0x68>)
 800443a:	4413      	add	r3, r2
 800443c:	461a      	mov	r2, r3
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	3303      	adds	r3, #3
 8004446:	781b      	ldrb	r3, [r3, #0]
 8004448:	061a      	lsls	r2, r3, #24
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	3302      	adds	r3, #2
 800444e:	781b      	ldrb	r3, [r3, #0]
 8004450:	041b      	lsls	r3, r3, #16
 8004452:	431a      	orrs	r2, r3
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	3301      	adds	r3, #1
 8004458:	781b      	ldrb	r3, [r3, #0]
 800445a:	021b      	lsls	r3, r3, #8
 800445c:	4313      	orrs	r3, r2
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	7812      	ldrb	r2, [r2, #0]
 8004462:	4313      	orrs	r3, r2
 8004464:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8004466:	68ba      	ldr	r2, [r7, #8]
 8004468:	4b06      	ldr	r3, [pc, #24]	; (8004484 <ETH_MACAddressConfig+0x6c>)
 800446a:	4413      	add	r3, r2
 800446c:	461a      	mov	r2, r3
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	6013      	str	r3, [r2, #0]
}
 8004472:	bf00      	nop
 8004474:	371c      	adds	r7, #28
 8004476:	46bd      	mov	sp, r7
 8004478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447c:	4770      	bx	lr
 800447e:	bf00      	nop
 8004480:	40028040 	.word	0x40028040
 8004484:	40028044 	.word	0x40028044

08004488 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004488:	b480      	push	{r7}
 800448a:	b089      	sub	sp, #36	; 0x24
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004492:	2300      	movs	r3, #0
 8004494:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004496:	2300      	movs	r3, #0
 8004498:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800449a:	2300      	movs	r3, #0
 800449c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800449e:	2300      	movs	r3, #0
 80044a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80044a2:	2300      	movs	r3, #0
 80044a4:	61fb      	str	r3, [r7, #28]
 80044a6:	e175      	b.n	8004794 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80044a8:	2201      	movs	r2, #1
 80044aa:	69fb      	ldr	r3, [r7, #28]
 80044ac:	fa02 f303 	lsl.w	r3, r2, r3
 80044b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	697a      	ldr	r2, [r7, #20]
 80044b8:	4013      	ands	r3, r2
 80044ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80044bc:	693a      	ldr	r2, [r7, #16]
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	429a      	cmp	r2, r3
 80044c2:	f040 8164 	bne.w	800478e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	d00b      	beq.n	80044e6 <HAL_GPIO_Init+0x5e>
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	2b02      	cmp	r3, #2
 80044d4:	d007      	beq.n	80044e6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80044da:	2b11      	cmp	r3, #17
 80044dc:	d003      	beq.n	80044e6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	2b12      	cmp	r3, #18
 80044e4:	d130      	bne.n	8004548 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80044ec:	69fb      	ldr	r3, [r7, #28]
 80044ee:	005b      	lsls	r3, r3, #1
 80044f0:	2203      	movs	r2, #3
 80044f2:	fa02 f303 	lsl.w	r3, r2, r3
 80044f6:	43db      	mvns	r3, r3
 80044f8:	69ba      	ldr	r2, [r7, #24]
 80044fa:	4013      	ands	r3, r2
 80044fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	68da      	ldr	r2, [r3, #12]
 8004502:	69fb      	ldr	r3, [r7, #28]
 8004504:	005b      	lsls	r3, r3, #1
 8004506:	fa02 f303 	lsl.w	r3, r2, r3
 800450a:	69ba      	ldr	r2, [r7, #24]
 800450c:	4313      	orrs	r3, r2
 800450e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	69ba      	ldr	r2, [r7, #24]
 8004514:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800451c:	2201      	movs	r2, #1
 800451e:	69fb      	ldr	r3, [r7, #28]
 8004520:	fa02 f303 	lsl.w	r3, r2, r3
 8004524:	43db      	mvns	r3, r3
 8004526:	69ba      	ldr	r2, [r7, #24]
 8004528:	4013      	ands	r3, r2
 800452a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	091b      	lsrs	r3, r3, #4
 8004532:	f003 0201 	and.w	r2, r3, #1
 8004536:	69fb      	ldr	r3, [r7, #28]
 8004538:	fa02 f303 	lsl.w	r3, r2, r3
 800453c:	69ba      	ldr	r2, [r7, #24]
 800453e:	4313      	orrs	r3, r2
 8004540:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	69ba      	ldr	r2, [r7, #24]
 8004546:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800454e:	69fb      	ldr	r3, [r7, #28]
 8004550:	005b      	lsls	r3, r3, #1
 8004552:	2203      	movs	r2, #3
 8004554:	fa02 f303 	lsl.w	r3, r2, r3
 8004558:	43db      	mvns	r3, r3
 800455a:	69ba      	ldr	r2, [r7, #24]
 800455c:	4013      	ands	r3, r2
 800455e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	689a      	ldr	r2, [r3, #8]
 8004564:	69fb      	ldr	r3, [r7, #28]
 8004566:	005b      	lsls	r3, r3, #1
 8004568:	fa02 f303 	lsl.w	r3, r2, r3
 800456c:	69ba      	ldr	r2, [r7, #24]
 800456e:	4313      	orrs	r3, r2
 8004570:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	69ba      	ldr	r2, [r7, #24]
 8004576:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	2b02      	cmp	r3, #2
 800457e:	d003      	beq.n	8004588 <HAL_GPIO_Init+0x100>
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	2b12      	cmp	r3, #18
 8004586:	d123      	bne.n	80045d0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004588:	69fb      	ldr	r3, [r7, #28]
 800458a:	08da      	lsrs	r2, r3, #3
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	3208      	adds	r2, #8
 8004590:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004594:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004596:	69fb      	ldr	r3, [r7, #28]
 8004598:	f003 0307 	and.w	r3, r3, #7
 800459c:	009b      	lsls	r3, r3, #2
 800459e:	220f      	movs	r2, #15
 80045a0:	fa02 f303 	lsl.w	r3, r2, r3
 80045a4:	43db      	mvns	r3, r3
 80045a6:	69ba      	ldr	r2, [r7, #24]
 80045a8:	4013      	ands	r3, r2
 80045aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	691a      	ldr	r2, [r3, #16]
 80045b0:	69fb      	ldr	r3, [r7, #28]
 80045b2:	f003 0307 	and.w	r3, r3, #7
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	fa02 f303 	lsl.w	r3, r2, r3
 80045bc:	69ba      	ldr	r2, [r7, #24]
 80045be:	4313      	orrs	r3, r2
 80045c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	08da      	lsrs	r2, r3, #3
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	3208      	adds	r2, #8
 80045ca:	69b9      	ldr	r1, [r7, #24]
 80045cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	005b      	lsls	r3, r3, #1
 80045da:	2203      	movs	r2, #3
 80045dc:	fa02 f303 	lsl.w	r3, r2, r3
 80045e0:	43db      	mvns	r3, r3
 80045e2:	69ba      	ldr	r2, [r7, #24]
 80045e4:	4013      	ands	r3, r2
 80045e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	f003 0203 	and.w	r2, r3, #3
 80045f0:	69fb      	ldr	r3, [r7, #28]
 80045f2:	005b      	lsls	r3, r3, #1
 80045f4:	fa02 f303 	lsl.w	r3, r2, r3
 80045f8:	69ba      	ldr	r2, [r7, #24]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	69ba      	ldr	r2, [r7, #24]
 8004602:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800460c:	2b00      	cmp	r3, #0
 800460e:	f000 80be 	beq.w	800478e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004612:	4b65      	ldr	r3, [pc, #404]	; (80047a8 <HAL_GPIO_Init+0x320>)
 8004614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004616:	4a64      	ldr	r2, [pc, #400]	; (80047a8 <HAL_GPIO_Init+0x320>)
 8004618:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800461c:	6453      	str	r3, [r2, #68]	; 0x44
 800461e:	4b62      	ldr	r3, [pc, #392]	; (80047a8 <HAL_GPIO_Init+0x320>)
 8004620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004622:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004626:	60fb      	str	r3, [r7, #12]
 8004628:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800462a:	4a60      	ldr	r2, [pc, #384]	; (80047ac <HAL_GPIO_Init+0x324>)
 800462c:	69fb      	ldr	r3, [r7, #28]
 800462e:	089b      	lsrs	r3, r3, #2
 8004630:	3302      	adds	r3, #2
 8004632:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004636:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004638:	69fb      	ldr	r3, [r7, #28]
 800463a:	f003 0303 	and.w	r3, r3, #3
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	220f      	movs	r2, #15
 8004642:	fa02 f303 	lsl.w	r3, r2, r3
 8004646:	43db      	mvns	r3, r3
 8004648:	69ba      	ldr	r2, [r7, #24]
 800464a:	4013      	ands	r3, r2
 800464c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	4a57      	ldr	r2, [pc, #348]	; (80047b0 <HAL_GPIO_Init+0x328>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d037      	beq.n	80046c6 <HAL_GPIO_Init+0x23e>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4a56      	ldr	r2, [pc, #344]	; (80047b4 <HAL_GPIO_Init+0x32c>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d031      	beq.n	80046c2 <HAL_GPIO_Init+0x23a>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4a55      	ldr	r2, [pc, #340]	; (80047b8 <HAL_GPIO_Init+0x330>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d02b      	beq.n	80046be <HAL_GPIO_Init+0x236>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	4a54      	ldr	r2, [pc, #336]	; (80047bc <HAL_GPIO_Init+0x334>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d025      	beq.n	80046ba <HAL_GPIO_Init+0x232>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	4a53      	ldr	r2, [pc, #332]	; (80047c0 <HAL_GPIO_Init+0x338>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d01f      	beq.n	80046b6 <HAL_GPIO_Init+0x22e>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	4a52      	ldr	r2, [pc, #328]	; (80047c4 <HAL_GPIO_Init+0x33c>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d019      	beq.n	80046b2 <HAL_GPIO_Init+0x22a>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	4a51      	ldr	r2, [pc, #324]	; (80047c8 <HAL_GPIO_Init+0x340>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d013      	beq.n	80046ae <HAL_GPIO_Init+0x226>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	4a50      	ldr	r2, [pc, #320]	; (80047cc <HAL_GPIO_Init+0x344>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d00d      	beq.n	80046aa <HAL_GPIO_Init+0x222>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4a4f      	ldr	r2, [pc, #316]	; (80047d0 <HAL_GPIO_Init+0x348>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d007      	beq.n	80046a6 <HAL_GPIO_Init+0x21e>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4a4e      	ldr	r2, [pc, #312]	; (80047d4 <HAL_GPIO_Init+0x34c>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d101      	bne.n	80046a2 <HAL_GPIO_Init+0x21a>
 800469e:	2309      	movs	r3, #9
 80046a0:	e012      	b.n	80046c8 <HAL_GPIO_Init+0x240>
 80046a2:	230a      	movs	r3, #10
 80046a4:	e010      	b.n	80046c8 <HAL_GPIO_Init+0x240>
 80046a6:	2308      	movs	r3, #8
 80046a8:	e00e      	b.n	80046c8 <HAL_GPIO_Init+0x240>
 80046aa:	2307      	movs	r3, #7
 80046ac:	e00c      	b.n	80046c8 <HAL_GPIO_Init+0x240>
 80046ae:	2306      	movs	r3, #6
 80046b0:	e00a      	b.n	80046c8 <HAL_GPIO_Init+0x240>
 80046b2:	2305      	movs	r3, #5
 80046b4:	e008      	b.n	80046c8 <HAL_GPIO_Init+0x240>
 80046b6:	2304      	movs	r3, #4
 80046b8:	e006      	b.n	80046c8 <HAL_GPIO_Init+0x240>
 80046ba:	2303      	movs	r3, #3
 80046bc:	e004      	b.n	80046c8 <HAL_GPIO_Init+0x240>
 80046be:	2302      	movs	r3, #2
 80046c0:	e002      	b.n	80046c8 <HAL_GPIO_Init+0x240>
 80046c2:	2301      	movs	r3, #1
 80046c4:	e000      	b.n	80046c8 <HAL_GPIO_Init+0x240>
 80046c6:	2300      	movs	r3, #0
 80046c8:	69fa      	ldr	r2, [r7, #28]
 80046ca:	f002 0203 	and.w	r2, r2, #3
 80046ce:	0092      	lsls	r2, r2, #2
 80046d0:	4093      	lsls	r3, r2
 80046d2:	69ba      	ldr	r2, [r7, #24]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80046d8:	4934      	ldr	r1, [pc, #208]	; (80047ac <HAL_GPIO_Init+0x324>)
 80046da:	69fb      	ldr	r3, [r7, #28]
 80046dc:	089b      	lsrs	r3, r3, #2
 80046de:	3302      	adds	r3, #2
 80046e0:	69ba      	ldr	r2, [r7, #24]
 80046e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80046e6:	4b3c      	ldr	r3, [pc, #240]	; (80047d8 <HAL_GPIO_Init+0x350>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	43db      	mvns	r3, r3
 80046f0:	69ba      	ldr	r2, [r7, #24]
 80046f2:	4013      	ands	r3, r2
 80046f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d003      	beq.n	800470a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004702:	69ba      	ldr	r2, [r7, #24]
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	4313      	orrs	r3, r2
 8004708:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800470a:	4a33      	ldr	r2, [pc, #204]	; (80047d8 <HAL_GPIO_Init+0x350>)
 800470c:	69bb      	ldr	r3, [r7, #24]
 800470e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004710:	4b31      	ldr	r3, [pc, #196]	; (80047d8 <HAL_GPIO_Init+0x350>)
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	43db      	mvns	r3, r3
 800471a:	69ba      	ldr	r2, [r7, #24]
 800471c:	4013      	ands	r3, r2
 800471e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004728:	2b00      	cmp	r3, #0
 800472a:	d003      	beq.n	8004734 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800472c:	69ba      	ldr	r2, [r7, #24]
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	4313      	orrs	r3, r2
 8004732:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004734:	4a28      	ldr	r2, [pc, #160]	; (80047d8 <HAL_GPIO_Init+0x350>)
 8004736:	69bb      	ldr	r3, [r7, #24]
 8004738:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800473a:	4b27      	ldr	r3, [pc, #156]	; (80047d8 <HAL_GPIO_Init+0x350>)
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	43db      	mvns	r3, r3
 8004744:	69ba      	ldr	r2, [r7, #24]
 8004746:	4013      	ands	r3, r2
 8004748:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004752:	2b00      	cmp	r3, #0
 8004754:	d003      	beq.n	800475e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004756:	69ba      	ldr	r2, [r7, #24]
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	4313      	orrs	r3, r2
 800475c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800475e:	4a1e      	ldr	r2, [pc, #120]	; (80047d8 <HAL_GPIO_Init+0x350>)
 8004760:	69bb      	ldr	r3, [r7, #24]
 8004762:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004764:	4b1c      	ldr	r3, [pc, #112]	; (80047d8 <HAL_GPIO_Init+0x350>)
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	43db      	mvns	r3, r3
 800476e:	69ba      	ldr	r2, [r7, #24]
 8004770:	4013      	ands	r3, r2
 8004772:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800477c:	2b00      	cmp	r3, #0
 800477e:	d003      	beq.n	8004788 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004780:	69ba      	ldr	r2, [r7, #24]
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	4313      	orrs	r3, r2
 8004786:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004788:	4a13      	ldr	r2, [pc, #76]	; (80047d8 <HAL_GPIO_Init+0x350>)
 800478a:	69bb      	ldr	r3, [r7, #24]
 800478c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800478e:	69fb      	ldr	r3, [r7, #28]
 8004790:	3301      	adds	r3, #1
 8004792:	61fb      	str	r3, [r7, #28]
 8004794:	69fb      	ldr	r3, [r7, #28]
 8004796:	2b0f      	cmp	r3, #15
 8004798:	f67f ae86 	bls.w	80044a8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800479c:	bf00      	nop
 800479e:	3724      	adds	r7, #36	; 0x24
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr
 80047a8:	40023800 	.word	0x40023800
 80047ac:	40013800 	.word	0x40013800
 80047b0:	40020000 	.word	0x40020000
 80047b4:	40020400 	.word	0x40020400
 80047b8:	40020800 	.word	0x40020800
 80047bc:	40020c00 	.word	0x40020c00
 80047c0:	40021000 	.word	0x40021000
 80047c4:	40021400 	.word	0x40021400
 80047c8:	40021800 	.word	0x40021800
 80047cc:	40021c00 	.word	0x40021c00
 80047d0:	40022000 	.word	0x40022000
 80047d4:	40022400 	.word	0x40022400
 80047d8:	40013c00 	.word	0x40013c00

080047dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80047dc:	b480      	push	{r7}
 80047de:	b085      	sub	sp, #20
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	460b      	mov	r3, r1
 80047e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	691a      	ldr	r2, [r3, #16]
 80047ec:	887b      	ldrh	r3, [r7, #2]
 80047ee:	4013      	ands	r3, r2
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d002      	beq.n	80047fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80047f4:	2301      	movs	r3, #1
 80047f6:	73fb      	strb	r3, [r7, #15]
 80047f8:	e001      	b.n	80047fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80047fa:	2300      	movs	r3, #0
 80047fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80047fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004800:	4618      	mov	r0, r3
 8004802:	3714      	adds	r7, #20
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr

0800480c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800480c:	b480      	push	{r7}
 800480e:	b083      	sub	sp, #12
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	460b      	mov	r3, r1
 8004816:	807b      	strh	r3, [r7, #2]
 8004818:	4613      	mov	r3, r2
 800481a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800481c:	787b      	ldrb	r3, [r7, #1]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d003      	beq.n	800482a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004822:	887a      	ldrh	r2, [r7, #2]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004828:	e003      	b.n	8004832 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800482a:	887b      	ldrh	r3, [r7, #2]
 800482c:	041a      	lsls	r2, r3, #16
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	619a      	str	r2, [r3, #24]
}
 8004832:	bf00      	nop
 8004834:	370c      	adds	r7, #12
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr

0800483e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800483e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004840:	b08f      	sub	sp, #60	; 0x3c
 8004842:	af0a      	add	r7, sp, #40	; 0x28
 8004844:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d101      	bne.n	8004850 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	e054      	b.n	80048fa <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 800485c:	b2db      	uxtb	r3, r3
 800485e:	2b00      	cmp	r3, #0
 8004860:	d106      	bne.n	8004870 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f00d fbfe 	bl	801206c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2203      	movs	r2, #3
 8004874:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800487c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004880:	2b00      	cmp	r3, #0
 8004882:	d102      	bne.n	800488a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2200      	movs	r2, #0
 8004888:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4618      	mov	r0, r3
 8004890:	f007 fdeb 	bl	800c46a <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	603b      	str	r3, [r7, #0]
 800489a:	687e      	ldr	r6, [r7, #4]
 800489c:	466d      	mov	r5, sp
 800489e:	f106 0410 	add.w	r4, r6, #16
 80048a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80048a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80048a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80048a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80048aa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80048ae:	e885 0003 	stmia.w	r5, {r0, r1}
 80048b2:	1d33      	adds	r3, r6, #4
 80048b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80048b6:	6838      	ldr	r0, [r7, #0]
 80048b8:	f007 fd6e 	bl	800c398 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	2101      	movs	r1, #1
 80048c2:	4618      	mov	r0, r3
 80048c4:	f007 fde2 	bl	800c48c <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	603b      	str	r3, [r7, #0]
 80048ce:	687e      	ldr	r6, [r7, #4]
 80048d0:	466d      	mov	r5, sp
 80048d2:	f106 0410 	add.w	r4, r6, #16
 80048d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80048d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80048da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80048dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80048de:	e894 0003 	ldmia.w	r4, {r0, r1}
 80048e2:	e885 0003 	stmia.w	r5, {r0, r1}
 80048e6:	1d33      	adds	r3, r6, #4
 80048e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80048ea:	6838      	ldr	r0, [r7, #0]
 80048ec:	f007 fef4 	bl	800c6d8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2201      	movs	r2, #1
 80048f4:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 80048f8:	2300      	movs	r3, #0
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3714      	adds	r7, #20
 80048fe:	46bd      	mov	sp, r7
 8004900:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004902 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8004902:	b590      	push	{r4, r7, lr}
 8004904:	b089      	sub	sp, #36	; 0x24
 8004906:	af04      	add	r7, sp, #16
 8004908:	6078      	str	r0, [r7, #4]
 800490a:	4608      	mov	r0, r1
 800490c:	4611      	mov	r1, r2
 800490e:	461a      	mov	r2, r3
 8004910:	4603      	mov	r3, r0
 8004912:	70fb      	strb	r3, [r7, #3]
 8004914:	460b      	mov	r3, r1
 8004916:	70bb      	strb	r3, [r7, #2]
 8004918:	4613      	mov	r3, r2
 800491a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8004922:	2b01      	cmp	r3, #1
 8004924:	d101      	bne.n	800492a <HAL_HCD_HC_Init+0x28>
 8004926:	2302      	movs	r3, #2
 8004928:	e07f      	b.n	8004a2a <HAL_HCD_HC_Init+0x128>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2201      	movs	r2, #1
 800492e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8004932:	78fa      	ldrb	r2, [r7, #3]
 8004934:	6879      	ldr	r1, [r7, #4]
 8004936:	4613      	mov	r3, r2
 8004938:	009b      	lsls	r3, r3, #2
 800493a:	4413      	add	r3, r2
 800493c:	00db      	lsls	r3, r3, #3
 800493e:	440b      	add	r3, r1
 8004940:	333d      	adds	r3, #61	; 0x3d
 8004942:	2200      	movs	r2, #0
 8004944:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8004946:	78fa      	ldrb	r2, [r7, #3]
 8004948:	6879      	ldr	r1, [r7, #4]
 800494a:	4613      	mov	r3, r2
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	4413      	add	r3, r2
 8004950:	00db      	lsls	r3, r3, #3
 8004952:	440b      	add	r3, r1
 8004954:	3338      	adds	r3, #56	; 0x38
 8004956:	787a      	ldrb	r2, [r7, #1]
 8004958:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800495a:	78fa      	ldrb	r2, [r7, #3]
 800495c:	6879      	ldr	r1, [r7, #4]
 800495e:	4613      	mov	r3, r2
 8004960:	009b      	lsls	r3, r3, #2
 8004962:	4413      	add	r3, r2
 8004964:	00db      	lsls	r3, r3, #3
 8004966:	440b      	add	r3, r1
 8004968:	3340      	adds	r3, #64	; 0x40
 800496a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800496c:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800496e:	78fa      	ldrb	r2, [r7, #3]
 8004970:	6879      	ldr	r1, [r7, #4]
 8004972:	4613      	mov	r3, r2
 8004974:	009b      	lsls	r3, r3, #2
 8004976:	4413      	add	r3, r2
 8004978:	00db      	lsls	r3, r3, #3
 800497a:	440b      	add	r3, r1
 800497c:	3339      	adds	r3, #57	; 0x39
 800497e:	78fa      	ldrb	r2, [r7, #3]
 8004980:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8004982:	78fa      	ldrb	r2, [r7, #3]
 8004984:	6879      	ldr	r1, [r7, #4]
 8004986:	4613      	mov	r3, r2
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	4413      	add	r3, r2
 800498c:	00db      	lsls	r3, r3, #3
 800498e:	440b      	add	r3, r1
 8004990:	333f      	adds	r3, #63	; 0x3f
 8004992:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8004996:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8004998:	78fa      	ldrb	r2, [r7, #3]
 800499a:	78bb      	ldrb	r3, [r7, #2]
 800499c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049a0:	b2d8      	uxtb	r0, r3
 80049a2:	6879      	ldr	r1, [r7, #4]
 80049a4:	4613      	mov	r3, r2
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	4413      	add	r3, r2
 80049aa:	00db      	lsls	r3, r3, #3
 80049ac:	440b      	add	r3, r1
 80049ae:	333a      	adds	r3, #58	; 0x3a
 80049b0:	4602      	mov	r2, r0
 80049b2:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80049b4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	da0a      	bge.n	80049d2 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80049bc:	78fa      	ldrb	r2, [r7, #3]
 80049be:	6879      	ldr	r1, [r7, #4]
 80049c0:	4613      	mov	r3, r2
 80049c2:	009b      	lsls	r3, r3, #2
 80049c4:	4413      	add	r3, r2
 80049c6:	00db      	lsls	r3, r3, #3
 80049c8:	440b      	add	r3, r1
 80049ca:	333b      	adds	r3, #59	; 0x3b
 80049cc:	2201      	movs	r2, #1
 80049ce:	701a      	strb	r2, [r3, #0]
 80049d0:	e009      	b.n	80049e6 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80049d2:	78fa      	ldrb	r2, [r7, #3]
 80049d4:	6879      	ldr	r1, [r7, #4]
 80049d6:	4613      	mov	r3, r2
 80049d8:	009b      	lsls	r3, r3, #2
 80049da:	4413      	add	r3, r2
 80049dc:	00db      	lsls	r3, r3, #3
 80049de:	440b      	add	r3, r1
 80049e0:	333b      	adds	r3, #59	; 0x3b
 80049e2:	2200      	movs	r2, #0
 80049e4:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80049e6:	78fa      	ldrb	r2, [r7, #3]
 80049e8:	6879      	ldr	r1, [r7, #4]
 80049ea:	4613      	mov	r3, r2
 80049ec:	009b      	lsls	r3, r3, #2
 80049ee:	4413      	add	r3, r2
 80049f0:	00db      	lsls	r3, r3, #3
 80049f2:	440b      	add	r3, r1
 80049f4:	333c      	adds	r3, #60	; 0x3c
 80049f6:	f897 2020 	ldrb.w	r2, [r7, #32]
 80049fa:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6818      	ldr	r0, [r3, #0]
 8004a00:	787c      	ldrb	r4, [r7, #1]
 8004a02:	78ba      	ldrb	r2, [r7, #2]
 8004a04:	78f9      	ldrb	r1, [r7, #3]
 8004a06:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004a08:	9302      	str	r3, [sp, #8]
 8004a0a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004a0e:	9301      	str	r3, [sp, #4]
 8004a10:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004a14:	9300      	str	r3, [sp, #0]
 8004a16:	4623      	mov	r3, r4
 8004a18:	f007 ffd4 	bl	800c9c4 <USB_HC_Init>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2200      	movs	r2, #0
 8004a24:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8004a28:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3714      	adds	r7, #20
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd90      	pop	{r4, r7, pc}

08004a32 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8004a32:	b580      	push	{r7, lr}
 8004a34:	b084      	sub	sp, #16
 8004a36:	af00      	add	r7, sp, #0
 8004a38:	6078      	str	r0, [r7, #4]
 8004a3a:	460b      	mov	r3, r1
 8004a3c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d101      	bne.n	8004a50 <HAL_HCD_HC_Halt+0x1e>
 8004a4c:	2302      	movs	r3, #2
 8004a4e:	e00f      	b.n	8004a70 <HAL_HCD_HC_Halt+0x3e>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2201      	movs	r2, #1
 8004a54:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	78fa      	ldrb	r2, [r7, #3]
 8004a5e:	4611      	mov	r1, r2
 8004a60:	4618      	mov	r0, r3
 8004a62:	f008 fa0e 	bl	800ce82 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8004a6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	3710      	adds	r7, #16
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}

08004a78 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b082      	sub	sp, #8
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	4608      	mov	r0, r1
 8004a82:	4611      	mov	r1, r2
 8004a84:	461a      	mov	r2, r3
 8004a86:	4603      	mov	r3, r0
 8004a88:	70fb      	strb	r3, [r7, #3]
 8004a8a:	460b      	mov	r3, r1
 8004a8c:	70bb      	strb	r3, [r7, #2]
 8004a8e:	4613      	mov	r3, r2
 8004a90:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8004a92:	78fa      	ldrb	r2, [r7, #3]
 8004a94:	6879      	ldr	r1, [r7, #4]
 8004a96:	4613      	mov	r3, r2
 8004a98:	009b      	lsls	r3, r3, #2
 8004a9a:	4413      	add	r3, r2
 8004a9c:	00db      	lsls	r3, r3, #3
 8004a9e:	440b      	add	r3, r1
 8004aa0:	333b      	adds	r3, #59	; 0x3b
 8004aa2:	78ba      	ldrb	r2, [r7, #2]
 8004aa4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8004aa6:	78fa      	ldrb	r2, [r7, #3]
 8004aa8:	6879      	ldr	r1, [r7, #4]
 8004aaa:	4613      	mov	r3, r2
 8004aac:	009b      	lsls	r3, r3, #2
 8004aae:	4413      	add	r3, r2
 8004ab0:	00db      	lsls	r3, r3, #3
 8004ab2:	440b      	add	r3, r1
 8004ab4:	333f      	adds	r3, #63	; 0x3f
 8004ab6:	787a      	ldrb	r2, [r7, #1]
 8004ab8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8004aba:	7c3b      	ldrb	r3, [r7, #16]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d114      	bne.n	8004aea <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8004ac0:	78fa      	ldrb	r2, [r7, #3]
 8004ac2:	6879      	ldr	r1, [r7, #4]
 8004ac4:	4613      	mov	r3, r2
 8004ac6:	009b      	lsls	r3, r3, #2
 8004ac8:	4413      	add	r3, r2
 8004aca:	00db      	lsls	r3, r3, #3
 8004acc:	440b      	add	r3, r1
 8004ace:	3342      	adds	r3, #66	; 0x42
 8004ad0:	2203      	movs	r2, #3
 8004ad2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8004ad4:	78fa      	ldrb	r2, [r7, #3]
 8004ad6:	6879      	ldr	r1, [r7, #4]
 8004ad8:	4613      	mov	r3, r2
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	4413      	add	r3, r2
 8004ade:	00db      	lsls	r3, r3, #3
 8004ae0:	440b      	add	r3, r1
 8004ae2:	333d      	adds	r3, #61	; 0x3d
 8004ae4:	7f3a      	ldrb	r2, [r7, #28]
 8004ae6:	701a      	strb	r2, [r3, #0]
 8004ae8:	e009      	b.n	8004afe <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004aea:	78fa      	ldrb	r2, [r7, #3]
 8004aec:	6879      	ldr	r1, [r7, #4]
 8004aee:	4613      	mov	r3, r2
 8004af0:	009b      	lsls	r3, r3, #2
 8004af2:	4413      	add	r3, r2
 8004af4:	00db      	lsls	r3, r3, #3
 8004af6:	440b      	add	r3, r1
 8004af8:	3342      	adds	r3, #66	; 0x42
 8004afa:	2202      	movs	r2, #2
 8004afc:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8004afe:	787b      	ldrb	r3, [r7, #1]
 8004b00:	2b03      	cmp	r3, #3
 8004b02:	f200 80d6 	bhi.w	8004cb2 <HAL_HCD_HC_SubmitRequest+0x23a>
 8004b06:	a201      	add	r2, pc, #4	; (adr r2, 8004b0c <HAL_HCD_HC_SubmitRequest+0x94>)
 8004b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b0c:	08004b1d 	.word	0x08004b1d
 8004b10:	08004c9d 	.word	0x08004c9d
 8004b14:	08004b89 	.word	0x08004b89
 8004b18:	08004c13 	.word	0x08004c13
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8004b1c:	7c3b      	ldrb	r3, [r7, #16]
 8004b1e:	2b01      	cmp	r3, #1
 8004b20:	f040 80c9 	bne.w	8004cb6 <HAL_HCD_HC_SubmitRequest+0x23e>
 8004b24:	78bb      	ldrb	r3, [r7, #2]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	f040 80c5 	bne.w	8004cb6 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8004b2c:	8b3b      	ldrh	r3, [r7, #24]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d109      	bne.n	8004b46 <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8004b32:	78fa      	ldrb	r2, [r7, #3]
 8004b34:	6879      	ldr	r1, [r7, #4]
 8004b36:	4613      	mov	r3, r2
 8004b38:	009b      	lsls	r3, r3, #2
 8004b3a:	4413      	add	r3, r2
 8004b3c:	00db      	lsls	r3, r3, #3
 8004b3e:	440b      	add	r3, r1
 8004b40:	3351      	adds	r3, #81	; 0x51
 8004b42:	2201      	movs	r2, #1
 8004b44:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004b46:	78fa      	ldrb	r2, [r7, #3]
 8004b48:	6879      	ldr	r1, [r7, #4]
 8004b4a:	4613      	mov	r3, r2
 8004b4c:	009b      	lsls	r3, r3, #2
 8004b4e:	4413      	add	r3, r2
 8004b50:	00db      	lsls	r3, r3, #3
 8004b52:	440b      	add	r3, r1
 8004b54:	3351      	adds	r3, #81	; 0x51
 8004b56:	781b      	ldrb	r3, [r3, #0]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d10a      	bne.n	8004b72 <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004b5c:	78fa      	ldrb	r2, [r7, #3]
 8004b5e:	6879      	ldr	r1, [r7, #4]
 8004b60:	4613      	mov	r3, r2
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	4413      	add	r3, r2
 8004b66:	00db      	lsls	r3, r3, #3
 8004b68:	440b      	add	r3, r1
 8004b6a:	3342      	adds	r3, #66	; 0x42
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004b70:	e0a1      	b.n	8004cb6 <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004b72:	78fa      	ldrb	r2, [r7, #3]
 8004b74:	6879      	ldr	r1, [r7, #4]
 8004b76:	4613      	mov	r3, r2
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	4413      	add	r3, r2
 8004b7c:	00db      	lsls	r3, r3, #3
 8004b7e:	440b      	add	r3, r1
 8004b80:	3342      	adds	r3, #66	; 0x42
 8004b82:	2202      	movs	r2, #2
 8004b84:	701a      	strb	r2, [r3, #0]
      break;
 8004b86:	e096      	b.n	8004cb6 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8004b88:	78bb      	ldrb	r3, [r7, #2]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d120      	bne.n	8004bd0 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004b8e:	78fa      	ldrb	r2, [r7, #3]
 8004b90:	6879      	ldr	r1, [r7, #4]
 8004b92:	4613      	mov	r3, r2
 8004b94:	009b      	lsls	r3, r3, #2
 8004b96:	4413      	add	r3, r2
 8004b98:	00db      	lsls	r3, r3, #3
 8004b9a:	440b      	add	r3, r1
 8004b9c:	3351      	adds	r3, #81	; 0x51
 8004b9e:	781b      	ldrb	r3, [r3, #0]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d10a      	bne.n	8004bba <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004ba4:	78fa      	ldrb	r2, [r7, #3]
 8004ba6:	6879      	ldr	r1, [r7, #4]
 8004ba8:	4613      	mov	r3, r2
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	4413      	add	r3, r2
 8004bae:	00db      	lsls	r3, r3, #3
 8004bb0:	440b      	add	r3, r1
 8004bb2:	3342      	adds	r3, #66	; 0x42
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8004bb8:	e07e      	b.n	8004cb8 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004bba:	78fa      	ldrb	r2, [r7, #3]
 8004bbc:	6879      	ldr	r1, [r7, #4]
 8004bbe:	4613      	mov	r3, r2
 8004bc0:	009b      	lsls	r3, r3, #2
 8004bc2:	4413      	add	r3, r2
 8004bc4:	00db      	lsls	r3, r3, #3
 8004bc6:	440b      	add	r3, r1
 8004bc8:	3342      	adds	r3, #66	; 0x42
 8004bca:	2202      	movs	r2, #2
 8004bcc:	701a      	strb	r2, [r3, #0]
      break;
 8004bce:	e073      	b.n	8004cb8 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004bd0:	78fa      	ldrb	r2, [r7, #3]
 8004bd2:	6879      	ldr	r1, [r7, #4]
 8004bd4:	4613      	mov	r3, r2
 8004bd6:	009b      	lsls	r3, r3, #2
 8004bd8:	4413      	add	r3, r2
 8004bda:	00db      	lsls	r3, r3, #3
 8004bdc:	440b      	add	r3, r1
 8004bde:	3350      	adds	r3, #80	; 0x50
 8004be0:	781b      	ldrb	r3, [r3, #0]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d10a      	bne.n	8004bfc <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004be6:	78fa      	ldrb	r2, [r7, #3]
 8004be8:	6879      	ldr	r1, [r7, #4]
 8004bea:	4613      	mov	r3, r2
 8004bec:	009b      	lsls	r3, r3, #2
 8004bee:	4413      	add	r3, r2
 8004bf0:	00db      	lsls	r3, r3, #3
 8004bf2:	440b      	add	r3, r1
 8004bf4:	3342      	adds	r3, #66	; 0x42
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	701a      	strb	r2, [r3, #0]
      break;
 8004bfa:	e05d      	b.n	8004cb8 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004bfc:	78fa      	ldrb	r2, [r7, #3]
 8004bfe:	6879      	ldr	r1, [r7, #4]
 8004c00:	4613      	mov	r3, r2
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	4413      	add	r3, r2
 8004c06:	00db      	lsls	r3, r3, #3
 8004c08:	440b      	add	r3, r1
 8004c0a:	3342      	adds	r3, #66	; 0x42
 8004c0c:	2202      	movs	r2, #2
 8004c0e:	701a      	strb	r2, [r3, #0]
      break;
 8004c10:	e052      	b.n	8004cb8 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8004c12:	78bb      	ldrb	r3, [r7, #2]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d120      	bne.n	8004c5a <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004c18:	78fa      	ldrb	r2, [r7, #3]
 8004c1a:	6879      	ldr	r1, [r7, #4]
 8004c1c:	4613      	mov	r3, r2
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	4413      	add	r3, r2
 8004c22:	00db      	lsls	r3, r3, #3
 8004c24:	440b      	add	r3, r1
 8004c26:	3351      	adds	r3, #81	; 0x51
 8004c28:	781b      	ldrb	r3, [r3, #0]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d10a      	bne.n	8004c44 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004c2e:	78fa      	ldrb	r2, [r7, #3]
 8004c30:	6879      	ldr	r1, [r7, #4]
 8004c32:	4613      	mov	r3, r2
 8004c34:	009b      	lsls	r3, r3, #2
 8004c36:	4413      	add	r3, r2
 8004c38:	00db      	lsls	r3, r3, #3
 8004c3a:	440b      	add	r3, r1
 8004c3c:	3342      	adds	r3, #66	; 0x42
 8004c3e:	2200      	movs	r2, #0
 8004c40:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004c42:	e039      	b.n	8004cb8 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004c44:	78fa      	ldrb	r2, [r7, #3]
 8004c46:	6879      	ldr	r1, [r7, #4]
 8004c48:	4613      	mov	r3, r2
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	4413      	add	r3, r2
 8004c4e:	00db      	lsls	r3, r3, #3
 8004c50:	440b      	add	r3, r1
 8004c52:	3342      	adds	r3, #66	; 0x42
 8004c54:	2202      	movs	r2, #2
 8004c56:	701a      	strb	r2, [r3, #0]
      break;
 8004c58:	e02e      	b.n	8004cb8 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004c5a:	78fa      	ldrb	r2, [r7, #3]
 8004c5c:	6879      	ldr	r1, [r7, #4]
 8004c5e:	4613      	mov	r3, r2
 8004c60:	009b      	lsls	r3, r3, #2
 8004c62:	4413      	add	r3, r2
 8004c64:	00db      	lsls	r3, r3, #3
 8004c66:	440b      	add	r3, r1
 8004c68:	3350      	adds	r3, #80	; 0x50
 8004c6a:	781b      	ldrb	r3, [r3, #0]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d10a      	bne.n	8004c86 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004c70:	78fa      	ldrb	r2, [r7, #3]
 8004c72:	6879      	ldr	r1, [r7, #4]
 8004c74:	4613      	mov	r3, r2
 8004c76:	009b      	lsls	r3, r3, #2
 8004c78:	4413      	add	r3, r2
 8004c7a:	00db      	lsls	r3, r3, #3
 8004c7c:	440b      	add	r3, r1
 8004c7e:	3342      	adds	r3, #66	; 0x42
 8004c80:	2200      	movs	r2, #0
 8004c82:	701a      	strb	r2, [r3, #0]
      break;
 8004c84:	e018      	b.n	8004cb8 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004c86:	78fa      	ldrb	r2, [r7, #3]
 8004c88:	6879      	ldr	r1, [r7, #4]
 8004c8a:	4613      	mov	r3, r2
 8004c8c:	009b      	lsls	r3, r3, #2
 8004c8e:	4413      	add	r3, r2
 8004c90:	00db      	lsls	r3, r3, #3
 8004c92:	440b      	add	r3, r1
 8004c94:	3342      	adds	r3, #66	; 0x42
 8004c96:	2202      	movs	r2, #2
 8004c98:	701a      	strb	r2, [r3, #0]
      break;
 8004c9a:	e00d      	b.n	8004cb8 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004c9c:	78fa      	ldrb	r2, [r7, #3]
 8004c9e:	6879      	ldr	r1, [r7, #4]
 8004ca0:	4613      	mov	r3, r2
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	4413      	add	r3, r2
 8004ca6:	00db      	lsls	r3, r3, #3
 8004ca8:	440b      	add	r3, r1
 8004caa:	3342      	adds	r3, #66	; 0x42
 8004cac:	2200      	movs	r2, #0
 8004cae:	701a      	strb	r2, [r3, #0]
      break;
 8004cb0:	e002      	b.n	8004cb8 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8004cb2:	bf00      	nop
 8004cb4:	e000      	b.n	8004cb8 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8004cb6:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8004cb8:	78fa      	ldrb	r2, [r7, #3]
 8004cba:	6879      	ldr	r1, [r7, #4]
 8004cbc:	4613      	mov	r3, r2
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	4413      	add	r3, r2
 8004cc2:	00db      	lsls	r3, r3, #3
 8004cc4:	440b      	add	r3, r1
 8004cc6:	3344      	adds	r3, #68	; 0x44
 8004cc8:	697a      	ldr	r2, [r7, #20]
 8004cca:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8004ccc:	78fa      	ldrb	r2, [r7, #3]
 8004cce:	8b39      	ldrh	r1, [r7, #24]
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	4613      	mov	r3, r2
 8004cd4:	009b      	lsls	r3, r3, #2
 8004cd6:	4413      	add	r3, r2
 8004cd8:	00db      	lsls	r3, r3, #3
 8004cda:	4403      	add	r3, r0
 8004cdc:	3348      	adds	r3, #72	; 0x48
 8004cde:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8004ce0:	78fa      	ldrb	r2, [r7, #3]
 8004ce2:	6879      	ldr	r1, [r7, #4]
 8004ce4:	4613      	mov	r3, r2
 8004ce6:	009b      	lsls	r3, r3, #2
 8004ce8:	4413      	add	r3, r2
 8004cea:	00db      	lsls	r3, r3, #3
 8004cec:	440b      	add	r3, r1
 8004cee:	335c      	adds	r3, #92	; 0x5c
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8004cf4:	78fa      	ldrb	r2, [r7, #3]
 8004cf6:	6879      	ldr	r1, [r7, #4]
 8004cf8:	4613      	mov	r3, r2
 8004cfa:	009b      	lsls	r3, r3, #2
 8004cfc:	4413      	add	r3, r2
 8004cfe:	00db      	lsls	r3, r3, #3
 8004d00:	440b      	add	r3, r1
 8004d02:	334c      	adds	r3, #76	; 0x4c
 8004d04:	2200      	movs	r2, #0
 8004d06:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004d08:	78fa      	ldrb	r2, [r7, #3]
 8004d0a:	6879      	ldr	r1, [r7, #4]
 8004d0c:	4613      	mov	r3, r2
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	4413      	add	r3, r2
 8004d12:	00db      	lsls	r3, r3, #3
 8004d14:	440b      	add	r3, r1
 8004d16:	3339      	adds	r3, #57	; 0x39
 8004d18:	78fa      	ldrb	r2, [r7, #3]
 8004d1a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8004d1c:	78fa      	ldrb	r2, [r7, #3]
 8004d1e:	6879      	ldr	r1, [r7, #4]
 8004d20:	4613      	mov	r3, r2
 8004d22:	009b      	lsls	r3, r3, #2
 8004d24:	4413      	add	r3, r2
 8004d26:	00db      	lsls	r3, r3, #3
 8004d28:	440b      	add	r3, r1
 8004d2a:	335d      	adds	r3, #93	; 0x5d
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6818      	ldr	r0, [r3, #0]
 8004d34:	78fa      	ldrb	r2, [r7, #3]
 8004d36:	4613      	mov	r3, r2
 8004d38:	009b      	lsls	r3, r3, #2
 8004d3a:	4413      	add	r3, r2
 8004d3c:	00db      	lsls	r3, r3, #3
 8004d3e:	3338      	adds	r3, #56	; 0x38
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	18d1      	adds	r1, r2, r3
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	691b      	ldr	r3, [r3, #16]
 8004d48:	b2db      	uxtb	r3, r3
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	f007 ff44 	bl	800cbd8 <USB_HC_StartXfer>
 8004d50:	4603      	mov	r3, r0
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3708      	adds	r7, #8
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}
 8004d5a:	bf00      	nop

08004d5c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b086      	sub	sp, #24
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4618      	mov	r0, r3
 8004d74:	f007 fc6d 	bl	800c652 <USB_GetMode>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	2b01      	cmp	r3, #1
 8004d7c:	f040 80ef 	bne.w	8004f5e <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4618      	mov	r0, r3
 8004d86:	f007 fc51 	bl	800c62c <USB_ReadInterrupts>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	f000 80e5 	beq.w	8004f5c <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4618      	mov	r0, r3
 8004d98:	f007 fc48 	bl	800c62c <USB_ReadInterrupts>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004da2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004da6:	d104      	bne.n	8004db2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004db0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4618      	mov	r0, r3
 8004db8:	f007 fc38 	bl	800c62c <USB_ReadInterrupts>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004dc2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004dc6:	d104      	bne.n	8004dd2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004dd0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f007 fc28 	bl	800c62c <USB_ReadInterrupts>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004de2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004de6:	d104      	bne.n	8004df2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004df0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4618      	mov	r0, r3
 8004df8:	f007 fc18 	bl	800c62c <USB_ReadInterrupts>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	f003 0302 	and.w	r3, r3, #2
 8004e02:	2b02      	cmp	r3, #2
 8004e04:	d103      	bne.n	8004e0e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	2202      	movs	r2, #2
 8004e0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4618      	mov	r0, r3
 8004e14:	f007 fc0a 	bl	800c62c <USB_ReadInterrupts>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e22:	d115      	bne.n	8004e50 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004e2c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 0301 	and.w	r3, r3, #1
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d108      	bne.n	8004e50 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f00d f986 	bl	8012150 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	2101      	movs	r1, #1
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f007 fcf4 	bl	800c838 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4618      	mov	r0, r3
 8004e56:	f007 fbe9 	bl	800c62c <USB_ReadInterrupts>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004e64:	d102      	bne.n	8004e6c <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f001 f966 	bl	8006138 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4618      	mov	r0, r3
 8004e72:	f007 fbdb 	bl	800c62c <USB_ReadInterrupts>
 8004e76:	4603      	mov	r3, r0
 8004e78:	f003 0308 	and.w	r3, r3, #8
 8004e7c:	2b08      	cmp	r3, #8
 8004e7e:	d106      	bne.n	8004e8e <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f00d f949 	bl	8012118 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	2208      	movs	r2, #8
 8004e8c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4618      	mov	r0, r3
 8004e94:	f007 fbca 	bl	800c62c <USB_ReadInterrupts>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e9e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ea2:	d138      	bne.n	8004f16 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f007 ffd9 	bl	800ce60 <USB_HC_ReadInterrupt>
 8004eae:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	617b      	str	r3, [r7, #20]
 8004eb4:	e025      	b.n	8004f02 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	f003 030f 	and.w	r3, r3, #15
 8004ebc:	68ba      	ldr	r2, [r7, #8]
 8004ebe:	fa22 f303 	lsr.w	r3, r2, r3
 8004ec2:	f003 0301 	and.w	r3, r3, #1
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d018      	beq.n	8004efc <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	015a      	lsls	r2, r3, #5
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	4413      	add	r3, r2
 8004ed2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004edc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ee0:	d106      	bne.n	8004ef0 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	b2db      	uxtb	r3, r3
 8004ee6:	4619      	mov	r1, r3
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	f000 f8cf 	bl	800508c <HCD_HC_IN_IRQHandler>
 8004eee:	e005      	b.n	8004efc <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	b2db      	uxtb	r3, r3
 8004ef4:	4619      	mov	r1, r3
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f000 fcfd 	bl	80058f6 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	3301      	adds	r3, #1
 8004f00:	617b      	str	r3, [r7, #20]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	697a      	ldr	r2, [r7, #20]
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d3d4      	bcc.n	8004eb6 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004f14:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f007 fb86 	bl	800c62c <USB_ReadInterrupts>
 8004f20:	4603      	mov	r3, r0
 8004f22:	f003 0310 	and.w	r3, r3, #16
 8004f26:	2b10      	cmp	r3, #16
 8004f28:	d101      	bne.n	8004f2e <HAL_HCD_IRQHandler+0x1d2>
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e000      	b.n	8004f30 <HAL_HCD_IRQHandler+0x1d4>
 8004f2e:	2300      	movs	r3, #0
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d014      	beq.n	8004f5e <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	699a      	ldr	r2, [r3, #24]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f022 0210 	bic.w	r2, r2, #16
 8004f42:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	f001 f84b 	bl	8005fe0 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	699a      	ldr	r2, [r3, #24]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f042 0210 	orr.w	r2, r2, #16
 8004f58:	619a      	str	r2, [r3, #24]
 8004f5a:	e000      	b.n	8004f5e <HAL_HCD_IRQHandler+0x202>
      return;
 8004f5c:	bf00      	nop
    }
  }
}
 8004f5e:	3718      	adds	r7, #24
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}

08004f64 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b082      	sub	sp, #8
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d101      	bne.n	8004f7a <HAL_HCD_Start+0x16>
 8004f76:	2302      	movs	r3, #2
 8004f78:	e013      	b.n	8004fa2 <HAL_HCD_Start+0x3e>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4618      	mov	r0, r3
 8004f88:	f007 fa5e 	bl	800c448 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	2101      	movs	r1, #1
 8004f92:	4618      	mov	r0, r3
 8004f94:	f007 fcb4 	bl	800c900 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8004fa0:	2300      	movs	r3, #0
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3708      	adds	r7, #8
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}

08004faa <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8004faa:	b580      	push	{r7, lr}
 8004fac:	b082      	sub	sp, #8
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d101      	bne.n	8004fc0 <HAL_HCD_Stop+0x16>
 8004fbc:	2302      	movs	r3, #2
 8004fbe:	e00d      	b.n	8004fdc <HAL_HCD_Stop+0x32>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f008 f893 	bl	800d0f8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8004fda:	2300      	movs	r3, #0
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3708      	adds	r7, #8
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}

08004fe4 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b082      	sub	sp, #8
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f007 fc5b 	bl	800c8ac <USB_ResetPort>
 8004ff6:	4603      	mov	r3, r0
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3708      	adds	r7, #8
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}

08005000 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005000:	b480      	push	{r7}
 8005002:	b083      	sub	sp, #12
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
 8005008:	460b      	mov	r3, r1
 800500a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800500c:	78fa      	ldrb	r2, [r7, #3]
 800500e:	6879      	ldr	r1, [r7, #4]
 8005010:	4613      	mov	r3, r2
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	4413      	add	r3, r2
 8005016:	00db      	lsls	r3, r3, #3
 8005018:	440b      	add	r3, r1
 800501a:	335c      	adds	r3, #92	; 0x5c
 800501c:	781b      	ldrb	r3, [r3, #0]
}
 800501e:	4618      	mov	r0, r3
 8005020:	370c      	adds	r7, #12
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr

0800502a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800502a:	b480      	push	{r7}
 800502c:	b083      	sub	sp, #12
 800502e:	af00      	add	r7, sp, #0
 8005030:	6078      	str	r0, [r7, #4]
 8005032:	460b      	mov	r3, r1
 8005034:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8005036:	78fa      	ldrb	r2, [r7, #3]
 8005038:	6879      	ldr	r1, [r7, #4]
 800503a:	4613      	mov	r3, r2
 800503c:	009b      	lsls	r3, r3, #2
 800503e:	4413      	add	r3, r2
 8005040:	00db      	lsls	r3, r3, #3
 8005042:	440b      	add	r3, r1
 8005044:	334c      	adds	r3, #76	; 0x4c
 8005046:	681b      	ldr	r3, [r3, #0]
}
 8005048:	4618      	mov	r0, r3
 800504a:	370c      	adds	r7, #12
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr

08005054 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b082      	sub	sp, #8
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4618      	mov	r0, r3
 8005062:	f007 fc9d 	bl	800c9a0 <USB_GetCurrentFrame>
 8005066:	4603      	mov	r3, r0
}
 8005068:	4618      	mov	r0, r3
 800506a:	3708      	adds	r7, #8
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}

08005070 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b082      	sub	sp, #8
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4618      	mov	r0, r3
 800507e:	f007 fc78 	bl	800c972 <USB_GetHostSpeed>
 8005082:	4603      	mov	r3, r0
}
 8005084:	4618      	mov	r0, r3
 8005086:	3708      	adds	r7, #8
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}

0800508c <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b086      	sub	sp, #24
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
 8005094:	460b      	mov	r3, r1
 8005096:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80050a2:	78fb      	ldrb	r3, [r7, #3]
 80050a4:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	015a      	lsls	r2, r3, #5
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	4413      	add	r3, r2
 80050ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	f003 0304 	and.w	r3, r3, #4
 80050b8:	2b04      	cmp	r3, #4
 80050ba:	d119      	bne.n	80050f0 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	015a      	lsls	r2, r3, #5
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	4413      	add	r3, r2
 80050c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050c8:	461a      	mov	r2, r3
 80050ca:	2304      	movs	r3, #4
 80050cc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	015a      	lsls	r2, r3, #5
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	4413      	add	r3, r2
 80050d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	68fa      	ldr	r2, [r7, #12]
 80050de:	0151      	lsls	r1, r2, #5
 80050e0:	693a      	ldr	r2, [r7, #16]
 80050e2:	440a      	add	r2, r1
 80050e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80050e8:	f043 0302 	orr.w	r3, r3, #2
 80050ec:	60d3      	str	r3, [r2, #12]
 80050ee:	e0ce      	b.n	800528e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	015a      	lsls	r2, r3, #5
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	4413      	add	r3, r2
 80050f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005102:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005106:	d12c      	bne.n	8005162 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	015a      	lsls	r2, r3, #5
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	4413      	add	r3, r2
 8005110:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005114:	461a      	mov	r2, r3
 8005116:	f44f 7380 	mov.w	r3, #256	; 0x100
 800511a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800511c:	6879      	ldr	r1, [r7, #4]
 800511e:	68fa      	ldr	r2, [r7, #12]
 8005120:	4613      	mov	r3, r2
 8005122:	009b      	lsls	r3, r3, #2
 8005124:	4413      	add	r3, r2
 8005126:	00db      	lsls	r3, r3, #3
 8005128:	440b      	add	r3, r1
 800512a:	335d      	adds	r3, #93	; 0x5d
 800512c:	2207      	movs	r2, #7
 800512e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	015a      	lsls	r2, r3, #5
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	4413      	add	r3, r2
 8005138:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800513c:	68db      	ldr	r3, [r3, #12]
 800513e:	68fa      	ldr	r2, [r7, #12]
 8005140:	0151      	lsls	r1, r2, #5
 8005142:	693a      	ldr	r2, [r7, #16]
 8005144:	440a      	add	r2, r1
 8005146:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800514a:	f043 0302 	orr.w	r3, r3, #2
 800514e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	68fa      	ldr	r2, [r7, #12]
 8005156:	b2d2      	uxtb	r2, r2
 8005158:	4611      	mov	r1, r2
 800515a:	4618      	mov	r0, r3
 800515c:	f007 fe91 	bl	800ce82 <USB_HC_Halt>
 8005160:	e095      	b.n	800528e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	015a      	lsls	r2, r3, #5
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	4413      	add	r3, r2
 800516a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	f003 0320 	and.w	r3, r3, #32
 8005174:	2b20      	cmp	r3, #32
 8005176:	d109      	bne.n	800518c <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	015a      	lsls	r2, r3, #5
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	4413      	add	r3, r2
 8005180:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005184:	461a      	mov	r2, r3
 8005186:	2320      	movs	r3, #32
 8005188:	6093      	str	r3, [r2, #8]
 800518a:	e080      	b.n	800528e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	015a      	lsls	r2, r3, #5
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	4413      	add	r3, r2
 8005194:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	f003 0308 	and.w	r3, r3, #8
 800519e:	2b08      	cmp	r3, #8
 80051a0:	d134      	bne.n	800520c <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	015a      	lsls	r2, r3, #5
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	4413      	add	r3, r2
 80051aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	68fa      	ldr	r2, [r7, #12]
 80051b2:	0151      	lsls	r1, r2, #5
 80051b4:	693a      	ldr	r2, [r7, #16]
 80051b6:	440a      	add	r2, r1
 80051b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051bc:	f043 0302 	orr.w	r3, r3, #2
 80051c0:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80051c2:	6879      	ldr	r1, [r7, #4]
 80051c4:	68fa      	ldr	r2, [r7, #12]
 80051c6:	4613      	mov	r3, r2
 80051c8:	009b      	lsls	r3, r3, #2
 80051ca:	4413      	add	r3, r2
 80051cc:	00db      	lsls	r3, r3, #3
 80051ce:	440b      	add	r3, r1
 80051d0:	335d      	adds	r3, #93	; 0x5d
 80051d2:	2205      	movs	r2, #5
 80051d4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	015a      	lsls	r2, r3, #5
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	4413      	add	r3, r2
 80051de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051e2:	461a      	mov	r2, r3
 80051e4:	2310      	movs	r3, #16
 80051e6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	015a      	lsls	r2, r3, #5
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	4413      	add	r3, r2
 80051f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051f4:	461a      	mov	r2, r3
 80051f6:	2308      	movs	r3, #8
 80051f8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	68fa      	ldr	r2, [r7, #12]
 8005200:	b2d2      	uxtb	r2, r2
 8005202:	4611      	mov	r1, r2
 8005204:	4618      	mov	r0, r3
 8005206:	f007 fe3c 	bl	800ce82 <USB_HC_Halt>
 800520a:	e040      	b.n	800528e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	015a      	lsls	r2, r3, #5
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	4413      	add	r3, r2
 8005214:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800521e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005222:	d134      	bne.n	800528e <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	015a      	lsls	r2, r3, #5
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	4413      	add	r3, r2
 800522c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005230:	68db      	ldr	r3, [r3, #12]
 8005232:	68fa      	ldr	r2, [r7, #12]
 8005234:	0151      	lsls	r1, r2, #5
 8005236:	693a      	ldr	r2, [r7, #16]
 8005238:	440a      	add	r2, r1
 800523a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800523e:	f043 0302 	orr.w	r3, r3, #2
 8005242:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	68fa      	ldr	r2, [r7, #12]
 800524a:	b2d2      	uxtb	r2, r2
 800524c:	4611      	mov	r1, r2
 800524e:	4618      	mov	r0, r3
 8005250:	f007 fe17 	bl	800ce82 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	015a      	lsls	r2, r3, #5
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	4413      	add	r3, r2
 800525c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005260:	461a      	mov	r2, r3
 8005262:	2310      	movs	r3, #16
 8005264:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005266:	6879      	ldr	r1, [r7, #4]
 8005268:	68fa      	ldr	r2, [r7, #12]
 800526a:	4613      	mov	r3, r2
 800526c:	009b      	lsls	r3, r3, #2
 800526e:	4413      	add	r3, r2
 8005270:	00db      	lsls	r3, r3, #3
 8005272:	440b      	add	r3, r1
 8005274:	335d      	adds	r3, #93	; 0x5d
 8005276:	2208      	movs	r2, #8
 8005278:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	015a      	lsls	r2, r3, #5
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	4413      	add	r3, r2
 8005282:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005286:	461a      	mov	r2, r3
 8005288:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800528c:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	015a      	lsls	r2, r3, #5
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	4413      	add	r3, r2
 8005296:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052a4:	d122      	bne.n	80052ec <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	015a      	lsls	r2, r3, #5
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	4413      	add	r3, r2
 80052ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052b2:	68db      	ldr	r3, [r3, #12]
 80052b4:	68fa      	ldr	r2, [r7, #12]
 80052b6:	0151      	lsls	r1, r2, #5
 80052b8:	693a      	ldr	r2, [r7, #16]
 80052ba:	440a      	add	r2, r1
 80052bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052c0:	f043 0302 	orr.w	r3, r3, #2
 80052c4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	68fa      	ldr	r2, [r7, #12]
 80052cc:	b2d2      	uxtb	r2, r2
 80052ce:	4611      	mov	r1, r2
 80052d0:	4618      	mov	r0, r3
 80052d2:	f007 fdd6 	bl	800ce82 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	015a      	lsls	r2, r3, #5
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	4413      	add	r3, r2
 80052de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052e2:	461a      	mov	r2, r3
 80052e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80052e8:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80052ea:	e300      	b.n	80058ee <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	015a      	lsls	r2, r3, #5
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	4413      	add	r3, r2
 80052f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	f003 0301 	and.w	r3, r3, #1
 80052fe:	2b01      	cmp	r3, #1
 8005300:	f040 80fd 	bne.w	80054fe <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	691b      	ldr	r3, [r3, #16]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d01b      	beq.n	8005344 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800530c:	6879      	ldr	r1, [r7, #4]
 800530e:	68fa      	ldr	r2, [r7, #12]
 8005310:	4613      	mov	r3, r2
 8005312:	009b      	lsls	r3, r3, #2
 8005314:	4413      	add	r3, r2
 8005316:	00db      	lsls	r3, r3, #3
 8005318:	440b      	add	r3, r1
 800531a:	3348      	adds	r3, #72	; 0x48
 800531c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	0159      	lsls	r1, r3, #5
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	440b      	add	r3, r1
 8005326:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800532a:	691b      	ldr	r3, [r3, #16]
 800532c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8005330:	1ad1      	subs	r1, r2, r3
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	68fa      	ldr	r2, [r7, #12]
 8005336:	4613      	mov	r3, r2
 8005338:	009b      	lsls	r3, r3, #2
 800533a:	4413      	add	r3, r2
 800533c:	00db      	lsls	r3, r3, #3
 800533e:	4403      	add	r3, r0
 8005340:	334c      	adds	r3, #76	; 0x4c
 8005342:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005344:	6879      	ldr	r1, [r7, #4]
 8005346:	68fa      	ldr	r2, [r7, #12]
 8005348:	4613      	mov	r3, r2
 800534a:	009b      	lsls	r3, r3, #2
 800534c:	4413      	add	r3, r2
 800534e:	00db      	lsls	r3, r3, #3
 8005350:	440b      	add	r3, r1
 8005352:	335d      	adds	r3, #93	; 0x5d
 8005354:	2201      	movs	r2, #1
 8005356:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005358:	6879      	ldr	r1, [r7, #4]
 800535a:	68fa      	ldr	r2, [r7, #12]
 800535c:	4613      	mov	r3, r2
 800535e:	009b      	lsls	r3, r3, #2
 8005360:	4413      	add	r3, r2
 8005362:	00db      	lsls	r3, r3, #3
 8005364:	440b      	add	r3, r1
 8005366:	3358      	adds	r3, #88	; 0x58
 8005368:	2200      	movs	r2, #0
 800536a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	015a      	lsls	r2, r3, #5
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	4413      	add	r3, r2
 8005374:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005378:	461a      	mov	r2, r3
 800537a:	2301      	movs	r3, #1
 800537c:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800537e:	6879      	ldr	r1, [r7, #4]
 8005380:	68fa      	ldr	r2, [r7, #12]
 8005382:	4613      	mov	r3, r2
 8005384:	009b      	lsls	r3, r3, #2
 8005386:	4413      	add	r3, r2
 8005388:	00db      	lsls	r3, r3, #3
 800538a:	440b      	add	r3, r1
 800538c:	333f      	adds	r3, #63	; 0x3f
 800538e:	781b      	ldrb	r3, [r3, #0]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d00a      	beq.n	80053aa <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8005394:	6879      	ldr	r1, [r7, #4]
 8005396:	68fa      	ldr	r2, [r7, #12]
 8005398:	4613      	mov	r3, r2
 800539a:	009b      	lsls	r3, r3, #2
 800539c:	4413      	add	r3, r2
 800539e:	00db      	lsls	r3, r3, #3
 80053a0:	440b      	add	r3, r1
 80053a2:	333f      	adds	r3, #63	; 0x3f
 80053a4:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80053a6:	2b02      	cmp	r3, #2
 80053a8:	d121      	bne.n	80053ee <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	015a      	lsls	r2, r3, #5
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	4413      	add	r3, r2
 80053b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053b6:	68db      	ldr	r3, [r3, #12]
 80053b8:	68fa      	ldr	r2, [r7, #12]
 80053ba:	0151      	lsls	r1, r2, #5
 80053bc:	693a      	ldr	r2, [r7, #16]
 80053be:	440a      	add	r2, r1
 80053c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053c4:	f043 0302 	orr.w	r3, r3, #2
 80053c8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	68fa      	ldr	r2, [r7, #12]
 80053d0:	b2d2      	uxtb	r2, r2
 80053d2:	4611      	mov	r1, r2
 80053d4:	4618      	mov	r0, r3
 80053d6:	f007 fd54 	bl	800ce82 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	015a      	lsls	r2, r3, #5
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	4413      	add	r3, r2
 80053e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053e6:	461a      	mov	r2, r3
 80053e8:	2310      	movs	r3, #16
 80053ea:	6093      	str	r3, [r2, #8]
 80053ec:	e070      	b.n	80054d0 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80053ee:	6879      	ldr	r1, [r7, #4]
 80053f0:	68fa      	ldr	r2, [r7, #12]
 80053f2:	4613      	mov	r3, r2
 80053f4:	009b      	lsls	r3, r3, #2
 80053f6:	4413      	add	r3, r2
 80053f8:	00db      	lsls	r3, r3, #3
 80053fa:	440b      	add	r3, r1
 80053fc:	333f      	adds	r3, #63	; 0x3f
 80053fe:	781b      	ldrb	r3, [r3, #0]
 8005400:	2b03      	cmp	r3, #3
 8005402:	d12a      	bne.n	800545a <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	015a      	lsls	r2, r3, #5
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	4413      	add	r3, r2
 800540c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	68fa      	ldr	r2, [r7, #12]
 8005414:	0151      	lsls	r1, r2, #5
 8005416:	693a      	ldr	r2, [r7, #16]
 8005418:	440a      	add	r2, r1
 800541a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800541e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005422:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005424:	6879      	ldr	r1, [r7, #4]
 8005426:	68fa      	ldr	r2, [r7, #12]
 8005428:	4613      	mov	r3, r2
 800542a:	009b      	lsls	r3, r3, #2
 800542c:	4413      	add	r3, r2
 800542e:	00db      	lsls	r3, r3, #3
 8005430:	440b      	add	r3, r1
 8005432:	335c      	adds	r3, #92	; 0x5c
 8005434:	2201      	movs	r2, #1
 8005436:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	b2d8      	uxtb	r0, r3
 800543c:	6879      	ldr	r1, [r7, #4]
 800543e:	68fa      	ldr	r2, [r7, #12]
 8005440:	4613      	mov	r3, r2
 8005442:	009b      	lsls	r3, r3, #2
 8005444:	4413      	add	r3, r2
 8005446:	00db      	lsls	r3, r3, #3
 8005448:	440b      	add	r3, r1
 800544a:	335c      	adds	r3, #92	; 0x5c
 800544c:	781b      	ldrb	r3, [r3, #0]
 800544e:	461a      	mov	r2, r3
 8005450:	4601      	mov	r1, r0
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f00c fe8a 	bl	801216c <HAL_HCD_HC_NotifyURBChange_Callback>
 8005458:	e03a      	b.n	80054d0 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 800545a:	6879      	ldr	r1, [r7, #4]
 800545c:	68fa      	ldr	r2, [r7, #12]
 800545e:	4613      	mov	r3, r2
 8005460:	009b      	lsls	r3, r3, #2
 8005462:	4413      	add	r3, r2
 8005464:	00db      	lsls	r3, r3, #3
 8005466:	440b      	add	r3, r1
 8005468:	333f      	adds	r3, #63	; 0x3f
 800546a:	781b      	ldrb	r3, [r3, #0]
 800546c:	2b01      	cmp	r3, #1
 800546e:	d12f      	bne.n	80054d0 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005470:	6879      	ldr	r1, [r7, #4]
 8005472:	68fa      	ldr	r2, [r7, #12]
 8005474:	4613      	mov	r3, r2
 8005476:	009b      	lsls	r3, r3, #2
 8005478:	4413      	add	r3, r2
 800547a:	00db      	lsls	r3, r3, #3
 800547c:	440b      	add	r3, r1
 800547e:	335c      	adds	r3, #92	; 0x5c
 8005480:	2201      	movs	r2, #1
 8005482:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8005484:	6879      	ldr	r1, [r7, #4]
 8005486:	68fa      	ldr	r2, [r7, #12]
 8005488:	4613      	mov	r3, r2
 800548a:	009b      	lsls	r3, r3, #2
 800548c:	4413      	add	r3, r2
 800548e:	00db      	lsls	r3, r3, #3
 8005490:	440b      	add	r3, r1
 8005492:	3350      	adds	r3, #80	; 0x50
 8005494:	781b      	ldrb	r3, [r3, #0]
 8005496:	f083 0301 	eor.w	r3, r3, #1
 800549a:	b2d8      	uxtb	r0, r3
 800549c:	6879      	ldr	r1, [r7, #4]
 800549e:	68fa      	ldr	r2, [r7, #12]
 80054a0:	4613      	mov	r3, r2
 80054a2:	009b      	lsls	r3, r3, #2
 80054a4:	4413      	add	r3, r2
 80054a6:	00db      	lsls	r3, r3, #3
 80054a8:	440b      	add	r3, r1
 80054aa:	3350      	adds	r3, #80	; 0x50
 80054ac:	4602      	mov	r2, r0
 80054ae:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	b2d8      	uxtb	r0, r3
 80054b4:	6879      	ldr	r1, [r7, #4]
 80054b6:	68fa      	ldr	r2, [r7, #12]
 80054b8:	4613      	mov	r3, r2
 80054ba:	009b      	lsls	r3, r3, #2
 80054bc:	4413      	add	r3, r2
 80054be:	00db      	lsls	r3, r3, #3
 80054c0:	440b      	add	r3, r1
 80054c2:	335c      	adds	r3, #92	; 0x5c
 80054c4:	781b      	ldrb	r3, [r3, #0]
 80054c6:	461a      	mov	r2, r3
 80054c8:	4601      	mov	r1, r0
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f00c fe4e 	bl	801216c <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 80054d0:	6879      	ldr	r1, [r7, #4]
 80054d2:	68fa      	ldr	r2, [r7, #12]
 80054d4:	4613      	mov	r3, r2
 80054d6:	009b      	lsls	r3, r3, #2
 80054d8:	4413      	add	r3, r2
 80054da:	00db      	lsls	r3, r3, #3
 80054dc:	440b      	add	r3, r1
 80054de:	3350      	adds	r3, #80	; 0x50
 80054e0:	781b      	ldrb	r3, [r3, #0]
 80054e2:	f083 0301 	eor.w	r3, r3, #1
 80054e6:	b2d8      	uxtb	r0, r3
 80054e8:	6879      	ldr	r1, [r7, #4]
 80054ea:	68fa      	ldr	r2, [r7, #12]
 80054ec:	4613      	mov	r3, r2
 80054ee:	009b      	lsls	r3, r3, #2
 80054f0:	4413      	add	r3, r2
 80054f2:	00db      	lsls	r3, r3, #3
 80054f4:	440b      	add	r3, r1
 80054f6:	3350      	adds	r3, #80	; 0x50
 80054f8:	4602      	mov	r2, r0
 80054fa:	701a      	strb	r2, [r3, #0]
}
 80054fc:	e1f7      	b.n	80058ee <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	015a      	lsls	r2, r3, #5
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	4413      	add	r3, r2
 8005506:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800550a:	689b      	ldr	r3, [r3, #8]
 800550c:	f003 0302 	and.w	r3, r3, #2
 8005510:	2b02      	cmp	r3, #2
 8005512:	f040 811a 	bne.w	800574a <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	015a      	lsls	r2, r3, #5
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	4413      	add	r3, r2
 800551e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005522:	68db      	ldr	r3, [r3, #12]
 8005524:	68fa      	ldr	r2, [r7, #12]
 8005526:	0151      	lsls	r1, r2, #5
 8005528:	693a      	ldr	r2, [r7, #16]
 800552a:	440a      	add	r2, r1
 800552c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005530:	f023 0302 	bic.w	r3, r3, #2
 8005534:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005536:	6879      	ldr	r1, [r7, #4]
 8005538:	68fa      	ldr	r2, [r7, #12]
 800553a:	4613      	mov	r3, r2
 800553c:	009b      	lsls	r3, r3, #2
 800553e:	4413      	add	r3, r2
 8005540:	00db      	lsls	r3, r3, #3
 8005542:	440b      	add	r3, r1
 8005544:	335d      	adds	r3, #93	; 0x5d
 8005546:	781b      	ldrb	r3, [r3, #0]
 8005548:	2b01      	cmp	r3, #1
 800554a:	d10a      	bne.n	8005562 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800554c:	6879      	ldr	r1, [r7, #4]
 800554e:	68fa      	ldr	r2, [r7, #12]
 8005550:	4613      	mov	r3, r2
 8005552:	009b      	lsls	r3, r3, #2
 8005554:	4413      	add	r3, r2
 8005556:	00db      	lsls	r3, r3, #3
 8005558:	440b      	add	r3, r1
 800555a:	335c      	adds	r3, #92	; 0x5c
 800555c:	2201      	movs	r2, #1
 800555e:	701a      	strb	r2, [r3, #0]
 8005560:	e0d9      	b.n	8005716 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005562:	6879      	ldr	r1, [r7, #4]
 8005564:	68fa      	ldr	r2, [r7, #12]
 8005566:	4613      	mov	r3, r2
 8005568:	009b      	lsls	r3, r3, #2
 800556a:	4413      	add	r3, r2
 800556c:	00db      	lsls	r3, r3, #3
 800556e:	440b      	add	r3, r1
 8005570:	335d      	adds	r3, #93	; 0x5d
 8005572:	781b      	ldrb	r3, [r3, #0]
 8005574:	2b05      	cmp	r3, #5
 8005576:	d10a      	bne.n	800558e <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8005578:	6879      	ldr	r1, [r7, #4]
 800557a:	68fa      	ldr	r2, [r7, #12]
 800557c:	4613      	mov	r3, r2
 800557e:	009b      	lsls	r3, r3, #2
 8005580:	4413      	add	r3, r2
 8005582:	00db      	lsls	r3, r3, #3
 8005584:	440b      	add	r3, r1
 8005586:	335c      	adds	r3, #92	; 0x5c
 8005588:	2205      	movs	r2, #5
 800558a:	701a      	strb	r2, [r3, #0]
 800558c:	e0c3      	b.n	8005716 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800558e:	6879      	ldr	r1, [r7, #4]
 8005590:	68fa      	ldr	r2, [r7, #12]
 8005592:	4613      	mov	r3, r2
 8005594:	009b      	lsls	r3, r3, #2
 8005596:	4413      	add	r3, r2
 8005598:	00db      	lsls	r3, r3, #3
 800559a:	440b      	add	r3, r1
 800559c:	335d      	adds	r3, #93	; 0x5d
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	2b06      	cmp	r3, #6
 80055a2:	d00a      	beq.n	80055ba <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80055a4:	6879      	ldr	r1, [r7, #4]
 80055a6:	68fa      	ldr	r2, [r7, #12]
 80055a8:	4613      	mov	r3, r2
 80055aa:	009b      	lsls	r3, r3, #2
 80055ac:	4413      	add	r3, r2
 80055ae:	00db      	lsls	r3, r3, #3
 80055b0:	440b      	add	r3, r1
 80055b2:	335d      	adds	r3, #93	; 0x5d
 80055b4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80055b6:	2b08      	cmp	r3, #8
 80055b8:	d156      	bne.n	8005668 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 80055ba:	6879      	ldr	r1, [r7, #4]
 80055bc:	68fa      	ldr	r2, [r7, #12]
 80055be:	4613      	mov	r3, r2
 80055c0:	009b      	lsls	r3, r3, #2
 80055c2:	4413      	add	r3, r2
 80055c4:	00db      	lsls	r3, r3, #3
 80055c6:	440b      	add	r3, r1
 80055c8:	3358      	adds	r3, #88	; 0x58
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	1c59      	adds	r1, r3, #1
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	68fa      	ldr	r2, [r7, #12]
 80055d2:	4613      	mov	r3, r2
 80055d4:	009b      	lsls	r3, r3, #2
 80055d6:	4413      	add	r3, r2
 80055d8:	00db      	lsls	r3, r3, #3
 80055da:	4403      	add	r3, r0
 80055dc:	3358      	adds	r3, #88	; 0x58
 80055de:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80055e0:	6879      	ldr	r1, [r7, #4]
 80055e2:	68fa      	ldr	r2, [r7, #12]
 80055e4:	4613      	mov	r3, r2
 80055e6:	009b      	lsls	r3, r3, #2
 80055e8:	4413      	add	r3, r2
 80055ea:	00db      	lsls	r3, r3, #3
 80055ec:	440b      	add	r3, r1
 80055ee:	3358      	adds	r3, #88	; 0x58
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	2b03      	cmp	r3, #3
 80055f4:	d914      	bls.n	8005620 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80055f6:	6879      	ldr	r1, [r7, #4]
 80055f8:	68fa      	ldr	r2, [r7, #12]
 80055fa:	4613      	mov	r3, r2
 80055fc:	009b      	lsls	r3, r3, #2
 80055fe:	4413      	add	r3, r2
 8005600:	00db      	lsls	r3, r3, #3
 8005602:	440b      	add	r3, r1
 8005604:	3358      	adds	r3, #88	; 0x58
 8005606:	2200      	movs	r2, #0
 8005608:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800560a:	6879      	ldr	r1, [r7, #4]
 800560c:	68fa      	ldr	r2, [r7, #12]
 800560e:	4613      	mov	r3, r2
 8005610:	009b      	lsls	r3, r3, #2
 8005612:	4413      	add	r3, r2
 8005614:	00db      	lsls	r3, r3, #3
 8005616:	440b      	add	r3, r1
 8005618:	335c      	adds	r3, #92	; 0x5c
 800561a:	2204      	movs	r2, #4
 800561c:	701a      	strb	r2, [r3, #0]
 800561e:	e009      	b.n	8005634 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005620:	6879      	ldr	r1, [r7, #4]
 8005622:	68fa      	ldr	r2, [r7, #12]
 8005624:	4613      	mov	r3, r2
 8005626:	009b      	lsls	r3, r3, #2
 8005628:	4413      	add	r3, r2
 800562a:	00db      	lsls	r3, r3, #3
 800562c:	440b      	add	r3, r1
 800562e:	335c      	adds	r3, #92	; 0x5c
 8005630:	2202      	movs	r2, #2
 8005632:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	015a      	lsls	r2, r3, #5
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	4413      	add	r3, r2
 800563c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800564a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005652:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	015a      	lsls	r2, r3, #5
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	4413      	add	r3, r2
 800565c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005660:	461a      	mov	r2, r3
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	6013      	str	r3, [r2, #0]
 8005666:	e056      	b.n	8005716 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005668:	6879      	ldr	r1, [r7, #4]
 800566a:	68fa      	ldr	r2, [r7, #12]
 800566c:	4613      	mov	r3, r2
 800566e:	009b      	lsls	r3, r3, #2
 8005670:	4413      	add	r3, r2
 8005672:	00db      	lsls	r3, r3, #3
 8005674:	440b      	add	r3, r1
 8005676:	335d      	adds	r3, #93	; 0x5d
 8005678:	781b      	ldrb	r3, [r3, #0]
 800567a:	2b03      	cmp	r3, #3
 800567c:	d123      	bne.n	80056c6 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800567e:	6879      	ldr	r1, [r7, #4]
 8005680:	68fa      	ldr	r2, [r7, #12]
 8005682:	4613      	mov	r3, r2
 8005684:	009b      	lsls	r3, r3, #2
 8005686:	4413      	add	r3, r2
 8005688:	00db      	lsls	r3, r3, #3
 800568a:	440b      	add	r3, r1
 800568c:	335c      	adds	r3, #92	; 0x5c
 800568e:	2202      	movs	r2, #2
 8005690:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	015a      	lsls	r2, r3, #5
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	4413      	add	r3, r2
 800569a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80056a8:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80056b0:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	015a      	lsls	r2, r3, #5
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	4413      	add	r3, r2
 80056ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056be:	461a      	mov	r2, r3
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	6013      	str	r3, [r2, #0]
 80056c4:	e027      	b.n	8005716 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80056c6:	6879      	ldr	r1, [r7, #4]
 80056c8:	68fa      	ldr	r2, [r7, #12]
 80056ca:	4613      	mov	r3, r2
 80056cc:	009b      	lsls	r3, r3, #2
 80056ce:	4413      	add	r3, r2
 80056d0:	00db      	lsls	r3, r3, #3
 80056d2:	440b      	add	r3, r1
 80056d4:	335d      	adds	r3, #93	; 0x5d
 80056d6:	781b      	ldrb	r3, [r3, #0]
 80056d8:	2b07      	cmp	r3, #7
 80056da:	d11c      	bne.n	8005716 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 80056dc:	6879      	ldr	r1, [r7, #4]
 80056de:	68fa      	ldr	r2, [r7, #12]
 80056e0:	4613      	mov	r3, r2
 80056e2:	009b      	lsls	r3, r3, #2
 80056e4:	4413      	add	r3, r2
 80056e6:	00db      	lsls	r3, r3, #3
 80056e8:	440b      	add	r3, r1
 80056ea:	3358      	adds	r3, #88	; 0x58
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	1c59      	adds	r1, r3, #1
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	68fa      	ldr	r2, [r7, #12]
 80056f4:	4613      	mov	r3, r2
 80056f6:	009b      	lsls	r3, r3, #2
 80056f8:	4413      	add	r3, r2
 80056fa:	00db      	lsls	r3, r3, #3
 80056fc:	4403      	add	r3, r0
 80056fe:	3358      	adds	r3, #88	; 0x58
 8005700:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005702:	6879      	ldr	r1, [r7, #4]
 8005704:	68fa      	ldr	r2, [r7, #12]
 8005706:	4613      	mov	r3, r2
 8005708:	009b      	lsls	r3, r3, #2
 800570a:	4413      	add	r3, r2
 800570c:	00db      	lsls	r3, r3, #3
 800570e:	440b      	add	r3, r1
 8005710:	335c      	adds	r3, #92	; 0x5c
 8005712:	2204      	movs	r2, #4
 8005714:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	015a      	lsls	r2, r3, #5
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	4413      	add	r3, r2
 800571e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005722:	461a      	mov	r2, r3
 8005724:	2302      	movs	r3, #2
 8005726:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	b2d8      	uxtb	r0, r3
 800572c:	6879      	ldr	r1, [r7, #4]
 800572e:	68fa      	ldr	r2, [r7, #12]
 8005730:	4613      	mov	r3, r2
 8005732:	009b      	lsls	r3, r3, #2
 8005734:	4413      	add	r3, r2
 8005736:	00db      	lsls	r3, r3, #3
 8005738:	440b      	add	r3, r1
 800573a:	335c      	adds	r3, #92	; 0x5c
 800573c:	781b      	ldrb	r3, [r3, #0]
 800573e:	461a      	mov	r2, r3
 8005740:	4601      	mov	r1, r0
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f00c fd12 	bl	801216c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8005748:	e0d1      	b.n	80058ee <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	015a      	lsls	r2, r3, #5
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	4413      	add	r3, r2
 8005752:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800575c:	2b80      	cmp	r3, #128	; 0x80
 800575e:	d13e      	bne.n	80057de <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	015a      	lsls	r2, r3, #5
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	4413      	add	r3, r2
 8005768:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800576c:	68db      	ldr	r3, [r3, #12]
 800576e:	68fa      	ldr	r2, [r7, #12]
 8005770:	0151      	lsls	r1, r2, #5
 8005772:	693a      	ldr	r2, [r7, #16]
 8005774:	440a      	add	r2, r1
 8005776:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800577a:	f043 0302 	orr.w	r3, r3, #2
 800577e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8005780:	6879      	ldr	r1, [r7, #4]
 8005782:	68fa      	ldr	r2, [r7, #12]
 8005784:	4613      	mov	r3, r2
 8005786:	009b      	lsls	r3, r3, #2
 8005788:	4413      	add	r3, r2
 800578a:	00db      	lsls	r3, r3, #3
 800578c:	440b      	add	r3, r1
 800578e:	3358      	adds	r3, #88	; 0x58
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	1c59      	adds	r1, r3, #1
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	68fa      	ldr	r2, [r7, #12]
 8005798:	4613      	mov	r3, r2
 800579a:	009b      	lsls	r3, r3, #2
 800579c:	4413      	add	r3, r2
 800579e:	00db      	lsls	r3, r3, #3
 80057a0:	4403      	add	r3, r0
 80057a2:	3358      	adds	r3, #88	; 0x58
 80057a4:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80057a6:	6879      	ldr	r1, [r7, #4]
 80057a8:	68fa      	ldr	r2, [r7, #12]
 80057aa:	4613      	mov	r3, r2
 80057ac:	009b      	lsls	r3, r3, #2
 80057ae:	4413      	add	r3, r2
 80057b0:	00db      	lsls	r3, r3, #3
 80057b2:	440b      	add	r3, r1
 80057b4:	335d      	adds	r3, #93	; 0x5d
 80057b6:	2206      	movs	r2, #6
 80057b8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	68fa      	ldr	r2, [r7, #12]
 80057c0:	b2d2      	uxtb	r2, r2
 80057c2:	4611      	mov	r1, r2
 80057c4:	4618      	mov	r0, r3
 80057c6:	f007 fb5c 	bl	800ce82 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	015a      	lsls	r2, r3, #5
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	4413      	add	r3, r2
 80057d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057d6:	461a      	mov	r2, r3
 80057d8:	2380      	movs	r3, #128	; 0x80
 80057da:	6093      	str	r3, [r2, #8]
}
 80057dc:	e087      	b.n	80058ee <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	015a      	lsls	r2, r3, #5
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	4413      	add	r3, r2
 80057e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	f003 0310 	and.w	r3, r3, #16
 80057f0:	2b10      	cmp	r3, #16
 80057f2:	d17c      	bne.n	80058ee <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80057f4:	6879      	ldr	r1, [r7, #4]
 80057f6:	68fa      	ldr	r2, [r7, #12]
 80057f8:	4613      	mov	r3, r2
 80057fa:	009b      	lsls	r3, r3, #2
 80057fc:	4413      	add	r3, r2
 80057fe:	00db      	lsls	r3, r3, #3
 8005800:	440b      	add	r3, r1
 8005802:	333f      	adds	r3, #63	; 0x3f
 8005804:	781b      	ldrb	r3, [r3, #0]
 8005806:	2b03      	cmp	r3, #3
 8005808:	d122      	bne.n	8005850 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800580a:	6879      	ldr	r1, [r7, #4]
 800580c:	68fa      	ldr	r2, [r7, #12]
 800580e:	4613      	mov	r3, r2
 8005810:	009b      	lsls	r3, r3, #2
 8005812:	4413      	add	r3, r2
 8005814:	00db      	lsls	r3, r3, #3
 8005816:	440b      	add	r3, r1
 8005818:	3358      	adds	r3, #88	; 0x58
 800581a:	2200      	movs	r2, #0
 800581c:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	015a      	lsls	r2, r3, #5
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	4413      	add	r3, r2
 8005826:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800582a:	68db      	ldr	r3, [r3, #12]
 800582c:	68fa      	ldr	r2, [r7, #12]
 800582e:	0151      	lsls	r1, r2, #5
 8005830:	693a      	ldr	r2, [r7, #16]
 8005832:	440a      	add	r2, r1
 8005834:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005838:	f043 0302 	orr.w	r3, r3, #2
 800583c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	68fa      	ldr	r2, [r7, #12]
 8005844:	b2d2      	uxtb	r2, r2
 8005846:	4611      	mov	r1, r2
 8005848:	4618      	mov	r0, r3
 800584a:	f007 fb1a 	bl	800ce82 <USB_HC_Halt>
 800584e:	e045      	b.n	80058dc <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005850:	6879      	ldr	r1, [r7, #4]
 8005852:	68fa      	ldr	r2, [r7, #12]
 8005854:	4613      	mov	r3, r2
 8005856:	009b      	lsls	r3, r3, #2
 8005858:	4413      	add	r3, r2
 800585a:	00db      	lsls	r3, r3, #3
 800585c:	440b      	add	r3, r1
 800585e:	333f      	adds	r3, #63	; 0x3f
 8005860:	781b      	ldrb	r3, [r3, #0]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d00a      	beq.n	800587c <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8005866:	6879      	ldr	r1, [r7, #4]
 8005868:	68fa      	ldr	r2, [r7, #12]
 800586a:	4613      	mov	r3, r2
 800586c:	009b      	lsls	r3, r3, #2
 800586e:	4413      	add	r3, r2
 8005870:	00db      	lsls	r3, r3, #3
 8005872:	440b      	add	r3, r1
 8005874:	333f      	adds	r3, #63	; 0x3f
 8005876:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005878:	2b02      	cmp	r3, #2
 800587a:	d12f      	bne.n	80058dc <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800587c:	6879      	ldr	r1, [r7, #4]
 800587e:	68fa      	ldr	r2, [r7, #12]
 8005880:	4613      	mov	r3, r2
 8005882:	009b      	lsls	r3, r3, #2
 8005884:	4413      	add	r3, r2
 8005886:	00db      	lsls	r3, r3, #3
 8005888:	440b      	add	r3, r1
 800588a:	3358      	adds	r3, #88	; 0x58
 800588c:	2200      	movs	r2, #0
 800588e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	691b      	ldr	r3, [r3, #16]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d121      	bne.n	80058dc <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8005898:	6879      	ldr	r1, [r7, #4]
 800589a:	68fa      	ldr	r2, [r7, #12]
 800589c:	4613      	mov	r3, r2
 800589e:	009b      	lsls	r3, r3, #2
 80058a0:	4413      	add	r3, r2
 80058a2:	00db      	lsls	r3, r3, #3
 80058a4:	440b      	add	r3, r1
 80058a6:	335d      	adds	r3, #93	; 0x5d
 80058a8:	2203      	movs	r2, #3
 80058aa:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	015a      	lsls	r2, r3, #5
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	4413      	add	r3, r2
 80058b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058b8:	68db      	ldr	r3, [r3, #12]
 80058ba:	68fa      	ldr	r2, [r7, #12]
 80058bc:	0151      	lsls	r1, r2, #5
 80058be:	693a      	ldr	r2, [r7, #16]
 80058c0:	440a      	add	r2, r1
 80058c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80058c6:	f043 0302 	orr.w	r3, r3, #2
 80058ca:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	68fa      	ldr	r2, [r7, #12]
 80058d2:	b2d2      	uxtb	r2, r2
 80058d4:	4611      	mov	r1, r2
 80058d6:	4618      	mov	r0, r3
 80058d8:	f007 fad3 	bl	800ce82 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	015a      	lsls	r2, r3, #5
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	4413      	add	r3, r2
 80058e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058e8:	461a      	mov	r2, r3
 80058ea:	2310      	movs	r3, #16
 80058ec:	6093      	str	r3, [r2, #8]
}
 80058ee:	bf00      	nop
 80058f0:	3718      	adds	r7, #24
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}

080058f6 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80058f6:	b580      	push	{r7, lr}
 80058f8:	b086      	sub	sp, #24
 80058fa:	af00      	add	r7, sp, #0
 80058fc:	6078      	str	r0, [r7, #4]
 80058fe:	460b      	mov	r3, r1
 8005900:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800590c:	78fb      	ldrb	r3, [r7, #3]
 800590e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	015a      	lsls	r2, r3, #5
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	4413      	add	r3, r2
 8005918:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	f003 0304 	and.w	r3, r3, #4
 8005922:	2b04      	cmp	r3, #4
 8005924:	d119      	bne.n	800595a <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	015a      	lsls	r2, r3, #5
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	4413      	add	r3, r2
 800592e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005932:	461a      	mov	r2, r3
 8005934:	2304      	movs	r3, #4
 8005936:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	015a      	lsls	r2, r3, #5
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	4413      	add	r3, r2
 8005940:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005944:	68db      	ldr	r3, [r3, #12]
 8005946:	68fa      	ldr	r2, [r7, #12]
 8005948:	0151      	lsls	r1, r2, #5
 800594a:	693a      	ldr	r2, [r7, #16]
 800594c:	440a      	add	r2, r1
 800594e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005952:	f043 0302 	orr.w	r3, r3, #2
 8005956:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8005958:	e33e      	b.n	8005fd8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	015a      	lsls	r2, r3, #5
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	4413      	add	r3, r2
 8005962:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	f003 0320 	and.w	r3, r3, #32
 800596c:	2b20      	cmp	r3, #32
 800596e:	d141      	bne.n	80059f4 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	015a      	lsls	r2, r3, #5
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	4413      	add	r3, r2
 8005978:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800597c:	461a      	mov	r2, r3
 800597e:	2320      	movs	r3, #32
 8005980:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8005982:	6879      	ldr	r1, [r7, #4]
 8005984:	68fa      	ldr	r2, [r7, #12]
 8005986:	4613      	mov	r3, r2
 8005988:	009b      	lsls	r3, r3, #2
 800598a:	4413      	add	r3, r2
 800598c:	00db      	lsls	r3, r3, #3
 800598e:	440b      	add	r3, r1
 8005990:	333d      	adds	r3, #61	; 0x3d
 8005992:	781b      	ldrb	r3, [r3, #0]
 8005994:	2b01      	cmp	r3, #1
 8005996:	f040 831f 	bne.w	8005fd8 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 800599a:	6879      	ldr	r1, [r7, #4]
 800599c:	68fa      	ldr	r2, [r7, #12]
 800599e:	4613      	mov	r3, r2
 80059a0:	009b      	lsls	r3, r3, #2
 80059a2:	4413      	add	r3, r2
 80059a4:	00db      	lsls	r3, r3, #3
 80059a6:	440b      	add	r3, r1
 80059a8:	333d      	adds	r3, #61	; 0x3d
 80059aa:	2200      	movs	r2, #0
 80059ac:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80059ae:	6879      	ldr	r1, [r7, #4]
 80059b0:	68fa      	ldr	r2, [r7, #12]
 80059b2:	4613      	mov	r3, r2
 80059b4:	009b      	lsls	r3, r3, #2
 80059b6:	4413      	add	r3, r2
 80059b8:	00db      	lsls	r3, r3, #3
 80059ba:	440b      	add	r3, r1
 80059bc:	335c      	adds	r3, #92	; 0x5c
 80059be:	2202      	movs	r2, #2
 80059c0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	015a      	lsls	r2, r3, #5
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	4413      	add	r3, r2
 80059ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059ce:	68db      	ldr	r3, [r3, #12]
 80059d0:	68fa      	ldr	r2, [r7, #12]
 80059d2:	0151      	lsls	r1, r2, #5
 80059d4:	693a      	ldr	r2, [r7, #16]
 80059d6:	440a      	add	r2, r1
 80059d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059dc:	f043 0302 	orr.w	r3, r3, #2
 80059e0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	68fa      	ldr	r2, [r7, #12]
 80059e8:	b2d2      	uxtb	r2, r2
 80059ea:	4611      	mov	r1, r2
 80059ec:	4618      	mov	r0, r3
 80059ee:	f007 fa48 	bl	800ce82 <USB_HC_Halt>
}
 80059f2:	e2f1      	b.n	8005fd8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	015a      	lsls	r2, r3, #5
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	4413      	add	r3, r2
 80059fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a00:	689b      	ldr	r3, [r3, #8]
 8005a02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a06:	2b40      	cmp	r3, #64	; 0x40
 8005a08:	d13f      	bne.n	8005a8a <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8005a0a:	6879      	ldr	r1, [r7, #4]
 8005a0c:	68fa      	ldr	r2, [r7, #12]
 8005a0e:	4613      	mov	r3, r2
 8005a10:	009b      	lsls	r3, r3, #2
 8005a12:	4413      	add	r3, r2
 8005a14:	00db      	lsls	r3, r3, #3
 8005a16:	440b      	add	r3, r1
 8005a18:	335d      	adds	r3, #93	; 0x5d
 8005a1a:	2204      	movs	r2, #4
 8005a1c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8005a1e:	6879      	ldr	r1, [r7, #4]
 8005a20:	68fa      	ldr	r2, [r7, #12]
 8005a22:	4613      	mov	r3, r2
 8005a24:	009b      	lsls	r3, r3, #2
 8005a26:	4413      	add	r3, r2
 8005a28:	00db      	lsls	r3, r3, #3
 8005a2a:	440b      	add	r3, r1
 8005a2c:	333d      	adds	r3, #61	; 0x3d
 8005a2e:	2201      	movs	r2, #1
 8005a30:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005a32:	6879      	ldr	r1, [r7, #4]
 8005a34:	68fa      	ldr	r2, [r7, #12]
 8005a36:	4613      	mov	r3, r2
 8005a38:	009b      	lsls	r3, r3, #2
 8005a3a:	4413      	add	r3, r2
 8005a3c:	00db      	lsls	r3, r3, #3
 8005a3e:	440b      	add	r3, r1
 8005a40:	3358      	adds	r3, #88	; 0x58
 8005a42:	2200      	movs	r2, #0
 8005a44:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	015a      	lsls	r2, r3, #5
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	4413      	add	r3, r2
 8005a4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a52:	68db      	ldr	r3, [r3, #12]
 8005a54:	68fa      	ldr	r2, [r7, #12]
 8005a56:	0151      	lsls	r1, r2, #5
 8005a58:	693a      	ldr	r2, [r7, #16]
 8005a5a:	440a      	add	r2, r1
 8005a5c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a60:	f043 0302 	orr.w	r3, r3, #2
 8005a64:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	68fa      	ldr	r2, [r7, #12]
 8005a6c:	b2d2      	uxtb	r2, r2
 8005a6e:	4611      	mov	r1, r2
 8005a70:	4618      	mov	r0, r3
 8005a72:	f007 fa06 	bl	800ce82 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	015a      	lsls	r2, r3, #5
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	4413      	add	r3, r2
 8005a7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a82:	461a      	mov	r2, r3
 8005a84:	2340      	movs	r3, #64	; 0x40
 8005a86:	6093      	str	r3, [r2, #8]
}
 8005a88:	e2a6      	b.n	8005fd8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	015a      	lsls	r2, r3, #5
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	4413      	add	r3, r2
 8005a92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005aa0:	d122      	bne.n	8005ae8 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	015a      	lsls	r2, r3, #5
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	4413      	add	r3, r2
 8005aaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005aae:	68db      	ldr	r3, [r3, #12]
 8005ab0:	68fa      	ldr	r2, [r7, #12]
 8005ab2:	0151      	lsls	r1, r2, #5
 8005ab4:	693a      	ldr	r2, [r7, #16]
 8005ab6:	440a      	add	r2, r1
 8005ab8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005abc:	f043 0302 	orr.w	r3, r3, #2
 8005ac0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	68fa      	ldr	r2, [r7, #12]
 8005ac8:	b2d2      	uxtb	r2, r2
 8005aca:	4611      	mov	r1, r2
 8005acc:	4618      	mov	r0, r3
 8005ace:	f007 f9d8 	bl	800ce82 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	015a      	lsls	r2, r3, #5
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	4413      	add	r3, r2
 8005ada:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ade:	461a      	mov	r2, r3
 8005ae0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ae4:	6093      	str	r3, [r2, #8]
}
 8005ae6:	e277      	b.n	8005fd8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	015a      	lsls	r2, r3, #5
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	4413      	add	r3, r2
 8005af0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	f003 0301 	and.w	r3, r3, #1
 8005afa:	2b01      	cmp	r3, #1
 8005afc:	d135      	bne.n	8005b6a <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005afe:	6879      	ldr	r1, [r7, #4]
 8005b00:	68fa      	ldr	r2, [r7, #12]
 8005b02:	4613      	mov	r3, r2
 8005b04:	009b      	lsls	r3, r3, #2
 8005b06:	4413      	add	r3, r2
 8005b08:	00db      	lsls	r3, r3, #3
 8005b0a:	440b      	add	r3, r1
 8005b0c:	3358      	adds	r3, #88	; 0x58
 8005b0e:	2200      	movs	r2, #0
 8005b10:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	015a      	lsls	r2, r3, #5
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	4413      	add	r3, r2
 8005b1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b1e:	68db      	ldr	r3, [r3, #12]
 8005b20:	68fa      	ldr	r2, [r7, #12]
 8005b22:	0151      	lsls	r1, r2, #5
 8005b24:	693a      	ldr	r2, [r7, #16]
 8005b26:	440a      	add	r2, r1
 8005b28:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b2c:	f043 0302 	orr.w	r3, r3, #2
 8005b30:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	68fa      	ldr	r2, [r7, #12]
 8005b38:	b2d2      	uxtb	r2, r2
 8005b3a:	4611      	mov	r1, r2
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	f007 f9a0 	bl	800ce82 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	015a      	lsls	r2, r3, #5
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	4413      	add	r3, r2
 8005b4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b4e:	461a      	mov	r2, r3
 8005b50:	2301      	movs	r3, #1
 8005b52:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005b54:	6879      	ldr	r1, [r7, #4]
 8005b56:	68fa      	ldr	r2, [r7, #12]
 8005b58:	4613      	mov	r3, r2
 8005b5a:	009b      	lsls	r3, r3, #2
 8005b5c:	4413      	add	r3, r2
 8005b5e:	00db      	lsls	r3, r3, #3
 8005b60:	440b      	add	r3, r1
 8005b62:	335d      	adds	r3, #93	; 0x5d
 8005b64:	2201      	movs	r2, #1
 8005b66:	701a      	strb	r2, [r3, #0]
}
 8005b68:	e236      	b.n	8005fd8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	015a      	lsls	r2, r3, #5
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	4413      	add	r3, r2
 8005b72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	f003 0308 	and.w	r3, r3, #8
 8005b7c:	2b08      	cmp	r3, #8
 8005b7e:	d12b      	bne.n	8005bd8 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	015a      	lsls	r2, r3, #5
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	4413      	add	r3, r2
 8005b88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b8c:	461a      	mov	r2, r3
 8005b8e:	2308      	movs	r3, #8
 8005b90:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	015a      	lsls	r2, r3, #5
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	4413      	add	r3, r2
 8005b9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b9e:	68db      	ldr	r3, [r3, #12]
 8005ba0:	68fa      	ldr	r2, [r7, #12]
 8005ba2:	0151      	lsls	r1, r2, #5
 8005ba4:	693a      	ldr	r2, [r7, #16]
 8005ba6:	440a      	add	r2, r1
 8005ba8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005bac:	f043 0302 	orr.w	r3, r3, #2
 8005bb0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	68fa      	ldr	r2, [r7, #12]
 8005bb8:	b2d2      	uxtb	r2, r2
 8005bba:	4611      	mov	r1, r2
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f007 f960 	bl	800ce82 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8005bc2:	6879      	ldr	r1, [r7, #4]
 8005bc4:	68fa      	ldr	r2, [r7, #12]
 8005bc6:	4613      	mov	r3, r2
 8005bc8:	009b      	lsls	r3, r3, #2
 8005bca:	4413      	add	r3, r2
 8005bcc:	00db      	lsls	r3, r3, #3
 8005bce:	440b      	add	r3, r1
 8005bd0:	335d      	adds	r3, #93	; 0x5d
 8005bd2:	2205      	movs	r2, #5
 8005bd4:	701a      	strb	r2, [r3, #0]
}
 8005bd6:	e1ff      	b.n	8005fd8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	015a      	lsls	r2, r3, #5
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	4413      	add	r3, r2
 8005be0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	f003 0310 	and.w	r3, r3, #16
 8005bea:	2b10      	cmp	r3, #16
 8005bec:	d155      	bne.n	8005c9a <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005bee:	6879      	ldr	r1, [r7, #4]
 8005bf0:	68fa      	ldr	r2, [r7, #12]
 8005bf2:	4613      	mov	r3, r2
 8005bf4:	009b      	lsls	r3, r3, #2
 8005bf6:	4413      	add	r3, r2
 8005bf8:	00db      	lsls	r3, r3, #3
 8005bfa:	440b      	add	r3, r1
 8005bfc:	3358      	adds	r3, #88	; 0x58
 8005bfe:	2200      	movs	r2, #0
 8005c00:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8005c02:	6879      	ldr	r1, [r7, #4]
 8005c04:	68fa      	ldr	r2, [r7, #12]
 8005c06:	4613      	mov	r3, r2
 8005c08:	009b      	lsls	r3, r3, #2
 8005c0a:	4413      	add	r3, r2
 8005c0c:	00db      	lsls	r3, r3, #3
 8005c0e:	440b      	add	r3, r1
 8005c10:	335d      	adds	r3, #93	; 0x5d
 8005c12:	2203      	movs	r2, #3
 8005c14:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8005c16:	6879      	ldr	r1, [r7, #4]
 8005c18:	68fa      	ldr	r2, [r7, #12]
 8005c1a:	4613      	mov	r3, r2
 8005c1c:	009b      	lsls	r3, r3, #2
 8005c1e:	4413      	add	r3, r2
 8005c20:	00db      	lsls	r3, r3, #3
 8005c22:	440b      	add	r3, r1
 8005c24:	333d      	adds	r3, #61	; 0x3d
 8005c26:	781b      	ldrb	r3, [r3, #0]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d114      	bne.n	8005c56 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8005c2c:	6879      	ldr	r1, [r7, #4]
 8005c2e:	68fa      	ldr	r2, [r7, #12]
 8005c30:	4613      	mov	r3, r2
 8005c32:	009b      	lsls	r3, r3, #2
 8005c34:	4413      	add	r3, r2
 8005c36:	00db      	lsls	r3, r3, #3
 8005c38:	440b      	add	r3, r1
 8005c3a:	333c      	adds	r3, #60	; 0x3c
 8005c3c:	781b      	ldrb	r3, [r3, #0]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d109      	bne.n	8005c56 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8005c42:	6879      	ldr	r1, [r7, #4]
 8005c44:	68fa      	ldr	r2, [r7, #12]
 8005c46:	4613      	mov	r3, r2
 8005c48:	009b      	lsls	r3, r3, #2
 8005c4a:	4413      	add	r3, r2
 8005c4c:	00db      	lsls	r3, r3, #3
 8005c4e:	440b      	add	r3, r1
 8005c50:	333d      	adds	r3, #61	; 0x3d
 8005c52:	2201      	movs	r2, #1
 8005c54:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	015a      	lsls	r2, r3, #5
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	4413      	add	r3, r2
 8005c5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c62:	68db      	ldr	r3, [r3, #12]
 8005c64:	68fa      	ldr	r2, [r7, #12]
 8005c66:	0151      	lsls	r1, r2, #5
 8005c68:	693a      	ldr	r2, [r7, #16]
 8005c6a:	440a      	add	r2, r1
 8005c6c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c70:	f043 0302 	orr.w	r3, r3, #2
 8005c74:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	68fa      	ldr	r2, [r7, #12]
 8005c7c:	b2d2      	uxtb	r2, r2
 8005c7e:	4611      	mov	r1, r2
 8005c80:	4618      	mov	r0, r3
 8005c82:	f007 f8fe 	bl	800ce82 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	015a      	lsls	r2, r3, #5
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	4413      	add	r3, r2
 8005c8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c92:	461a      	mov	r2, r3
 8005c94:	2310      	movs	r3, #16
 8005c96:	6093      	str	r3, [r2, #8]
}
 8005c98:	e19e      	b.n	8005fd8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	015a      	lsls	r2, r3, #5
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	4413      	add	r3, r2
 8005ca2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cac:	2b80      	cmp	r3, #128	; 0x80
 8005cae:	d12b      	bne.n	8005d08 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	015a      	lsls	r2, r3, #5
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	4413      	add	r3, r2
 8005cb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cbc:	68db      	ldr	r3, [r3, #12]
 8005cbe:	68fa      	ldr	r2, [r7, #12]
 8005cc0:	0151      	lsls	r1, r2, #5
 8005cc2:	693a      	ldr	r2, [r7, #16]
 8005cc4:	440a      	add	r2, r1
 8005cc6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cca:	f043 0302 	orr.w	r3, r3, #2
 8005cce:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	68fa      	ldr	r2, [r7, #12]
 8005cd6:	b2d2      	uxtb	r2, r2
 8005cd8:	4611      	mov	r1, r2
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f007 f8d1 	bl	800ce82 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005ce0:	6879      	ldr	r1, [r7, #4]
 8005ce2:	68fa      	ldr	r2, [r7, #12]
 8005ce4:	4613      	mov	r3, r2
 8005ce6:	009b      	lsls	r3, r3, #2
 8005ce8:	4413      	add	r3, r2
 8005cea:	00db      	lsls	r3, r3, #3
 8005cec:	440b      	add	r3, r1
 8005cee:	335d      	adds	r3, #93	; 0x5d
 8005cf0:	2206      	movs	r2, #6
 8005cf2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	015a      	lsls	r2, r3, #5
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	4413      	add	r3, r2
 8005cfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d00:	461a      	mov	r2, r3
 8005d02:	2380      	movs	r3, #128	; 0x80
 8005d04:	6093      	str	r3, [r2, #8]
}
 8005d06:	e167      	b.n	8005fd8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	015a      	lsls	r2, r3, #5
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	4413      	add	r3, r2
 8005d10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d14:	689b      	ldr	r3, [r3, #8]
 8005d16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d1e:	d135      	bne.n	8005d8c <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	015a      	lsls	r2, r3, #5
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	4413      	add	r3, r2
 8005d28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d2c:	68db      	ldr	r3, [r3, #12]
 8005d2e:	68fa      	ldr	r2, [r7, #12]
 8005d30:	0151      	lsls	r1, r2, #5
 8005d32:	693a      	ldr	r2, [r7, #16]
 8005d34:	440a      	add	r2, r1
 8005d36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d3a:	f043 0302 	orr.w	r3, r3, #2
 8005d3e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	68fa      	ldr	r2, [r7, #12]
 8005d46:	b2d2      	uxtb	r2, r2
 8005d48:	4611      	mov	r1, r2
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f007 f899 	bl	800ce82 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	015a      	lsls	r2, r3, #5
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	4413      	add	r3, r2
 8005d58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d5c:	461a      	mov	r2, r3
 8005d5e:	2310      	movs	r3, #16
 8005d60:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	015a      	lsls	r2, r3, #5
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	4413      	add	r3, r2
 8005d6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d6e:	461a      	mov	r2, r3
 8005d70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d74:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005d76:	6879      	ldr	r1, [r7, #4]
 8005d78:	68fa      	ldr	r2, [r7, #12]
 8005d7a:	4613      	mov	r3, r2
 8005d7c:	009b      	lsls	r3, r3, #2
 8005d7e:	4413      	add	r3, r2
 8005d80:	00db      	lsls	r3, r3, #3
 8005d82:	440b      	add	r3, r1
 8005d84:	335d      	adds	r3, #93	; 0x5d
 8005d86:	2208      	movs	r2, #8
 8005d88:	701a      	strb	r2, [r3, #0]
}
 8005d8a:	e125      	b.n	8005fd8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	015a      	lsls	r2, r3, #5
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	4413      	add	r3, r2
 8005d94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	f003 0302 	and.w	r3, r3, #2
 8005d9e:	2b02      	cmp	r3, #2
 8005da0:	f040 811a 	bne.w	8005fd8 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	015a      	lsls	r2, r3, #5
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	4413      	add	r3, r2
 8005dac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005db0:	68db      	ldr	r3, [r3, #12]
 8005db2:	68fa      	ldr	r2, [r7, #12]
 8005db4:	0151      	lsls	r1, r2, #5
 8005db6:	693a      	ldr	r2, [r7, #16]
 8005db8:	440a      	add	r2, r1
 8005dba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005dbe:	f023 0302 	bic.w	r3, r3, #2
 8005dc2:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005dc4:	6879      	ldr	r1, [r7, #4]
 8005dc6:	68fa      	ldr	r2, [r7, #12]
 8005dc8:	4613      	mov	r3, r2
 8005dca:	009b      	lsls	r3, r3, #2
 8005dcc:	4413      	add	r3, r2
 8005dce:	00db      	lsls	r3, r3, #3
 8005dd0:	440b      	add	r3, r1
 8005dd2:	335d      	adds	r3, #93	; 0x5d
 8005dd4:	781b      	ldrb	r3, [r3, #0]
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d137      	bne.n	8005e4a <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8005dda:	6879      	ldr	r1, [r7, #4]
 8005ddc:	68fa      	ldr	r2, [r7, #12]
 8005dde:	4613      	mov	r3, r2
 8005de0:	009b      	lsls	r3, r3, #2
 8005de2:	4413      	add	r3, r2
 8005de4:	00db      	lsls	r3, r3, #3
 8005de6:	440b      	add	r3, r1
 8005de8:	335c      	adds	r3, #92	; 0x5c
 8005dea:	2201      	movs	r2, #1
 8005dec:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005dee:	6879      	ldr	r1, [r7, #4]
 8005df0:	68fa      	ldr	r2, [r7, #12]
 8005df2:	4613      	mov	r3, r2
 8005df4:	009b      	lsls	r3, r3, #2
 8005df6:	4413      	add	r3, r2
 8005df8:	00db      	lsls	r3, r3, #3
 8005dfa:	440b      	add	r3, r1
 8005dfc:	333f      	adds	r3, #63	; 0x3f
 8005dfe:	781b      	ldrb	r3, [r3, #0]
 8005e00:	2b02      	cmp	r3, #2
 8005e02:	d00b      	beq.n	8005e1c <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8005e04:	6879      	ldr	r1, [r7, #4]
 8005e06:	68fa      	ldr	r2, [r7, #12]
 8005e08:	4613      	mov	r3, r2
 8005e0a:	009b      	lsls	r3, r3, #2
 8005e0c:	4413      	add	r3, r2
 8005e0e:	00db      	lsls	r3, r3, #3
 8005e10:	440b      	add	r3, r1
 8005e12:	333f      	adds	r3, #63	; 0x3f
 8005e14:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005e16:	2b03      	cmp	r3, #3
 8005e18:	f040 80c5 	bne.w	8005fa6 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8005e1c:	6879      	ldr	r1, [r7, #4]
 8005e1e:	68fa      	ldr	r2, [r7, #12]
 8005e20:	4613      	mov	r3, r2
 8005e22:	009b      	lsls	r3, r3, #2
 8005e24:	4413      	add	r3, r2
 8005e26:	00db      	lsls	r3, r3, #3
 8005e28:	440b      	add	r3, r1
 8005e2a:	3351      	adds	r3, #81	; 0x51
 8005e2c:	781b      	ldrb	r3, [r3, #0]
 8005e2e:	f083 0301 	eor.w	r3, r3, #1
 8005e32:	b2d8      	uxtb	r0, r3
 8005e34:	6879      	ldr	r1, [r7, #4]
 8005e36:	68fa      	ldr	r2, [r7, #12]
 8005e38:	4613      	mov	r3, r2
 8005e3a:	009b      	lsls	r3, r3, #2
 8005e3c:	4413      	add	r3, r2
 8005e3e:	00db      	lsls	r3, r3, #3
 8005e40:	440b      	add	r3, r1
 8005e42:	3351      	adds	r3, #81	; 0x51
 8005e44:	4602      	mov	r2, r0
 8005e46:	701a      	strb	r2, [r3, #0]
 8005e48:	e0ad      	b.n	8005fa6 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005e4a:	6879      	ldr	r1, [r7, #4]
 8005e4c:	68fa      	ldr	r2, [r7, #12]
 8005e4e:	4613      	mov	r3, r2
 8005e50:	009b      	lsls	r3, r3, #2
 8005e52:	4413      	add	r3, r2
 8005e54:	00db      	lsls	r3, r3, #3
 8005e56:	440b      	add	r3, r1
 8005e58:	335d      	adds	r3, #93	; 0x5d
 8005e5a:	781b      	ldrb	r3, [r3, #0]
 8005e5c:	2b03      	cmp	r3, #3
 8005e5e:	d10a      	bne.n	8005e76 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005e60:	6879      	ldr	r1, [r7, #4]
 8005e62:	68fa      	ldr	r2, [r7, #12]
 8005e64:	4613      	mov	r3, r2
 8005e66:	009b      	lsls	r3, r3, #2
 8005e68:	4413      	add	r3, r2
 8005e6a:	00db      	lsls	r3, r3, #3
 8005e6c:	440b      	add	r3, r1
 8005e6e:	335c      	adds	r3, #92	; 0x5c
 8005e70:	2202      	movs	r2, #2
 8005e72:	701a      	strb	r2, [r3, #0]
 8005e74:	e097      	b.n	8005fa6 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8005e76:	6879      	ldr	r1, [r7, #4]
 8005e78:	68fa      	ldr	r2, [r7, #12]
 8005e7a:	4613      	mov	r3, r2
 8005e7c:	009b      	lsls	r3, r3, #2
 8005e7e:	4413      	add	r3, r2
 8005e80:	00db      	lsls	r3, r3, #3
 8005e82:	440b      	add	r3, r1
 8005e84:	335d      	adds	r3, #93	; 0x5d
 8005e86:	781b      	ldrb	r3, [r3, #0]
 8005e88:	2b04      	cmp	r3, #4
 8005e8a:	d10a      	bne.n	8005ea2 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005e8c:	6879      	ldr	r1, [r7, #4]
 8005e8e:	68fa      	ldr	r2, [r7, #12]
 8005e90:	4613      	mov	r3, r2
 8005e92:	009b      	lsls	r3, r3, #2
 8005e94:	4413      	add	r3, r2
 8005e96:	00db      	lsls	r3, r3, #3
 8005e98:	440b      	add	r3, r1
 8005e9a:	335c      	adds	r3, #92	; 0x5c
 8005e9c:	2202      	movs	r2, #2
 8005e9e:	701a      	strb	r2, [r3, #0]
 8005ea0:	e081      	b.n	8005fa6 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005ea2:	6879      	ldr	r1, [r7, #4]
 8005ea4:	68fa      	ldr	r2, [r7, #12]
 8005ea6:	4613      	mov	r3, r2
 8005ea8:	009b      	lsls	r3, r3, #2
 8005eaa:	4413      	add	r3, r2
 8005eac:	00db      	lsls	r3, r3, #3
 8005eae:	440b      	add	r3, r1
 8005eb0:	335d      	adds	r3, #93	; 0x5d
 8005eb2:	781b      	ldrb	r3, [r3, #0]
 8005eb4:	2b05      	cmp	r3, #5
 8005eb6:	d10a      	bne.n	8005ece <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8005eb8:	6879      	ldr	r1, [r7, #4]
 8005eba:	68fa      	ldr	r2, [r7, #12]
 8005ebc:	4613      	mov	r3, r2
 8005ebe:	009b      	lsls	r3, r3, #2
 8005ec0:	4413      	add	r3, r2
 8005ec2:	00db      	lsls	r3, r3, #3
 8005ec4:	440b      	add	r3, r1
 8005ec6:	335c      	adds	r3, #92	; 0x5c
 8005ec8:	2205      	movs	r2, #5
 8005eca:	701a      	strb	r2, [r3, #0]
 8005ecc:	e06b      	b.n	8005fa6 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005ece:	6879      	ldr	r1, [r7, #4]
 8005ed0:	68fa      	ldr	r2, [r7, #12]
 8005ed2:	4613      	mov	r3, r2
 8005ed4:	009b      	lsls	r3, r3, #2
 8005ed6:	4413      	add	r3, r2
 8005ed8:	00db      	lsls	r3, r3, #3
 8005eda:	440b      	add	r3, r1
 8005edc:	335d      	adds	r3, #93	; 0x5d
 8005ede:	781b      	ldrb	r3, [r3, #0]
 8005ee0:	2b06      	cmp	r3, #6
 8005ee2:	d00a      	beq.n	8005efa <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005ee4:	6879      	ldr	r1, [r7, #4]
 8005ee6:	68fa      	ldr	r2, [r7, #12]
 8005ee8:	4613      	mov	r3, r2
 8005eea:	009b      	lsls	r3, r3, #2
 8005eec:	4413      	add	r3, r2
 8005eee:	00db      	lsls	r3, r3, #3
 8005ef0:	440b      	add	r3, r1
 8005ef2:	335d      	adds	r3, #93	; 0x5d
 8005ef4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005ef6:	2b08      	cmp	r3, #8
 8005ef8:	d155      	bne.n	8005fa6 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8005efa:	6879      	ldr	r1, [r7, #4]
 8005efc:	68fa      	ldr	r2, [r7, #12]
 8005efe:	4613      	mov	r3, r2
 8005f00:	009b      	lsls	r3, r3, #2
 8005f02:	4413      	add	r3, r2
 8005f04:	00db      	lsls	r3, r3, #3
 8005f06:	440b      	add	r3, r1
 8005f08:	3358      	adds	r3, #88	; 0x58
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	1c59      	adds	r1, r3, #1
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	68fa      	ldr	r2, [r7, #12]
 8005f12:	4613      	mov	r3, r2
 8005f14:	009b      	lsls	r3, r3, #2
 8005f16:	4413      	add	r3, r2
 8005f18:	00db      	lsls	r3, r3, #3
 8005f1a:	4403      	add	r3, r0
 8005f1c:	3358      	adds	r3, #88	; 0x58
 8005f1e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8005f20:	6879      	ldr	r1, [r7, #4]
 8005f22:	68fa      	ldr	r2, [r7, #12]
 8005f24:	4613      	mov	r3, r2
 8005f26:	009b      	lsls	r3, r3, #2
 8005f28:	4413      	add	r3, r2
 8005f2a:	00db      	lsls	r3, r3, #3
 8005f2c:	440b      	add	r3, r1
 8005f2e:	3358      	adds	r3, #88	; 0x58
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	2b03      	cmp	r3, #3
 8005f34:	d914      	bls.n	8005f60 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005f36:	6879      	ldr	r1, [r7, #4]
 8005f38:	68fa      	ldr	r2, [r7, #12]
 8005f3a:	4613      	mov	r3, r2
 8005f3c:	009b      	lsls	r3, r3, #2
 8005f3e:	4413      	add	r3, r2
 8005f40:	00db      	lsls	r3, r3, #3
 8005f42:	440b      	add	r3, r1
 8005f44:	3358      	adds	r3, #88	; 0x58
 8005f46:	2200      	movs	r2, #0
 8005f48:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005f4a:	6879      	ldr	r1, [r7, #4]
 8005f4c:	68fa      	ldr	r2, [r7, #12]
 8005f4e:	4613      	mov	r3, r2
 8005f50:	009b      	lsls	r3, r3, #2
 8005f52:	4413      	add	r3, r2
 8005f54:	00db      	lsls	r3, r3, #3
 8005f56:	440b      	add	r3, r1
 8005f58:	335c      	adds	r3, #92	; 0x5c
 8005f5a:	2204      	movs	r2, #4
 8005f5c:	701a      	strb	r2, [r3, #0]
 8005f5e:	e009      	b.n	8005f74 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005f60:	6879      	ldr	r1, [r7, #4]
 8005f62:	68fa      	ldr	r2, [r7, #12]
 8005f64:	4613      	mov	r3, r2
 8005f66:	009b      	lsls	r3, r3, #2
 8005f68:	4413      	add	r3, r2
 8005f6a:	00db      	lsls	r3, r3, #3
 8005f6c:	440b      	add	r3, r1
 8005f6e:	335c      	adds	r3, #92	; 0x5c
 8005f70:	2202      	movs	r2, #2
 8005f72:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	015a      	lsls	r2, r3, #5
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	4413      	add	r3, r2
 8005f7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005f8a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005f92:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	015a      	lsls	r2, r3, #5
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	4413      	add	r3, r2
 8005f9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fa0:	461a      	mov	r2, r3
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	015a      	lsls	r2, r3, #5
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	4413      	add	r3, r2
 8005fae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fb2:	461a      	mov	r2, r3
 8005fb4:	2302      	movs	r3, #2
 8005fb6:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	b2d8      	uxtb	r0, r3
 8005fbc:	6879      	ldr	r1, [r7, #4]
 8005fbe:	68fa      	ldr	r2, [r7, #12]
 8005fc0:	4613      	mov	r3, r2
 8005fc2:	009b      	lsls	r3, r3, #2
 8005fc4:	4413      	add	r3, r2
 8005fc6:	00db      	lsls	r3, r3, #3
 8005fc8:	440b      	add	r3, r1
 8005fca:	335c      	adds	r3, #92	; 0x5c
 8005fcc:	781b      	ldrb	r3, [r3, #0]
 8005fce:	461a      	mov	r2, r3
 8005fd0:	4601      	mov	r1, r0
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f00c f8ca 	bl	801216c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8005fd8:	bf00      	nop
 8005fda:	3718      	adds	r7, #24
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}

08005fe0 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b08a      	sub	sp, #40	; 0x28
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff0:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	6a1b      	ldr	r3, [r3, #32]
 8005ff8:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8005ffa:	69fb      	ldr	r3, [r7, #28]
 8005ffc:	f003 030f 	and.w	r3, r3, #15
 8006000:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8006002:	69fb      	ldr	r3, [r7, #28]
 8006004:	0c5b      	lsrs	r3, r3, #17
 8006006:	f003 030f 	and.w	r3, r3, #15
 800600a:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800600c:	69fb      	ldr	r3, [r7, #28]
 800600e:	091b      	lsrs	r3, r3, #4
 8006010:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006014:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	2b02      	cmp	r3, #2
 800601a:	d003      	beq.n	8006024 <HCD_RXQLVL_IRQHandler+0x44>
 800601c:	2b05      	cmp	r3, #5
 800601e:	f000 8082 	beq.w	8006126 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8006022:	e083      	b.n	800612c <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d07f      	beq.n	800612a <HCD_RXQLVL_IRQHandler+0x14a>
 800602a:	6879      	ldr	r1, [r7, #4]
 800602c:	69ba      	ldr	r2, [r7, #24]
 800602e:	4613      	mov	r3, r2
 8006030:	009b      	lsls	r3, r3, #2
 8006032:	4413      	add	r3, r2
 8006034:	00db      	lsls	r3, r3, #3
 8006036:	440b      	add	r3, r1
 8006038:	3344      	adds	r3, #68	; 0x44
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d074      	beq.n	800612a <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6818      	ldr	r0, [r3, #0]
 8006044:	6879      	ldr	r1, [r7, #4]
 8006046:	69ba      	ldr	r2, [r7, #24]
 8006048:	4613      	mov	r3, r2
 800604a:	009b      	lsls	r3, r3, #2
 800604c:	4413      	add	r3, r2
 800604e:	00db      	lsls	r3, r3, #3
 8006050:	440b      	add	r3, r1
 8006052:	3344      	adds	r3, #68	; 0x44
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	693a      	ldr	r2, [r7, #16]
 8006058:	b292      	uxth	r2, r2
 800605a:	4619      	mov	r1, r3
 800605c:	f006 fabd 	bl	800c5da <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8006060:	6879      	ldr	r1, [r7, #4]
 8006062:	69ba      	ldr	r2, [r7, #24]
 8006064:	4613      	mov	r3, r2
 8006066:	009b      	lsls	r3, r3, #2
 8006068:	4413      	add	r3, r2
 800606a:	00db      	lsls	r3, r3, #3
 800606c:	440b      	add	r3, r1
 800606e:	3344      	adds	r3, #68	; 0x44
 8006070:	681a      	ldr	r2, [r3, #0]
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	18d1      	adds	r1, r2, r3
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	69ba      	ldr	r2, [r7, #24]
 800607a:	4613      	mov	r3, r2
 800607c:	009b      	lsls	r3, r3, #2
 800607e:	4413      	add	r3, r2
 8006080:	00db      	lsls	r3, r3, #3
 8006082:	4403      	add	r3, r0
 8006084:	3344      	adds	r3, #68	; 0x44
 8006086:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8006088:	6879      	ldr	r1, [r7, #4]
 800608a:	69ba      	ldr	r2, [r7, #24]
 800608c:	4613      	mov	r3, r2
 800608e:	009b      	lsls	r3, r3, #2
 8006090:	4413      	add	r3, r2
 8006092:	00db      	lsls	r3, r3, #3
 8006094:	440b      	add	r3, r1
 8006096:	334c      	adds	r3, #76	; 0x4c
 8006098:	681a      	ldr	r2, [r3, #0]
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	18d1      	adds	r1, r2, r3
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	69ba      	ldr	r2, [r7, #24]
 80060a2:	4613      	mov	r3, r2
 80060a4:	009b      	lsls	r3, r3, #2
 80060a6:	4413      	add	r3, r2
 80060a8:	00db      	lsls	r3, r3, #3
 80060aa:	4403      	add	r3, r0
 80060ac:	334c      	adds	r3, #76	; 0x4c
 80060ae:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 80060b0:	69bb      	ldr	r3, [r7, #24]
 80060b2:	015a      	lsls	r2, r3, #5
 80060b4:	6a3b      	ldr	r3, [r7, #32]
 80060b6:	4413      	add	r3, r2
 80060b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060bc:	691a      	ldr	r2, [r3, #16]
 80060be:	4b1d      	ldr	r3, [pc, #116]	; (8006134 <HCD_RXQLVL_IRQHandler+0x154>)
 80060c0:	4013      	ands	r3, r2
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d031      	beq.n	800612a <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 80060c6:	69bb      	ldr	r3, [r7, #24]
 80060c8:	015a      	lsls	r2, r3, #5
 80060ca:	6a3b      	ldr	r3, [r7, #32]
 80060cc:	4413      	add	r3, r2
 80060ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80060dc:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80060e4:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 80060e6:	69bb      	ldr	r3, [r7, #24]
 80060e8:	015a      	lsls	r2, r3, #5
 80060ea:	6a3b      	ldr	r3, [r7, #32]
 80060ec:	4413      	add	r3, r2
 80060ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060f2:	461a      	mov	r2, r3
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 80060f8:	6879      	ldr	r1, [r7, #4]
 80060fa:	69ba      	ldr	r2, [r7, #24]
 80060fc:	4613      	mov	r3, r2
 80060fe:	009b      	lsls	r3, r3, #2
 8006100:	4413      	add	r3, r2
 8006102:	00db      	lsls	r3, r3, #3
 8006104:	440b      	add	r3, r1
 8006106:	3350      	adds	r3, #80	; 0x50
 8006108:	781b      	ldrb	r3, [r3, #0]
 800610a:	f083 0301 	eor.w	r3, r3, #1
 800610e:	b2d8      	uxtb	r0, r3
 8006110:	6879      	ldr	r1, [r7, #4]
 8006112:	69ba      	ldr	r2, [r7, #24]
 8006114:	4613      	mov	r3, r2
 8006116:	009b      	lsls	r3, r3, #2
 8006118:	4413      	add	r3, r2
 800611a:	00db      	lsls	r3, r3, #3
 800611c:	440b      	add	r3, r1
 800611e:	3350      	adds	r3, #80	; 0x50
 8006120:	4602      	mov	r2, r0
 8006122:	701a      	strb	r2, [r3, #0]
      break;
 8006124:	e001      	b.n	800612a <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8006126:	bf00      	nop
 8006128:	e000      	b.n	800612c <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 800612a:	bf00      	nop
  }
}
 800612c:	bf00      	nop
 800612e:	3728      	adds	r7, #40	; 0x28
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}
 8006134:	1ff80000 	.word	0x1ff80000

08006138 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b086      	sub	sp, #24
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006164:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	f003 0302 	and.w	r3, r3, #2
 800616c:	2b02      	cmp	r3, #2
 800616e:	d10b      	bne.n	8006188 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f003 0301 	and.w	r3, r3, #1
 8006176:	2b01      	cmp	r3, #1
 8006178:	d102      	bne.n	8006180 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f00b ffda 	bl	8012134 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	f043 0302 	orr.w	r3, r3, #2
 8006186:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	f003 0308 	and.w	r3, r3, #8
 800618e:	2b08      	cmp	r3, #8
 8006190:	d132      	bne.n	80061f8 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	f043 0308 	orr.w	r3, r3, #8
 8006198:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	f003 0304 	and.w	r3, r3, #4
 80061a0:	2b04      	cmp	r3, #4
 80061a2:	d126      	bne.n	80061f2 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	699b      	ldr	r3, [r3, #24]
 80061a8:	2b02      	cmp	r3, #2
 80061aa:	d113      	bne.n	80061d4 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80061b2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80061b6:	d106      	bne.n	80061c6 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	2102      	movs	r1, #2
 80061be:	4618      	mov	r0, r3
 80061c0:	f006 fb3a 	bl	800c838 <USB_InitFSLSPClkSel>
 80061c4:	e011      	b.n	80061ea <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	2101      	movs	r1, #1
 80061cc:	4618      	mov	r0, r3
 80061ce:	f006 fb33 	bl	800c838 <USB_InitFSLSPClkSel>
 80061d2:	e00a      	b.n	80061ea <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	68db      	ldr	r3, [r3, #12]
 80061d8:	2b01      	cmp	r3, #1
 80061da:	d106      	bne.n	80061ea <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061e2:	461a      	mov	r2, r3
 80061e4:	f64e 2360 	movw	r3, #60000	; 0xea60
 80061e8:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f00b ffd0 	bl	8012190 <HAL_HCD_PortEnabled_Callback>
 80061f0:	e002      	b.n	80061f8 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f00b ffda 	bl	80121ac <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	f003 0320 	and.w	r3, r3, #32
 80061fe:	2b20      	cmp	r3, #32
 8006200:	d103      	bne.n	800620a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	f043 0320 	orr.w	r3, r3, #32
 8006208:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006210:	461a      	mov	r2, r3
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	6013      	str	r3, [r2, #0]
}
 8006216:	bf00      	nop
 8006218:	3718      	adds	r7, #24
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}
	...

08006220 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b082      	sub	sp, #8
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d101      	bne.n	8006232 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800622e:	2301      	movs	r3, #1
 8006230:	e07f      	b.n	8006332 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006238:	b2db      	uxtb	r3, r3
 800623a:	2b00      	cmp	r3, #0
 800623c:	d106      	bne.n	800624c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2200      	movs	r2, #0
 8006242:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f7fb fe1c 	bl	8001e84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2224      	movs	r2, #36	; 0x24
 8006250:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	681a      	ldr	r2, [r3, #0]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f022 0201 	bic.w	r2, r2, #1
 8006262:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	685a      	ldr	r2, [r3, #4]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006270:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	689a      	ldr	r2, [r3, #8]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006280:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	68db      	ldr	r3, [r3, #12]
 8006286:	2b01      	cmp	r3, #1
 8006288:	d107      	bne.n	800629a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	689a      	ldr	r2, [r3, #8]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006296:	609a      	str	r2, [r3, #8]
 8006298:	e006      	b.n	80062a8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	689a      	ldr	r2, [r3, #8]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80062a6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	68db      	ldr	r3, [r3, #12]
 80062ac:	2b02      	cmp	r3, #2
 80062ae:	d104      	bne.n	80062ba <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80062b8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	6859      	ldr	r1, [r3, #4]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681a      	ldr	r2, [r3, #0]
 80062c4:	4b1d      	ldr	r3, [pc, #116]	; (800633c <HAL_I2C_Init+0x11c>)
 80062c6:	430b      	orrs	r3, r1
 80062c8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	68da      	ldr	r2, [r3, #12]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80062d8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	691a      	ldr	r2, [r3, #16]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	695b      	ldr	r3, [r3, #20]
 80062e2:	ea42 0103 	orr.w	r1, r2, r3
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	699b      	ldr	r3, [r3, #24]
 80062ea:	021a      	lsls	r2, r3, #8
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	430a      	orrs	r2, r1
 80062f2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	69d9      	ldr	r1, [r3, #28]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6a1a      	ldr	r2, [r3, #32]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	430a      	orrs	r2, r1
 8006302:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	681a      	ldr	r2, [r3, #0]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f042 0201 	orr.w	r2, r2, #1
 8006312:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2200      	movs	r2, #0
 8006318:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2220      	movs	r2, #32
 800631e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2200      	movs	r2, #0
 8006326:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2200      	movs	r2, #0
 800632c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006330:	2300      	movs	r3, #0
}
 8006332:	4618      	mov	r0, r3
 8006334:	3708      	adds	r7, #8
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}
 800633a:	bf00      	nop
 800633c:	02008000 	.word	0x02008000

08006340 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006340:	b480      	push	{r7}
 8006342:	b083      	sub	sp, #12
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006350:	b2db      	uxtb	r3, r3
 8006352:	2b20      	cmp	r3, #32
 8006354:	d138      	bne.n	80063c8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800635c:	2b01      	cmp	r3, #1
 800635e:	d101      	bne.n	8006364 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006360:	2302      	movs	r3, #2
 8006362:	e032      	b.n	80063ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2201      	movs	r2, #1
 8006368:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2224      	movs	r2, #36	; 0x24
 8006370:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	681a      	ldr	r2, [r3, #0]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f022 0201 	bic.w	r2, r2, #1
 8006382:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	681a      	ldr	r2, [r3, #0]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006392:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	6819      	ldr	r1, [r3, #0]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	683a      	ldr	r2, [r7, #0]
 80063a0:	430a      	orrs	r2, r1
 80063a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	681a      	ldr	r2, [r3, #0]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f042 0201 	orr.w	r2, r2, #1
 80063b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2220      	movs	r2, #32
 80063b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2200      	movs	r2, #0
 80063c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80063c4:	2300      	movs	r3, #0
 80063c6:	e000      	b.n	80063ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80063c8:	2302      	movs	r3, #2
  }
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	370c      	adds	r7, #12
 80063ce:	46bd      	mov	sp, r7
 80063d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d4:	4770      	bx	lr

080063d6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80063d6:	b480      	push	{r7}
 80063d8:	b085      	sub	sp, #20
 80063da:	af00      	add	r7, sp, #0
 80063dc:	6078      	str	r0, [r7, #4]
 80063de:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063e6:	b2db      	uxtb	r3, r3
 80063e8:	2b20      	cmp	r3, #32
 80063ea:	d139      	bne.n	8006460 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80063f2:	2b01      	cmp	r3, #1
 80063f4:	d101      	bne.n	80063fa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80063f6:	2302      	movs	r3, #2
 80063f8:	e033      	b.n	8006462 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2201      	movs	r2, #1
 80063fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2224      	movs	r2, #36	; 0x24
 8006406:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	681a      	ldr	r2, [r3, #0]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f022 0201 	bic.w	r2, r2, #1
 8006418:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006428:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	021b      	lsls	r3, r3, #8
 800642e:	68fa      	ldr	r2, [r7, #12]
 8006430:	4313      	orrs	r3, r2
 8006432:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	68fa      	ldr	r2, [r7, #12]
 800643a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	681a      	ldr	r2, [r3, #0]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f042 0201 	orr.w	r2, r2, #1
 800644a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2220      	movs	r2, #32
 8006450:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2200      	movs	r2, #0
 8006458:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800645c:	2300      	movs	r3, #0
 800645e:	e000      	b.n	8006462 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006460:	2302      	movs	r3, #2
  }
}
 8006462:	4618      	mov	r0, r3
 8006464:	3714      	adds	r7, #20
 8006466:	46bd      	mov	sp, r7
 8006468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646c:	4770      	bx	lr
	...

08006470 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b084      	sub	sp, #16
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d101      	bne.n	8006482 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800647e:	2301      	movs	r3, #1
 8006480:	e0bf      	b.n	8006602 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8006488:	b2db      	uxtb	r3, r3
 800648a:	2b00      	cmp	r3, #0
 800648c:	d106      	bne.n	800649c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2200      	movs	r2, #0
 8006492:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f7fb fd6c 	bl	8001f74 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2202      	movs	r2, #2
 80064a0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	699a      	ldr	r2, [r3, #24]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80064b2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	6999      	ldr	r1, [r3, #24]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	685a      	ldr	r2, [r3, #4]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	689b      	ldr	r3, [r3, #8]
 80064c2:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80064c8:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	691b      	ldr	r3, [r3, #16]
 80064ce:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	430a      	orrs	r2, r1
 80064d6:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	6899      	ldr	r1, [r3, #8]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681a      	ldr	r2, [r3, #0]
 80064e2:	4b4a      	ldr	r3, [pc, #296]	; (800660c <HAL_LTDC_Init+0x19c>)
 80064e4:	400b      	ands	r3, r1
 80064e6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	695b      	ldr	r3, [r3, #20]
 80064ec:	041b      	lsls	r3, r3, #16
 80064ee:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	6899      	ldr	r1, [r3, #8]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	699a      	ldr	r2, [r3, #24]
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	431a      	orrs	r2, r3
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	430a      	orrs	r2, r1
 8006504:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	68d9      	ldr	r1, [r3, #12]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681a      	ldr	r2, [r3, #0]
 8006510:	4b3e      	ldr	r3, [pc, #248]	; (800660c <HAL_LTDC_Init+0x19c>)
 8006512:	400b      	ands	r3, r1
 8006514:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	69db      	ldr	r3, [r3, #28]
 800651a:	041b      	lsls	r3, r3, #16
 800651c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	68d9      	ldr	r1, [r3, #12]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6a1a      	ldr	r2, [r3, #32]
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	431a      	orrs	r2, r3
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	430a      	orrs	r2, r1
 8006532:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	6919      	ldr	r1, [r3, #16]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681a      	ldr	r2, [r3, #0]
 800653e:	4b33      	ldr	r3, [pc, #204]	; (800660c <HAL_LTDC_Init+0x19c>)
 8006540:	400b      	ands	r3, r1
 8006542:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006548:	041b      	lsls	r3, r3, #16
 800654a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	6919      	ldr	r1, [r3, #16]
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	431a      	orrs	r2, r3
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	430a      	orrs	r2, r1
 8006560:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	6959      	ldr	r1, [r3, #20]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681a      	ldr	r2, [r3, #0]
 800656c:	4b27      	ldr	r3, [pc, #156]	; (800660c <HAL_LTDC_Init+0x19c>)
 800656e:	400b      	ands	r3, r1
 8006570:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006576:	041b      	lsls	r3, r3, #16
 8006578:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	6959      	ldr	r1, [r3, #20]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	431a      	orrs	r2, r3
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	430a      	orrs	r2, r1
 800658e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006596:	021b      	lsls	r3, r3, #8
 8006598:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80065a0:	041b      	lsls	r3, r3, #16
 80065a2:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80065b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80065ba:	68ba      	ldr	r2, [r7, #8]
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	4313      	orrs	r3, r2
 80065c0:	687a      	ldr	r2, [r7, #4]
 80065c2:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80065c6:	431a      	orrs	r2, r3
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	430a      	orrs	r2, r1
 80065ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f042 0206 	orr.w	r2, r2, #6
 80065de:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	699a      	ldr	r2, [r3, #24]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f042 0201 	orr.w	r2, r2, #1
 80065ee:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2200      	movs	r2, #0
 80065f4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2201      	movs	r2, #1
 80065fc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8006600:	2300      	movs	r3, #0
}
 8006602:	4618      	mov	r0, r3
 8006604:	3710      	adds	r7, #16
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}
 800660a:	bf00      	nop
 800660c:	f000f800 	.word	0xf000f800

08006610 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b084      	sub	sp, #16
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800661e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006626:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f003 0304 	and.w	r3, r3, #4
 800662e:	2b00      	cmp	r3, #0
 8006630:	d023      	beq.n	800667a <HAL_LTDC_IRQHandler+0x6a>
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	f003 0304 	and.w	r3, r3, #4
 8006638:	2b00      	cmp	r3, #0
 800663a:	d01e      	beq.n	800667a <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f022 0204 	bic.w	r2, r2, #4
 800664a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	2204      	movs	r2, #4
 8006652:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800665a:	f043 0201 	orr.w	r2, r3, #1
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2204      	movs	r2, #4
 8006668:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2200      	movs	r2, #0
 8006670:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006674:	6878      	ldr	r0, [r7, #4]
 8006676:	f000 f86f 	bl	8006758 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	f003 0302 	and.w	r3, r3, #2
 8006680:	2b00      	cmp	r3, #0
 8006682:	d023      	beq.n	80066cc <HAL_LTDC_IRQHandler+0xbc>
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	f003 0302 	and.w	r3, r3, #2
 800668a:	2b00      	cmp	r3, #0
 800668c:	d01e      	beq.n	80066cc <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f022 0202 	bic.w	r2, r2, #2
 800669c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	2202      	movs	r2, #2
 80066a4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80066ac:	f043 0202 	orr.w	r2, r3, #2
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2204      	movs	r2, #4
 80066ba:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2200      	movs	r2, #0
 80066c2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f000 f846 	bl	8006758 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f003 0301 	and.w	r3, r3, #1
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d01b      	beq.n	800670e <HAL_LTDC_IRQHandler+0xfe>
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	f003 0301 	and.w	r3, r3, #1
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d016      	beq.n	800670e <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f022 0201 	bic.w	r2, r2, #1
 80066ee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	2201      	movs	r2, #1
 80066f6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2201      	movs	r2, #1
 80066fc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2200      	movs	r2, #0
 8006704:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f000 f82f 	bl	800676c <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	f003 0308 	and.w	r3, r3, #8
 8006714:	2b00      	cmp	r3, #0
 8006716:	d01b      	beq.n	8006750 <HAL_LTDC_IRQHandler+0x140>
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	f003 0308 	and.w	r3, r3, #8
 800671e:	2b00      	cmp	r3, #0
 8006720:	d016      	beq.n	8006750 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f022 0208 	bic.w	r2, r2, #8
 8006730:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	2208      	movs	r2, #8
 8006738:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2201      	movs	r2, #1
 800673e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2200      	movs	r2, #0
 8006746:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f000 f818 	bl	8006780 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8006750:	bf00      	nop
 8006752:	3710      	adds	r7, #16
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}

08006758 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8006758:	b480      	push	{r7}
 800675a:	b083      	sub	sp, #12
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8006760:	bf00      	nop
 8006762:	370c      	adds	r7, #12
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr

0800676c <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800676c:	b480      	push	{r7}
 800676e:	b083      	sub	sp, #12
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8006774:	bf00      	nop
 8006776:	370c      	adds	r7, #12
 8006778:	46bd      	mov	sp, r7
 800677a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677e:	4770      	bx	lr

08006780 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006780:	b480      	push	{r7}
 8006782:	b083      	sub	sp, #12
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8006788:	bf00      	nop
 800678a:	370c      	adds	r7, #12
 800678c:	46bd      	mov	sp, r7
 800678e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006792:	4770      	bx	lr

08006794 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006794:	b5b0      	push	{r4, r5, r7, lr}
 8006796:	b084      	sub	sp, #16
 8006798:	af00      	add	r7, sp, #0
 800679a:	60f8      	str	r0, [r7, #12]
 800679c:	60b9      	str	r1, [r7, #8]
 800679e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80067a6:	2b01      	cmp	r3, #1
 80067a8:	d101      	bne.n	80067ae <HAL_LTDC_ConfigLayer+0x1a>
 80067aa:	2302      	movs	r3, #2
 80067ac:	e02c      	b.n	8006808 <HAL_LTDC_ConfigLayer+0x74>
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	2201      	movs	r2, #1
 80067b2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	2202      	movs	r2, #2
 80067ba:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80067be:	68fa      	ldr	r2, [r7, #12]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2134      	movs	r1, #52	; 0x34
 80067c4:	fb01 f303 	mul.w	r3, r1, r3
 80067c8:	4413      	add	r3, r2
 80067ca:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	4614      	mov	r4, r2
 80067d2:	461d      	mov	r5, r3
 80067d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80067d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80067d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80067da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80067dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80067de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80067e0:	682b      	ldr	r3, [r5, #0]
 80067e2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80067e4:	687a      	ldr	r2, [r7, #4]
 80067e6:	68b9      	ldr	r1, [r7, #8]
 80067e8:	68f8      	ldr	r0, [r7, #12]
 80067ea:	f000 f811 	bl	8006810 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	2201      	movs	r2, #1
 80067f4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2201      	movs	r2, #1
 80067fa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2200      	movs	r2, #0
 8006802:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006806:	2300      	movs	r3, #0
}
 8006808:	4618      	mov	r0, r3
 800680a:	3710      	adds	r7, #16
 800680c:	46bd      	mov	sp, r7
 800680e:	bdb0      	pop	{r4, r5, r7, pc}

08006810 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006810:	b480      	push	{r7}
 8006812:	b089      	sub	sp, #36	; 0x24
 8006814:	af00      	add	r7, sp, #0
 8006816:	60f8      	str	r0, [r7, #12]
 8006818:	60b9      	str	r1, [r7, #8]
 800681a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	685a      	ldr	r2, [r3, #4]
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	68db      	ldr	r3, [r3, #12]
 8006826:	0c1b      	lsrs	r3, r3, #16
 8006828:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800682c:	4413      	add	r3, r2
 800682e:	041b      	lsls	r3, r3, #16
 8006830:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	461a      	mov	r2, r3
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	01db      	lsls	r3, r3, #7
 800683c:	4413      	add	r3, r2
 800683e:	3384      	adds	r3, #132	; 0x84
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	68fa      	ldr	r2, [r7, #12]
 8006844:	6812      	ldr	r2, [r2, #0]
 8006846:	4611      	mov	r1, r2
 8006848:	687a      	ldr	r2, [r7, #4]
 800684a:	01d2      	lsls	r2, r2, #7
 800684c:	440a      	add	r2, r1
 800684e:	3284      	adds	r2, #132	; 0x84
 8006850:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006854:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	681a      	ldr	r2, [r3, #0]
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	68db      	ldr	r3, [r3, #12]
 8006860:	0c1b      	lsrs	r3, r3, #16
 8006862:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006866:	4413      	add	r3, r2
 8006868:	1c5a      	adds	r2, r3, #1
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4619      	mov	r1, r3
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	01db      	lsls	r3, r3, #7
 8006874:	440b      	add	r3, r1
 8006876:	3384      	adds	r3, #132	; 0x84
 8006878:	4619      	mov	r1, r3
 800687a:	69fb      	ldr	r3, [r7, #28]
 800687c:	4313      	orrs	r3, r2
 800687e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	68da      	ldr	r2, [r3, #12]
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	68db      	ldr	r3, [r3, #12]
 800688a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800688e:	4413      	add	r3, r2
 8006890:	041b      	lsls	r3, r3, #16
 8006892:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	461a      	mov	r2, r3
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	01db      	lsls	r3, r3, #7
 800689e:	4413      	add	r3, r2
 80068a0:	3384      	adds	r3, #132	; 0x84
 80068a2:	689b      	ldr	r3, [r3, #8]
 80068a4:	68fa      	ldr	r2, [r7, #12]
 80068a6:	6812      	ldr	r2, [r2, #0]
 80068a8:	4611      	mov	r1, r2
 80068aa:	687a      	ldr	r2, [r7, #4]
 80068ac:	01d2      	lsls	r2, r2, #7
 80068ae:	440a      	add	r2, r1
 80068b0:	3284      	adds	r2, #132	; 0x84
 80068b2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80068b6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	689a      	ldr	r2, [r3, #8]
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	68db      	ldr	r3, [r3, #12]
 80068c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80068c6:	4413      	add	r3, r2
 80068c8:	1c5a      	adds	r2, r3, #1
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4619      	mov	r1, r3
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	01db      	lsls	r3, r3, #7
 80068d4:	440b      	add	r3, r1
 80068d6:	3384      	adds	r3, #132	; 0x84
 80068d8:	4619      	mov	r1, r3
 80068da:	69fb      	ldr	r3, [r7, #28]
 80068dc:	4313      	orrs	r3, r2
 80068de:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	461a      	mov	r2, r3
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	01db      	lsls	r3, r3, #7
 80068ea:	4413      	add	r3, r2
 80068ec:	3384      	adds	r3, #132	; 0x84
 80068ee:	691b      	ldr	r3, [r3, #16]
 80068f0:	68fa      	ldr	r2, [r7, #12]
 80068f2:	6812      	ldr	r2, [r2, #0]
 80068f4:	4611      	mov	r1, r2
 80068f6:	687a      	ldr	r2, [r7, #4]
 80068f8:	01d2      	lsls	r2, r2, #7
 80068fa:	440a      	add	r2, r1
 80068fc:	3284      	adds	r2, #132	; 0x84
 80068fe:	f023 0307 	bic.w	r3, r3, #7
 8006902:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	461a      	mov	r2, r3
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	01db      	lsls	r3, r3, #7
 800690e:	4413      	add	r3, r2
 8006910:	3384      	adds	r3, #132	; 0x84
 8006912:	461a      	mov	r2, r3
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	691b      	ldr	r3, [r3, #16]
 8006918:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006920:	021b      	lsls	r3, r3, #8
 8006922:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800692a:	041b      	lsls	r3, r3, #16
 800692c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	699b      	ldr	r3, [r3, #24]
 8006932:	061b      	lsls	r3, r3, #24
 8006934:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	461a      	mov	r2, r3
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	01db      	lsls	r3, r3, #7
 8006940:	4413      	add	r3, r2
 8006942:	3384      	adds	r3, #132	; 0x84
 8006944:	699b      	ldr	r3, [r3, #24]
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	461a      	mov	r2, r3
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	01db      	lsls	r3, r3, #7
 8006950:	4413      	add	r3, r2
 8006952:	3384      	adds	r3, #132	; 0x84
 8006954:	461a      	mov	r2, r3
 8006956:	2300      	movs	r3, #0
 8006958:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006960:	461a      	mov	r2, r3
 8006962:	69fb      	ldr	r3, [r7, #28]
 8006964:	431a      	orrs	r2, r3
 8006966:	69bb      	ldr	r3, [r7, #24]
 8006968:	431a      	orrs	r2, r3
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4619      	mov	r1, r3
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	01db      	lsls	r3, r3, #7
 8006974:	440b      	add	r3, r1
 8006976:	3384      	adds	r3, #132	; 0x84
 8006978:	4619      	mov	r1, r3
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	4313      	orrs	r3, r2
 800697e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	461a      	mov	r2, r3
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	01db      	lsls	r3, r3, #7
 800698a:	4413      	add	r3, r2
 800698c:	3384      	adds	r3, #132	; 0x84
 800698e:	695b      	ldr	r3, [r3, #20]
 8006990:	68fa      	ldr	r2, [r7, #12]
 8006992:	6812      	ldr	r2, [r2, #0]
 8006994:	4611      	mov	r1, r2
 8006996:	687a      	ldr	r2, [r7, #4]
 8006998:	01d2      	lsls	r2, r2, #7
 800699a:	440a      	add	r2, r1
 800699c:	3284      	adds	r2, #132	; 0x84
 800699e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80069a2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	461a      	mov	r2, r3
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	01db      	lsls	r3, r3, #7
 80069ae:	4413      	add	r3, r2
 80069b0:	3384      	adds	r3, #132	; 0x84
 80069b2:	461a      	mov	r2, r3
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	695b      	ldr	r3, [r3, #20]
 80069b8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	461a      	mov	r2, r3
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	01db      	lsls	r3, r3, #7
 80069c4:	4413      	add	r3, r2
 80069c6:	3384      	adds	r3, #132	; 0x84
 80069c8:	69da      	ldr	r2, [r3, #28]
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4619      	mov	r1, r3
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	01db      	lsls	r3, r3, #7
 80069d4:	440b      	add	r3, r1
 80069d6:	3384      	adds	r3, #132	; 0x84
 80069d8:	4619      	mov	r1, r3
 80069da:	4b58      	ldr	r3, [pc, #352]	; (8006b3c <LTDC_SetConfig+0x32c>)
 80069dc:	4013      	ands	r3, r2
 80069de:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	69da      	ldr	r2, [r3, #28]
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	6a1b      	ldr	r3, [r3, #32]
 80069e8:	68f9      	ldr	r1, [r7, #12]
 80069ea:	6809      	ldr	r1, [r1, #0]
 80069ec:	4608      	mov	r0, r1
 80069ee:	6879      	ldr	r1, [r7, #4]
 80069f0:	01c9      	lsls	r1, r1, #7
 80069f2:	4401      	add	r1, r0
 80069f4:	3184      	adds	r1, #132	; 0x84
 80069f6:	4313      	orrs	r3, r2
 80069f8:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	461a      	mov	r2, r3
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	01db      	lsls	r3, r3, #7
 8006a04:	4413      	add	r3, r2
 8006a06:	3384      	adds	r3, #132	; 0x84
 8006a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	461a      	mov	r2, r3
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	01db      	lsls	r3, r3, #7
 8006a14:	4413      	add	r3, r2
 8006a16:	3384      	adds	r3, #132	; 0x84
 8006a18:	461a      	mov	r2, r3
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	461a      	mov	r2, r3
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	01db      	lsls	r3, r3, #7
 8006a28:	4413      	add	r3, r2
 8006a2a:	3384      	adds	r3, #132	; 0x84
 8006a2c:	461a      	mov	r2, r3
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a32:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	691b      	ldr	r3, [r3, #16]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d102      	bne.n	8006a42 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8006a3c:	2304      	movs	r3, #4
 8006a3e:	61fb      	str	r3, [r7, #28]
 8006a40:	e01b      	b.n	8006a7a <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	691b      	ldr	r3, [r3, #16]
 8006a46:	2b01      	cmp	r3, #1
 8006a48:	d102      	bne.n	8006a50 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8006a4a:	2303      	movs	r3, #3
 8006a4c:	61fb      	str	r3, [r7, #28]
 8006a4e:	e014      	b.n	8006a7a <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	691b      	ldr	r3, [r3, #16]
 8006a54:	2b04      	cmp	r3, #4
 8006a56:	d00b      	beq.n	8006a70 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006a5c:	2b02      	cmp	r3, #2
 8006a5e:	d007      	beq.n	8006a70 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006a64:	2b03      	cmp	r3, #3
 8006a66:	d003      	beq.n	8006a70 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006a6c:	2b07      	cmp	r3, #7
 8006a6e:	d102      	bne.n	8006a76 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8006a70:	2302      	movs	r3, #2
 8006a72:	61fb      	str	r3, [r7, #28]
 8006a74:	e001      	b.n	8006a7a <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8006a76:	2301      	movs	r3, #1
 8006a78:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	461a      	mov	r2, r3
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	01db      	lsls	r3, r3, #7
 8006a84:	4413      	add	r3, r2
 8006a86:	3384      	adds	r3, #132	; 0x84
 8006a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a8a:	68fa      	ldr	r2, [r7, #12]
 8006a8c:	6812      	ldr	r2, [r2, #0]
 8006a8e:	4611      	mov	r1, r2
 8006a90:	687a      	ldr	r2, [r7, #4]
 8006a92:	01d2      	lsls	r2, r2, #7
 8006a94:	440a      	add	r2, r1
 8006a96:	3284      	adds	r2, #132	; 0x84
 8006a98:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8006a9c:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aa2:	69fa      	ldr	r2, [r7, #28]
 8006aa4:	fb02 f303 	mul.w	r3, r2, r3
 8006aa8:	041a      	lsls	r2, r3, #16
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	6859      	ldr	r1, [r3, #4]
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	1acb      	subs	r3, r1, r3
 8006ab4:	69f9      	ldr	r1, [r7, #28]
 8006ab6:	fb01 f303 	mul.w	r3, r1, r3
 8006aba:	3303      	adds	r3, #3
 8006abc:	68f9      	ldr	r1, [r7, #12]
 8006abe:	6809      	ldr	r1, [r1, #0]
 8006ac0:	4608      	mov	r0, r1
 8006ac2:	6879      	ldr	r1, [r7, #4]
 8006ac4:	01c9      	lsls	r1, r1, #7
 8006ac6:	4401      	add	r1, r0
 8006ac8:	3184      	adds	r1, #132	; 0x84
 8006aca:	4313      	orrs	r3, r2
 8006acc:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	461a      	mov	r2, r3
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	01db      	lsls	r3, r3, #7
 8006ad8:	4413      	add	r3, r2
 8006ada:	3384      	adds	r3, #132	; 0x84
 8006adc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4619      	mov	r1, r3
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	01db      	lsls	r3, r3, #7
 8006ae8:	440b      	add	r3, r1
 8006aea:	3384      	adds	r3, #132	; 0x84
 8006aec:	4619      	mov	r1, r3
 8006aee:	4b14      	ldr	r3, [pc, #80]	; (8006b40 <LTDC_SetConfig+0x330>)
 8006af0:	4013      	ands	r3, r2
 8006af2:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	461a      	mov	r2, r3
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	01db      	lsls	r3, r3, #7
 8006afe:	4413      	add	r3, r2
 8006b00:	3384      	adds	r3, #132	; 0x84
 8006b02:	461a      	mov	r2, r3
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b08:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	461a      	mov	r2, r3
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	01db      	lsls	r3, r3, #7
 8006b14:	4413      	add	r3, r2
 8006b16:	3384      	adds	r3, #132	; 0x84
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	68fa      	ldr	r2, [r7, #12]
 8006b1c:	6812      	ldr	r2, [r2, #0]
 8006b1e:	4611      	mov	r1, r2
 8006b20:	687a      	ldr	r2, [r7, #4]
 8006b22:	01d2      	lsls	r2, r2, #7
 8006b24:	440a      	add	r2, r1
 8006b26:	3284      	adds	r2, #132	; 0x84
 8006b28:	f043 0301 	orr.w	r3, r3, #1
 8006b2c:	6013      	str	r3, [r2, #0]
}
 8006b2e:	bf00      	nop
 8006b30:	3724      	adds	r7, #36	; 0x24
 8006b32:	46bd      	mov	sp, r7
 8006b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b38:	4770      	bx	lr
 8006b3a:	bf00      	nop
 8006b3c:	fffff8f8 	.word	0xfffff8f8
 8006b40:	fffff800 	.word	0xfffff800

08006b44 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006b44:	b480      	push	{r7}
 8006b46:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006b48:	4b05      	ldr	r3, [pc, #20]	; (8006b60 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a04      	ldr	r2, [pc, #16]	; (8006b60 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006b4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b52:	6013      	str	r3, [r2, #0]
}
 8006b54:	bf00      	nop
 8006b56:	46bd      	mov	sp, r7
 8006b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5c:	4770      	bx	lr
 8006b5e:	bf00      	nop
 8006b60:	40007000 	.word	0x40007000

08006b64 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b082      	sub	sp, #8
 8006b68:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006b6e:	4b23      	ldr	r3, [pc, #140]	; (8006bfc <HAL_PWREx_EnableOverDrive+0x98>)
 8006b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b72:	4a22      	ldr	r2, [pc, #136]	; (8006bfc <HAL_PWREx_EnableOverDrive+0x98>)
 8006b74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b78:	6413      	str	r3, [r2, #64]	; 0x40
 8006b7a:	4b20      	ldr	r3, [pc, #128]	; (8006bfc <HAL_PWREx_EnableOverDrive+0x98>)
 8006b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b82:	603b      	str	r3, [r7, #0]
 8006b84:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006b86:	4b1e      	ldr	r3, [pc, #120]	; (8006c00 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a1d      	ldr	r2, [pc, #116]	; (8006c00 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006b8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b90:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006b92:	f7fc f88b 	bl	8002cac <HAL_GetTick>
 8006b96:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006b98:	e009      	b.n	8006bae <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006b9a:	f7fc f887 	bl	8002cac <HAL_GetTick>
 8006b9e:	4602      	mov	r2, r0
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	1ad3      	subs	r3, r2, r3
 8006ba4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006ba8:	d901      	bls.n	8006bae <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8006baa:	2303      	movs	r3, #3
 8006bac:	e022      	b.n	8006bf4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006bae:	4b14      	ldr	r3, [pc, #80]	; (8006c00 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006bb0:	685b      	ldr	r3, [r3, #4]
 8006bb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006bb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bba:	d1ee      	bne.n	8006b9a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006bbc:	4b10      	ldr	r3, [pc, #64]	; (8006c00 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a0f      	ldr	r2, [pc, #60]	; (8006c00 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006bc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006bc6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006bc8:	f7fc f870 	bl	8002cac <HAL_GetTick>
 8006bcc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006bce:	e009      	b.n	8006be4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006bd0:	f7fc f86c 	bl	8002cac <HAL_GetTick>
 8006bd4:	4602      	mov	r2, r0
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	1ad3      	subs	r3, r2, r3
 8006bda:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006bde:	d901      	bls.n	8006be4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006be0:	2303      	movs	r3, #3
 8006be2:	e007      	b.n	8006bf4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006be4:	4b06      	ldr	r3, [pc, #24]	; (8006c00 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006be6:	685b      	ldr	r3, [r3, #4]
 8006be8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006bf0:	d1ee      	bne.n	8006bd0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8006bf2:	2300      	movs	r3, #0
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	3708      	adds	r7, #8
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bd80      	pop	{r7, pc}
 8006bfc:	40023800 	.word	0x40023800
 8006c00:	40007000 	.word	0x40007000

08006c04 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b086      	sub	sp, #24
 8006c08:	af02      	add	r7, sp, #8
 8006c0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006c0c:	f7fc f84e 	bl	8002cac <HAL_GetTick>
 8006c10:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d101      	bne.n	8006c1c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8006c18:	2301      	movs	r3, #1
 8006c1a:	e067      	b.n	8006cec <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c22:	b2db      	uxtb	r3, r3
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d10b      	bne.n	8006c40 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f7fb fa67 	bl	8002104 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8006c36:	f241 3188 	movw	r1, #5000	; 0x1388
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f000 f85e 	bl	8006cfc <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	689b      	ldr	r3, [r3, #8]
 8006c4e:	3b01      	subs	r3, #1
 8006c50:	021a      	lsls	r2, r3, #8
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	430a      	orrs	r2, r1
 8006c58:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c5e:	9300      	str	r3, [sp, #0]
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	2200      	movs	r2, #0
 8006c64:	2120      	movs	r1, #32
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f000 f856 	bl	8006d18 <QSPI_WaitFlagStateUntilTimeout>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8006c70:	7afb      	ldrb	r3, [r7, #11]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d135      	bne.n	8006ce2 <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	681a      	ldr	r2, [r3, #0]
 8006c7c:	4b1d      	ldr	r3, [pc, #116]	; (8006cf4 <HAL_QSPI_Init+0xf0>)
 8006c7e:	4013      	ands	r3, r2
 8006c80:	687a      	ldr	r2, [r7, #4]
 8006c82:	6852      	ldr	r2, [r2, #4]
 8006c84:	0611      	lsls	r1, r2, #24
 8006c86:	687a      	ldr	r2, [r7, #4]
 8006c88:	68d2      	ldr	r2, [r2, #12]
 8006c8a:	4311      	orrs	r1, r2
 8006c8c:	687a      	ldr	r2, [r7, #4]
 8006c8e:	69d2      	ldr	r2, [r2, #28]
 8006c90:	4311      	orrs	r1, r2
 8006c92:	687a      	ldr	r2, [r7, #4]
 8006c94:	6a12      	ldr	r2, [r2, #32]
 8006c96:	4311      	orrs	r1, r2
 8006c98:	687a      	ldr	r2, [r7, #4]
 8006c9a:	6812      	ldr	r2, [r2, #0]
 8006c9c:	430b      	orrs	r3, r1
 8006c9e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	685a      	ldr	r2, [r3, #4]
 8006ca6:	4b14      	ldr	r3, [pc, #80]	; (8006cf8 <HAL_QSPI_Init+0xf4>)
 8006ca8:	4013      	ands	r3, r2
 8006caa:	687a      	ldr	r2, [r7, #4]
 8006cac:	6912      	ldr	r2, [r2, #16]
 8006cae:	0411      	lsls	r1, r2, #16
 8006cb0:	687a      	ldr	r2, [r7, #4]
 8006cb2:	6952      	ldr	r2, [r2, #20]
 8006cb4:	4311      	orrs	r1, r2
 8006cb6:	687a      	ldr	r2, [r7, #4]
 8006cb8:	6992      	ldr	r2, [r2, #24]
 8006cba:	4311      	orrs	r1, r2
 8006cbc:	687a      	ldr	r2, [r7, #4]
 8006cbe:	6812      	ldr	r2, [r2, #0]
 8006cc0:	430b      	orrs	r3, r1
 8006cc2:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	681a      	ldr	r2, [r3, #0]
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f042 0201 	orr.w	r2, r2, #1
 8006cd2:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2201      	movs	r2, #1
 8006cde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8006cea:	7afb      	ldrb	r3, [r7, #11]
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	3710      	adds	r7, #16
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}
 8006cf4:	00ffff2f 	.word	0x00ffff2f
 8006cf8:	ffe0f8fe 	.word	0xffe0f8fe

08006cfc <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b083      	sub	sp, #12
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
 8006d04:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	683a      	ldr	r2, [r7, #0]
 8006d0a:	649a      	str	r2, [r3, #72]	; 0x48
}
 8006d0c:	bf00      	nop
 8006d0e:	370c      	adds	r7, #12
 8006d10:	46bd      	mov	sp, r7
 8006d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d16:	4770      	bx	lr

08006d18 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b084      	sub	sp, #16
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	60f8      	str	r0, [r7, #12]
 8006d20:	60b9      	str	r1, [r7, #8]
 8006d22:	603b      	str	r3, [r7, #0]
 8006d24:	4613      	mov	r3, r2
 8006d26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006d28:	e01a      	b.n	8006d60 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d2a:	69bb      	ldr	r3, [r7, #24]
 8006d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d30:	d016      	beq.n	8006d60 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d32:	f7fb ffbb 	bl	8002cac <HAL_GetTick>
 8006d36:	4602      	mov	r2, r0
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	1ad3      	subs	r3, r2, r3
 8006d3c:	69ba      	ldr	r2, [r7, #24]
 8006d3e:	429a      	cmp	r2, r3
 8006d40:	d302      	bcc.n	8006d48 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8006d42:	69bb      	ldr	r3, [r7, #24]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d10b      	bne.n	8006d60 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	2204      	movs	r2, #4
 8006d4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d54:	f043 0201 	orr.w	r2, r3, #1
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	e00e      	b.n	8006d7e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	689a      	ldr	r2, [r3, #8]
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	4013      	ands	r3, r2
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	bf14      	ite	ne
 8006d6e:	2301      	movne	r3, #1
 8006d70:	2300      	moveq	r3, #0
 8006d72:	b2db      	uxtb	r3, r3
 8006d74:	461a      	mov	r2, r3
 8006d76:	79fb      	ldrb	r3, [r7, #7]
 8006d78:	429a      	cmp	r2, r3
 8006d7a:	d1d6      	bne.n	8006d2a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006d7c:	2300      	movs	r3, #0
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3710      	adds	r7, #16
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}
	...

08006d88 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b086      	sub	sp, #24
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006d90:	2300      	movs	r3, #0
 8006d92:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d101      	bne.n	8006d9e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	e291      	b.n	80072c2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f003 0301 	and.w	r3, r3, #1
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	f000 8087 	beq.w	8006eba <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006dac:	4b96      	ldr	r3, [pc, #600]	; (8007008 <HAL_RCC_OscConfig+0x280>)
 8006dae:	689b      	ldr	r3, [r3, #8]
 8006db0:	f003 030c 	and.w	r3, r3, #12
 8006db4:	2b04      	cmp	r3, #4
 8006db6:	d00c      	beq.n	8006dd2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006db8:	4b93      	ldr	r3, [pc, #588]	; (8007008 <HAL_RCC_OscConfig+0x280>)
 8006dba:	689b      	ldr	r3, [r3, #8]
 8006dbc:	f003 030c 	and.w	r3, r3, #12
 8006dc0:	2b08      	cmp	r3, #8
 8006dc2:	d112      	bne.n	8006dea <HAL_RCC_OscConfig+0x62>
 8006dc4:	4b90      	ldr	r3, [pc, #576]	; (8007008 <HAL_RCC_OscConfig+0x280>)
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006dcc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006dd0:	d10b      	bne.n	8006dea <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006dd2:	4b8d      	ldr	r3, [pc, #564]	; (8007008 <HAL_RCC_OscConfig+0x280>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d06c      	beq.n	8006eb8 <HAL_RCC_OscConfig+0x130>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d168      	bne.n	8006eb8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006de6:	2301      	movs	r3, #1
 8006de8:	e26b      	b.n	80072c2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	685b      	ldr	r3, [r3, #4]
 8006dee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006df2:	d106      	bne.n	8006e02 <HAL_RCC_OscConfig+0x7a>
 8006df4:	4b84      	ldr	r3, [pc, #528]	; (8007008 <HAL_RCC_OscConfig+0x280>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4a83      	ldr	r2, [pc, #524]	; (8007008 <HAL_RCC_OscConfig+0x280>)
 8006dfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006dfe:	6013      	str	r3, [r2, #0]
 8006e00:	e02e      	b.n	8006e60 <HAL_RCC_OscConfig+0xd8>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d10c      	bne.n	8006e24 <HAL_RCC_OscConfig+0x9c>
 8006e0a:	4b7f      	ldr	r3, [pc, #508]	; (8007008 <HAL_RCC_OscConfig+0x280>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a7e      	ldr	r2, [pc, #504]	; (8007008 <HAL_RCC_OscConfig+0x280>)
 8006e10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e14:	6013      	str	r3, [r2, #0]
 8006e16:	4b7c      	ldr	r3, [pc, #496]	; (8007008 <HAL_RCC_OscConfig+0x280>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a7b      	ldr	r2, [pc, #492]	; (8007008 <HAL_RCC_OscConfig+0x280>)
 8006e1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006e20:	6013      	str	r3, [r2, #0]
 8006e22:	e01d      	b.n	8006e60 <HAL_RCC_OscConfig+0xd8>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006e2c:	d10c      	bne.n	8006e48 <HAL_RCC_OscConfig+0xc0>
 8006e2e:	4b76      	ldr	r3, [pc, #472]	; (8007008 <HAL_RCC_OscConfig+0x280>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4a75      	ldr	r2, [pc, #468]	; (8007008 <HAL_RCC_OscConfig+0x280>)
 8006e34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006e38:	6013      	str	r3, [r2, #0]
 8006e3a:	4b73      	ldr	r3, [pc, #460]	; (8007008 <HAL_RCC_OscConfig+0x280>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4a72      	ldr	r2, [pc, #456]	; (8007008 <HAL_RCC_OscConfig+0x280>)
 8006e40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e44:	6013      	str	r3, [r2, #0]
 8006e46:	e00b      	b.n	8006e60 <HAL_RCC_OscConfig+0xd8>
 8006e48:	4b6f      	ldr	r3, [pc, #444]	; (8007008 <HAL_RCC_OscConfig+0x280>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4a6e      	ldr	r2, [pc, #440]	; (8007008 <HAL_RCC_OscConfig+0x280>)
 8006e4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e52:	6013      	str	r3, [r2, #0]
 8006e54:	4b6c      	ldr	r3, [pc, #432]	; (8007008 <HAL_RCC_OscConfig+0x280>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a6b      	ldr	r2, [pc, #428]	; (8007008 <HAL_RCC_OscConfig+0x280>)
 8006e5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006e5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d013      	beq.n	8006e90 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e68:	f7fb ff20 	bl	8002cac <HAL_GetTick>
 8006e6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e6e:	e008      	b.n	8006e82 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006e70:	f7fb ff1c 	bl	8002cac <HAL_GetTick>
 8006e74:	4602      	mov	r2, r0
 8006e76:	693b      	ldr	r3, [r7, #16]
 8006e78:	1ad3      	subs	r3, r2, r3
 8006e7a:	2b64      	cmp	r3, #100	; 0x64
 8006e7c:	d901      	bls.n	8006e82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006e7e:	2303      	movs	r3, #3
 8006e80:	e21f      	b.n	80072c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e82:	4b61      	ldr	r3, [pc, #388]	; (8007008 <HAL_RCC_OscConfig+0x280>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d0f0      	beq.n	8006e70 <HAL_RCC_OscConfig+0xe8>
 8006e8e:	e014      	b.n	8006eba <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e90:	f7fb ff0c 	bl	8002cac <HAL_GetTick>
 8006e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006e96:	e008      	b.n	8006eaa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006e98:	f7fb ff08 	bl	8002cac <HAL_GetTick>
 8006e9c:	4602      	mov	r2, r0
 8006e9e:	693b      	ldr	r3, [r7, #16]
 8006ea0:	1ad3      	subs	r3, r2, r3
 8006ea2:	2b64      	cmp	r3, #100	; 0x64
 8006ea4:	d901      	bls.n	8006eaa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006ea6:	2303      	movs	r3, #3
 8006ea8:	e20b      	b.n	80072c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006eaa:	4b57      	ldr	r3, [pc, #348]	; (8007008 <HAL_RCC_OscConfig+0x280>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d1f0      	bne.n	8006e98 <HAL_RCC_OscConfig+0x110>
 8006eb6:	e000      	b.n	8006eba <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006eb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f003 0302 	and.w	r3, r3, #2
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d069      	beq.n	8006f9a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006ec6:	4b50      	ldr	r3, [pc, #320]	; (8007008 <HAL_RCC_OscConfig+0x280>)
 8006ec8:	689b      	ldr	r3, [r3, #8]
 8006eca:	f003 030c 	and.w	r3, r3, #12
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d00b      	beq.n	8006eea <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006ed2:	4b4d      	ldr	r3, [pc, #308]	; (8007008 <HAL_RCC_OscConfig+0x280>)
 8006ed4:	689b      	ldr	r3, [r3, #8]
 8006ed6:	f003 030c 	and.w	r3, r3, #12
 8006eda:	2b08      	cmp	r3, #8
 8006edc:	d11c      	bne.n	8006f18 <HAL_RCC_OscConfig+0x190>
 8006ede:	4b4a      	ldr	r3, [pc, #296]	; (8007008 <HAL_RCC_OscConfig+0x280>)
 8006ee0:	685b      	ldr	r3, [r3, #4]
 8006ee2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d116      	bne.n	8006f18 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006eea:	4b47      	ldr	r3, [pc, #284]	; (8007008 <HAL_RCC_OscConfig+0x280>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f003 0302 	and.w	r3, r3, #2
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d005      	beq.n	8006f02 <HAL_RCC_OscConfig+0x17a>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	68db      	ldr	r3, [r3, #12]
 8006efa:	2b01      	cmp	r3, #1
 8006efc:	d001      	beq.n	8006f02 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006efe:	2301      	movs	r3, #1
 8006f00:	e1df      	b.n	80072c2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f02:	4b41      	ldr	r3, [pc, #260]	; (8007008 <HAL_RCC_OscConfig+0x280>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	691b      	ldr	r3, [r3, #16]
 8006f0e:	00db      	lsls	r3, r3, #3
 8006f10:	493d      	ldr	r1, [pc, #244]	; (8007008 <HAL_RCC_OscConfig+0x280>)
 8006f12:	4313      	orrs	r3, r2
 8006f14:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006f16:	e040      	b.n	8006f9a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	68db      	ldr	r3, [r3, #12]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d023      	beq.n	8006f68 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006f20:	4b39      	ldr	r3, [pc, #228]	; (8007008 <HAL_RCC_OscConfig+0x280>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a38      	ldr	r2, [pc, #224]	; (8007008 <HAL_RCC_OscConfig+0x280>)
 8006f26:	f043 0301 	orr.w	r3, r3, #1
 8006f2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f2c:	f7fb febe 	bl	8002cac <HAL_GetTick>
 8006f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f32:	e008      	b.n	8006f46 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006f34:	f7fb feba 	bl	8002cac <HAL_GetTick>
 8006f38:	4602      	mov	r2, r0
 8006f3a:	693b      	ldr	r3, [r7, #16]
 8006f3c:	1ad3      	subs	r3, r2, r3
 8006f3e:	2b02      	cmp	r3, #2
 8006f40:	d901      	bls.n	8006f46 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8006f42:	2303      	movs	r3, #3
 8006f44:	e1bd      	b.n	80072c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f46:	4b30      	ldr	r3, [pc, #192]	; (8007008 <HAL_RCC_OscConfig+0x280>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f003 0302 	and.w	r3, r3, #2
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d0f0      	beq.n	8006f34 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f52:	4b2d      	ldr	r3, [pc, #180]	; (8007008 <HAL_RCC_OscConfig+0x280>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	691b      	ldr	r3, [r3, #16]
 8006f5e:	00db      	lsls	r3, r3, #3
 8006f60:	4929      	ldr	r1, [pc, #164]	; (8007008 <HAL_RCC_OscConfig+0x280>)
 8006f62:	4313      	orrs	r3, r2
 8006f64:	600b      	str	r3, [r1, #0]
 8006f66:	e018      	b.n	8006f9a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006f68:	4b27      	ldr	r3, [pc, #156]	; (8007008 <HAL_RCC_OscConfig+0x280>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a26      	ldr	r2, [pc, #152]	; (8007008 <HAL_RCC_OscConfig+0x280>)
 8006f6e:	f023 0301 	bic.w	r3, r3, #1
 8006f72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f74:	f7fb fe9a 	bl	8002cac <HAL_GetTick>
 8006f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f7a:	e008      	b.n	8006f8e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006f7c:	f7fb fe96 	bl	8002cac <HAL_GetTick>
 8006f80:	4602      	mov	r2, r0
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	1ad3      	subs	r3, r2, r3
 8006f86:	2b02      	cmp	r3, #2
 8006f88:	d901      	bls.n	8006f8e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006f8a:	2303      	movs	r3, #3
 8006f8c:	e199      	b.n	80072c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f8e:	4b1e      	ldr	r3, [pc, #120]	; (8007008 <HAL_RCC_OscConfig+0x280>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f003 0302 	and.w	r3, r3, #2
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d1f0      	bne.n	8006f7c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f003 0308 	and.w	r3, r3, #8
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d038      	beq.n	8007018 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	695b      	ldr	r3, [r3, #20]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d019      	beq.n	8006fe2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006fae:	4b16      	ldr	r3, [pc, #88]	; (8007008 <HAL_RCC_OscConfig+0x280>)
 8006fb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fb2:	4a15      	ldr	r2, [pc, #84]	; (8007008 <HAL_RCC_OscConfig+0x280>)
 8006fb4:	f043 0301 	orr.w	r3, r3, #1
 8006fb8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006fba:	f7fb fe77 	bl	8002cac <HAL_GetTick>
 8006fbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006fc0:	e008      	b.n	8006fd4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006fc2:	f7fb fe73 	bl	8002cac <HAL_GetTick>
 8006fc6:	4602      	mov	r2, r0
 8006fc8:	693b      	ldr	r3, [r7, #16]
 8006fca:	1ad3      	subs	r3, r2, r3
 8006fcc:	2b02      	cmp	r3, #2
 8006fce:	d901      	bls.n	8006fd4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006fd0:	2303      	movs	r3, #3
 8006fd2:	e176      	b.n	80072c2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006fd4:	4b0c      	ldr	r3, [pc, #48]	; (8007008 <HAL_RCC_OscConfig+0x280>)
 8006fd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fd8:	f003 0302 	and.w	r3, r3, #2
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d0f0      	beq.n	8006fc2 <HAL_RCC_OscConfig+0x23a>
 8006fe0:	e01a      	b.n	8007018 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006fe2:	4b09      	ldr	r3, [pc, #36]	; (8007008 <HAL_RCC_OscConfig+0x280>)
 8006fe4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006fe6:	4a08      	ldr	r2, [pc, #32]	; (8007008 <HAL_RCC_OscConfig+0x280>)
 8006fe8:	f023 0301 	bic.w	r3, r3, #1
 8006fec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006fee:	f7fb fe5d 	bl	8002cac <HAL_GetTick>
 8006ff2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ff4:	e00a      	b.n	800700c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006ff6:	f7fb fe59 	bl	8002cac <HAL_GetTick>
 8006ffa:	4602      	mov	r2, r0
 8006ffc:	693b      	ldr	r3, [r7, #16]
 8006ffe:	1ad3      	subs	r3, r2, r3
 8007000:	2b02      	cmp	r3, #2
 8007002:	d903      	bls.n	800700c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007004:	2303      	movs	r3, #3
 8007006:	e15c      	b.n	80072c2 <HAL_RCC_OscConfig+0x53a>
 8007008:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800700c:	4b91      	ldr	r3, [pc, #580]	; (8007254 <HAL_RCC_OscConfig+0x4cc>)
 800700e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007010:	f003 0302 	and.w	r3, r3, #2
 8007014:	2b00      	cmp	r3, #0
 8007016:	d1ee      	bne.n	8006ff6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f003 0304 	and.w	r3, r3, #4
 8007020:	2b00      	cmp	r3, #0
 8007022:	f000 80a4 	beq.w	800716e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007026:	4b8b      	ldr	r3, [pc, #556]	; (8007254 <HAL_RCC_OscConfig+0x4cc>)
 8007028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800702a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800702e:	2b00      	cmp	r3, #0
 8007030:	d10d      	bne.n	800704e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8007032:	4b88      	ldr	r3, [pc, #544]	; (8007254 <HAL_RCC_OscConfig+0x4cc>)
 8007034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007036:	4a87      	ldr	r2, [pc, #540]	; (8007254 <HAL_RCC_OscConfig+0x4cc>)
 8007038:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800703c:	6413      	str	r3, [r2, #64]	; 0x40
 800703e:	4b85      	ldr	r3, [pc, #532]	; (8007254 <HAL_RCC_OscConfig+0x4cc>)
 8007040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007046:	60bb      	str	r3, [r7, #8]
 8007048:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800704a:	2301      	movs	r3, #1
 800704c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800704e:	4b82      	ldr	r3, [pc, #520]	; (8007258 <HAL_RCC_OscConfig+0x4d0>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007056:	2b00      	cmp	r3, #0
 8007058:	d118      	bne.n	800708c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800705a:	4b7f      	ldr	r3, [pc, #508]	; (8007258 <HAL_RCC_OscConfig+0x4d0>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4a7e      	ldr	r2, [pc, #504]	; (8007258 <HAL_RCC_OscConfig+0x4d0>)
 8007060:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007064:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007066:	f7fb fe21 	bl	8002cac <HAL_GetTick>
 800706a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800706c:	e008      	b.n	8007080 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800706e:	f7fb fe1d 	bl	8002cac <HAL_GetTick>
 8007072:	4602      	mov	r2, r0
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	1ad3      	subs	r3, r2, r3
 8007078:	2b64      	cmp	r3, #100	; 0x64
 800707a:	d901      	bls.n	8007080 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800707c:	2303      	movs	r3, #3
 800707e:	e120      	b.n	80072c2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007080:	4b75      	ldr	r3, [pc, #468]	; (8007258 <HAL_RCC_OscConfig+0x4d0>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007088:	2b00      	cmp	r3, #0
 800708a:	d0f0      	beq.n	800706e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	689b      	ldr	r3, [r3, #8]
 8007090:	2b01      	cmp	r3, #1
 8007092:	d106      	bne.n	80070a2 <HAL_RCC_OscConfig+0x31a>
 8007094:	4b6f      	ldr	r3, [pc, #444]	; (8007254 <HAL_RCC_OscConfig+0x4cc>)
 8007096:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007098:	4a6e      	ldr	r2, [pc, #440]	; (8007254 <HAL_RCC_OscConfig+0x4cc>)
 800709a:	f043 0301 	orr.w	r3, r3, #1
 800709e:	6713      	str	r3, [r2, #112]	; 0x70
 80070a0:	e02d      	b.n	80070fe <HAL_RCC_OscConfig+0x376>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	689b      	ldr	r3, [r3, #8]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d10c      	bne.n	80070c4 <HAL_RCC_OscConfig+0x33c>
 80070aa:	4b6a      	ldr	r3, [pc, #424]	; (8007254 <HAL_RCC_OscConfig+0x4cc>)
 80070ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070ae:	4a69      	ldr	r2, [pc, #420]	; (8007254 <HAL_RCC_OscConfig+0x4cc>)
 80070b0:	f023 0301 	bic.w	r3, r3, #1
 80070b4:	6713      	str	r3, [r2, #112]	; 0x70
 80070b6:	4b67      	ldr	r3, [pc, #412]	; (8007254 <HAL_RCC_OscConfig+0x4cc>)
 80070b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070ba:	4a66      	ldr	r2, [pc, #408]	; (8007254 <HAL_RCC_OscConfig+0x4cc>)
 80070bc:	f023 0304 	bic.w	r3, r3, #4
 80070c0:	6713      	str	r3, [r2, #112]	; 0x70
 80070c2:	e01c      	b.n	80070fe <HAL_RCC_OscConfig+0x376>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	689b      	ldr	r3, [r3, #8]
 80070c8:	2b05      	cmp	r3, #5
 80070ca:	d10c      	bne.n	80070e6 <HAL_RCC_OscConfig+0x35e>
 80070cc:	4b61      	ldr	r3, [pc, #388]	; (8007254 <HAL_RCC_OscConfig+0x4cc>)
 80070ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070d0:	4a60      	ldr	r2, [pc, #384]	; (8007254 <HAL_RCC_OscConfig+0x4cc>)
 80070d2:	f043 0304 	orr.w	r3, r3, #4
 80070d6:	6713      	str	r3, [r2, #112]	; 0x70
 80070d8:	4b5e      	ldr	r3, [pc, #376]	; (8007254 <HAL_RCC_OscConfig+0x4cc>)
 80070da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070dc:	4a5d      	ldr	r2, [pc, #372]	; (8007254 <HAL_RCC_OscConfig+0x4cc>)
 80070de:	f043 0301 	orr.w	r3, r3, #1
 80070e2:	6713      	str	r3, [r2, #112]	; 0x70
 80070e4:	e00b      	b.n	80070fe <HAL_RCC_OscConfig+0x376>
 80070e6:	4b5b      	ldr	r3, [pc, #364]	; (8007254 <HAL_RCC_OscConfig+0x4cc>)
 80070e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070ea:	4a5a      	ldr	r2, [pc, #360]	; (8007254 <HAL_RCC_OscConfig+0x4cc>)
 80070ec:	f023 0301 	bic.w	r3, r3, #1
 80070f0:	6713      	str	r3, [r2, #112]	; 0x70
 80070f2:	4b58      	ldr	r3, [pc, #352]	; (8007254 <HAL_RCC_OscConfig+0x4cc>)
 80070f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070f6:	4a57      	ldr	r2, [pc, #348]	; (8007254 <HAL_RCC_OscConfig+0x4cc>)
 80070f8:	f023 0304 	bic.w	r3, r3, #4
 80070fc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	689b      	ldr	r3, [r3, #8]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d015      	beq.n	8007132 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007106:	f7fb fdd1 	bl	8002cac <HAL_GetTick>
 800710a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800710c:	e00a      	b.n	8007124 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800710e:	f7fb fdcd 	bl	8002cac <HAL_GetTick>
 8007112:	4602      	mov	r2, r0
 8007114:	693b      	ldr	r3, [r7, #16]
 8007116:	1ad3      	subs	r3, r2, r3
 8007118:	f241 3288 	movw	r2, #5000	; 0x1388
 800711c:	4293      	cmp	r3, r2
 800711e:	d901      	bls.n	8007124 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007120:	2303      	movs	r3, #3
 8007122:	e0ce      	b.n	80072c2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007124:	4b4b      	ldr	r3, [pc, #300]	; (8007254 <HAL_RCC_OscConfig+0x4cc>)
 8007126:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007128:	f003 0302 	and.w	r3, r3, #2
 800712c:	2b00      	cmp	r3, #0
 800712e:	d0ee      	beq.n	800710e <HAL_RCC_OscConfig+0x386>
 8007130:	e014      	b.n	800715c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007132:	f7fb fdbb 	bl	8002cac <HAL_GetTick>
 8007136:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007138:	e00a      	b.n	8007150 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800713a:	f7fb fdb7 	bl	8002cac <HAL_GetTick>
 800713e:	4602      	mov	r2, r0
 8007140:	693b      	ldr	r3, [r7, #16]
 8007142:	1ad3      	subs	r3, r2, r3
 8007144:	f241 3288 	movw	r2, #5000	; 0x1388
 8007148:	4293      	cmp	r3, r2
 800714a:	d901      	bls.n	8007150 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800714c:	2303      	movs	r3, #3
 800714e:	e0b8      	b.n	80072c2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007150:	4b40      	ldr	r3, [pc, #256]	; (8007254 <HAL_RCC_OscConfig+0x4cc>)
 8007152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007154:	f003 0302 	and.w	r3, r3, #2
 8007158:	2b00      	cmp	r3, #0
 800715a:	d1ee      	bne.n	800713a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800715c:	7dfb      	ldrb	r3, [r7, #23]
 800715e:	2b01      	cmp	r3, #1
 8007160:	d105      	bne.n	800716e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007162:	4b3c      	ldr	r3, [pc, #240]	; (8007254 <HAL_RCC_OscConfig+0x4cc>)
 8007164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007166:	4a3b      	ldr	r2, [pc, #236]	; (8007254 <HAL_RCC_OscConfig+0x4cc>)
 8007168:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800716c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	699b      	ldr	r3, [r3, #24]
 8007172:	2b00      	cmp	r3, #0
 8007174:	f000 80a4 	beq.w	80072c0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007178:	4b36      	ldr	r3, [pc, #216]	; (8007254 <HAL_RCC_OscConfig+0x4cc>)
 800717a:	689b      	ldr	r3, [r3, #8]
 800717c:	f003 030c 	and.w	r3, r3, #12
 8007180:	2b08      	cmp	r3, #8
 8007182:	d06b      	beq.n	800725c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	699b      	ldr	r3, [r3, #24]
 8007188:	2b02      	cmp	r3, #2
 800718a:	d149      	bne.n	8007220 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800718c:	4b31      	ldr	r3, [pc, #196]	; (8007254 <HAL_RCC_OscConfig+0x4cc>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a30      	ldr	r2, [pc, #192]	; (8007254 <HAL_RCC_OscConfig+0x4cc>)
 8007192:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007196:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007198:	f7fb fd88 	bl	8002cac <HAL_GetTick>
 800719c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800719e:	e008      	b.n	80071b2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80071a0:	f7fb fd84 	bl	8002cac <HAL_GetTick>
 80071a4:	4602      	mov	r2, r0
 80071a6:	693b      	ldr	r3, [r7, #16]
 80071a8:	1ad3      	subs	r3, r2, r3
 80071aa:	2b02      	cmp	r3, #2
 80071ac:	d901      	bls.n	80071b2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80071ae:	2303      	movs	r3, #3
 80071b0:	e087      	b.n	80072c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80071b2:	4b28      	ldr	r3, [pc, #160]	; (8007254 <HAL_RCC_OscConfig+0x4cc>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d1f0      	bne.n	80071a0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	69da      	ldr	r2, [r3, #28]
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6a1b      	ldr	r3, [r3, #32]
 80071c6:	431a      	orrs	r2, r3
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071cc:	019b      	lsls	r3, r3, #6
 80071ce:	431a      	orrs	r2, r3
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071d4:	085b      	lsrs	r3, r3, #1
 80071d6:	3b01      	subs	r3, #1
 80071d8:	041b      	lsls	r3, r3, #16
 80071da:	431a      	orrs	r2, r3
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071e0:	061b      	lsls	r3, r3, #24
 80071e2:	4313      	orrs	r3, r2
 80071e4:	4a1b      	ldr	r2, [pc, #108]	; (8007254 <HAL_RCC_OscConfig+0x4cc>)
 80071e6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80071ea:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80071ec:	4b19      	ldr	r3, [pc, #100]	; (8007254 <HAL_RCC_OscConfig+0x4cc>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a18      	ldr	r2, [pc, #96]	; (8007254 <HAL_RCC_OscConfig+0x4cc>)
 80071f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80071f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071f8:	f7fb fd58 	bl	8002cac <HAL_GetTick>
 80071fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80071fe:	e008      	b.n	8007212 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007200:	f7fb fd54 	bl	8002cac <HAL_GetTick>
 8007204:	4602      	mov	r2, r0
 8007206:	693b      	ldr	r3, [r7, #16]
 8007208:	1ad3      	subs	r3, r2, r3
 800720a:	2b02      	cmp	r3, #2
 800720c:	d901      	bls.n	8007212 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800720e:	2303      	movs	r3, #3
 8007210:	e057      	b.n	80072c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007212:	4b10      	ldr	r3, [pc, #64]	; (8007254 <HAL_RCC_OscConfig+0x4cc>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800721a:	2b00      	cmp	r3, #0
 800721c:	d0f0      	beq.n	8007200 <HAL_RCC_OscConfig+0x478>
 800721e:	e04f      	b.n	80072c0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007220:	4b0c      	ldr	r3, [pc, #48]	; (8007254 <HAL_RCC_OscConfig+0x4cc>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4a0b      	ldr	r2, [pc, #44]	; (8007254 <HAL_RCC_OscConfig+0x4cc>)
 8007226:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800722a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800722c:	f7fb fd3e 	bl	8002cac <HAL_GetTick>
 8007230:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007232:	e008      	b.n	8007246 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007234:	f7fb fd3a 	bl	8002cac <HAL_GetTick>
 8007238:	4602      	mov	r2, r0
 800723a:	693b      	ldr	r3, [r7, #16]
 800723c:	1ad3      	subs	r3, r2, r3
 800723e:	2b02      	cmp	r3, #2
 8007240:	d901      	bls.n	8007246 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8007242:	2303      	movs	r3, #3
 8007244:	e03d      	b.n	80072c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007246:	4b03      	ldr	r3, [pc, #12]	; (8007254 <HAL_RCC_OscConfig+0x4cc>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800724e:	2b00      	cmp	r3, #0
 8007250:	d1f0      	bne.n	8007234 <HAL_RCC_OscConfig+0x4ac>
 8007252:	e035      	b.n	80072c0 <HAL_RCC_OscConfig+0x538>
 8007254:	40023800 	.word	0x40023800
 8007258:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800725c:	4b1b      	ldr	r3, [pc, #108]	; (80072cc <HAL_RCC_OscConfig+0x544>)
 800725e:	685b      	ldr	r3, [r3, #4]
 8007260:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	699b      	ldr	r3, [r3, #24]
 8007266:	2b01      	cmp	r3, #1
 8007268:	d028      	beq.n	80072bc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007274:	429a      	cmp	r2, r3
 8007276:	d121      	bne.n	80072bc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007282:	429a      	cmp	r2, r3
 8007284:	d11a      	bne.n	80072bc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007286:	68fa      	ldr	r2, [r7, #12]
 8007288:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800728c:	4013      	ands	r3, r2
 800728e:	687a      	ldr	r2, [r7, #4]
 8007290:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007292:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007294:	4293      	cmp	r3, r2
 8007296:	d111      	bne.n	80072bc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072a2:	085b      	lsrs	r3, r3, #1
 80072a4:	3b01      	subs	r3, #1
 80072a6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80072a8:	429a      	cmp	r2, r3
 80072aa:	d107      	bne.n	80072bc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072b6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80072b8:	429a      	cmp	r2, r3
 80072ba:	d001      	beq.n	80072c0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80072bc:	2301      	movs	r3, #1
 80072be:	e000      	b.n	80072c2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80072c0:	2300      	movs	r3, #0
}
 80072c2:	4618      	mov	r0, r3
 80072c4:	3718      	adds	r7, #24
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}
 80072ca:	bf00      	nop
 80072cc:	40023800 	.word	0x40023800

080072d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b084      	sub	sp, #16
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
 80072d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80072da:	2300      	movs	r3, #0
 80072dc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d101      	bne.n	80072e8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80072e4:	2301      	movs	r3, #1
 80072e6:	e0d0      	b.n	800748a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80072e8:	4b6a      	ldr	r3, [pc, #424]	; (8007494 <HAL_RCC_ClockConfig+0x1c4>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f003 030f 	and.w	r3, r3, #15
 80072f0:	683a      	ldr	r2, [r7, #0]
 80072f2:	429a      	cmp	r2, r3
 80072f4:	d910      	bls.n	8007318 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80072f6:	4b67      	ldr	r3, [pc, #412]	; (8007494 <HAL_RCC_ClockConfig+0x1c4>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f023 020f 	bic.w	r2, r3, #15
 80072fe:	4965      	ldr	r1, [pc, #404]	; (8007494 <HAL_RCC_ClockConfig+0x1c4>)
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	4313      	orrs	r3, r2
 8007304:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007306:	4b63      	ldr	r3, [pc, #396]	; (8007494 <HAL_RCC_ClockConfig+0x1c4>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f003 030f 	and.w	r3, r3, #15
 800730e:	683a      	ldr	r2, [r7, #0]
 8007310:	429a      	cmp	r2, r3
 8007312:	d001      	beq.n	8007318 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007314:	2301      	movs	r3, #1
 8007316:	e0b8      	b.n	800748a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f003 0302 	and.w	r3, r3, #2
 8007320:	2b00      	cmp	r3, #0
 8007322:	d020      	beq.n	8007366 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f003 0304 	and.w	r3, r3, #4
 800732c:	2b00      	cmp	r3, #0
 800732e:	d005      	beq.n	800733c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007330:	4b59      	ldr	r3, [pc, #356]	; (8007498 <HAL_RCC_ClockConfig+0x1c8>)
 8007332:	689b      	ldr	r3, [r3, #8]
 8007334:	4a58      	ldr	r2, [pc, #352]	; (8007498 <HAL_RCC_ClockConfig+0x1c8>)
 8007336:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800733a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f003 0308 	and.w	r3, r3, #8
 8007344:	2b00      	cmp	r3, #0
 8007346:	d005      	beq.n	8007354 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007348:	4b53      	ldr	r3, [pc, #332]	; (8007498 <HAL_RCC_ClockConfig+0x1c8>)
 800734a:	689b      	ldr	r3, [r3, #8]
 800734c:	4a52      	ldr	r2, [pc, #328]	; (8007498 <HAL_RCC_ClockConfig+0x1c8>)
 800734e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007352:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007354:	4b50      	ldr	r3, [pc, #320]	; (8007498 <HAL_RCC_ClockConfig+0x1c8>)
 8007356:	689b      	ldr	r3, [r3, #8]
 8007358:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	689b      	ldr	r3, [r3, #8]
 8007360:	494d      	ldr	r1, [pc, #308]	; (8007498 <HAL_RCC_ClockConfig+0x1c8>)
 8007362:	4313      	orrs	r3, r2
 8007364:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f003 0301 	and.w	r3, r3, #1
 800736e:	2b00      	cmp	r3, #0
 8007370:	d040      	beq.n	80073f4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	2b01      	cmp	r3, #1
 8007378:	d107      	bne.n	800738a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800737a:	4b47      	ldr	r3, [pc, #284]	; (8007498 <HAL_RCC_ClockConfig+0x1c8>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007382:	2b00      	cmp	r3, #0
 8007384:	d115      	bne.n	80073b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007386:	2301      	movs	r3, #1
 8007388:	e07f      	b.n	800748a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	685b      	ldr	r3, [r3, #4]
 800738e:	2b02      	cmp	r3, #2
 8007390:	d107      	bne.n	80073a2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007392:	4b41      	ldr	r3, [pc, #260]	; (8007498 <HAL_RCC_ClockConfig+0x1c8>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800739a:	2b00      	cmp	r3, #0
 800739c:	d109      	bne.n	80073b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800739e:	2301      	movs	r3, #1
 80073a0:	e073      	b.n	800748a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80073a2:	4b3d      	ldr	r3, [pc, #244]	; (8007498 <HAL_RCC_ClockConfig+0x1c8>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f003 0302 	and.w	r3, r3, #2
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d101      	bne.n	80073b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80073ae:	2301      	movs	r3, #1
 80073b0:	e06b      	b.n	800748a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80073b2:	4b39      	ldr	r3, [pc, #228]	; (8007498 <HAL_RCC_ClockConfig+0x1c8>)
 80073b4:	689b      	ldr	r3, [r3, #8]
 80073b6:	f023 0203 	bic.w	r2, r3, #3
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	685b      	ldr	r3, [r3, #4]
 80073be:	4936      	ldr	r1, [pc, #216]	; (8007498 <HAL_RCC_ClockConfig+0x1c8>)
 80073c0:	4313      	orrs	r3, r2
 80073c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80073c4:	f7fb fc72 	bl	8002cac <HAL_GetTick>
 80073c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80073ca:	e00a      	b.n	80073e2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80073cc:	f7fb fc6e 	bl	8002cac <HAL_GetTick>
 80073d0:	4602      	mov	r2, r0
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	1ad3      	subs	r3, r2, r3
 80073d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80073da:	4293      	cmp	r3, r2
 80073dc:	d901      	bls.n	80073e2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80073de:	2303      	movs	r3, #3
 80073e0:	e053      	b.n	800748a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80073e2:	4b2d      	ldr	r3, [pc, #180]	; (8007498 <HAL_RCC_ClockConfig+0x1c8>)
 80073e4:	689b      	ldr	r3, [r3, #8]
 80073e6:	f003 020c 	and.w	r2, r3, #12
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	009b      	lsls	r3, r3, #2
 80073f0:	429a      	cmp	r2, r3
 80073f2:	d1eb      	bne.n	80073cc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80073f4:	4b27      	ldr	r3, [pc, #156]	; (8007494 <HAL_RCC_ClockConfig+0x1c4>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f003 030f 	and.w	r3, r3, #15
 80073fc:	683a      	ldr	r2, [r7, #0]
 80073fe:	429a      	cmp	r2, r3
 8007400:	d210      	bcs.n	8007424 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007402:	4b24      	ldr	r3, [pc, #144]	; (8007494 <HAL_RCC_ClockConfig+0x1c4>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f023 020f 	bic.w	r2, r3, #15
 800740a:	4922      	ldr	r1, [pc, #136]	; (8007494 <HAL_RCC_ClockConfig+0x1c4>)
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	4313      	orrs	r3, r2
 8007410:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007412:	4b20      	ldr	r3, [pc, #128]	; (8007494 <HAL_RCC_ClockConfig+0x1c4>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f003 030f 	and.w	r3, r3, #15
 800741a:	683a      	ldr	r2, [r7, #0]
 800741c:	429a      	cmp	r2, r3
 800741e:	d001      	beq.n	8007424 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007420:	2301      	movs	r3, #1
 8007422:	e032      	b.n	800748a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f003 0304 	and.w	r3, r3, #4
 800742c:	2b00      	cmp	r3, #0
 800742e:	d008      	beq.n	8007442 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007430:	4b19      	ldr	r3, [pc, #100]	; (8007498 <HAL_RCC_ClockConfig+0x1c8>)
 8007432:	689b      	ldr	r3, [r3, #8]
 8007434:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	68db      	ldr	r3, [r3, #12]
 800743c:	4916      	ldr	r1, [pc, #88]	; (8007498 <HAL_RCC_ClockConfig+0x1c8>)
 800743e:	4313      	orrs	r3, r2
 8007440:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f003 0308 	and.w	r3, r3, #8
 800744a:	2b00      	cmp	r3, #0
 800744c:	d009      	beq.n	8007462 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800744e:	4b12      	ldr	r3, [pc, #72]	; (8007498 <HAL_RCC_ClockConfig+0x1c8>)
 8007450:	689b      	ldr	r3, [r3, #8]
 8007452:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	691b      	ldr	r3, [r3, #16]
 800745a:	00db      	lsls	r3, r3, #3
 800745c:	490e      	ldr	r1, [pc, #56]	; (8007498 <HAL_RCC_ClockConfig+0x1c8>)
 800745e:	4313      	orrs	r3, r2
 8007460:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007462:	f000 f821 	bl	80074a8 <HAL_RCC_GetSysClockFreq>
 8007466:	4601      	mov	r1, r0
 8007468:	4b0b      	ldr	r3, [pc, #44]	; (8007498 <HAL_RCC_ClockConfig+0x1c8>)
 800746a:	689b      	ldr	r3, [r3, #8]
 800746c:	091b      	lsrs	r3, r3, #4
 800746e:	f003 030f 	and.w	r3, r3, #15
 8007472:	4a0a      	ldr	r2, [pc, #40]	; (800749c <HAL_RCC_ClockConfig+0x1cc>)
 8007474:	5cd3      	ldrb	r3, [r2, r3]
 8007476:	fa21 f303 	lsr.w	r3, r1, r3
 800747a:	4a09      	ldr	r2, [pc, #36]	; (80074a0 <HAL_RCC_ClockConfig+0x1d0>)
 800747c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800747e:	4b09      	ldr	r3, [pc, #36]	; (80074a4 <HAL_RCC_ClockConfig+0x1d4>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	4618      	mov	r0, r3
 8007484:	f7fb fae2 	bl	8002a4c <HAL_InitTick>

  return HAL_OK;
 8007488:	2300      	movs	r3, #0
}
 800748a:	4618      	mov	r0, r3
 800748c:	3710      	adds	r7, #16
 800748e:	46bd      	mov	sp, r7
 8007490:	bd80      	pop	{r7, pc}
 8007492:	bf00      	nop
 8007494:	40023c00 	.word	0x40023c00
 8007498:	40023800 	.word	0x40023800
 800749c:	08012854 	.word	0x08012854
 80074a0:	20000000 	.word	0x20000000
 80074a4:	20000004 	.word	0x20000004

080074a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80074a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80074aa:	b085      	sub	sp, #20
 80074ac:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80074ae:	2300      	movs	r3, #0
 80074b0:	607b      	str	r3, [r7, #4]
 80074b2:	2300      	movs	r3, #0
 80074b4:	60fb      	str	r3, [r7, #12]
 80074b6:	2300      	movs	r3, #0
 80074b8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80074ba:	2300      	movs	r3, #0
 80074bc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80074be:	4b50      	ldr	r3, [pc, #320]	; (8007600 <HAL_RCC_GetSysClockFreq+0x158>)
 80074c0:	689b      	ldr	r3, [r3, #8]
 80074c2:	f003 030c 	and.w	r3, r3, #12
 80074c6:	2b04      	cmp	r3, #4
 80074c8:	d007      	beq.n	80074da <HAL_RCC_GetSysClockFreq+0x32>
 80074ca:	2b08      	cmp	r3, #8
 80074cc:	d008      	beq.n	80074e0 <HAL_RCC_GetSysClockFreq+0x38>
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	f040 808d 	bne.w	80075ee <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80074d4:	4b4b      	ldr	r3, [pc, #300]	; (8007604 <HAL_RCC_GetSysClockFreq+0x15c>)
 80074d6:	60bb      	str	r3, [r7, #8]
      break;
 80074d8:	e08c      	b.n	80075f4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80074da:	4b4b      	ldr	r3, [pc, #300]	; (8007608 <HAL_RCC_GetSysClockFreq+0x160>)
 80074dc:	60bb      	str	r3, [r7, #8]
      break;
 80074de:	e089      	b.n	80075f4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80074e0:	4b47      	ldr	r3, [pc, #284]	; (8007600 <HAL_RCC_GetSysClockFreq+0x158>)
 80074e2:	685b      	ldr	r3, [r3, #4]
 80074e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80074e8:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80074ea:	4b45      	ldr	r3, [pc, #276]	; (8007600 <HAL_RCC_GetSysClockFreq+0x158>)
 80074ec:	685b      	ldr	r3, [r3, #4]
 80074ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d023      	beq.n	800753e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80074f6:	4b42      	ldr	r3, [pc, #264]	; (8007600 <HAL_RCC_GetSysClockFreq+0x158>)
 80074f8:	685b      	ldr	r3, [r3, #4]
 80074fa:	099b      	lsrs	r3, r3, #6
 80074fc:	f04f 0400 	mov.w	r4, #0
 8007500:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007504:	f04f 0200 	mov.w	r2, #0
 8007508:	ea03 0501 	and.w	r5, r3, r1
 800750c:	ea04 0602 	and.w	r6, r4, r2
 8007510:	4a3d      	ldr	r2, [pc, #244]	; (8007608 <HAL_RCC_GetSysClockFreq+0x160>)
 8007512:	fb02 f106 	mul.w	r1, r2, r6
 8007516:	2200      	movs	r2, #0
 8007518:	fb02 f205 	mul.w	r2, r2, r5
 800751c:	440a      	add	r2, r1
 800751e:	493a      	ldr	r1, [pc, #232]	; (8007608 <HAL_RCC_GetSysClockFreq+0x160>)
 8007520:	fba5 0101 	umull	r0, r1, r5, r1
 8007524:	1853      	adds	r3, r2, r1
 8007526:	4619      	mov	r1, r3
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f04f 0400 	mov.w	r4, #0
 800752e:	461a      	mov	r2, r3
 8007530:	4623      	mov	r3, r4
 8007532:	f7f8 fe6d 	bl	8000210 <__aeabi_uldivmod>
 8007536:	4603      	mov	r3, r0
 8007538:	460c      	mov	r4, r1
 800753a:	60fb      	str	r3, [r7, #12]
 800753c:	e049      	b.n	80075d2 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800753e:	4b30      	ldr	r3, [pc, #192]	; (8007600 <HAL_RCC_GetSysClockFreq+0x158>)
 8007540:	685b      	ldr	r3, [r3, #4]
 8007542:	099b      	lsrs	r3, r3, #6
 8007544:	f04f 0400 	mov.w	r4, #0
 8007548:	f240 11ff 	movw	r1, #511	; 0x1ff
 800754c:	f04f 0200 	mov.w	r2, #0
 8007550:	ea03 0501 	and.w	r5, r3, r1
 8007554:	ea04 0602 	and.w	r6, r4, r2
 8007558:	4629      	mov	r1, r5
 800755a:	4632      	mov	r2, r6
 800755c:	f04f 0300 	mov.w	r3, #0
 8007560:	f04f 0400 	mov.w	r4, #0
 8007564:	0154      	lsls	r4, r2, #5
 8007566:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800756a:	014b      	lsls	r3, r1, #5
 800756c:	4619      	mov	r1, r3
 800756e:	4622      	mov	r2, r4
 8007570:	1b49      	subs	r1, r1, r5
 8007572:	eb62 0206 	sbc.w	r2, r2, r6
 8007576:	f04f 0300 	mov.w	r3, #0
 800757a:	f04f 0400 	mov.w	r4, #0
 800757e:	0194      	lsls	r4, r2, #6
 8007580:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007584:	018b      	lsls	r3, r1, #6
 8007586:	1a5b      	subs	r3, r3, r1
 8007588:	eb64 0402 	sbc.w	r4, r4, r2
 800758c:	f04f 0100 	mov.w	r1, #0
 8007590:	f04f 0200 	mov.w	r2, #0
 8007594:	00e2      	lsls	r2, r4, #3
 8007596:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800759a:	00d9      	lsls	r1, r3, #3
 800759c:	460b      	mov	r3, r1
 800759e:	4614      	mov	r4, r2
 80075a0:	195b      	adds	r3, r3, r5
 80075a2:	eb44 0406 	adc.w	r4, r4, r6
 80075a6:	f04f 0100 	mov.w	r1, #0
 80075aa:	f04f 0200 	mov.w	r2, #0
 80075ae:	02a2      	lsls	r2, r4, #10
 80075b0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80075b4:	0299      	lsls	r1, r3, #10
 80075b6:	460b      	mov	r3, r1
 80075b8:	4614      	mov	r4, r2
 80075ba:	4618      	mov	r0, r3
 80075bc:	4621      	mov	r1, r4
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f04f 0400 	mov.w	r4, #0
 80075c4:	461a      	mov	r2, r3
 80075c6:	4623      	mov	r3, r4
 80075c8:	f7f8 fe22 	bl	8000210 <__aeabi_uldivmod>
 80075cc:	4603      	mov	r3, r0
 80075ce:	460c      	mov	r4, r1
 80075d0:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80075d2:	4b0b      	ldr	r3, [pc, #44]	; (8007600 <HAL_RCC_GetSysClockFreq+0x158>)
 80075d4:	685b      	ldr	r3, [r3, #4]
 80075d6:	0c1b      	lsrs	r3, r3, #16
 80075d8:	f003 0303 	and.w	r3, r3, #3
 80075dc:	3301      	adds	r3, #1
 80075de:	005b      	lsls	r3, r3, #1
 80075e0:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80075e2:	68fa      	ldr	r2, [r7, #12]
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80075ea:	60bb      	str	r3, [r7, #8]
      break;
 80075ec:	e002      	b.n	80075f4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80075ee:	4b05      	ldr	r3, [pc, #20]	; (8007604 <HAL_RCC_GetSysClockFreq+0x15c>)
 80075f0:	60bb      	str	r3, [r7, #8]
      break;
 80075f2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80075f4:	68bb      	ldr	r3, [r7, #8]
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	3714      	adds	r7, #20
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075fe:	bf00      	nop
 8007600:	40023800 	.word	0x40023800
 8007604:	00f42400 	.word	0x00f42400
 8007608:	017d7840 	.word	0x017d7840

0800760c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800760c:	b480      	push	{r7}
 800760e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007610:	4b03      	ldr	r3, [pc, #12]	; (8007620 <HAL_RCC_GetHCLKFreq+0x14>)
 8007612:	681b      	ldr	r3, [r3, #0]
}
 8007614:	4618      	mov	r0, r3
 8007616:	46bd      	mov	sp, r7
 8007618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761c:	4770      	bx	lr
 800761e:	bf00      	nop
 8007620:	20000000 	.word	0x20000000

08007624 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007628:	f7ff fff0 	bl	800760c <HAL_RCC_GetHCLKFreq>
 800762c:	4601      	mov	r1, r0
 800762e:	4b05      	ldr	r3, [pc, #20]	; (8007644 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007630:	689b      	ldr	r3, [r3, #8]
 8007632:	0a9b      	lsrs	r3, r3, #10
 8007634:	f003 0307 	and.w	r3, r3, #7
 8007638:	4a03      	ldr	r2, [pc, #12]	; (8007648 <HAL_RCC_GetPCLK1Freq+0x24>)
 800763a:	5cd3      	ldrb	r3, [r2, r3]
 800763c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007640:	4618      	mov	r0, r3
 8007642:	bd80      	pop	{r7, pc}
 8007644:	40023800 	.word	0x40023800
 8007648:	08012864 	.word	0x08012864

0800764c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007650:	f7ff ffdc 	bl	800760c <HAL_RCC_GetHCLKFreq>
 8007654:	4601      	mov	r1, r0
 8007656:	4b05      	ldr	r3, [pc, #20]	; (800766c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007658:	689b      	ldr	r3, [r3, #8]
 800765a:	0b5b      	lsrs	r3, r3, #13
 800765c:	f003 0307 	and.w	r3, r3, #7
 8007660:	4a03      	ldr	r2, [pc, #12]	; (8007670 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007662:	5cd3      	ldrb	r3, [r2, r3]
 8007664:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007668:	4618      	mov	r0, r3
 800766a:	bd80      	pop	{r7, pc}
 800766c:	40023800 	.word	0x40023800
 8007670:	08012864 	.word	0x08012864

08007674 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007674:	b480      	push	{r7}
 8007676:	b083      	sub	sp, #12
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
 800767c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	220f      	movs	r2, #15
 8007682:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007684:	4b12      	ldr	r3, [pc, #72]	; (80076d0 <HAL_RCC_GetClockConfig+0x5c>)
 8007686:	689b      	ldr	r3, [r3, #8]
 8007688:	f003 0203 	and.w	r2, r3, #3
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007690:	4b0f      	ldr	r3, [pc, #60]	; (80076d0 <HAL_RCC_GetClockConfig+0x5c>)
 8007692:	689b      	ldr	r3, [r3, #8]
 8007694:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800769c:	4b0c      	ldr	r3, [pc, #48]	; (80076d0 <HAL_RCC_GetClockConfig+0x5c>)
 800769e:	689b      	ldr	r3, [r3, #8]
 80076a0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80076a8:	4b09      	ldr	r3, [pc, #36]	; (80076d0 <HAL_RCC_GetClockConfig+0x5c>)
 80076aa:	689b      	ldr	r3, [r3, #8]
 80076ac:	08db      	lsrs	r3, r3, #3
 80076ae:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80076b6:	4b07      	ldr	r3, [pc, #28]	; (80076d4 <HAL_RCC_GetClockConfig+0x60>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f003 020f 	and.w	r2, r3, #15
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	601a      	str	r2, [r3, #0]
}
 80076c2:	bf00      	nop
 80076c4:	370c      	adds	r7, #12
 80076c6:	46bd      	mov	sp, r7
 80076c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076cc:	4770      	bx	lr
 80076ce:	bf00      	nop
 80076d0:	40023800 	.word	0x40023800
 80076d4:	40023c00 	.word	0x40023c00

080076d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b088      	sub	sp, #32
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80076e0:	2300      	movs	r3, #0
 80076e2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80076e4:	2300      	movs	r3, #0
 80076e6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80076e8:	2300      	movs	r3, #0
 80076ea:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80076ec:	2300      	movs	r3, #0
 80076ee:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80076f0:	2300      	movs	r3, #0
 80076f2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f003 0301 	and.w	r3, r3, #1
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d012      	beq.n	8007726 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007700:	4b69      	ldr	r3, [pc, #420]	; (80078a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007702:	689b      	ldr	r3, [r3, #8]
 8007704:	4a68      	ldr	r2, [pc, #416]	; (80078a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007706:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800770a:	6093      	str	r3, [r2, #8]
 800770c:	4b66      	ldr	r3, [pc, #408]	; (80078a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800770e:	689a      	ldr	r2, [r3, #8]
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007714:	4964      	ldr	r1, [pc, #400]	; (80078a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007716:	4313      	orrs	r3, r2
 8007718:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800771e:	2b00      	cmp	r3, #0
 8007720:	d101      	bne.n	8007726 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8007722:	2301      	movs	r3, #1
 8007724:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800772e:	2b00      	cmp	r3, #0
 8007730:	d017      	beq.n	8007762 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007732:	4b5d      	ldr	r3, [pc, #372]	; (80078a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007734:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007738:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007740:	4959      	ldr	r1, [pc, #356]	; (80078a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007742:	4313      	orrs	r3, r2
 8007744:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800774c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007750:	d101      	bne.n	8007756 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8007752:	2301      	movs	r3, #1
 8007754:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800775a:	2b00      	cmp	r3, #0
 800775c:	d101      	bne.n	8007762 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800775e:	2301      	movs	r3, #1
 8007760:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800776a:	2b00      	cmp	r3, #0
 800776c:	d017      	beq.n	800779e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800776e:	4b4e      	ldr	r3, [pc, #312]	; (80078a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007770:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007774:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800777c:	494a      	ldr	r1, [pc, #296]	; (80078a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800777e:	4313      	orrs	r3, r2
 8007780:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007788:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800778c:	d101      	bne.n	8007792 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800778e:	2301      	movs	r3, #1
 8007790:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007796:	2b00      	cmp	r3, #0
 8007798:	d101      	bne.n	800779e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800779a:	2301      	movs	r3, #1
 800779c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d001      	beq.n	80077ae <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80077aa:	2301      	movs	r3, #1
 80077ac:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f003 0320 	and.w	r3, r3, #32
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	f000 808b 	beq.w	80078d2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80077bc:	4b3a      	ldr	r3, [pc, #232]	; (80078a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80077be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077c0:	4a39      	ldr	r2, [pc, #228]	; (80078a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80077c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077c6:	6413      	str	r3, [r2, #64]	; 0x40
 80077c8:	4b37      	ldr	r3, [pc, #220]	; (80078a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80077ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077d0:	60bb      	str	r3, [r7, #8]
 80077d2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80077d4:	4b35      	ldr	r3, [pc, #212]	; (80078ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	4a34      	ldr	r2, [pc, #208]	; (80078ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80077da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80077de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80077e0:	f7fb fa64 	bl	8002cac <HAL_GetTick>
 80077e4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80077e6:	e008      	b.n	80077fa <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80077e8:	f7fb fa60 	bl	8002cac <HAL_GetTick>
 80077ec:	4602      	mov	r2, r0
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	1ad3      	subs	r3, r2, r3
 80077f2:	2b64      	cmp	r3, #100	; 0x64
 80077f4:	d901      	bls.n	80077fa <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80077f6:	2303      	movs	r3, #3
 80077f8:	e355      	b.n	8007ea6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80077fa:	4b2c      	ldr	r3, [pc, #176]	; (80078ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007802:	2b00      	cmp	r3, #0
 8007804:	d0f0      	beq.n	80077e8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007806:	4b28      	ldr	r3, [pc, #160]	; (80078a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800780a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800780e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007810:	693b      	ldr	r3, [r7, #16]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d035      	beq.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800781a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800781e:	693a      	ldr	r2, [r7, #16]
 8007820:	429a      	cmp	r2, r3
 8007822:	d02e      	beq.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007824:	4b20      	ldr	r3, [pc, #128]	; (80078a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007828:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800782c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800782e:	4b1e      	ldr	r3, [pc, #120]	; (80078a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007832:	4a1d      	ldr	r2, [pc, #116]	; (80078a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007834:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007838:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800783a:	4b1b      	ldr	r3, [pc, #108]	; (80078a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800783c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800783e:	4a1a      	ldr	r2, [pc, #104]	; (80078a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007840:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007844:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007846:	4a18      	ldr	r2, [pc, #96]	; (80078a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007848:	693b      	ldr	r3, [r7, #16]
 800784a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800784c:	4b16      	ldr	r3, [pc, #88]	; (80078a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800784e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007850:	f003 0301 	and.w	r3, r3, #1
 8007854:	2b01      	cmp	r3, #1
 8007856:	d114      	bne.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007858:	f7fb fa28 	bl	8002cac <HAL_GetTick>
 800785c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800785e:	e00a      	b.n	8007876 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007860:	f7fb fa24 	bl	8002cac <HAL_GetTick>
 8007864:	4602      	mov	r2, r0
 8007866:	697b      	ldr	r3, [r7, #20]
 8007868:	1ad3      	subs	r3, r2, r3
 800786a:	f241 3288 	movw	r2, #5000	; 0x1388
 800786e:	4293      	cmp	r3, r2
 8007870:	d901      	bls.n	8007876 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007872:	2303      	movs	r3, #3
 8007874:	e317      	b.n	8007ea6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007876:	4b0c      	ldr	r3, [pc, #48]	; (80078a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800787a:	f003 0302 	and.w	r3, r3, #2
 800787e:	2b00      	cmp	r3, #0
 8007880:	d0ee      	beq.n	8007860 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007886:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800788a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800788e:	d111      	bne.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007890:	4b05      	ldr	r3, [pc, #20]	; (80078a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007892:	689b      	ldr	r3, [r3, #8]
 8007894:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800789c:	4b04      	ldr	r3, [pc, #16]	; (80078b0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800789e:	400b      	ands	r3, r1
 80078a0:	4901      	ldr	r1, [pc, #4]	; (80078a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078a2:	4313      	orrs	r3, r2
 80078a4:	608b      	str	r3, [r1, #8]
 80078a6:	e00b      	b.n	80078c0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80078a8:	40023800 	.word	0x40023800
 80078ac:	40007000 	.word	0x40007000
 80078b0:	0ffffcff 	.word	0x0ffffcff
 80078b4:	4bb0      	ldr	r3, [pc, #704]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80078b6:	689b      	ldr	r3, [r3, #8]
 80078b8:	4aaf      	ldr	r2, [pc, #700]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80078ba:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80078be:	6093      	str	r3, [r2, #8]
 80078c0:	4bad      	ldr	r3, [pc, #692]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80078c2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80078cc:	49aa      	ldr	r1, [pc, #680]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80078ce:	4313      	orrs	r3, r2
 80078d0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f003 0310 	and.w	r3, r3, #16
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d010      	beq.n	8007900 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80078de:	4ba6      	ldr	r3, [pc, #664]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80078e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80078e4:	4aa4      	ldr	r2, [pc, #656]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80078e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80078ea:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80078ee:	4ba2      	ldr	r3, [pc, #648]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80078f0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078f8:	499f      	ldr	r1, [pc, #636]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80078fa:	4313      	orrs	r3, r2
 80078fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007908:	2b00      	cmp	r3, #0
 800790a:	d00a      	beq.n	8007922 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800790c:	4b9a      	ldr	r3, [pc, #616]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800790e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007912:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800791a:	4997      	ldr	r1, [pc, #604]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800791c:	4313      	orrs	r3, r2
 800791e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800792a:	2b00      	cmp	r3, #0
 800792c:	d00a      	beq.n	8007944 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800792e:	4b92      	ldr	r3, [pc, #584]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007930:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007934:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800793c:	498e      	ldr	r1, [pc, #568]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800793e:	4313      	orrs	r3, r2
 8007940:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800794c:	2b00      	cmp	r3, #0
 800794e:	d00a      	beq.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007950:	4b89      	ldr	r3, [pc, #548]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007952:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007956:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800795e:	4986      	ldr	r1, [pc, #536]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007960:	4313      	orrs	r3, r2
 8007962:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800796e:	2b00      	cmp	r3, #0
 8007970:	d00a      	beq.n	8007988 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007972:	4b81      	ldr	r3, [pc, #516]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007974:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007978:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007980:	497d      	ldr	r1, [pc, #500]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007982:	4313      	orrs	r3, r2
 8007984:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007990:	2b00      	cmp	r3, #0
 8007992:	d00a      	beq.n	80079aa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007994:	4b78      	ldr	r3, [pc, #480]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007996:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800799a:	f023 0203 	bic.w	r2, r3, #3
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079a2:	4975      	ldr	r1, [pc, #468]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80079a4:	4313      	orrs	r3, r2
 80079a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d00a      	beq.n	80079cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80079b6:	4b70      	ldr	r3, [pc, #448]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80079b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079bc:	f023 020c 	bic.w	r2, r3, #12
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079c4:	496c      	ldr	r1, [pc, #432]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80079c6:	4313      	orrs	r3, r2
 80079c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d00a      	beq.n	80079ee <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80079d8:	4b67      	ldr	r3, [pc, #412]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80079da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079de:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079e6:	4964      	ldr	r1, [pc, #400]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80079e8:	4313      	orrs	r3, r2
 80079ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d00a      	beq.n	8007a10 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80079fa:	4b5f      	ldr	r3, [pc, #380]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80079fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a00:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a08:	495b      	ldr	r1, [pc, #364]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007a0a:	4313      	orrs	r3, r2
 8007a0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d00a      	beq.n	8007a32 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007a1c:	4b56      	ldr	r3, [pc, #344]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007a1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a22:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a2a:	4953      	ldr	r1, [pc, #332]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007a2c:	4313      	orrs	r3, r2
 8007a2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d00a      	beq.n	8007a54 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007a3e:	4b4e      	ldr	r3, [pc, #312]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007a40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a44:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a4c:	494a      	ldr	r1, [pc, #296]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007a4e:	4313      	orrs	r3, r2
 8007a50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d00a      	beq.n	8007a76 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007a60:	4b45      	ldr	r3, [pc, #276]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a66:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a6e:	4942      	ldr	r1, [pc, #264]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007a70:	4313      	orrs	r3, r2
 8007a72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d00a      	beq.n	8007a98 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007a82:	4b3d      	ldr	r3, [pc, #244]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a88:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a90:	4939      	ldr	r1, [pc, #228]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007a92:	4313      	orrs	r3, r2
 8007a94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d00a      	beq.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007aa4:	4b34      	ldr	r3, [pc, #208]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007aaa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007ab2:	4931      	ldr	r1, [pc, #196]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007ab4:	4313      	orrs	r3, r2
 8007ab6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d011      	beq.n	8007aea <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007ac6:	4b2c      	ldr	r3, [pc, #176]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007ac8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007acc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ad4:	4928      	ldr	r1, [pc, #160]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007ad6:	4313      	orrs	r3, r2
 8007ad8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ae0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007ae4:	d101      	bne.n	8007aea <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f003 0308 	and.w	r3, r3, #8
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d001      	beq.n	8007afa <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8007af6:	2301      	movs	r3, #1
 8007af8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d00a      	beq.n	8007b1c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007b06:	4b1c      	ldr	r3, [pc, #112]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b0c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b14:	4918      	ldr	r1, [pc, #96]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007b16:	4313      	orrs	r3, r2
 8007b18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d00b      	beq.n	8007b40 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007b28:	4b13      	ldr	r3, [pc, #76]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b2e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b38:	490f      	ldr	r1, [pc, #60]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007b3a:	4313      	orrs	r3, r2
 8007b3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8007b40:	69fb      	ldr	r3, [r7, #28]
 8007b42:	2b01      	cmp	r3, #1
 8007b44:	d005      	beq.n	8007b52 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007b4e:	f040 80d8 	bne.w	8007d02 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007b52:	4b09      	ldr	r3, [pc, #36]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	4a08      	ldr	r2, [pc, #32]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8007b58:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007b5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b5e:	f7fb f8a5 	bl	8002cac <HAL_GetTick>
 8007b62:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007b64:	e00a      	b.n	8007b7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007b66:	f7fb f8a1 	bl	8002cac <HAL_GetTick>
 8007b6a:	4602      	mov	r2, r0
 8007b6c:	697b      	ldr	r3, [r7, #20]
 8007b6e:	1ad3      	subs	r3, r2, r3
 8007b70:	2b64      	cmp	r3, #100	; 0x64
 8007b72:	d903      	bls.n	8007b7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007b74:	2303      	movs	r3, #3
 8007b76:	e196      	b.n	8007ea6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8007b78:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007b7c:	4b6c      	ldr	r3, [pc, #432]	; (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d1ee      	bne.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f003 0301 	and.w	r3, r3, #1
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d021      	beq.n	8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d11d      	bne.n	8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007b9c:	4b64      	ldr	r3, [pc, #400]	; (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007b9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ba2:	0c1b      	lsrs	r3, r3, #16
 8007ba4:	f003 0303 	and.w	r3, r3, #3
 8007ba8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007baa:	4b61      	ldr	r3, [pc, #388]	; (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007bac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007bb0:	0e1b      	lsrs	r3, r3, #24
 8007bb2:	f003 030f 	and.w	r3, r3, #15
 8007bb6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	685b      	ldr	r3, [r3, #4]
 8007bbc:	019a      	lsls	r2, r3, #6
 8007bbe:	693b      	ldr	r3, [r7, #16]
 8007bc0:	041b      	lsls	r3, r3, #16
 8007bc2:	431a      	orrs	r2, r3
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	061b      	lsls	r3, r3, #24
 8007bc8:	431a      	orrs	r2, r3
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	689b      	ldr	r3, [r3, #8]
 8007bce:	071b      	lsls	r3, r3, #28
 8007bd0:	4957      	ldr	r1, [pc, #348]	; (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007bd2:	4313      	orrs	r3, r2
 8007bd4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d004      	beq.n	8007bee <HAL_RCCEx_PeriphCLKConfig+0x516>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007be8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007bec:	d00a      	beq.n	8007c04 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d02e      	beq.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bfe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007c02:	d129      	bne.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007c04:	4b4a      	ldr	r3, [pc, #296]	; (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007c06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c0a:	0c1b      	lsrs	r3, r3, #16
 8007c0c:	f003 0303 	and.w	r3, r3, #3
 8007c10:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007c12:	4b47      	ldr	r3, [pc, #284]	; (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007c14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c18:	0f1b      	lsrs	r3, r3, #28
 8007c1a:	f003 0307 	and.w	r3, r3, #7
 8007c1e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	685b      	ldr	r3, [r3, #4]
 8007c24:	019a      	lsls	r2, r3, #6
 8007c26:	693b      	ldr	r3, [r7, #16]
 8007c28:	041b      	lsls	r3, r3, #16
 8007c2a:	431a      	orrs	r2, r3
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	68db      	ldr	r3, [r3, #12]
 8007c30:	061b      	lsls	r3, r3, #24
 8007c32:	431a      	orrs	r2, r3
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	071b      	lsls	r3, r3, #28
 8007c38:	493d      	ldr	r1, [pc, #244]	; (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007c3a:	4313      	orrs	r3, r2
 8007c3c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007c40:	4b3b      	ldr	r3, [pc, #236]	; (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007c42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c46:	f023 021f 	bic.w	r2, r3, #31
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c4e:	3b01      	subs	r3, #1
 8007c50:	4937      	ldr	r1, [pc, #220]	; (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007c52:	4313      	orrs	r3, r2
 8007c54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d01d      	beq.n	8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007c64:	4b32      	ldr	r3, [pc, #200]	; (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007c66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c6a:	0e1b      	lsrs	r3, r3, #24
 8007c6c:	f003 030f 	and.w	r3, r3, #15
 8007c70:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007c72:	4b2f      	ldr	r3, [pc, #188]	; (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007c74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c78:	0f1b      	lsrs	r3, r3, #28
 8007c7a:	f003 0307 	and.w	r3, r3, #7
 8007c7e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	685b      	ldr	r3, [r3, #4]
 8007c84:	019a      	lsls	r2, r3, #6
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	691b      	ldr	r3, [r3, #16]
 8007c8a:	041b      	lsls	r3, r3, #16
 8007c8c:	431a      	orrs	r2, r3
 8007c8e:	693b      	ldr	r3, [r7, #16]
 8007c90:	061b      	lsls	r3, r3, #24
 8007c92:	431a      	orrs	r2, r3
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	071b      	lsls	r3, r3, #28
 8007c98:	4925      	ldr	r1, [pc, #148]	; (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007c9a:	4313      	orrs	r3, r2
 8007c9c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d011      	beq.n	8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	685b      	ldr	r3, [r3, #4]
 8007cb0:	019a      	lsls	r2, r3, #6
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	691b      	ldr	r3, [r3, #16]
 8007cb6:	041b      	lsls	r3, r3, #16
 8007cb8:	431a      	orrs	r2, r3
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	68db      	ldr	r3, [r3, #12]
 8007cbe:	061b      	lsls	r3, r3, #24
 8007cc0:	431a      	orrs	r2, r3
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	689b      	ldr	r3, [r3, #8]
 8007cc6:	071b      	lsls	r3, r3, #28
 8007cc8:	4919      	ldr	r1, [pc, #100]	; (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007cd0:	4b17      	ldr	r3, [pc, #92]	; (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4a16      	ldr	r2, [pc, #88]	; (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007cd6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007cda:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007cdc:	f7fa ffe6 	bl	8002cac <HAL_GetTick>
 8007ce0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007ce2:	e008      	b.n	8007cf6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007ce4:	f7fa ffe2 	bl	8002cac <HAL_GetTick>
 8007ce8:	4602      	mov	r2, r0
 8007cea:	697b      	ldr	r3, [r7, #20]
 8007cec:	1ad3      	subs	r3, r2, r3
 8007cee:	2b64      	cmp	r3, #100	; 0x64
 8007cf0:	d901      	bls.n	8007cf6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007cf2:	2303      	movs	r3, #3
 8007cf4:	e0d7      	b.n	8007ea6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007cf6:	4b0e      	ldr	r3, [pc, #56]	; (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d0f0      	beq.n	8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007d02:	69bb      	ldr	r3, [r7, #24]
 8007d04:	2b01      	cmp	r3, #1
 8007d06:	f040 80cd 	bne.w	8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007d0a:	4b09      	ldr	r3, [pc, #36]	; (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	4a08      	ldr	r2, [pc, #32]	; (8007d30 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8007d10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d16:	f7fa ffc9 	bl	8002cac <HAL_GetTick>
 8007d1a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007d1c:	e00a      	b.n	8007d34 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007d1e:	f7fa ffc5 	bl	8002cac <HAL_GetTick>
 8007d22:	4602      	mov	r2, r0
 8007d24:	697b      	ldr	r3, [r7, #20]
 8007d26:	1ad3      	subs	r3, r2, r3
 8007d28:	2b64      	cmp	r3, #100	; 0x64
 8007d2a:	d903      	bls.n	8007d34 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007d2c:	2303      	movs	r3, #3
 8007d2e:	e0ba      	b.n	8007ea6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8007d30:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007d34:	4b5e      	ldr	r3, [pc, #376]	; (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d40:	d0ed      	beq.n	8007d1e <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d003      	beq.n	8007d56 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d009      	beq.n	8007d6a <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d02e      	beq.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d12a      	bne.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007d6a:	4b51      	ldr	r3, [pc, #324]	; (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d70:	0c1b      	lsrs	r3, r3, #16
 8007d72:	f003 0303 	and.w	r3, r3, #3
 8007d76:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007d78:	4b4d      	ldr	r3, [pc, #308]	; (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d7e:	0f1b      	lsrs	r3, r3, #28
 8007d80:	f003 0307 	and.w	r3, r3, #7
 8007d84:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	695b      	ldr	r3, [r3, #20]
 8007d8a:	019a      	lsls	r2, r3, #6
 8007d8c:	693b      	ldr	r3, [r7, #16]
 8007d8e:	041b      	lsls	r3, r3, #16
 8007d90:	431a      	orrs	r2, r3
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	699b      	ldr	r3, [r3, #24]
 8007d96:	061b      	lsls	r3, r3, #24
 8007d98:	431a      	orrs	r2, r3
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	071b      	lsls	r3, r3, #28
 8007d9e:	4944      	ldr	r1, [pc, #272]	; (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007da0:	4313      	orrs	r3, r2
 8007da2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007da6:	4b42      	ldr	r3, [pc, #264]	; (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007da8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007dac:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007db4:	3b01      	subs	r3, #1
 8007db6:	021b      	lsls	r3, r3, #8
 8007db8:	493d      	ldr	r1, [pc, #244]	; (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007dba:	4313      	orrs	r3, r2
 8007dbc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d022      	beq.n	8007e12 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007dd0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007dd4:	d11d      	bne.n	8007e12 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007dd6:	4b36      	ldr	r3, [pc, #216]	; (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ddc:	0e1b      	lsrs	r3, r3, #24
 8007dde:	f003 030f 	and.w	r3, r3, #15
 8007de2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007de4:	4b32      	ldr	r3, [pc, #200]	; (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007dea:	0f1b      	lsrs	r3, r3, #28
 8007dec:	f003 0307 	and.w	r3, r3, #7
 8007df0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	695b      	ldr	r3, [r3, #20]
 8007df6:	019a      	lsls	r2, r3, #6
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6a1b      	ldr	r3, [r3, #32]
 8007dfc:	041b      	lsls	r3, r3, #16
 8007dfe:	431a      	orrs	r2, r3
 8007e00:	693b      	ldr	r3, [r7, #16]
 8007e02:	061b      	lsls	r3, r3, #24
 8007e04:	431a      	orrs	r2, r3
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	071b      	lsls	r3, r3, #28
 8007e0a:	4929      	ldr	r1, [pc, #164]	; (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007e0c:	4313      	orrs	r3, r2
 8007e0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f003 0308 	and.w	r3, r3, #8
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d028      	beq.n	8007e70 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007e1e:	4b24      	ldr	r3, [pc, #144]	; (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e24:	0e1b      	lsrs	r3, r3, #24
 8007e26:	f003 030f 	and.w	r3, r3, #15
 8007e2a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007e2c:	4b20      	ldr	r3, [pc, #128]	; (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e32:	0c1b      	lsrs	r3, r3, #16
 8007e34:	f003 0303 	and.w	r3, r3, #3
 8007e38:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	695b      	ldr	r3, [r3, #20]
 8007e3e:	019a      	lsls	r2, r3, #6
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	041b      	lsls	r3, r3, #16
 8007e44:	431a      	orrs	r2, r3
 8007e46:	693b      	ldr	r3, [r7, #16]
 8007e48:	061b      	lsls	r3, r3, #24
 8007e4a:	431a      	orrs	r2, r3
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	69db      	ldr	r3, [r3, #28]
 8007e50:	071b      	lsls	r3, r3, #28
 8007e52:	4917      	ldr	r1, [pc, #92]	; (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007e54:	4313      	orrs	r3, r2
 8007e56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007e5a:	4b15      	ldr	r3, [pc, #84]	; (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007e5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e60:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e68:	4911      	ldr	r1, [pc, #68]	; (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007e6a:	4313      	orrs	r3, r2
 8007e6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007e70:	4b0f      	ldr	r3, [pc, #60]	; (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	4a0e      	ldr	r2, [pc, #56]	; (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007e76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e7c:	f7fa ff16 	bl	8002cac <HAL_GetTick>
 8007e80:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007e82:	e008      	b.n	8007e96 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007e84:	f7fa ff12 	bl	8002cac <HAL_GetTick>
 8007e88:	4602      	mov	r2, r0
 8007e8a:	697b      	ldr	r3, [r7, #20]
 8007e8c:	1ad3      	subs	r3, r2, r3
 8007e8e:	2b64      	cmp	r3, #100	; 0x64
 8007e90:	d901      	bls.n	8007e96 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007e92:	2303      	movs	r3, #3
 8007e94:	e007      	b.n	8007ea6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007e96:	4b06      	ldr	r3, [pc, #24]	; (8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007e9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ea2:	d1ef      	bne.n	8007e84 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8007ea4:	2300      	movs	r3, #0
}
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	3720      	adds	r7, #32
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bd80      	pop	{r7, pc}
 8007eae:	bf00      	nop
 8007eb0:	40023800 	.word	0x40023800

08007eb4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b087      	sub	sp, #28
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8007ec8:	2300      	movs	r3, #0
 8007eca:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007ed2:	f040 8086 	bne.w	8007fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
  {
    saiclocksource = RCC->DCKCFGR1;
 8007ed6:	4b8d      	ldr	r3, [pc, #564]	; (800810c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007ed8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007edc:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8007ede:	68bb      	ldr	r3, [r7, #8]
 8007ee0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007ee4:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007eec:	d03e      	beq.n	8007f6c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 8007eee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007ef2:	d073      	beq.n	8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0x128>
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d000      	beq.n	8007efa <HAL_RCCEx_GetPeriphCLKFreq+0x46>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8007ef8:	e074      	b.n	8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007efa:	4b84      	ldr	r3, [pc, #528]	; (800810c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007efc:	685b      	ldr	r3, [r3, #4]
 8007efe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d108      	bne.n	8007f18 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007f06:	4b81      	ldr	r3, [pc, #516]	; (800810c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007f08:	685b      	ldr	r3, [r3, #4]
 8007f0a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f0e:	4a80      	ldr	r2, [pc, #512]	; (8008110 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8007f10:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f14:	613b      	str	r3, [r7, #16]
 8007f16:	e007      	b.n	8007f28 <HAL_RCCEx_GetPeriphCLKFreq+0x74>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007f18:	4b7c      	ldr	r3, [pc, #496]	; (800810c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007f1a:	685b      	ldr	r3, [r3, #4]
 8007f1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f20:	4a7c      	ldr	r2, [pc, #496]	; (8008114 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8007f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f26:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8007f28:	4b78      	ldr	r3, [pc, #480]	; (800810c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f2e:	0e1b      	lsrs	r3, r3, #24
 8007f30:	f003 030f 	and.w	r3, r3, #15
 8007f34:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8007f36:	4b75      	ldr	r3, [pc, #468]	; (800810c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f3c:	099b      	lsrs	r3, r3, #6
 8007f3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f42:	693a      	ldr	r2, [r7, #16]
 8007f44:	fb02 f203 	mul.w	r2, r2, r3
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f4e:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8007f50:	4b6e      	ldr	r3, [pc, #440]	; (800810c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007f52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f56:	0a1b      	lsrs	r3, r3, #8
 8007f58:	f003 031f 	and.w	r3, r3, #31
 8007f5c:	3301      	adds	r3, #1
 8007f5e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007f60:	697a      	ldr	r2, [r7, #20]
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f68:	617b      	str	r3, [r7, #20]
        break;
 8007f6a:	e03b      	b.n	8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8007f6c:	4b67      	ldr	r3, [pc, #412]	; (800810c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007f6e:	685b      	ldr	r3, [r3, #4]
 8007f70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d108      	bne.n	8007f8a <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007f78:	4b64      	ldr	r3, [pc, #400]	; (800810c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007f7a:	685b      	ldr	r3, [r3, #4]
 8007f7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f80:	4a63      	ldr	r2, [pc, #396]	; (8008110 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8007f82:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f86:	613b      	str	r3, [r7, #16]
 8007f88:	e007      	b.n	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8007f8a:	4b60      	ldr	r3, [pc, #384]	; (800810c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007f8c:	685b      	ldr	r3, [r3, #4]
 8007f8e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f92:	4a60      	ldr	r2, [pc, #384]	; (8008114 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8007f94:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f98:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8007f9a:	4b5c      	ldr	r3, [pc, #368]	; (800810c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007f9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007fa0:	0e1b      	lsrs	r3, r3, #24
 8007fa2:	f003 030f 	and.w	r3, r3, #15
 8007fa6:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8007fa8:	4b58      	ldr	r3, [pc, #352]	; (800810c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007faa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007fae:	099b      	lsrs	r3, r3, #6
 8007fb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fb4:	693a      	ldr	r2, [r7, #16]
 8007fb6:	fb02 f203 	mul.w	r2, r2, r3
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fc0:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8007fc2:	4b52      	ldr	r3, [pc, #328]	; (800810c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007fc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007fc8:	f003 031f 	and.w	r3, r3, #31
 8007fcc:	3301      	adds	r3, #1
 8007fce:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8007fd0:	697a      	ldr	r2, [r7, #20]
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fd8:	617b      	str	r3, [r7, #20]
        break;
 8007fda:	e003      	b.n	8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        frequency = EXTERNAL_CLOCK_VALUE;
 8007fdc:	4b4e      	ldr	r3, [pc, #312]	; (8008118 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8007fde:	617b      	str	r3, [r7, #20]
        break;
 8007fe0:	e000      	b.n	8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
      }
    }
  }
 8007fe2:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007fea:	f040 8086 	bne.w	80080fa <HAL_RCCEx_GetPeriphCLKFreq+0x246>
  {
    saiclocksource = RCC->DCKCFGR1;
 8007fee:	4b47      	ldr	r3, [pc, #284]	; (800810c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8007ff0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ff4:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8007ff6:	68bb      	ldr	r3, [r7, #8]
 8007ff8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8007ffc:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008004:	d03e      	beq.n	8008084 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8008006:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800800a:	d073      	beq.n	80080f4 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 800800c:	2b00      	cmp	r3, #0
 800800e:	d000      	beq.n	8008012 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8008010:	e074      	b.n	80080fc <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8008012:	4b3e      	ldr	r3, [pc, #248]	; (800810c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008014:	685b      	ldr	r3, [r3, #4]
 8008016:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800801a:	2b00      	cmp	r3, #0
 800801c:	d108      	bne.n	8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800801e:	4b3b      	ldr	r3, [pc, #236]	; (800810c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008020:	685b      	ldr	r3, [r3, #4]
 8008022:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008026:	4a3a      	ldr	r2, [pc, #232]	; (8008110 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8008028:	fbb2 f3f3 	udiv	r3, r2, r3
 800802c:	613b      	str	r3, [r7, #16]
 800802e:	e007      	b.n	8008040 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8008030:	4b36      	ldr	r3, [pc, #216]	; (800810c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008032:	685b      	ldr	r3, [r3, #4]
 8008034:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008038:	4a36      	ldr	r2, [pc, #216]	; (8008114 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 800803a:	fbb2 f3f3 	udiv	r3, r2, r3
 800803e:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8008040:	4b32      	ldr	r3, [pc, #200]	; (800810c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008046:	0e1b      	lsrs	r3, r3, #24
 8008048:	f003 030f 	and.w	r3, r3, #15
 800804c:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800804e:	4b2f      	ldr	r3, [pc, #188]	; (800810c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008050:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008054:	099b      	lsrs	r3, r3, #6
 8008056:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800805a:	693a      	ldr	r2, [r7, #16]
 800805c:	fb02 f203 	mul.w	r2, r2, r3
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	fbb2 f3f3 	udiv	r3, r2, r3
 8008066:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8008068:	4b28      	ldr	r3, [pc, #160]	; (800810c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 800806a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800806e:	0a1b      	lsrs	r3, r3, #8
 8008070:	f003 031f 	and.w	r3, r3, #31
 8008074:	3301      	adds	r3, #1
 8008076:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8008078:	697a      	ldr	r2, [r7, #20]
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008080:	617b      	str	r3, [r7, #20]
        break;
 8008082:	e03b      	b.n	80080fc <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8008084:	4b21      	ldr	r3, [pc, #132]	; (800810c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008086:	685b      	ldr	r3, [r3, #4]
 8008088:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800808c:	2b00      	cmp	r3, #0
 800808e:	d108      	bne.n	80080a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008090:	4b1e      	ldr	r3, [pc, #120]	; (800810c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8008092:	685b      	ldr	r3, [r3, #4]
 8008094:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008098:	4a1d      	ldr	r2, [pc, #116]	; (8008110 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 800809a:	fbb2 f3f3 	udiv	r3, r2, r3
 800809e:	613b      	str	r3, [r7, #16]
 80080a0:	e007      	b.n	80080b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1fe>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80080a2:	4b1a      	ldr	r3, [pc, #104]	; (800810c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80080a4:	685b      	ldr	r3, [r3, #4]
 80080a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80080aa:	4a1a      	ldr	r2, [pc, #104]	; (8008114 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 80080ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80080b0:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80080b2:	4b16      	ldr	r3, [pc, #88]	; (800810c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80080b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080b8:	0e1b      	lsrs	r3, r3, #24
 80080ba:	f003 030f 	and.w	r3, r3, #15
 80080be:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80080c0:	4b12      	ldr	r3, [pc, #72]	; (800810c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80080c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080c6:	099b      	lsrs	r3, r3, #6
 80080c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080cc:	693a      	ldr	r2, [r7, #16]
 80080ce:	fb02 f203 	mul.w	r2, r2, r3
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80080d8:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80080da:	4b0c      	ldr	r3, [pc, #48]	; (800810c <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 80080dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80080e0:	f003 031f 	and.w	r3, r3, #31
 80080e4:	3301      	adds	r3, #1
 80080e6:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80080e8:	697a      	ldr	r2, [r7, #20]
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80080f0:	617b      	str	r3, [r7, #20]
        break;
 80080f2:	e003      	b.n	80080fc <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        frequency = EXTERNAL_CLOCK_VALUE;
 80080f4:	4b08      	ldr	r3, [pc, #32]	; (8008118 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 80080f6:	617b      	str	r3, [r7, #20]
        break;
 80080f8:	e000      	b.n	80080fc <HAL_RCCEx_GetPeriphCLKFreq+0x248>
      }
    }
  }
 80080fa:	bf00      	nop

  return frequency;
 80080fc:	697b      	ldr	r3, [r7, #20]
}
 80080fe:	4618      	mov	r0, r3
 8008100:	371c      	adds	r7, #28
 8008102:	46bd      	mov	sp, r7
 8008104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008108:	4770      	bx	lr
 800810a:	bf00      	nop
 800810c:	40023800 	.word	0x40023800
 8008110:	00f42400 	.word	0x00f42400
 8008114:	017d7840 	.word	0x017d7840
 8008118:	00bb8000 	.word	0x00bb8000

0800811c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b082      	sub	sp, #8
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d101      	bne.n	800812e <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800812a:	2301      	movs	r3, #1
 800812c:	e06b      	b.n	8008206 <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	7f5b      	ldrb	r3, [r3, #29]
 8008132:	b2db      	uxtb	r3, r3
 8008134:	2b00      	cmp	r3, #0
 8008136:	d105      	bne.n	8008144 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2200      	movs	r2, #0
 800813c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f7fa f870 	bl	8002224 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2202      	movs	r2, #2
 8008148:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	22ca      	movs	r2, #202	; 0xca
 8008150:	625a      	str	r2, [r3, #36]	; 0x24
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	2253      	movs	r2, #83	; 0x53
 8008158:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f000 fa96 	bl	800868c <RTC_EnterInitMode>
 8008160:	4603      	mov	r3, r0
 8008162:	2b00      	cmp	r3, #0
 8008164:	d008      	beq.n	8008178 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	22ff      	movs	r2, #255	; 0xff
 800816c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2204      	movs	r2, #4
 8008172:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8008174:	2301      	movs	r3, #1
 8008176:	e046      	b.n	8008206 <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	6899      	ldr	r1, [r3, #8]
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681a      	ldr	r2, [r3, #0]
 8008182:	4b23      	ldr	r3, [pc, #140]	; (8008210 <HAL_RTC_Init+0xf4>)
 8008184:	400b      	ands	r3, r1
 8008186:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	6899      	ldr	r1, [r3, #8]
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	685a      	ldr	r2, [r3, #4]
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	691b      	ldr	r3, [r3, #16]
 8008196:	431a      	orrs	r2, r3
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	695b      	ldr	r3, [r3, #20]
 800819c:	431a      	orrs	r2, r3
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	430a      	orrs	r2, r1
 80081a4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	687a      	ldr	r2, [r7, #4]
 80081ac:	68d2      	ldr	r2, [r2, #12]
 80081ae:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	6919      	ldr	r1, [r3, #16]
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	689b      	ldr	r3, [r3, #8]
 80081ba:	041a      	lsls	r2, r3, #16
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	430a      	orrs	r2, r1
 80081c2:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	68da      	ldr	r2, [r3, #12]
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80081d2:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f022 0208 	bic.w	r2, r2, #8
 80081e2:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	699a      	ldr	r2, [r3, #24]
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	430a      	orrs	r2, r1
 80081f4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	22ff      	movs	r2, #255	; 0xff
 80081fc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2201      	movs	r2, #1
 8008202:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8008204:	2300      	movs	r3, #0
  }
}
 8008206:	4618      	mov	r0, r3
 8008208:	3708      	adds	r7, #8
 800820a:	46bd      	mov	sp, r7
 800820c:	bd80      	pop	{r7, pc}
 800820e:	bf00      	nop
 8008210:	ff8fffbf 	.word	0xff8fffbf

08008214 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008214:	b590      	push	{r4, r7, lr}
 8008216:	b087      	sub	sp, #28
 8008218:	af00      	add	r7, sp, #0
 800821a:	60f8      	str	r0, [r7, #12]
 800821c:	60b9      	str	r1, [r7, #8]
 800821e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8008220:	2300      	movs	r3, #0
 8008222:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	7f1b      	ldrb	r3, [r3, #28]
 8008228:	2b01      	cmp	r3, #1
 800822a:	d101      	bne.n	8008230 <HAL_RTC_SetTime+0x1c>
 800822c:	2302      	movs	r3, #2
 800822e:	e0a8      	b.n	8008382 <HAL_RTC_SetTime+0x16e>
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	2201      	movs	r2, #1
 8008234:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	2202      	movs	r2, #2
 800823a:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d126      	bne.n	8008290 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	689b      	ldr	r3, [r3, #8]
 8008248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800824c:	2b00      	cmp	r3, #0
 800824e:	d102      	bne.n	8008256 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8008250:	68bb      	ldr	r3, [r7, #8]
 8008252:	2200      	movs	r2, #0
 8008254:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	781b      	ldrb	r3, [r3, #0]
 800825a:	4618      	mov	r0, r3
 800825c:	f000 fa42 	bl	80086e4 <RTC_ByteToBcd2>
 8008260:	4603      	mov	r3, r0
 8008262:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	785b      	ldrb	r3, [r3, #1]
 8008268:	4618      	mov	r0, r3
 800826a:	f000 fa3b 	bl	80086e4 <RTC_ByteToBcd2>
 800826e:	4603      	mov	r3, r0
 8008270:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8008272:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	789b      	ldrb	r3, [r3, #2]
 8008278:	4618      	mov	r0, r3
 800827a:	f000 fa33 	bl	80086e4 <RTC_ByteToBcd2>
 800827e:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8008280:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	7b1b      	ldrb	r3, [r3, #12]
 8008288:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800828a:	4313      	orrs	r3, r2
 800828c:	617b      	str	r3, [r7, #20]
 800828e:	e018      	b.n	80082c2 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	689b      	ldr	r3, [r3, #8]
 8008296:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800829a:	2b00      	cmp	r3, #0
 800829c:	d102      	bne.n	80082a4 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800829e:	68bb      	ldr	r3, [r7, #8]
 80082a0:	2200      	movs	r2, #0
 80082a2:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	781b      	ldrb	r3, [r3, #0]
 80082a8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	785b      	ldrb	r3, [r3, #1]
 80082ae:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80082b0:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80082b2:	68ba      	ldr	r2, [r7, #8]
 80082b4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 80082b6:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	7b1b      	ldrb	r3, [r3, #12]
 80082bc:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80082be:	4313      	orrs	r3, r2
 80082c0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	22ca      	movs	r2, #202	; 0xca
 80082c8:	625a      	str	r2, [r3, #36]	; 0x24
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	2253      	movs	r2, #83	; 0x53
 80082d0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80082d2:	68f8      	ldr	r0, [r7, #12]
 80082d4:	f000 f9da 	bl	800868c <RTC_EnterInitMode>
 80082d8:	4603      	mov	r3, r0
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d00b      	beq.n	80082f6 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	22ff      	movs	r2, #255	; 0xff
 80082e4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	2204      	movs	r2, #4
 80082ea:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	2200      	movs	r2, #0
 80082f0:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80082f2:	2301      	movs	r3, #1
 80082f4:	e045      	b.n	8008382 <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681a      	ldr	r2, [r3, #0]
 80082fa:	6979      	ldr	r1, [r7, #20]
 80082fc:	4b23      	ldr	r3, [pc, #140]	; (800838c <HAL_RTC_SetTime+0x178>)
 80082fe:	400b      	ands	r3, r1
 8008300:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	689a      	ldr	r2, [r3, #8]
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008310:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	6899      	ldr	r1, [r3, #8]
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	691a      	ldr	r2, [r3, #16]
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	695b      	ldr	r3, [r3, #20]
 8008320:	431a      	orrs	r2, r3
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	430a      	orrs	r2, r1
 8008328:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	68da      	ldr	r2, [r3, #12]
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008338:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	689b      	ldr	r3, [r3, #8]
 8008340:	f003 0320 	and.w	r3, r3, #32
 8008344:	2b00      	cmp	r3, #0
 8008346:	d111      	bne.n	800836c <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008348:	68f8      	ldr	r0, [r7, #12]
 800834a:	f000 f977 	bl	800863c <HAL_RTC_WaitForSynchro>
 800834e:	4603      	mov	r3, r0
 8008350:	2b00      	cmp	r3, #0
 8008352:	d00b      	beq.n	800836c <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	22ff      	movs	r2, #255	; 0xff
 800835a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	2204      	movs	r2, #4
 8008360:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	2200      	movs	r2, #0
 8008366:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8008368:	2301      	movs	r3, #1
 800836a:	e00a      	b.n	8008382 <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	22ff      	movs	r2, #255	; 0xff
 8008372:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	2201      	movs	r2, #1
 8008378:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	2200      	movs	r2, #0
 800837e:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8008380:	2300      	movs	r3, #0
  }
}
 8008382:	4618      	mov	r0, r3
 8008384:	371c      	adds	r7, #28
 8008386:	46bd      	mov	sp, r7
 8008388:	bd90      	pop	{r4, r7, pc}
 800838a:	bf00      	nop
 800838c:	007f7f7f 	.word	0x007f7f7f

08008390 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b086      	sub	sp, #24
 8008394:	af00      	add	r7, sp, #0
 8008396:	60f8      	str	r0, [r7, #12]
 8008398:	60b9      	str	r1, [r7, #8]
 800839a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800839c:	2300      	movs	r3, #0
 800839e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds values from the correspondent registers*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	691b      	ldr	r3, [r3, #16]
 80083b0:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	681a      	ldr	r2, [r3, #0]
 80083be:	4b22      	ldr	r3, [pc, #136]	; (8008448 <HAL_RTC_GetTime+0xb8>)
 80083c0:	4013      	ands	r3, r2
 80083c2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 80083c4:	697b      	ldr	r3, [r7, #20]
 80083c6:	0c1b      	lsrs	r3, r3, #16
 80083c8:	b2db      	uxtb	r3, r3
 80083ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80083ce:	b2da      	uxtb	r2, r3
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 80083d4:	697b      	ldr	r3, [r7, #20]
 80083d6:	0a1b      	lsrs	r3, r3, #8
 80083d8:	b2db      	uxtb	r3, r3
 80083da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083de:	b2da      	uxtb	r2, r3
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80083e4:	697b      	ldr	r3, [r7, #20]
 80083e6:	b2db      	uxtb	r3, r3
 80083e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083ec:	b2da      	uxtb	r2, r3
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);
 80083f2:	697b      	ldr	r3, [r7, #20]
 80083f4:	0c1b      	lsrs	r3, r3, #16
 80083f6:	b2db      	uxtb	r3, r3
 80083f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083fc:	b2da      	uxtb	r2, r3
 80083fe:	68bb      	ldr	r3, [r7, #8]
 8008400:	731a      	strb	r2, [r3, #12]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d11a      	bne.n	800843e <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	781b      	ldrb	r3, [r3, #0]
 800840c:	4618      	mov	r0, r3
 800840e:	f000 f987 	bl	8008720 <RTC_Bcd2ToByte>
 8008412:	4603      	mov	r3, r0
 8008414:	461a      	mov	r2, r3
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	785b      	ldrb	r3, [r3, #1]
 800841e:	4618      	mov	r0, r3
 8008420:	f000 f97e 	bl	8008720 <RTC_Bcd2ToByte>
 8008424:	4603      	mov	r3, r0
 8008426:	461a      	mov	r2, r3
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800842c:	68bb      	ldr	r3, [r7, #8]
 800842e:	789b      	ldrb	r3, [r3, #2]
 8008430:	4618      	mov	r0, r3
 8008432:	f000 f975 	bl	8008720 <RTC_Bcd2ToByte>
 8008436:	4603      	mov	r3, r0
 8008438:	461a      	mov	r2, r3
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800843e:	2300      	movs	r3, #0
}
 8008440:	4618      	mov	r0, r3
 8008442:	3718      	adds	r7, #24
 8008444:	46bd      	mov	sp, r7
 8008446:	bd80      	pop	{r7, pc}
 8008448:	007f7f7f 	.word	0x007f7f7f

0800844c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800844c:	b590      	push	{r4, r7, lr}
 800844e:	b087      	sub	sp, #28
 8008450:	af00      	add	r7, sp, #0
 8008452:	60f8      	str	r0, [r7, #12]
 8008454:	60b9      	str	r1, [r7, #8]
 8008456:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8008458:	2300      	movs	r3, #0
 800845a:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	7f1b      	ldrb	r3, [r3, #28]
 8008460:	2b01      	cmp	r3, #1
 8008462:	d101      	bne.n	8008468 <HAL_RTC_SetDate+0x1c>
 8008464:	2302      	movs	r3, #2
 8008466:	e092      	b.n	800858e <HAL_RTC_SetDate+0x142>
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	2201      	movs	r2, #1
 800846c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	2202      	movs	r2, #2
 8008472:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d10e      	bne.n	8008498 <HAL_RTC_SetDate+0x4c>
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	785b      	ldrb	r3, [r3, #1]
 800847e:	f003 0310 	and.w	r3, r3, #16
 8008482:	2b00      	cmp	r3, #0
 8008484:	d008      	beq.n	8008498 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008486:	68bb      	ldr	r3, [r7, #8]
 8008488:	785b      	ldrb	r3, [r3, #1]
 800848a:	f023 0310 	bic.w	r3, r3, #16
 800848e:	b2db      	uxtb	r3, r3
 8008490:	330a      	adds	r3, #10
 8008492:	b2da      	uxtb	r2, r3
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d11c      	bne.n	80084d8 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	78db      	ldrb	r3, [r3, #3]
 80084a2:	4618      	mov	r0, r3
 80084a4:	f000 f91e 	bl	80086e4 <RTC_ByteToBcd2>
 80084a8:	4603      	mov	r3, r0
 80084aa:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	785b      	ldrb	r3, [r3, #1]
 80084b0:	4618      	mov	r0, r3
 80084b2:	f000 f917 	bl	80086e4 <RTC_ByteToBcd2>
 80084b6:	4603      	mov	r3, r0
 80084b8:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80084ba:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	789b      	ldrb	r3, [r3, #2]
 80084c0:	4618      	mov	r0, r3
 80084c2:	f000 f90f 	bl	80086e4 <RTC_ByteToBcd2>
 80084c6:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 80084c8:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 80084cc:	68bb      	ldr	r3, [r7, #8]
 80084ce:	781b      	ldrb	r3, [r3, #0]
 80084d0:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80084d2:	4313      	orrs	r3, r2
 80084d4:	617b      	str	r3, [r7, #20]
 80084d6:	e00e      	b.n	80084f6 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	78db      	ldrb	r3, [r3, #3]
 80084dc:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 80084de:	68bb      	ldr	r3, [r7, #8]
 80084e0:	785b      	ldrb	r3, [r3, #1]
 80084e2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80084e4:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80084e6:	68ba      	ldr	r2, [r7, #8]
 80084e8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 80084ea:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	781b      	ldrb	r3, [r3, #0]
 80084f0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 80084f2:	4313      	orrs	r3, r2
 80084f4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	22ca      	movs	r2, #202	; 0xca
 80084fc:	625a      	str	r2, [r3, #36]	; 0x24
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	2253      	movs	r2, #83	; 0x53
 8008504:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008506:	68f8      	ldr	r0, [r7, #12]
 8008508:	f000 f8c0 	bl	800868c <RTC_EnterInitMode>
 800850c:	4603      	mov	r3, r0
 800850e:	2b00      	cmp	r3, #0
 8008510:	d00b      	beq.n	800852a <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	22ff      	movs	r2, #255	; 0xff
 8008518:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	2204      	movs	r2, #4
 800851e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	2200      	movs	r2, #0
 8008524:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8008526:	2301      	movs	r3, #1
 8008528:	e031      	b.n	800858e <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	681a      	ldr	r2, [r3, #0]
 800852e:	6979      	ldr	r1, [r7, #20]
 8008530:	4b19      	ldr	r3, [pc, #100]	; (8008598 <HAL_RTC_SetDate+0x14c>)
 8008532:	400b      	ands	r3, r1
 8008534:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	68da      	ldr	r2, [r3, #12]
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008544:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	689b      	ldr	r3, [r3, #8]
 800854c:	f003 0320 	and.w	r3, r3, #32
 8008550:	2b00      	cmp	r3, #0
 8008552:	d111      	bne.n	8008578 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008554:	68f8      	ldr	r0, [r7, #12]
 8008556:	f000 f871 	bl	800863c <HAL_RTC_WaitForSynchro>
 800855a:	4603      	mov	r3, r0
 800855c:	2b00      	cmp	r3, #0
 800855e:	d00b      	beq.n	8008578 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	22ff      	movs	r2, #255	; 0xff
 8008566:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	2204      	movs	r2, #4
 800856c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	2200      	movs	r2, #0
 8008572:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8008574:	2301      	movs	r3, #1
 8008576:	e00a      	b.n	800858e <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	22ff      	movs	r2, #255	; 0xff
 800857e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	2201      	movs	r2, #1
 8008584:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	2200      	movs	r2, #0
 800858a:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800858c:	2300      	movs	r3, #0
  }
}
 800858e:	4618      	mov	r0, r3
 8008590:	371c      	adds	r7, #28
 8008592:	46bd      	mov	sp, r7
 8008594:	bd90      	pop	{r4, r7, pc}
 8008596:	bf00      	nop
 8008598:	00ffff3f 	.word	0x00ffff3f

0800859c <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b086      	sub	sp, #24
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	60f8      	str	r0, [r7, #12]
 80085a4:	60b9      	str	r1, [r7, #8]
 80085a6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 80085a8:	2300      	movs	r3, #0
 80085aa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	685a      	ldr	r2, [r3, #4]
 80085b2:	4b21      	ldr	r3, [pc, #132]	; (8008638 <HAL_RTC_GetDate+0x9c>)
 80085b4:	4013      	ands	r3, r2
 80085b6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 80085b8:	697b      	ldr	r3, [r7, #20]
 80085ba:	0c1b      	lsrs	r3, r3, #16
 80085bc:	b2da      	uxtb	r2, r3
 80085be:	68bb      	ldr	r3, [r7, #8]
 80085c0:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 80085c2:	697b      	ldr	r3, [r7, #20]
 80085c4:	0a1b      	lsrs	r3, r3, #8
 80085c6:	b2db      	uxtb	r3, r3
 80085c8:	f003 031f 	and.w	r3, r3, #31
 80085cc:	b2da      	uxtb	r2, r3
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80085d2:	697b      	ldr	r3, [r7, #20]
 80085d4:	b2db      	uxtb	r3, r3
 80085d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80085da:	b2da      	uxtb	r2, r3
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13);
 80085e0:	697b      	ldr	r3, [r7, #20]
 80085e2:	0b5b      	lsrs	r3, r3, #13
 80085e4:	b2db      	uxtb	r3, r3
 80085e6:	f003 0307 	and.w	r3, r3, #7
 80085ea:	b2da      	uxtb	r2, r3
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d11a      	bne.n	800862c <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	78db      	ldrb	r3, [r3, #3]
 80085fa:	4618      	mov	r0, r3
 80085fc:	f000 f890 	bl	8008720 <RTC_Bcd2ToByte>
 8008600:	4603      	mov	r3, r0
 8008602:	461a      	mov	r2, r3
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8008608:	68bb      	ldr	r3, [r7, #8]
 800860a:	785b      	ldrb	r3, [r3, #1]
 800860c:	4618      	mov	r0, r3
 800860e:	f000 f887 	bl	8008720 <RTC_Bcd2ToByte>
 8008612:	4603      	mov	r3, r0
 8008614:	461a      	mov	r2, r3
 8008616:	68bb      	ldr	r3, [r7, #8]
 8008618:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	789b      	ldrb	r3, [r3, #2]
 800861e:	4618      	mov	r0, r3
 8008620:	f000 f87e 	bl	8008720 <RTC_Bcd2ToByte>
 8008624:	4603      	mov	r3, r0
 8008626:	461a      	mov	r2, r3
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800862c:	2300      	movs	r3, #0
}
 800862e:	4618      	mov	r0, r3
 8008630:	3718      	adds	r7, #24
 8008632:	46bd      	mov	sp, r7
 8008634:	bd80      	pop	{r7, pc}
 8008636:	bf00      	nop
 8008638:	00ffff3f 	.word	0x00ffff3f

0800863c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b084      	sub	sp, #16
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008644:	2300      	movs	r3, #0
 8008646:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	68da      	ldr	r2, [r3, #12]
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008656:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008658:	f7fa fb28 	bl	8002cac <HAL_GetTick>
 800865c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800865e:	e009      	b.n	8008674 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008660:	f7fa fb24 	bl	8002cac <HAL_GetTick>
 8008664:	4602      	mov	r2, r0
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	1ad3      	subs	r3, r2, r3
 800866a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800866e:	d901      	bls.n	8008674 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8008670:	2303      	movs	r3, #3
 8008672:	e007      	b.n	8008684 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	68db      	ldr	r3, [r3, #12]
 800867a:	f003 0320 	and.w	r3, r3, #32
 800867e:	2b00      	cmp	r3, #0
 8008680:	d0ee      	beq.n	8008660 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8008682:	2300      	movs	r3, #0
}
 8008684:	4618      	mov	r0, r3
 8008686:	3710      	adds	r7, #16
 8008688:	46bd      	mov	sp, r7
 800868a:	bd80      	pop	{r7, pc}

0800868c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b084      	sub	sp, #16
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008694:	2300      	movs	r3, #0
 8008696:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	68db      	ldr	r3, [r3, #12]
 800869e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d119      	bne.n	80086da <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f04f 32ff 	mov.w	r2, #4294967295
 80086ae:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80086b0:	f7fa fafc 	bl	8002cac <HAL_GetTick>
 80086b4:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80086b6:	e009      	b.n	80086cc <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80086b8:	f7fa faf8 	bl	8002cac <HAL_GetTick>
 80086bc:	4602      	mov	r2, r0
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	1ad3      	subs	r3, r2, r3
 80086c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80086c6:	d901      	bls.n	80086cc <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80086c8:	2303      	movs	r3, #3
 80086ca:	e007      	b.n	80086dc <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	68db      	ldr	r3, [r3, #12]
 80086d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d0ee      	beq.n	80086b8 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80086da:	2300      	movs	r3, #0
}
 80086dc:	4618      	mov	r0, r3
 80086de:	3710      	adds	r7, #16
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bd80      	pop	{r7, pc}

080086e4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80086e4:	b480      	push	{r7}
 80086e6:	b085      	sub	sp, #20
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	4603      	mov	r3, r0
 80086ec:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 80086ee:	2300      	movs	r3, #0
 80086f0:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 80086f2:	e005      	b.n	8008700 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	3301      	adds	r3, #1
 80086f8:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 80086fa:	79fb      	ldrb	r3, [r7, #7]
 80086fc:	3b0a      	subs	r3, #10
 80086fe:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 8008700:	79fb      	ldrb	r3, [r7, #7]
 8008702:	2b09      	cmp	r3, #9
 8008704:	d8f6      	bhi.n	80086f4 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	b2db      	uxtb	r3, r3
 800870a:	011b      	lsls	r3, r3, #4
 800870c:	b2da      	uxtb	r2, r3
 800870e:	79fb      	ldrb	r3, [r7, #7]
 8008710:	4313      	orrs	r3, r2
 8008712:	b2db      	uxtb	r3, r3
}
 8008714:	4618      	mov	r0, r3
 8008716:	3714      	adds	r7, #20
 8008718:	46bd      	mov	sp, r7
 800871a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871e:	4770      	bx	lr

08008720 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8008720:	b480      	push	{r7}
 8008722:	b085      	sub	sp, #20
 8008724:	af00      	add	r7, sp, #0
 8008726:	4603      	mov	r3, r0
 8008728:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 800872a:	2300      	movs	r3, #0
 800872c:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800872e:	79fb      	ldrb	r3, [r7, #7]
 8008730:	091b      	lsrs	r3, r3, #4
 8008732:	b2db      	uxtb	r3, r3
 8008734:	461a      	mov	r2, r3
 8008736:	4613      	mov	r3, r2
 8008738:	009b      	lsls	r3, r3, #2
 800873a:	4413      	add	r3, r2
 800873c:	005b      	lsls	r3, r3, #1
 800873e:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8008740:	79fb      	ldrb	r3, [r7, #7]
 8008742:	f003 030f 	and.w	r3, r3, #15
 8008746:	b2da      	uxtb	r2, r3
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	b2db      	uxtb	r3, r3
 800874c:	4413      	add	r3, r2
 800874e:	b2db      	uxtb	r3, r3
}
 8008750:	4618      	mov	r0, r3
 8008752:	3714      	adds	r7, #20
 8008754:	46bd      	mov	sp, r7
 8008756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875a:	4770      	bx	lr

0800875c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b088      	sub	sp, #32
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8008764:	2300      	movs	r3, #0
 8008766:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8008768:	2300      	movs	r3, #0
 800876a:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 800876c:	2300      	movs	r3, #0
 800876e:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if(hsai == NULL)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d101      	bne.n	800877a <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8008776:	2301      	movs	r3, #1
 8008778:	e149      	b.n	8008a0e <HAL_SAI_Init+0x2b2>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if(hsai->State == HAL_SAI_STATE_RESET)
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8008780:	b2db      	uxtb	r3, r3
 8008782:	2b00      	cmp	r3, #0
 8008784:	d106      	bne.n	8008794 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	2200      	movs	r2, #0
 800878a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800878e:	6878      	ldr	r0, [r7, #4]
 8008790:	f7fa f8f2 	bl	8002978 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2202      	movs	r2, #2
 8008798:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	f000 f94f 	bl	8008a40 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch(hsai->Init.SynchroExt)
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	68db      	ldr	r3, [r3, #12]
 80087a6:	2b01      	cmp	r3, #1
 80087a8:	d007      	beq.n	80087ba <HAL_SAI_Init+0x5e>
 80087aa:	2b01      	cmp	r3, #1
 80087ac:	d302      	bcc.n	80087b4 <HAL_SAI_Init+0x58>
 80087ae:	2b02      	cmp	r3, #2
 80087b0:	d006      	beq.n	80087c0 <HAL_SAI_Init+0x64>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
  default:
    break;
 80087b2:	e008      	b.n	80087c6 <HAL_SAI_Init+0x6a>
      tmpregisterGCR = 0;
 80087b4:	2300      	movs	r3, #0
 80087b6:	61fb      	str	r3, [r7, #28]
      break;
 80087b8:	e005      	b.n	80087c6 <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80087ba:	2310      	movs	r3, #16
 80087bc:	61fb      	str	r3, [r7, #28]
      break;
 80087be:	e002      	b.n	80087c6 <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80087c0:	2320      	movs	r3, #32
 80087c2:	61fb      	str	r3, [r7, #28]
      break;
 80087c4:	bf00      	nop
  }

  switch(hsai->Init.Synchro)
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	689b      	ldr	r3, [r3, #8]
 80087ca:	2b03      	cmp	r3, #3
 80087cc:	d81d      	bhi.n	800880a <HAL_SAI_Init+0xae>
 80087ce:	a201      	add	r2, pc, #4	; (adr r2, 80087d4 <HAL_SAI_Init+0x78>)
 80087d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087d4:	080087e5 	.word	0x080087e5
 80087d8:	080087eb 	.word	0x080087eb
 80087dc:	080087f3 	.word	0x080087f3
 80087e0:	080087fb 	.word	0x080087fb
  {
    case SAI_ASYNCHRONOUS :
      {
        syncen_bits = 0;
 80087e4:	2300      	movs	r3, #0
 80087e6:	617b      	str	r3, [r7, #20]
      }
      break;
 80087e8:	e010      	b.n	800880c <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS :
      {
        syncen_bits = SAI_xCR1_SYNCEN_0;
 80087ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80087ee:	617b      	str	r3, [r7, #20]
      }
      break;
 80087f0:	e00c      	b.n	800880c <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 80087f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80087f6:	617b      	str	r3, [r7, #20]
      }
      break;
 80087f8:	e008      	b.n	800880c <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 80087fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80087fe:	617b      	str	r3, [r7, #20]
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8008800:	69fb      	ldr	r3, [r7, #28]
 8008802:	f043 0301 	orr.w	r3, r3, #1
 8008806:	61fb      	str	r3, [r7, #28]
      }
      break;
 8008808:	e000      	b.n	800880c <HAL_SAI_Init+0xb0>
  default:
    break;
 800880a:	bf00      	nop
  }

  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	4a81      	ldr	r2, [pc, #516]	; (8008a18 <HAL_SAI_Init+0x2bc>)
 8008812:	4293      	cmp	r3, r2
 8008814:	d004      	beq.n	8008820 <HAL_SAI_Init+0xc4>
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	4a80      	ldr	r2, [pc, #512]	; (8008a1c <HAL_SAI_Init+0x2c0>)
 800881c:	4293      	cmp	r3, r2
 800881e:	d103      	bne.n	8008828 <HAL_SAI_Init+0xcc>
  {
    SAI1->GCR = tmpregisterGCR;
 8008820:	4a7f      	ldr	r2, [pc, #508]	; (8008a20 <HAL_SAI_Init+0x2c4>)
 8008822:	69fb      	ldr	r3, [r7, #28]
 8008824:	6013      	str	r3, [r2, #0]
 8008826:	e002      	b.n	800882e <HAL_SAI_Init+0xd2>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8008828:	4a7e      	ldr	r2, [pc, #504]	; (8008a24 <HAL_SAI_Init+0x2c8>)
 800882a:	69fb      	ldr	r3, [r7, #28]
 800882c:	6013      	str	r3, [r2, #0]
  }

  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	69db      	ldr	r3, [r3, #28]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d043      	beq.n	80088be <HAL_SAI_Init+0x162>
  {
    uint32_t freq = 0;
 8008836:	2300      	movs	r3, #0
 8008838:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	4a76      	ldr	r2, [pc, #472]	; (8008a18 <HAL_SAI_Init+0x2bc>)
 8008840:	4293      	cmp	r3, r2
 8008842:	d004      	beq.n	800884e <HAL_SAI_Init+0xf2>
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	4a74      	ldr	r2, [pc, #464]	; (8008a1c <HAL_SAI_Init+0x2c0>)
 800884a:	4293      	cmp	r3, r2
 800884c:	d104      	bne.n	8008858 <HAL_SAI_Init+0xfc>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800884e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8008852:	f7ff fb2f 	bl	8007eb4 <HAL_RCCEx_GetPeriphCLKFreq>
 8008856:	6138      	str	r0, [r7, #16]
    }
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	4a72      	ldr	r2, [pc, #456]	; (8008a28 <HAL_SAI_Init+0x2cc>)
 800885e:	4293      	cmp	r3, r2
 8008860:	d004      	beq.n	800886c <HAL_SAI_Init+0x110>
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	4a71      	ldr	r2, [pc, #452]	; (8008a2c <HAL_SAI_Init+0x2d0>)
 8008868:	4293      	cmp	r3, r2
 800886a:	d104      	bne.n	8008876 <HAL_SAI_Init+0x11a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800886c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8008870:	f7ff fb20 	bl	8007eb4 <HAL_RCCEx_GetPeriphCLKFreq>
 8008874:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8008876:	693a      	ldr	r2, [r7, #16]
 8008878:	4613      	mov	r3, r2
 800887a:	009b      	lsls	r3, r3, #2
 800887c:	4413      	add	r3, r2
 800887e:	005b      	lsls	r3, r3, #1
 8008880:	461a      	mov	r2, r3
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	69db      	ldr	r3, [r3, #28]
 8008886:	025b      	lsls	r3, r3, #9
 8008888:	fbb2 f3f3 	udiv	r3, r2, r3
 800888c:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	4a67      	ldr	r2, [pc, #412]	; (8008a30 <HAL_SAI_Init+0x2d4>)
 8008892:	fba2 2303 	umull	r2, r3, r2, r3
 8008896:	08da      	lsrs	r2, r3, #3
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if((tmpval % 10) > 8)
 800889c:	68f9      	ldr	r1, [r7, #12]
 800889e:	4b64      	ldr	r3, [pc, #400]	; (8008a30 <HAL_SAI_Init+0x2d4>)
 80088a0:	fba3 2301 	umull	r2, r3, r3, r1
 80088a4:	08da      	lsrs	r2, r3, #3
 80088a6:	4613      	mov	r3, r2
 80088a8:	009b      	lsls	r3, r3, #2
 80088aa:	4413      	add	r3, r2
 80088ac:	005b      	lsls	r3, r3, #1
 80088ae:	1aca      	subs	r2, r1, r3
 80088b0:	2a08      	cmp	r2, #8
 80088b2:	d904      	bls.n	80088be <HAL_SAI_Init+0x162>
    {
      hsai->Init.Mckdiv+= 1;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	6a1b      	ldr	r3, [r3, #32]
 80088b8:	1c5a      	adds	r2, r3, #1
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	685b      	ldr	r3, [r3, #4]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d003      	beq.n	80088ce <HAL_SAI_Init+0x172>
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	685b      	ldr	r3, [r3, #4]
 80088ca:	2b02      	cmp	r3, #2
 80088cc:	d109      	bne.n	80088e2 <HAL_SAI_Init+0x186>
  { /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088d2:	2b01      	cmp	r3, #1
 80088d4:	d101      	bne.n	80088da <HAL_SAI_Init+0x17e>
 80088d6:	2300      	movs	r3, #0
 80088d8:	e001      	b.n	80088de <HAL_SAI_Init+0x182>
 80088da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80088de:	61bb      	str	r3, [r7, #24]
 80088e0:	e008      	b.n	80088f4 <HAL_SAI_Init+0x198>
  }
  else
  { /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088e6:	2b01      	cmp	r3, #1
 80088e8:	d102      	bne.n	80088f0 <HAL_SAI_Init+0x194>
 80088ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80088ee:	e000      	b.n	80088f2 <HAL_SAI_Init+0x196>
 80088f0:	2300      	movs	r3, #0
 80088f2:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	6819      	ldr	r1, [r3, #0]
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681a      	ldr	r2, [r3, #0]
 80088fe:	4b4d      	ldr	r3, [pc, #308]	; (8008a34 <HAL_SAI_Init+0x2d8>)
 8008900:	400b      	ands	r3, r1
 8008902:	6013      	str	r3, [r2, #0]
                         SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN |\
                         SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                         SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	6819      	ldr	r1, [r3, #0]
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	685a      	ldr	r2, [r3, #4]
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008912:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008918:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800891e:	431a      	orrs	r2, r3
 8008920:	69bb      	ldr	r3, [r7, #24]
 8008922:	431a      	orrs	r2, r3
                        ckstr_bits | syncen_bits |                               \
 8008924:	697b      	ldr	r3, [r7, #20]
 8008926:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ckstr_bits | syncen_bits |                               \
 800892c:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	691b      	ldr	r3, [r3, #16]
 8008932:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	695b      	ldr	r3, [r3, #20]
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8008938:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	6a1b      	ldr	r3, [r3, #32]
 800893e:	051b      	lsls	r3, r3, #20
 8008940:	431a      	orrs	r2, r3
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	430a      	orrs	r2, r1
 8008948:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	6859      	ldr	r1, [r3, #4]
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681a      	ldr	r2, [r3, #0]
 8008954:	4b38      	ldr	r3, [pc, #224]	; (8008a38 <HAL_SAI_Init+0x2dc>)
 8008956:	400b      	ands	r3, r1
 8008958:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	6859      	ldr	r1, [r3, #4]
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	699a      	ldr	r2, [r3, #24]
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008968:	431a      	orrs	r2, r3
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800896e:	431a      	orrs	r2, r3
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	430a      	orrs	r2, r1
 8008976:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	6899      	ldr	r1, [r3, #8]
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681a      	ldr	r2, [r3, #0]
 8008982:	4b2e      	ldr	r3, [pc, #184]	; (8008a3c <HAL_SAI_Init+0x2e0>)
 8008984:	400b      	ands	r3, r1
 8008986:	6093      	str	r3, [r2, #8]
                           SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	6899      	ldr	r1, [r3, #8]
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008992:	1e5a      	subs	r2, r3, #1
                          hsai->FrameInit.FSOffset |
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8008998:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSDefinition |
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                          hsai->FrameInit.FSOffset |
 800899e:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSPolarity   |
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                          hsai->FrameInit.FSDefinition |
 80089a4:	431a      	orrs	r2, r3
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089aa:	3b01      	subs	r3, #1
 80089ac:	021b      	lsls	r3, r3, #8
                          hsai->FrameInit.FSPolarity   |
 80089ae:	431a      	orrs	r2, r3
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	430a      	orrs	r2, r1
 80089b6:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	68d9      	ldr	r1, [r3, #12]
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681a      	ldr	r2, [r3, #0]
 80089c2:	f24f 0320 	movw	r3, #61472	; 0xf020
 80089c6:	400b      	ands	r3, r1
 80089c8:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN ));

  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	68d9      	ldr	r1, [r3, #12]
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089d8:	431a      	orrs	r2, r3
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80089de:	041b      	lsls	r3, r3, #16
 80089e0:	431a      	orrs	r2, r3
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089e6:	3b01      	subs	r3, #1
 80089e8:	021b      	lsls	r3, r3, #8
 80089ea:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	430a      	orrs	r2, r1
 80089f2:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2200      	movs	r2, #0
 80089f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State= HAL_SAI_STATE_READY;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2201      	movs	r2, #1
 8008a00:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2200      	movs	r2, #0
 8008a08:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008a0c:	2300      	movs	r3, #0
}
 8008a0e:	4618      	mov	r0, r3
 8008a10:	3720      	adds	r7, #32
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bd80      	pop	{r7, pc}
 8008a16:	bf00      	nop
 8008a18:	40015804 	.word	0x40015804
 8008a1c:	40015824 	.word	0x40015824
 8008a20:	40015800 	.word	0x40015800
 8008a24:	40015c00 	.word	0x40015c00
 8008a28:	40015c04 	.word	0x40015c04
 8008a2c:	40015c24 	.word	0x40015c24
 8008a30:	cccccccd 	.word	0xcccccccd
 8008a34:	ff05c010 	.word	0xff05c010
 8008a38:	ffff1ff0 	.word	0xffff1ff0
 8008a3c:	fff88000 	.word	0xfff88000

08008a40 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8008a40:	b490      	push	{r4, r7}
 8008a42:	b084      	sub	sp, #16
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8008a48:	4b16      	ldr	r3, [pc, #88]	; (8008aa4 <SAI_Disable+0x64>)
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	4a16      	ldr	r2, [pc, #88]	; (8008aa8 <SAI_Disable+0x68>)
 8008a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8008a52:	0b1b      	lsrs	r3, r3, #12
 8008a54:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 8008a56:	2300      	movs	r3, #0
 8008a58:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	681a      	ldr	r2, [r3, #0]
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008a68:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8008a6a:	4623      	mov	r3, r4
 8008a6c:	1e5c      	subs	r4, r3, #1
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d10a      	bne.n	8008a88 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008a78:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8008a82:	2303      	movs	r3, #3
 8008a84:	73fb      	strb	r3, [r7, #15]
      break;
 8008a86:	e006      	b.n	8008a96 <SAI_Disable+0x56>
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d1e9      	bne.n	8008a6a <SAI_Disable+0x2a>

  return status;
 8008a96:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	3710      	adds	r7, #16
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bc90      	pop	{r4, r7}
 8008aa0:	4770      	bx	lr
 8008aa2:	bf00      	nop
 8008aa4:	20000000 	.word	0x20000000
 8008aa8:	95cbec1b 	.word	0x95cbec1b

08008aac <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b082      	sub	sp, #8
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d101      	bne.n	8008abe <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8008aba:	2301      	movs	r3, #1
 8008abc:	e022      	b.n	8008b04 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008ac4:	b2db      	uxtb	r3, r3
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d105      	bne.n	8008ad6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	2200      	movs	r2, #0
 8008ace:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008ad0:	6878      	ldr	r0, [r7, #4]
 8008ad2:	f7f9 fbc1 	bl	8002258 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2203      	movs	r2, #3
 8008ada:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008ade:	6878      	ldr	r0, [r7, #4]
 8008ae0:	f000 f814 	bl	8008b0c <HAL_SD_InitCard>
 8008ae4:	4603      	mov	r3, r0
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d001      	beq.n	8008aee <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8008aea:	2301      	movs	r3, #1
 8008aec:	e00a      	b.n	8008b04 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	2200      	movs	r2, #0
 8008af2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2200      	movs	r2, #0
 8008af8:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	2201      	movs	r2, #1
 8008afe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008b02:	2300      	movs	r3, #0
}
 8008b04:	4618      	mov	r0, r3
 8008b06:	3708      	adds	r7, #8
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	bd80      	pop	{r7, pc}

08008b0c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008b0c:	b5b0      	push	{r4, r5, r7, lr}
 8008b0e:	b08e      	sub	sp, #56	; 0x38
 8008b10:	af04      	add	r7, sp, #16
 8008b12:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8008b14:	2300      	movs	r3, #0
 8008b16:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8008b18:	2300      	movs	r3, #0
 8008b1a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8008b20:	2300      	movs	r3, #0
 8008b22:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8008b24:	2300      	movs	r3, #0
 8008b26:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8008b28:	2376      	movs	r3, #118	; 0x76
 8008b2a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681d      	ldr	r5, [r3, #0]
 8008b30:	466c      	mov	r4, sp
 8008b32:	f107 0314 	add.w	r3, r7, #20
 8008b36:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008b3a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008b3e:	f107 0308 	add.w	r3, r7, #8
 8008b42:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008b44:	4628      	mov	r0, r5
 8008b46:	f002 fed1 	bl	800b8ec <SDMMC_Init>
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8008b50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d001      	beq.n	8008b5c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8008b58:	2301      	movs	r3, #1
 8008b5a:	e03b      	b.n	8008bd4 <HAL_SD_InitCard+0xc8>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	685a      	ldr	r2, [r3, #4]
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008b6a:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	4618      	mov	r0, r3
 8008b72:	f002 fef4 	bl	800b95e <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	685a      	ldr	r2, [r3, #4]
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008b84:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008b86:	6878      	ldr	r0, [r7, #4]
 8008b88:	f000 fde6 	bl	8009758 <SD_PowerON>
 8008b8c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008b8e:	6a3b      	ldr	r3, [r7, #32]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d00b      	beq.n	8008bac <HAL_SD_InitCard+0xa0>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2201      	movs	r2, #1
 8008b98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ba0:	6a3b      	ldr	r3, [r7, #32]
 8008ba2:	431a      	orrs	r2, r3
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008ba8:	2301      	movs	r3, #1
 8008baa:	e013      	b.n	8008bd4 <HAL_SD_InitCard+0xc8>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008bac:	6878      	ldr	r0, [r7, #4]
 8008bae:	f000 fd05 	bl	80095bc <SD_InitCard>
 8008bb2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008bb4:	6a3b      	ldr	r3, [r7, #32]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d00b      	beq.n	8008bd2 <HAL_SD_InitCard+0xc6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2201      	movs	r2, #1
 8008bbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008bc6:	6a3b      	ldr	r3, [r7, #32]
 8008bc8:	431a      	orrs	r2, r3
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008bce:	2301      	movs	r3, #1
 8008bd0:	e000      	b.n	8008bd4 <HAL_SD_InitCard+0xc8>
  }

  return HAL_OK;
 8008bd2:	2300      	movs	r3, #0
}
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	3728      	adds	r7, #40	; 0x28
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	bdb0      	pop	{r4, r5, r7, pc}

08008bdc <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b08c      	sub	sp, #48	; 0x30
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	60f8      	str	r0, [r7, #12]
 8008be4:	60b9      	str	r1, [r7, #8]
 8008be6:	607a      	str	r2, [r7, #4]
 8008be8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8008bee:	68bb      	ldr	r3, [r7, #8]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d107      	bne.n	8008c04 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bf8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008c00:	2301      	movs	r3, #1
 8008c02:	e0cc      	b.n	8008d9e <HAL_SD_ReadBlocks_DMA+0x1c2>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008c0a:	b2db      	uxtb	r3, r3
 8008c0c:	2b01      	cmp	r3, #1
 8008c0e:	f040 80c5 	bne.w	8008d9c <HAL_SD_ReadBlocks_DMA+0x1c0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	2200      	movs	r2, #0
 8008c16:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008c18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	441a      	add	r2, r3
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c22:	429a      	cmp	r2, r3
 8008c24:	d907      	bls.n	8008c36 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c2a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008c32:	2301      	movs	r3, #1
 8008c34:	e0b3      	b.n	8008d9e <HAL_SD_ReadBlocks_DMA+0x1c2>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	2203      	movs	r2, #3
 8008c3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	2200      	movs	r2, #0
 8008c44:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8008c54:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c5a:	4a53      	ldr	r2, [pc, #332]	; (8008da8 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8008c5c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c62:	4a52      	ldr	r2, [pc, #328]	; (8008dac <HAL_SD_ReadBlocks_DMA+0x1d0>)
 8008c64:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	3380      	adds	r3, #128	; 0x80
 8008c78:	4619      	mov	r1, r3
 8008c7a:	68ba      	ldr	r2, [r7, #8]
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	025b      	lsls	r3, r3, #9
 8008c80:	089b      	lsrs	r3, r3, #2
 8008c82:	f7fa fd0f 	bl	80036a4 <HAL_DMA_Start_IT>
 8008c86:	4603      	mov	r3, r0
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d017      	beq.n	8008cbc <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8008c9a:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	4a43      	ldr	r2, [pc, #268]	; (8008db0 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 8008ca2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ca8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	2201      	movs	r2, #1
 8008cb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8008cb8:	2301      	movs	r3, #1
 8008cba:	e070      	b.n	8008d9e <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	f042 0208 	orr.w	r2, r2, #8
 8008cca:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cd0:	2b01      	cmp	r3, #1
 8008cd2:	d002      	beq.n	8008cda <HAL_SD_ReadBlocks_DMA+0xfe>
      {
        add *= 512U;
 8008cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cd6:	025b      	lsls	r3, r3, #9
 8008cd8:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	f002 fece 	bl	800ba84 <SDMMC_CmdBlockLength>
 8008ce8:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 8008cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d00f      	beq.n	8008d10 <HAL_SD_ReadBlocks_DMA+0x134>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	4a2e      	ldr	r2, [pc, #184]	; (8008db0 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 8008cf6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cfe:	431a      	orrs	r2, r3
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	2201      	movs	r2, #1
 8008d08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8008d0c:	2301      	movs	r3, #1
 8008d0e:	e046      	b.n	8008d9e <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008d10:	f04f 33ff 	mov.w	r3, #4294967295
 8008d14:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	025b      	lsls	r3, r3, #9
 8008d1a:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008d1c:	2390      	movs	r3, #144	; 0x90
 8008d1e:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008d20:	2302      	movs	r3, #2
 8008d22:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008d24:	2300      	movs	r3, #0
 8008d26:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8008d28:	2301      	movs	r3, #1
 8008d2a:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	f107 0210 	add.w	r2, r7, #16
 8008d34:	4611      	mov	r1, r2
 8008d36:	4618      	mov	r0, r3
 8008d38:	f002 fe78 	bl	800ba2c <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	2b01      	cmp	r3, #1
 8008d40:	d90a      	bls.n	8008d58 <HAL_SD_ReadBlocks_DMA+0x17c>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	2282      	movs	r2, #130	; 0x82
 8008d46:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008d4e:	4618      	mov	r0, r3
 8008d50:	f002 fedc 	bl	800bb0c <SDMMC_CmdReadMultiBlock>
 8008d54:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008d56:	e009      	b.n	8008d6c <HAL_SD_ReadBlocks_DMA+0x190>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	2281      	movs	r2, #129	; 0x81
 8008d5c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008d64:	4618      	mov	r0, r3
 8008d66:	f002 feaf 	bl	800bac8 <SDMMC_CmdReadSingleBlock>
 8008d6a:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8008d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d012      	beq.n	8008d98 <HAL_SD_ReadBlocks_DMA+0x1bc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	4a0e      	ldr	r2, [pc, #56]	; (8008db0 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 8008d78:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d80:	431a      	orrs	r2, r3
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	2201      	movs	r2, #1
 8008d8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	2200      	movs	r2, #0
 8008d92:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8008d94:	2301      	movs	r3, #1
 8008d96:	e002      	b.n	8008d9e <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      return HAL_OK;
 8008d98:	2300      	movs	r3, #0
 8008d9a:	e000      	b.n	8008d9e <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
  }
  else
  {
    return HAL_BUSY;
 8008d9c:	2302      	movs	r3, #2
  }
}
 8008d9e:	4618      	mov	r0, r3
 8008da0:	3730      	adds	r7, #48	; 0x30
 8008da2:	46bd      	mov	sp, r7
 8008da4:	bd80      	pop	{r7, pc}
 8008da6:	bf00      	nop
 8008da8:	080094a7 	.word	0x080094a7
 8008dac:	08009519 	.word	0x08009519
 8008db0:	004005ff 	.word	0x004005ff

08008db4 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b08c      	sub	sp, #48	; 0x30
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	60f8      	str	r0, [r7, #12]
 8008dbc:	60b9      	str	r1, [r7, #8]
 8008dbe:	607a      	str	r2, [r7, #4]
 8008dc0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8008dc6:	68bb      	ldr	r3, [r7, #8]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d107      	bne.n	8008ddc <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dd0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008dd8:	2301      	movs	r3, #1
 8008dda:	e0cf      	b.n	8008f7c <HAL_SD_WriteBlocks_DMA+0x1c8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008de2:	b2db      	uxtb	r3, r3
 8008de4:	2b01      	cmp	r3, #1
 8008de6:	f040 80c8 	bne.w	8008f7a <HAL_SD_WriteBlocks_DMA+0x1c6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	2200      	movs	r2, #0
 8008dee:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008df0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	441a      	add	r2, r3
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008dfa:	429a      	cmp	r2, r3
 8008dfc:	d907      	bls.n	8008e0e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e02:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008e0a:	2301      	movs	r3, #1
 8008e0c:	e0b6      	b.n	8008f7c <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	2203      	movs	r2, #3
 8008e12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	f042 021a 	orr.w	r2, r2, #26
 8008e2c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e32:	4a54      	ldr	r2, [pc, #336]	; (8008f84 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8008e34:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e3a:	4a53      	ldr	r2, [pc, #332]	; (8008f88 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 8008e3c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e42:	2200      	movs	r2, #0
 8008e44:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e4a:	2b01      	cmp	r3, #1
 8008e4c:	d002      	beq.n	8008e54 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8008e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e50:	025b      	lsls	r3, r3, #9
 8008e52:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	f002 fe11 	bl	800ba84 <SDMMC_CmdBlockLength>
 8008e62:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d00f      	beq.n	8008e8a <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	4a47      	ldr	r2, [pc, #284]	; (8008f8c <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8008e70:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e78:	431a      	orrs	r2, r3
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	2201      	movs	r2, #1
 8008e82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8008e86:	2301      	movs	r3, #1
 8008e88:	e078      	b.n	8008f7c <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	2b01      	cmp	r3, #1
 8008e8e:	d90a      	bls.n	8008ea6 <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	22a0      	movs	r2, #160	; 0xa0
 8008e94:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	f002 fe79 	bl	800bb94 <SDMMC_CmdWriteMultiBlock>
 8008ea2:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008ea4:	e009      	b.n	8008eba <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	2290      	movs	r2, #144	; 0x90
 8008eaa:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	f002 fe4c 	bl	800bb50 <SDMMC_CmdWriteSingleBlock>
 8008eb8:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8008eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d012      	beq.n	8008ee6 <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	4a31      	ldr	r2, [pc, #196]	; (8008f8c <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8008ec6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ece:	431a      	orrs	r2, r3
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	2201      	movs	r2, #1
 8008ed8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	2200      	movs	r2, #0
 8008ee0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008ee2:	2301      	movs	r3, #1
 8008ee4:	e04a      	b.n	8008f7c <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	f042 0208 	orr.w	r2, r2, #8
 8008ef4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8008efa:	68b9      	ldr	r1, [r7, #8]
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	3380      	adds	r3, #128	; 0x80
 8008f02:	461a      	mov	r2, r3
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	025b      	lsls	r3, r3, #9
 8008f08:	089b      	lsrs	r3, r3, #2
 8008f0a:	f7fa fbcb 	bl	80036a4 <HAL_DMA_Start_IT>
 8008f0e:	4603      	mov	r3, r0
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d01a      	beq.n	8008f4a <HAL_SD_WriteBlocks_DMA+0x196>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f022 021a 	bic.w	r2, r2, #26
 8008f22:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	4a18      	ldr	r2, [pc, #96]	; (8008f8c <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8008f2a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f30:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	2201      	movs	r2, #1
 8008f3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	2200      	movs	r2, #0
 8008f44:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008f46:	2301      	movs	r3, #1
 8008f48:	e018      	b.n	8008f7c <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8008f4e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	025b      	lsls	r3, r3, #9
 8008f54:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008f56:	2390      	movs	r3, #144	; 0x90
 8008f58:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008f5e:	2300      	movs	r3, #0
 8008f60:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8008f62:	2301      	movs	r3, #1
 8008f64:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	f107 0210 	add.w	r2, r7, #16
 8008f6e:	4611      	mov	r1, r2
 8008f70:	4618      	mov	r0, r3
 8008f72:	f002 fd5b 	bl	800ba2c <SDMMC_ConfigData>

      return HAL_OK;
 8008f76:	2300      	movs	r3, #0
 8008f78:	e000      	b.n	8008f7c <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
  }
  else
  {
    return HAL_BUSY;
 8008f7a:	2302      	movs	r3, #2
  }
}
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	3730      	adds	r7, #48	; 0x30
 8008f80:	46bd      	mov	sp, r7
 8008f82:	bd80      	pop	{r7, pc}
 8008f84:	0800947d 	.word	0x0800947d
 8008f88:	08009519 	.word	0x08009519
 8008f8c:	004005ff 	.word	0x004005ff

08008f90 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8008f90:	b480      	push	{r7}
 8008f92:	b083      	sub	sp, #12
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8008f98:	bf00      	nop
 8008f9a:	370c      	adds	r7, #12
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa2:	4770      	bx	lr

08008fa4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008fa4:	b480      	push	{r7}
 8008fa6:	b083      	sub	sp, #12
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
 8008fac:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008fb2:	0f9b      	lsrs	r3, r3, #30
 8008fb4:	b2da      	uxtb	r2, r3
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008fbe:	0e9b      	lsrs	r3, r3, #26
 8008fc0:	b2db      	uxtb	r3, r3
 8008fc2:	f003 030f 	and.w	r3, r3, #15
 8008fc6:	b2da      	uxtb	r2, r3
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008fd0:	0e1b      	lsrs	r3, r3, #24
 8008fd2:	b2db      	uxtb	r3, r3
 8008fd4:	f003 0303 	and.w	r3, r3, #3
 8008fd8:	b2da      	uxtb	r2, r3
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008fe2:	0c1b      	lsrs	r3, r3, #16
 8008fe4:	b2da      	uxtb	r2, r3
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008fee:	0a1b      	lsrs	r3, r3, #8
 8008ff0:	b2da      	uxtb	r2, r3
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ffa:	b2da      	uxtb	r2, r3
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009004:	0d1b      	lsrs	r3, r3, #20
 8009006:	b29a      	uxth	r2, r3
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009010:	0c1b      	lsrs	r3, r3, #16
 8009012:	b2db      	uxtb	r3, r3
 8009014:	f003 030f 	and.w	r3, r3, #15
 8009018:	b2da      	uxtb	r2, r3
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009022:	0bdb      	lsrs	r3, r3, #15
 8009024:	b2db      	uxtb	r3, r3
 8009026:	f003 0301 	and.w	r3, r3, #1
 800902a:	b2da      	uxtb	r2, r3
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009034:	0b9b      	lsrs	r3, r3, #14
 8009036:	b2db      	uxtb	r3, r3
 8009038:	f003 0301 	and.w	r3, r3, #1
 800903c:	b2da      	uxtb	r2, r3
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009046:	0b5b      	lsrs	r3, r3, #13
 8009048:	b2db      	uxtb	r3, r3
 800904a:	f003 0301 	and.w	r3, r3, #1
 800904e:	b2da      	uxtb	r2, r3
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009058:	0b1b      	lsrs	r3, r3, #12
 800905a:	b2db      	uxtb	r3, r3
 800905c:	f003 0301 	and.w	r3, r3, #1
 8009060:	b2da      	uxtb	r2, r3
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	2200      	movs	r2, #0
 800906a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009070:	2b00      	cmp	r3, #0
 8009072:	d163      	bne.n	800913c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009078:	009a      	lsls	r2, r3, #2
 800907a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800907e:	4013      	ands	r3, r2
 8009080:	687a      	ldr	r2, [r7, #4]
 8009082:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8009084:	0f92      	lsrs	r2, r2, #30
 8009086:	431a      	orrs	r2, r3
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009090:	0edb      	lsrs	r3, r3, #27
 8009092:	b2db      	uxtb	r3, r3
 8009094:	f003 0307 	and.w	r3, r3, #7
 8009098:	b2da      	uxtb	r2, r3
 800909a:	683b      	ldr	r3, [r7, #0]
 800909c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090a2:	0e1b      	lsrs	r3, r3, #24
 80090a4:	b2db      	uxtb	r3, r3
 80090a6:	f003 0307 	and.w	r3, r3, #7
 80090aa:	b2da      	uxtb	r2, r3
 80090ac:	683b      	ldr	r3, [r7, #0]
 80090ae:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090b4:	0d5b      	lsrs	r3, r3, #21
 80090b6:	b2db      	uxtb	r3, r3
 80090b8:	f003 0307 	and.w	r3, r3, #7
 80090bc:	b2da      	uxtb	r2, r3
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090c6:	0c9b      	lsrs	r3, r3, #18
 80090c8:	b2db      	uxtb	r3, r3
 80090ca:	f003 0307 	and.w	r3, r3, #7
 80090ce:	b2da      	uxtb	r2, r3
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090d8:	0bdb      	lsrs	r3, r3, #15
 80090da:	b2db      	uxtb	r3, r3
 80090dc:	f003 0307 	and.w	r3, r3, #7
 80090e0:	b2da      	uxtb	r2, r3
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	691b      	ldr	r3, [r3, #16]
 80090ea:	1c5a      	adds	r2, r3, #1
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	7e1b      	ldrb	r3, [r3, #24]
 80090f4:	b2db      	uxtb	r3, r3
 80090f6:	f003 0307 	and.w	r3, r3, #7
 80090fa:	3302      	adds	r3, #2
 80090fc:	2201      	movs	r2, #1
 80090fe:	fa02 f303 	lsl.w	r3, r2, r3
 8009102:	687a      	ldr	r2, [r7, #4]
 8009104:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8009106:	fb02 f203 	mul.w	r2, r2, r3
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	7a1b      	ldrb	r3, [r3, #8]
 8009112:	b2db      	uxtb	r3, r3
 8009114:	f003 030f 	and.w	r3, r3, #15
 8009118:	2201      	movs	r2, #1
 800911a:	409a      	lsls	r2, r3
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009124:	687a      	ldr	r2, [r7, #4]
 8009126:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8009128:	0a52      	lsrs	r2, r2, #9
 800912a:	fb02 f203 	mul.w	r2, r2, r3
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009138:	661a      	str	r2, [r3, #96]	; 0x60
 800913a:	e031      	b.n	80091a0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009140:	2b01      	cmp	r3, #1
 8009142:	d11d      	bne.n	8009180 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009148:	041b      	lsls	r3, r3, #16
 800914a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009152:	0c1b      	lsrs	r3, r3, #16
 8009154:	431a      	orrs	r2, r3
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	691b      	ldr	r3, [r3, #16]
 800915e:	3301      	adds	r3, #1
 8009160:	029a      	lsls	r2, r3, #10
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009174:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	661a      	str	r2, [r3, #96]	; 0x60
 800917e:	e00f      	b.n	80091a0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	4a58      	ldr	r2, [pc, #352]	; (80092e8 <HAL_SD_GetCardCSD+0x344>)
 8009186:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800918c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2201      	movs	r2, #1
 8009198:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800919c:	2301      	movs	r3, #1
 800919e:	e09d      	b.n	80092dc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80091a4:	0b9b      	lsrs	r3, r3, #14
 80091a6:	b2db      	uxtb	r3, r3
 80091a8:	f003 0301 	and.w	r3, r3, #1
 80091ac:	b2da      	uxtb	r2, r3
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80091b6:	09db      	lsrs	r3, r3, #7
 80091b8:	b2db      	uxtb	r3, r3
 80091ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091be:	b2da      	uxtb	r2, r3
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80091c8:	b2db      	uxtb	r3, r3
 80091ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091ce:	b2da      	uxtb	r2, r3
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091d8:	0fdb      	lsrs	r3, r3, #31
 80091da:	b2da      	uxtb	r2, r3
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091e4:	0f5b      	lsrs	r3, r3, #29
 80091e6:	b2db      	uxtb	r3, r3
 80091e8:	f003 0303 	and.w	r3, r3, #3
 80091ec:	b2da      	uxtb	r2, r3
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091f6:	0e9b      	lsrs	r3, r3, #26
 80091f8:	b2db      	uxtb	r3, r3
 80091fa:	f003 0307 	and.w	r3, r3, #7
 80091fe:	b2da      	uxtb	r2, r3
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009208:	0d9b      	lsrs	r3, r3, #22
 800920a:	b2db      	uxtb	r3, r3
 800920c:	f003 030f 	and.w	r3, r3, #15
 8009210:	b2da      	uxtb	r2, r3
 8009212:	683b      	ldr	r3, [r7, #0]
 8009214:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800921a:	0d5b      	lsrs	r3, r3, #21
 800921c:	b2db      	uxtb	r3, r3
 800921e:	f003 0301 	and.w	r3, r3, #1
 8009222:	b2da      	uxtb	r2, r3
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	2200      	movs	r2, #0
 800922e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009236:	0c1b      	lsrs	r3, r3, #16
 8009238:	b2db      	uxtb	r3, r3
 800923a:	f003 0301 	and.w	r3, r3, #1
 800923e:	b2da      	uxtb	r2, r3
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800924a:	0bdb      	lsrs	r3, r3, #15
 800924c:	b2db      	uxtb	r3, r3
 800924e:	f003 0301 	and.w	r3, r3, #1
 8009252:	b2da      	uxtb	r2, r3
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800925e:	0b9b      	lsrs	r3, r3, #14
 8009260:	b2db      	uxtb	r3, r3
 8009262:	f003 0301 	and.w	r3, r3, #1
 8009266:	b2da      	uxtb	r2, r3
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009272:	0b5b      	lsrs	r3, r3, #13
 8009274:	b2db      	uxtb	r3, r3
 8009276:	f003 0301 	and.w	r3, r3, #1
 800927a:	b2da      	uxtb	r2, r3
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009286:	0b1b      	lsrs	r3, r3, #12
 8009288:	b2db      	uxtb	r3, r3
 800928a:	f003 0301 	and.w	r3, r3, #1
 800928e:	b2da      	uxtb	r2, r3
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800929a:	0a9b      	lsrs	r3, r3, #10
 800929c:	b2db      	uxtb	r3, r3
 800929e:	f003 0303 	and.w	r3, r3, #3
 80092a2:	b2da      	uxtb	r2, r3
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092ae:	0a1b      	lsrs	r3, r3, #8
 80092b0:	b2db      	uxtb	r3, r3
 80092b2:	f003 0303 	and.w	r3, r3, #3
 80092b6:	b2da      	uxtb	r2, r3
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092c2:	085b      	lsrs	r3, r3, #1
 80092c4:	b2db      	uxtb	r3, r3
 80092c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80092ca:	b2da      	uxtb	r2, r3
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	2201      	movs	r2, #1
 80092d6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80092da:	2300      	movs	r3, #0
}
 80092dc:	4618      	mov	r0, r3
 80092de:	370c      	adds	r7, #12
 80092e0:	46bd      	mov	sp, r7
 80092e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e6:	4770      	bx	lr
 80092e8:	004005ff 	.word	0x004005ff

080092ec <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80092ec:	b480      	push	{r7}
 80092ee:	b083      	sub	sp, #12
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
 80092f4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80092fa:	683b      	ldr	r3, [r7, #0]
 80092fc:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009302:	683b      	ldr	r3, [r7, #0]
 8009304:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800930a:	683b      	ldr	r3, [r7, #0]
 800930c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009332:	683b      	ldr	r3, [r7, #0]
 8009334:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8009336:	2300      	movs	r3, #0
}
 8009338:	4618      	mov	r0, r3
 800933a:	370c      	adds	r7, #12
 800933c:	46bd      	mov	sp, r7
 800933e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009342:	4770      	bx	lr

08009344 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8009344:	b5b0      	push	{r4, r5, r7, lr}
 8009346:	b08e      	sub	sp, #56	; 0x38
 8009348:	af04      	add	r7, sp, #16
 800934a:	6078      	str	r0, [r7, #4]
 800934c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	2203      	movs	r2, #3
 8009352:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800935a:	2b03      	cmp	r3, #3
 800935c:	d02e      	beq.n	80093bc <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800935e:	683b      	ldr	r3, [r7, #0]
 8009360:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009364:	d106      	bne.n	8009374 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800936a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	639a      	str	r2, [r3, #56]	; 0x38
 8009372:	e029      	b.n	80093c8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800937a:	d10a      	bne.n	8009392 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800937c:	6878      	ldr	r0, [r7, #4]
 800937e:	f000 faa1 	bl	80098c4 <SD_WideBus_Enable>
 8009382:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800938a:	431a      	orrs	r2, r3
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	639a      	str	r2, [r3, #56]	; 0x38
 8009390:	e01a      	b.n	80093c8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8009392:	683b      	ldr	r3, [r7, #0]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d10a      	bne.n	80093ae <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8009398:	6878      	ldr	r0, [r7, #4]
 800939a:	f000 fade 	bl	800995a <SD_WideBus_Disable>
 800939e:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80093a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093a6:	431a      	orrs	r2, r3
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	639a      	str	r2, [r3, #56]	; 0x38
 80093ac:	e00c      	b.n	80093c8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093b2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	639a      	str	r2, [r3, #56]	; 0x38
 80093ba:	e005      	b.n	80093c8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093c0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d009      	beq.n	80093e4 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	4a18      	ldr	r2, [pc, #96]	; (8009438 <HAL_SD_ConfigWideBusOperation+0xf4>)
 80093d6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2201      	movs	r2, #1
 80093dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80093e0:	2301      	movs	r3, #1
 80093e2:	e024      	b.n	800942e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	685b      	ldr	r3, [r3, #4]
 80093e8:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	689b      	ldr	r3, [r3, #8]
 80093ee:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	68db      	ldr	r3, [r3, #12]
 80093f4:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	695b      	ldr	r3, [r3, #20]
 80093fe:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	699b      	ldr	r3, [r3, #24]
 8009404:	623b      	str	r3, [r7, #32]
    (void)SDMMC_Init(hsd->Instance, Init);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681d      	ldr	r5, [r3, #0]
 800940a:	466c      	mov	r4, sp
 800940c:	f107 0318 	add.w	r3, r7, #24
 8009410:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009414:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009418:	f107 030c 	add.w	r3, r7, #12
 800941c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800941e:	4628      	mov	r0, r5
 8009420:	f002 fa64 	bl	800b8ec <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	2201      	movs	r2, #1
 8009428:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800942c:	2300      	movs	r3, #0
}
 800942e:	4618      	mov	r0, r3
 8009430:	3728      	adds	r7, #40	; 0x28
 8009432:	46bd      	mov	sp, r7
 8009434:	bdb0      	pop	{r4, r5, r7, pc}
 8009436:	bf00      	nop
 8009438:	004005ff 	.word	0x004005ff

0800943c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b086      	sub	sp, #24
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8009444:	2300      	movs	r3, #0
 8009446:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8009448:	f107 030c 	add.w	r3, r7, #12
 800944c:	4619      	mov	r1, r3
 800944e:	6878      	ldr	r0, [r7, #4]
 8009450:	f000 fa10 	bl	8009874 <SD_SendStatus>
 8009454:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009456:	697b      	ldr	r3, [r7, #20]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d005      	beq.n	8009468 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009460:	697b      	ldr	r3, [r7, #20]
 8009462:	431a      	orrs	r2, r3
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	0a5b      	lsrs	r3, r3, #9
 800946c:	f003 030f 	and.w	r3, r3, #15
 8009470:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8009472:	693b      	ldr	r3, [r7, #16]
}
 8009474:	4618      	mov	r0, r3
 8009476:	3718      	adds	r7, #24
 8009478:	46bd      	mov	sp, r7
 800947a:	bd80      	pop	{r7, pc}

0800947c <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800947c:	b480      	push	{r7}
 800947e:	b085      	sub	sp, #20
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009488:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009498:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800949a:	bf00      	nop
 800949c:	3714      	adds	r7, #20
 800949e:	46bd      	mov	sp, r7
 80094a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a4:	4770      	bx	lr

080094a6 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80094a6:	b580      	push	{r7, lr}
 80094a8:	b084      	sub	sp, #16
 80094aa:	af00      	add	r7, sp, #0
 80094ac:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094b2:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094b8:	2b82      	cmp	r3, #130	; 0x82
 80094ba:	d111      	bne.n	80094e0 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	4618      	mov	r0, r3
 80094c2:	f002 fb89 	bl	800bbd8 <SDMMC_CmdStopTransfer>
 80094c6:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80094c8:	68bb      	ldr	r3, [r7, #8]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d008      	beq.n	80094e0 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80094d2:	68bb      	ldr	r3, [r7, #8]
 80094d4:	431a      	orrs	r2, r3
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80094da:	68f8      	ldr	r0, [r7, #12]
 80094dc:	f7ff fd58 	bl	8008f90 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	f022 0208 	bic.w	r2, r2, #8
 80094ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	f240 523a 	movw	r2, #1338	; 0x53a
 80094f8:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	2201      	movs	r2, #1
 80094fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	2200      	movs	r2, #0
 8009506:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8009508:	68f8      	ldr	r0, [r7, #12]
 800950a:	f003 ff05 	bl	800d318 <HAL_SD_RxCpltCallback>
#endif
}
 800950e:	bf00      	nop
 8009510:	3710      	adds	r7, #16
 8009512:	46bd      	mov	sp, r7
 8009514:	bd80      	pop	{r7, pc}
	...

08009518 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b086      	sub	sp, #24
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009524:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8009526:	6878      	ldr	r0, [r7, #4]
 8009528:	f7fa f91c 	bl	8003764 <HAL_DMA_GetError>
 800952c:	4603      	mov	r3, r0
 800952e:	2b02      	cmp	r3, #2
 8009530:	d03e      	beq.n	80095b0 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8009532:	697b      	ldr	r3, [r7, #20]
 8009534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009536:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009538:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800953a:	697b      	ldr	r3, [r7, #20]
 800953c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800953e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009540:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8009542:	693b      	ldr	r3, [r7, #16]
 8009544:	2b01      	cmp	r3, #1
 8009546:	d002      	beq.n	800954e <SD_DMAError+0x36>
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	2b01      	cmp	r3, #1
 800954c:	d12d      	bne.n	80095aa <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800954e:	697b      	ldr	r3, [r7, #20]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	4a19      	ldr	r2, [pc, #100]	; (80095b8 <SD_DMAError+0xa0>)
 8009554:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8009556:	697b      	ldr	r3, [r7, #20]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800955c:	697b      	ldr	r3, [r7, #20]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8009564:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8009566:	697b      	ldr	r3, [r7, #20]
 8009568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800956a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800956e:	697b      	ldr	r3, [r7, #20]
 8009570:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8009572:	6978      	ldr	r0, [r7, #20]
 8009574:	f7ff ff62 	bl	800943c <HAL_SD_GetCardState>
 8009578:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800957a:	68bb      	ldr	r3, [r7, #8]
 800957c:	2b06      	cmp	r3, #6
 800957e:	d002      	beq.n	8009586 <SD_DMAError+0x6e>
 8009580:	68bb      	ldr	r3, [r7, #8]
 8009582:	2b05      	cmp	r3, #5
 8009584:	d10a      	bne.n	800959c <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009586:	697b      	ldr	r3, [r7, #20]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	4618      	mov	r0, r3
 800958c:	f002 fb24 	bl	800bbd8 <SDMMC_CmdStopTransfer>
 8009590:	4602      	mov	r2, r0
 8009592:	697b      	ldr	r3, [r7, #20]
 8009594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009596:	431a      	orrs	r2, r3
 8009598:	697b      	ldr	r3, [r7, #20]
 800959a:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800959c:	697b      	ldr	r3, [r7, #20]
 800959e:	2201      	movs	r2, #1
 80095a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80095a4:	697b      	ldr	r3, [r7, #20]
 80095a6:	2200      	movs	r2, #0
 80095a8:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80095aa:	6978      	ldr	r0, [r7, #20]
 80095ac:	f7ff fcf0 	bl	8008f90 <HAL_SD_ErrorCallback>
#endif
  }
}
 80095b0:	bf00      	nop
 80095b2:	3718      	adds	r7, #24
 80095b4:	46bd      	mov	sp, r7
 80095b6:	bd80      	pop	{r7, pc}
 80095b8:	004005ff 	.word	0x004005ff

080095bc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80095bc:	b5b0      	push	{r4, r5, r7, lr}
 80095be:	b094      	sub	sp, #80	; 0x50
 80095c0:	af04      	add	r7, sp, #16
 80095c2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80095c4:	2301      	movs	r3, #1
 80095c6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	4618      	mov	r0, r3
 80095ce:	f002 f9d5 	bl	800b97c <SDMMC_GetPowerState>
 80095d2:	4603      	mov	r3, r0
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d102      	bne.n	80095de <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80095d8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80095dc:	e0b7      	b.n	800974e <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095e2:	2b03      	cmp	r3, #3
 80095e4:	d02f      	beq.n	8009646 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	4618      	mov	r0, r3
 80095ec:	f002 fbff 	bl	800bdee <SDMMC_CmdSendCID>
 80095f0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80095f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d001      	beq.n	80095fc <SD_InitCard+0x40>
    {
      return errorstate;
 80095f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095fa:	e0a8      	b.n	800974e <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	2100      	movs	r1, #0
 8009602:	4618      	mov	r0, r3
 8009604:	f002 f9ff 	bl	800ba06 <SDMMC_GetResponse>
 8009608:	4602      	mov	r2, r0
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	2104      	movs	r1, #4
 8009614:	4618      	mov	r0, r3
 8009616:	f002 f9f6 	bl	800ba06 <SDMMC_GetResponse>
 800961a:	4602      	mov	r2, r0
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	2108      	movs	r1, #8
 8009626:	4618      	mov	r0, r3
 8009628:	f002 f9ed 	bl	800ba06 <SDMMC_GetResponse>
 800962c:	4602      	mov	r2, r0
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	210c      	movs	r1, #12
 8009638:	4618      	mov	r0, r3
 800963a:	f002 f9e4 	bl	800ba06 <SDMMC_GetResponse>
 800963e:	4602      	mov	r2, r0
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800964a:	2b03      	cmp	r3, #3
 800964c:	d00d      	beq.n	800966a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	f107 020e 	add.w	r2, r7, #14
 8009656:	4611      	mov	r1, r2
 8009658:	4618      	mov	r0, r3
 800965a:	f002 fc05 	bl	800be68 <SDMMC_CmdSetRelAdd>
 800965e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009660:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009662:	2b00      	cmp	r3, #0
 8009664:	d001      	beq.n	800966a <SD_InitCard+0xae>
    {
      return errorstate;
 8009666:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009668:	e071      	b.n	800974e <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800966e:	2b03      	cmp	r3, #3
 8009670:	d036      	beq.n	80096e0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009672:	89fb      	ldrh	r3, [r7, #14]
 8009674:	461a      	mov	r2, r3
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681a      	ldr	r2, [r3, #0]
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009682:	041b      	lsls	r3, r3, #16
 8009684:	4619      	mov	r1, r3
 8009686:	4610      	mov	r0, r2
 8009688:	f002 fbcf 	bl	800be2a <SDMMC_CmdSendCSD>
 800968c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800968e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009690:	2b00      	cmp	r3, #0
 8009692:	d001      	beq.n	8009698 <SD_InitCard+0xdc>
    {
      return errorstate;
 8009694:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009696:	e05a      	b.n	800974e <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	2100      	movs	r1, #0
 800969e:	4618      	mov	r0, r3
 80096a0:	f002 f9b1 	bl	800ba06 <SDMMC_GetResponse>
 80096a4:	4602      	mov	r2, r0
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	2104      	movs	r1, #4
 80096b0:	4618      	mov	r0, r3
 80096b2:	f002 f9a8 	bl	800ba06 <SDMMC_GetResponse>
 80096b6:	4602      	mov	r2, r0
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	2108      	movs	r1, #8
 80096c2:	4618      	mov	r0, r3
 80096c4:	f002 f99f 	bl	800ba06 <SDMMC_GetResponse>
 80096c8:	4602      	mov	r2, r0
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	210c      	movs	r1, #12
 80096d4:	4618      	mov	r0, r3
 80096d6:	f002 f996 	bl	800ba06 <SDMMC_GetResponse>
 80096da:	4602      	mov	r2, r0
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	2104      	movs	r1, #4
 80096e6:	4618      	mov	r0, r3
 80096e8:	f002 f98d 	bl	800ba06 <SDMMC_GetResponse>
 80096ec:	4603      	mov	r3, r0
 80096ee:	0d1a      	lsrs	r2, r3, #20
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80096f4:	f107 0310 	add.w	r3, r7, #16
 80096f8:	4619      	mov	r1, r3
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f7ff fc52 	bl	8008fa4 <HAL_SD_GetCardCSD>
 8009700:	4603      	mov	r3, r0
 8009702:	2b00      	cmp	r3, #0
 8009704:	d002      	beq.n	800970c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009706:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800970a:	e020      	b.n	800974e <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	6819      	ldr	r1, [r3, #0]
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009714:	041b      	lsls	r3, r3, #16
 8009716:	f04f 0400 	mov.w	r4, #0
 800971a:	461a      	mov	r2, r3
 800971c:	4623      	mov	r3, r4
 800971e:	4608      	mov	r0, r1
 8009720:	f002 fa7c 	bl	800bc1c <SDMMC_CmdSelDesel>
 8009724:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8009726:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009728:	2b00      	cmp	r3, #0
 800972a:	d001      	beq.n	8009730 <SD_InitCard+0x174>
  {
    return errorstate;
 800972c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800972e:	e00e      	b.n	800974e <SD_InitCard+0x192>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681d      	ldr	r5, [r3, #0]
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	466c      	mov	r4, sp
 8009738:	f103 0210 	add.w	r2, r3, #16
 800973c:	ca07      	ldmia	r2, {r0, r1, r2}
 800973e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009742:	3304      	adds	r3, #4
 8009744:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009746:	4628      	mov	r0, r5
 8009748:	f002 f8d0 	bl	800b8ec <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800974c:	2300      	movs	r3, #0
}
 800974e:	4618      	mov	r0, r3
 8009750:	3740      	adds	r7, #64	; 0x40
 8009752:	46bd      	mov	sp, r7
 8009754:	bdb0      	pop	{r4, r5, r7, pc}
	...

08009758 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b086      	sub	sp, #24
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009760:	2300      	movs	r3, #0
 8009762:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8009764:	2300      	movs	r3, #0
 8009766:	617b      	str	r3, [r7, #20]
 8009768:	2300      	movs	r3, #0
 800976a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	4618      	mov	r0, r3
 8009772:	f002 fa76 	bl	800bc62 <SDMMC_CmdGoIdleState>
 8009776:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d001      	beq.n	8009782 <SD_PowerON+0x2a>
  {
    return errorstate;
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	e072      	b.n	8009868 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	4618      	mov	r0, r3
 8009788:	f002 fa89 	bl	800bc9e <SDMMC_CmdOperCond>
 800978c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d00d      	beq.n	80097b0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2200      	movs	r2, #0
 8009798:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	4618      	mov	r0, r3
 80097a0:	f002 fa5f 	bl	800bc62 <SDMMC_CmdGoIdleState>
 80097a4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d004      	beq.n	80097b6 <SD_PowerON+0x5e>
    {
      return errorstate;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	e05b      	b.n	8009868 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	2201      	movs	r2, #1
 80097b4:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80097ba:	2b01      	cmp	r3, #1
 80097bc:	d137      	bne.n	800982e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	2100      	movs	r1, #0
 80097c4:	4618      	mov	r0, r3
 80097c6:	f002 fa89 	bl	800bcdc <SDMMC_CmdAppCommand>
 80097ca:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d02d      	beq.n	800982e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80097d2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80097d6:	e047      	b.n	8009868 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	2100      	movs	r1, #0
 80097de:	4618      	mov	r0, r3
 80097e0:	f002 fa7c 	bl	800bcdc <SDMMC_CmdAppCommand>
 80097e4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d001      	beq.n	80097f0 <SD_PowerON+0x98>
    {
      return errorstate;
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	e03b      	b.n	8009868 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	491e      	ldr	r1, [pc, #120]	; (8009870 <SD_PowerON+0x118>)
 80097f6:	4618      	mov	r0, r3
 80097f8:	f002 fa92 	bl	800bd20 <SDMMC_CmdAppOperCommand>
 80097fc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d002      	beq.n	800980a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009804:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009808:	e02e      	b.n	8009868 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	2100      	movs	r1, #0
 8009810:	4618      	mov	r0, r3
 8009812:	f002 f8f8 	bl	800ba06 <SDMMC_GetResponse>
 8009816:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009818:	697b      	ldr	r3, [r7, #20]
 800981a:	0fdb      	lsrs	r3, r3, #31
 800981c:	2b01      	cmp	r3, #1
 800981e:	d101      	bne.n	8009824 <SD_PowerON+0xcc>
 8009820:	2301      	movs	r3, #1
 8009822:	e000      	b.n	8009826 <SD_PowerON+0xce>
 8009824:	2300      	movs	r3, #0
 8009826:	613b      	str	r3, [r7, #16]

    count++;
 8009828:	68bb      	ldr	r3, [r7, #8]
 800982a:	3301      	adds	r3, #1
 800982c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800982e:	68bb      	ldr	r3, [r7, #8]
 8009830:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009834:	4293      	cmp	r3, r2
 8009836:	d802      	bhi.n	800983e <SD_PowerON+0xe6>
 8009838:	693b      	ldr	r3, [r7, #16]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d0cc      	beq.n	80097d8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800983e:	68bb      	ldr	r3, [r7, #8]
 8009840:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009844:	4293      	cmp	r3, r2
 8009846:	d902      	bls.n	800984e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009848:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800984c:	e00c      	b.n	8009868 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800984e:	697b      	ldr	r3, [r7, #20]
 8009850:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009854:	2b00      	cmp	r3, #0
 8009856:	d003      	beq.n	8009860 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2201      	movs	r2, #1
 800985c:	645a      	str	r2, [r3, #68]	; 0x44
 800985e:	e002      	b.n	8009866 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2200      	movs	r2, #0
 8009864:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8009866:	2300      	movs	r3, #0
}
 8009868:	4618      	mov	r0, r3
 800986a:	3718      	adds	r7, #24
 800986c:	46bd      	mov	sp, r7
 800986e:	bd80      	pop	{r7, pc}
 8009870:	c1100000 	.word	0xc1100000

08009874 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b084      	sub	sp, #16
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
 800987c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d102      	bne.n	800988a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009884:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009888:	e018      	b.n	80098bc <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681a      	ldr	r2, [r3, #0]
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009892:	041b      	lsls	r3, r3, #16
 8009894:	4619      	mov	r1, r3
 8009896:	4610      	mov	r0, r2
 8009898:	f002 fb07 	bl	800beaa <SDMMC_CmdSendStatus>
 800989c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d001      	beq.n	80098a8 <SD_SendStatus+0x34>
  {
    return errorstate;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	e009      	b.n	80098bc <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	2100      	movs	r1, #0
 80098ae:	4618      	mov	r0, r3
 80098b0:	f002 f8a9 	bl	800ba06 <SDMMC_GetResponse>
 80098b4:	4602      	mov	r2, r0
 80098b6:	683b      	ldr	r3, [r7, #0]
 80098b8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80098ba:	2300      	movs	r3, #0
}
 80098bc:	4618      	mov	r0, r3
 80098be:	3710      	adds	r7, #16
 80098c0:	46bd      	mov	sp, r7
 80098c2:	bd80      	pop	{r7, pc}

080098c4 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b086      	sub	sp, #24
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80098cc:	2300      	movs	r3, #0
 80098ce:	60fb      	str	r3, [r7, #12]
 80098d0:	2300      	movs	r3, #0
 80098d2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	2100      	movs	r1, #0
 80098da:	4618      	mov	r0, r3
 80098dc:	f002 f893 	bl	800ba06 <SDMMC_GetResponse>
 80098e0:	4603      	mov	r3, r0
 80098e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80098e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80098ea:	d102      	bne.n	80098f2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80098ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80098f0:	e02f      	b.n	8009952 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80098f2:	f107 030c 	add.w	r3, r7, #12
 80098f6:	4619      	mov	r1, r3
 80098f8:	6878      	ldr	r0, [r7, #4]
 80098fa:	f000 f879 	bl	80099f0 <SD_FindSCR>
 80098fe:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009900:	697b      	ldr	r3, [r7, #20]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d001      	beq.n	800990a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8009906:	697b      	ldr	r3, [r7, #20]
 8009908:	e023      	b.n	8009952 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800990a:	693b      	ldr	r3, [r7, #16]
 800990c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009910:	2b00      	cmp	r3, #0
 8009912:	d01c      	beq.n	800994e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681a      	ldr	r2, [r3, #0]
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800991c:	041b      	lsls	r3, r3, #16
 800991e:	4619      	mov	r1, r3
 8009920:	4610      	mov	r0, r2
 8009922:	f002 f9db 	bl	800bcdc <SDMMC_CmdAppCommand>
 8009926:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009928:	697b      	ldr	r3, [r7, #20]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d001      	beq.n	8009932 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800992e:	697b      	ldr	r3, [r7, #20]
 8009930:	e00f      	b.n	8009952 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	2102      	movs	r1, #2
 8009938:	4618      	mov	r0, r3
 800993a:	f002 fa15 	bl	800bd68 <SDMMC_CmdBusWidth>
 800993e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009940:	697b      	ldr	r3, [r7, #20]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d001      	beq.n	800994a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8009946:	697b      	ldr	r3, [r7, #20]
 8009948:	e003      	b.n	8009952 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800994a:	2300      	movs	r3, #0
 800994c:	e001      	b.n	8009952 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800994e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009952:	4618      	mov	r0, r3
 8009954:	3718      	adds	r7, #24
 8009956:	46bd      	mov	sp, r7
 8009958:	bd80      	pop	{r7, pc}

0800995a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800995a:	b580      	push	{r7, lr}
 800995c:	b086      	sub	sp, #24
 800995e:	af00      	add	r7, sp, #0
 8009960:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8009962:	2300      	movs	r3, #0
 8009964:	60fb      	str	r3, [r7, #12]
 8009966:	2300      	movs	r3, #0
 8009968:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	2100      	movs	r1, #0
 8009970:	4618      	mov	r0, r3
 8009972:	f002 f848 	bl	800ba06 <SDMMC_GetResponse>
 8009976:	4603      	mov	r3, r0
 8009978:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800997c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009980:	d102      	bne.n	8009988 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009982:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009986:	e02f      	b.n	80099e8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009988:	f107 030c 	add.w	r3, r7, #12
 800998c:	4619      	mov	r1, r3
 800998e:	6878      	ldr	r0, [r7, #4]
 8009990:	f000 f82e 	bl	80099f0 <SD_FindSCR>
 8009994:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009996:	697b      	ldr	r3, [r7, #20]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d001      	beq.n	80099a0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800999c:	697b      	ldr	r3, [r7, #20]
 800999e:	e023      	b.n	80099e8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80099a0:	693b      	ldr	r3, [r7, #16]
 80099a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d01c      	beq.n	80099e4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681a      	ldr	r2, [r3, #0]
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099b2:	041b      	lsls	r3, r3, #16
 80099b4:	4619      	mov	r1, r3
 80099b6:	4610      	mov	r0, r2
 80099b8:	f002 f990 	bl	800bcdc <SDMMC_CmdAppCommand>
 80099bc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80099be:	697b      	ldr	r3, [r7, #20]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d001      	beq.n	80099c8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80099c4:	697b      	ldr	r3, [r7, #20]
 80099c6:	e00f      	b.n	80099e8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	2100      	movs	r1, #0
 80099ce:	4618      	mov	r0, r3
 80099d0:	f002 f9ca 	bl	800bd68 <SDMMC_CmdBusWidth>
 80099d4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80099d6:	697b      	ldr	r3, [r7, #20]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d001      	beq.n	80099e0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80099dc:	697b      	ldr	r3, [r7, #20]
 80099de:	e003      	b.n	80099e8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80099e0:	2300      	movs	r3, #0
 80099e2:	e001      	b.n	80099e8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80099e4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80099e8:	4618      	mov	r0, r3
 80099ea:	3718      	adds	r7, #24
 80099ec:	46bd      	mov	sp, r7
 80099ee:	bd80      	pop	{r7, pc}

080099f0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80099f0:	b590      	push	{r4, r7, lr}
 80099f2:	b08f      	sub	sp, #60	; 0x3c
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
 80099f8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80099fa:	f7f9 f957 	bl	8002cac <HAL_GetTick>
 80099fe:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8009a00:	2300      	movs	r3, #0
 8009a02:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8009a04:	2300      	movs	r3, #0
 8009a06:	60bb      	str	r3, [r7, #8]
 8009a08:	2300      	movs	r3, #0
 8009a0a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	2108      	movs	r1, #8
 8009a16:	4618      	mov	r0, r3
 8009a18:	f002 f834 	bl	800ba84 <SDMMC_CmdBlockLength>
 8009a1c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d001      	beq.n	8009a28 <SD_FindSCR+0x38>
  {
    return errorstate;
 8009a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a26:	e0a9      	b.n	8009b7c <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681a      	ldr	r2, [r3, #0]
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a30:	041b      	lsls	r3, r3, #16
 8009a32:	4619      	mov	r1, r3
 8009a34:	4610      	mov	r0, r2
 8009a36:	f002 f951 	bl	800bcdc <SDMMC_CmdAppCommand>
 8009a3a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d001      	beq.n	8009a46 <SD_FindSCR+0x56>
  {
    return errorstate;
 8009a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a44:	e09a      	b.n	8009b7c <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009a46:	f04f 33ff 	mov.w	r3, #4294967295
 8009a4a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8009a4c:	2308      	movs	r3, #8
 8009a4e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8009a50:	2330      	movs	r3, #48	; 0x30
 8009a52:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009a54:	2302      	movs	r3, #2
 8009a56:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009a58:	2300      	movs	r3, #0
 8009a5a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009a5c:	2301      	movs	r3, #1
 8009a5e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	f107 0210 	add.w	r2, r7, #16
 8009a68:	4611      	mov	r1, r2
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	f001 ffde 	bl	800ba2c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	4618      	mov	r0, r3
 8009a76:	f002 f999 	bl	800bdac <SDMMC_CmdSendSCR>
 8009a7a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d022      	beq.n	8009ac8 <SD_FindSCR+0xd8>
  {
    return errorstate;
 8009a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a84:	e07a      	b.n	8009b7c <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d00e      	beq.n	8009ab2 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	6819      	ldr	r1, [r3, #0]
 8009a98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a9a:	009b      	lsls	r3, r3, #2
 8009a9c:	f107 0208 	add.w	r2, r7, #8
 8009aa0:	18d4      	adds	r4, r2, r3
 8009aa2:	4608      	mov	r0, r1
 8009aa4:	f001 ff4e 	bl	800b944 <SDMMC_ReadFIFO>
 8009aa8:	4603      	mov	r3, r0
 8009aaa:	6023      	str	r3, [r4, #0]
      index++;
 8009aac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009aae:	3301      	adds	r3, #1
 8009ab0:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009ab2:	f7f9 f8fb 	bl	8002cac <HAL_GetTick>
 8009ab6:	4602      	mov	r2, r0
 8009ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aba:	1ad3      	subs	r3, r2, r3
 8009abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ac0:	d102      	bne.n	8009ac8 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009ac2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009ac6:	e059      	b.n	8009b7c <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009ace:	f240 432a 	movw	r3, #1066	; 0x42a
 8009ad2:	4013      	ands	r3, r2
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d0d6      	beq.n	8009a86 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ade:	f003 0308 	and.w	r3, r3, #8
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d005      	beq.n	8009af2 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	2208      	movs	r2, #8
 8009aec:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009aee:	2308      	movs	r3, #8
 8009af0:	e044      	b.n	8009b7c <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009af8:	f003 0302 	and.w	r3, r3, #2
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d005      	beq.n	8009b0c <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	2202      	movs	r2, #2
 8009b06:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009b08:	2302      	movs	r3, #2
 8009b0a:	e037      	b.n	8009b7c <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b12:	f003 0320 	and.w	r3, r3, #32
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d005      	beq.n	8009b26 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	2220      	movs	r2, #32
 8009b20:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8009b22:	2320      	movs	r3, #32
 8009b24:	e02a      	b.n	8009b7c <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	f240 523a 	movw	r2, #1338	; 0x53a
 8009b2e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	061a      	lsls	r2, r3, #24
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	021b      	lsls	r3, r3, #8
 8009b38:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009b3c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	0a1b      	lsrs	r3, r3, #8
 8009b42:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009b46:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	0e1b      	lsrs	r3, r3, #24
 8009b4c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b50:	601a      	str	r2, [r3, #0]
    scr++;
 8009b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b54:	3304      	adds	r3, #4
 8009b56:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009b58:	68bb      	ldr	r3, [r7, #8]
 8009b5a:	061a      	lsls	r2, r3, #24
 8009b5c:	68bb      	ldr	r3, [r7, #8]
 8009b5e:	021b      	lsls	r3, r3, #8
 8009b60:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009b64:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009b66:	68bb      	ldr	r3, [r7, #8]
 8009b68:	0a1b      	lsrs	r3, r3, #8
 8009b6a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009b6e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009b70:	68bb      	ldr	r3, [r7, #8]
 8009b72:	0e1b      	lsrs	r3, r3, #24
 8009b74:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b78:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8009b7a:	2300      	movs	r3, #0
}
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	373c      	adds	r7, #60	; 0x3c
 8009b80:	46bd      	mov	sp, r7
 8009b82:	bd90      	pop	{r4, r7, pc}

08009b84 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b082      	sub	sp, #8
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
 8009b8c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d101      	bne.n	8009b98 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8009b94:	2301      	movs	r3, #1
 8009b96:	e025      	b.n	8009be4 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009b9e:	b2db      	uxtb	r3, r3
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d106      	bne.n	8009bb2 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8009bac:	6878      	ldr	r0, [r7, #4]
 8009bae:	f7f8 fed9 	bl	8002964 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	2202      	movs	r2, #2
 8009bb6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681a      	ldr	r2, [r3, #0]
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	3304      	adds	r3, #4
 8009bc2:	4619      	mov	r1, r3
 8009bc4:	4610      	mov	r0, r2
 8009bc6:	f001 fd9f 	bl	800b708 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	6818      	ldr	r0, [r3, #0]
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	685b      	ldr	r3, [r3, #4]
 8009bd2:	461a      	mov	r2, r3
 8009bd4:	6839      	ldr	r1, [r7, #0]
 8009bd6:	f001 fe09 	bl	800b7ec <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	2201      	movs	r2, #1
 8009bde:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8009be2:	2300      	movs	r3, #0
}
 8009be4:	4618      	mov	r0, r3
 8009be6:	3708      	adds	r7, #8
 8009be8:	46bd      	mov	sp, r7
 8009bea:	bd80      	pop	{r7, pc}

08009bec <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b084      	sub	sp, #16
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d101      	bne.n	8009bfe <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 8009bfa:	2301      	movs	r3, #1
 8009bfc:	e04c      	b.n	8009c98 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009c04:	b2db      	uxtb	r3, r3
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d106      	bne.n	8009c18 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 8009c12:	6878      	ldr	r0, [r7, #4]
 8009c14:	f7f8 fb82 	bl	800231c <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	2202      	movs	r2, #2
 8009c1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	681a      	ldr	r2, [r3, #0]
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	f022 0203 	bic.w	r2, r2, #3
 8009c2e:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 8009c38:	68fa      	ldr	r2, [r7, #12]
 8009c3a:	4b19      	ldr	r3, [pc, #100]	; (8009ca0 <HAL_SPDIFRX_Init+0xb4>)
 8009c3c:	4013      	ands	r3, r2
 8009c3e:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 8009c48:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 8009c4e:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 8009c54:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 8009c5a:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 8009c60:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 8009c66:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 8009c6c:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 8009c72:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 8009c78:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 8009c7a:	68fa      	ldr	r2, [r7, #12]
 8009c7c:	4313      	orrs	r3, r2
 8009c7e:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	68fa      	ldr	r2, [r7, #12]
 8009c86:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	2201      	movs	r2, #1
 8009c92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 8009c96:	2300      	movs	r3, #0
}
 8009c98:	4618      	mov	r0, r3
 8009c9a:	3710      	adds	r7, #16
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	bd80      	pop	{r7, pc}
 8009ca0:	fff88407 	.word	0xfff88407

08009ca4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b084      	sub	sp, #16
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d101      	bne.n	8009cb6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009cb2:	2301      	movs	r3, #1
 8009cb4:	e084      	b.n	8009dc0 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	2200      	movs	r2, #0
 8009cba:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009cc2:	b2db      	uxtb	r3, r3
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d106      	bne.n	8009cd6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	2200      	movs	r2, #0
 8009ccc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009cd0:	6878      	ldr	r0, [r7, #4]
 8009cd2:	f7f8 fb65 	bl	80023a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	2202      	movs	r2, #2
 8009cda:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	681a      	ldr	r2, [r3, #0]
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009cec:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	68db      	ldr	r3, [r3, #12]
 8009cf2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009cf6:	d902      	bls.n	8009cfe <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	60fb      	str	r3, [r7, #12]
 8009cfc:	e002      	b.n	8009d04 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009cfe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009d02:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	68db      	ldr	r3, [r3, #12]
 8009d08:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8009d0c:	d007      	beq.n	8009d1e <HAL_SPI_Init+0x7a>
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	68db      	ldr	r3, [r3, #12]
 8009d12:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009d16:	d002      	beq.n	8009d1e <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d10b      	bne.n	8009d3e <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	68db      	ldr	r3, [r3, #12]
 8009d2a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009d2e:	d903      	bls.n	8009d38 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2202      	movs	r2, #2
 8009d34:	631a      	str	r2, [r3, #48]	; 0x30
 8009d36:	e002      	b.n	8009d3e <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	2201      	movs	r2, #1
 8009d3c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	685a      	ldr	r2, [r3, #4]
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	689b      	ldr	r3, [r3, #8]
 8009d46:	431a      	orrs	r2, r3
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	691b      	ldr	r3, [r3, #16]
 8009d4c:	431a      	orrs	r2, r3
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	695b      	ldr	r3, [r3, #20]
 8009d52:	431a      	orrs	r2, r3
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	699b      	ldr	r3, [r3, #24]
 8009d58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009d5c:	431a      	orrs	r2, r3
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	69db      	ldr	r3, [r3, #28]
 8009d62:	431a      	orrs	r2, r3
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	6a1b      	ldr	r3, [r3, #32]
 8009d68:	ea42 0103 	orr.w	r1, r2, r3
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	430a      	orrs	r2, r1
 8009d76:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	699b      	ldr	r3, [r3, #24]
 8009d7c:	0c1b      	lsrs	r3, r3, #16
 8009d7e:	f003 0204 	and.w	r2, r3, #4
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d86:	431a      	orrs	r2, r3
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d8c:	431a      	orrs	r2, r3
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	68db      	ldr	r3, [r3, #12]
 8009d92:	ea42 0103 	orr.w	r1, r2, r3
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	68fa      	ldr	r2, [r7, #12]
 8009d9c:	430a      	orrs	r2, r1
 8009d9e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	69da      	ldr	r2, [r3, #28]
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009dae:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2200      	movs	r2, #0
 8009db4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	2201      	movs	r2, #1
 8009dba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8009dbe:	2300      	movs	r3, #0
}
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	3710      	adds	r7, #16
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	bd80      	pop	{r7, pc}

08009dc8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b082      	sub	sp, #8
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d101      	bne.n	8009dda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009dd6:	2301      	movs	r3, #1
 8009dd8:	e01d      	b.n	8009e16 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009de0:	b2db      	uxtb	r3, r3
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d106      	bne.n	8009df4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	2200      	movs	r2, #0
 8009dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009dee:	6878      	ldr	r0, [r7, #4]
 8009df0:	f7f8 fb38 	bl	8002464 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2202      	movs	r2, #2
 8009df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681a      	ldr	r2, [r3, #0]
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	3304      	adds	r3, #4
 8009e04:	4619      	mov	r1, r3
 8009e06:	4610      	mov	r0, r2
 8009e08:	f000 fb78 	bl	800a4fc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	2201      	movs	r2, #1
 8009e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009e14:	2300      	movs	r3, #0
}
 8009e16:	4618      	mov	r0, r3
 8009e18:	3708      	adds	r7, #8
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	bd80      	pop	{r7, pc}
	...

08009e20 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009e20:	b480      	push	{r7}
 8009e22:	b085      	sub	sp, #20
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	68da      	ldr	r2, [r3, #12]
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	f042 0201 	orr.w	r2, r2, #1
 8009e36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	689a      	ldr	r2, [r3, #8]
 8009e3e:	4b0c      	ldr	r3, [pc, #48]	; (8009e70 <HAL_TIM_Base_Start_IT+0x50>)
 8009e40:	4013      	ands	r3, r2
 8009e42:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	2b06      	cmp	r3, #6
 8009e48:	d00b      	beq.n	8009e62 <HAL_TIM_Base_Start_IT+0x42>
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e50:	d007      	beq.n	8009e62 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	681a      	ldr	r2, [r3, #0]
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	f042 0201 	orr.w	r2, r2, #1
 8009e60:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009e62:	2300      	movs	r3, #0
}
 8009e64:	4618      	mov	r0, r3
 8009e66:	3714      	adds	r7, #20
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6e:	4770      	bx	lr
 8009e70:	00010007 	.word	0x00010007

08009e74 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b082      	sub	sp, #8
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d101      	bne.n	8009e86 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009e82:	2301      	movs	r3, #1
 8009e84:	e01d      	b.n	8009ec2 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e8c:	b2db      	uxtb	r3, r3
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d106      	bne.n	8009ea0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	2200      	movs	r2, #0
 8009e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009e9a:	6878      	ldr	r0, [r7, #4]
 8009e9c:	f7f8 fb50 	bl	8002540 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	2202      	movs	r2, #2
 8009ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681a      	ldr	r2, [r3, #0]
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	3304      	adds	r3, #4
 8009eb0:	4619      	mov	r1, r3
 8009eb2:	4610      	mov	r0, r2
 8009eb4:	f000 fb22 	bl	800a4fc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2201      	movs	r2, #1
 8009ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009ec0:	2300      	movs	r3, #0
}
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	3708      	adds	r7, #8
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	bd80      	pop	{r7, pc}

08009eca <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009eca:	b580      	push	{r7, lr}
 8009ecc:	b082      	sub	sp, #8
 8009ece:	af00      	add	r7, sp, #0
 8009ed0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	691b      	ldr	r3, [r3, #16]
 8009ed8:	f003 0302 	and.w	r3, r3, #2
 8009edc:	2b02      	cmp	r3, #2
 8009ede:	d122      	bne.n	8009f26 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	68db      	ldr	r3, [r3, #12]
 8009ee6:	f003 0302 	and.w	r3, r3, #2
 8009eea:	2b02      	cmp	r3, #2
 8009eec:	d11b      	bne.n	8009f26 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	f06f 0202 	mvn.w	r2, #2
 8009ef6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	2201      	movs	r2, #1
 8009efc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	699b      	ldr	r3, [r3, #24]
 8009f04:	f003 0303 	and.w	r3, r3, #3
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d003      	beq.n	8009f14 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009f0c:	6878      	ldr	r0, [r7, #4]
 8009f0e:	f000 fad7 	bl	800a4c0 <HAL_TIM_IC_CaptureCallback>
 8009f12:	e005      	b.n	8009f20 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f14:	6878      	ldr	r0, [r7, #4]
 8009f16:	f000 fac9 	bl	800a4ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f1a:	6878      	ldr	r0, [r7, #4]
 8009f1c:	f000 fada 	bl	800a4d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2200      	movs	r2, #0
 8009f24:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	691b      	ldr	r3, [r3, #16]
 8009f2c:	f003 0304 	and.w	r3, r3, #4
 8009f30:	2b04      	cmp	r3, #4
 8009f32:	d122      	bne.n	8009f7a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	68db      	ldr	r3, [r3, #12]
 8009f3a:	f003 0304 	and.w	r3, r3, #4
 8009f3e:	2b04      	cmp	r3, #4
 8009f40:	d11b      	bne.n	8009f7a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	f06f 0204 	mvn.w	r2, #4
 8009f4a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	2202      	movs	r2, #2
 8009f50:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	699b      	ldr	r3, [r3, #24]
 8009f58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d003      	beq.n	8009f68 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009f60:	6878      	ldr	r0, [r7, #4]
 8009f62:	f000 faad 	bl	800a4c0 <HAL_TIM_IC_CaptureCallback>
 8009f66:	e005      	b.n	8009f74 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f68:	6878      	ldr	r0, [r7, #4]
 8009f6a:	f000 fa9f 	bl	800a4ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f6e:	6878      	ldr	r0, [r7, #4]
 8009f70:	f000 fab0 	bl	800a4d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	2200      	movs	r2, #0
 8009f78:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	691b      	ldr	r3, [r3, #16]
 8009f80:	f003 0308 	and.w	r3, r3, #8
 8009f84:	2b08      	cmp	r3, #8
 8009f86:	d122      	bne.n	8009fce <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	68db      	ldr	r3, [r3, #12]
 8009f8e:	f003 0308 	and.w	r3, r3, #8
 8009f92:	2b08      	cmp	r3, #8
 8009f94:	d11b      	bne.n	8009fce <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	f06f 0208 	mvn.w	r2, #8
 8009f9e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	2204      	movs	r2, #4
 8009fa4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	69db      	ldr	r3, [r3, #28]
 8009fac:	f003 0303 	and.w	r3, r3, #3
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d003      	beq.n	8009fbc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009fb4:	6878      	ldr	r0, [r7, #4]
 8009fb6:	f000 fa83 	bl	800a4c0 <HAL_TIM_IC_CaptureCallback>
 8009fba:	e005      	b.n	8009fc8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009fbc:	6878      	ldr	r0, [r7, #4]
 8009fbe:	f000 fa75 	bl	800a4ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009fc2:	6878      	ldr	r0, [r7, #4]
 8009fc4:	f000 fa86 	bl	800a4d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2200      	movs	r2, #0
 8009fcc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	691b      	ldr	r3, [r3, #16]
 8009fd4:	f003 0310 	and.w	r3, r3, #16
 8009fd8:	2b10      	cmp	r3, #16
 8009fda:	d122      	bne.n	800a022 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	68db      	ldr	r3, [r3, #12]
 8009fe2:	f003 0310 	and.w	r3, r3, #16
 8009fe6:	2b10      	cmp	r3, #16
 8009fe8:	d11b      	bne.n	800a022 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	f06f 0210 	mvn.w	r2, #16
 8009ff2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2208      	movs	r2, #8
 8009ff8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	69db      	ldr	r3, [r3, #28]
 800a000:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a004:	2b00      	cmp	r3, #0
 800a006:	d003      	beq.n	800a010 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a008:	6878      	ldr	r0, [r7, #4]
 800a00a:	f000 fa59 	bl	800a4c0 <HAL_TIM_IC_CaptureCallback>
 800a00e:	e005      	b.n	800a01c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a010:	6878      	ldr	r0, [r7, #4]
 800a012:	f000 fa4b 	bl	800a4ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a016:	6878      	ldr	r0, [r7, #4]
 800a018:	f000 fa5c 	bl	800a4d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	2200      	movs	r2, #0
 800a020:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	691b      	ldr	r3, [r3, #16]
 800a028:	f003 0301 	and.w	r3, r3, #1
 800a02c:	2b01      	cmp	r3, #1
 800a02e:	d10e      	bne.n	800a04e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	68db      	ldr	r3, [r3, #12]
 800a036:	f003 0301 	and.w	r3, r3, #1
 800a03a:	2b01      	cmp	r3, #1
 800a03c:	d107      	bne.n	800a04e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	f06f 0201 	mvn.w	r2, #1
 800a046:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a048:	6878      	ldr	r0, [r7, #4]
 800a04a:	f7f7 fce3 	bl	8001a14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	691b      	ldr	r3, [r3, #16]
 800a054:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a058:	2b80      	cmp	r3, #128	; 0x80
 800a05a:	d10e      	bne.n	800a07a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	68db      	ldr	r3, [r3, #12]
 800a062:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a066:	2b80      	cmp	r3, #128	; 0x80
 800a068:	d107      	bne.n	800a07a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a072:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a074:	6878      	ldr	r0, [r7, #4]
 800a076:	f000 feef 	bl	800ae58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	691b      	ldr	r3, [r3, #16]
 800a080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a084:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a088:	d10e      	bne.n	800a0a8 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	68db      	ldr	r3, [r3, #12]
 800a090:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a094:	2b80      	cmp	r3, #128	; 0x80
 800a096:	d107      	bne.n	800a0a8 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a0a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a0a2:	6878      	ldr	r0, [r7, #4]
 800a0a4:	f000 fee2 	bl	800ae6c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	691b      	ldr	r3, [r3, #16]
 800a0ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0b2:	2b40      	cmp	r3, #64	; 0x40
 800a0b4:	d10e      	bne.n	800a0d4 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	68db      	ldr	r3, [r3, #12]
 800a0bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0c0:	2b40      	cmp	r3, #64	; 0x40
 800a0c2:	d107      	bne.n	800a0d4 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a0cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a0ce:	6878      	ldr	r0, [r7, #4]
 800a0d0:	f000 fa0a 	bl	800a4e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	691b      	ldr	r3, [r3, #16]
 800a0da:	f003 0320 	and.w	r3, r3, #32
 800a0de:	2b20      	cmp	r3, #32
 800a0e0:	d10e      	bne.n	800a100 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	68db      	ldr	r3, [r3, #12]
 800a0e8:	f003 0320 	and.w	r3, r3, #32
 800a0ec:	2b20      	cmp	r3, #32
 800a0ee:	d107      	bne.n	800a100 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	f06f 0220 	mvn.w	r2, #32
 800a0f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a0fa:	6878      	ldr	r0, [r7, #4]
 800a0fc:	f000 fea2 	bl	800ae44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a100:	bf00      	nop
 800a102:	3708      	adds	r7, #8
 800a104:	46bd      	mov	sp, r7
 800a106:	bd80      	pop	{r7, pc}

0800a108 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	b084      	sub	sp, #16
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	60f8      	str	r0, [r7, #12]
 800a110:	60b9      	str	r1, [r7, #8]
 800a112:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a11a:	2b01      	cmp	r3, #1
 800a11c:	d101      	bne.n	800a122 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800a11e:	2302      	movs	r3, #2
 800a120:	e105      	b.n	800a32e <HAL_TIM_PWM_ConfigChannel+0x226>
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	2201      	movs	r2, #1
 800a126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	2202      	movs	r2, #2
 800a12e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	2b14      	cmp	r3, #20
 800a136:	f200 80f0 	bhi.w	800a31a <HAL_TIM_PWM_ConfigChannel+0x212>
 800a13a:	a201      	add	r2, pc, #4	; (adr r2, 800a140 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800a13c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a140:	0800a195 	.word	0x0800a195
 800a144:	0800a31b 	.word	0x0800a31b
 800a148:	0800a31b 	.word	0x0800a31b
 800a14c:	0800a31b 	.word	0x0800a31b
 800a150:	0800a1d5 	.word	0x0800a1d5
 800a154:	0800a31b 	.word	0x0800a31b
 800a158:	0800a31b 	.word	0x0800a31b
 800a15c:	0800a31b 	.word	0x0800a31b
 800a160:	0800a217 	.word	0x0800a217
 800a164:	0800a31b 	.word	0x0800a31b
 800a168:	0800a31b 	.word	0x0800a31b
 800a16c:	0800a31b 	.word	0x0800a31b
 800a170:	0800a257 	.word	0x0800a257
 800a174:	0800a31b 	.word	0x0800a31b
 800a178:	0800a31b 	.word	0x0800a31b
 800a17c:	0800a31b 	.word	0x0800a31b
 800a180:	0800a299 	.word	0x0800a299
 800a184:	0800a31b 	.word	0x0800a31b
 800a188:	0800a31b 	.word	0x0800a31b
 800a18c:	0800a31b 	.word	0x0800a31b
 800a190:	0800a2d9 	.word	0x0800a2d9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	68b9      	ldr	r1, [r7, #8]
 800a19a:	4618      	mov	r0, r3
 800a19c:	f000 fa4e 	bl	800a63c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	699a      	ldr	r2, [r3, #24]
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	f042 0208 	orr.w	r2, r2, #8
 800a1ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	699a      	ldr	r2, [r3, #24]
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	f022 0204 	bic.w	r2, r2, #4
 800a1be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	6999      	ldr	r1, [r3, #24]
 800a1c6:	68bb      	ldr	r3, [r7, #8]
 800a1c8:	691a      	ldr	r2, [r3, #16]
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	430a      	orrs	r2, r1
 800a1d0:	619a      	str	r2, [r3, #24]
      break;
 800a1d2:	e0a3      	b.n	800a31c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	68b9      	ldr	r1, [r7, #8]
 800a1da:	4618      	mov	r0, r3
 800a1dc:	f000 faa0 	bl	800a720 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	699a      	ldr	r2, [r3, #24]
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a1ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	699a      	ldr	r2, [r3, #24]
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a1fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	6999      	ldr	r1, [r3, #24]
 800a206:	68bb      	ldr	r3, [r7, #8]
 800a208:	691b      	ldr	r3, [r3, #16]
 800a20a:	021a      	lsls	r2, r3, #8
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	430a      	orrs	r2, r1
 800a212:	619a      	str	r2, [r3, #24]
      break;
 800a214:	e082      	b.n	800a31c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	68b9      	ldr	r1, [r7, #8]
 800a21c:	4618      	mov	r0, r3
 800a21e:	f000 faf7 	bl	800a810 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	69da      	ldr	r2, [r3, #28]
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	f042 0208 	orr.w	r2, r2, #8
 800a230:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	69da      	ldr	r2, [r3, #28]
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	f022 0204 	bic.w	r2, r2, #4
 800a240:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	69d9      	ldr	r1, [r3, #28]
 800a248:	68bb      	ldr	r3, [r7, #8]
 800a24a:	691a      	ldr	r2, [r3, #16]
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	430a      	orrs	r2, r1
 800a252:	61da      	str	r2, [r3, #28]
      break;
 800a254:	e062      	b.n	800a31c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	68b9      	ldr	r1, [r7, #8]
 800a25c:	4618      	mov	r0, r3
 800a25e:	f000 fb4d 	bl	800a8fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	69da      	ldr	r2, [r3, #28]
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a270:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	69da      	ldr	r2, [r3, #28]
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a280:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	69d9      	ldr	r1, [r3, #28]
 800a288:	68bb      	ldr	r3, [r7, #8]
 800a28a:	691b      	ldr	r3, [r3, #16]
 800a28c:	021a      	lsls	r2, r3, #8
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	430a      	orrs	r2, r1
 800a294:	61da      	str	r2, [r3, #28]
      break;
 800a296:	e041      	b.n	800a31c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	68b9      	ldr	r1, [r7, #8]
 800a29e:	4618      	mov	r0, r3
 800a2a0:	f000 fb84 	bl	800a9ac <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	f042 0208 	orr.w	r2, r2, #8
 800a2b2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	f022 0204 	bic.w	r2, r2, #4
 800a2c2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a2ca:	68bb      	ldr	r3, [r7, #8]
 800a2cc:	691a      	ldr	r2, [r3, #16]
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	430a      	orrs	r2, r1
 800a2d4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a2d6:	e021      	b.n	800a31c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	68b9      	ldr	r1, [r7, #8]
 800a2de:	4618      	mov	r0, r3
 800a2e0:	f000 fbb6 	bl	800aa50 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a2f2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a302:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a30a:	68bb      	ldr	r3, [r7, #8]
 800a30c:	691b      	ldr	r3, [r3, #16]
 800a30e:	021a      	lsls	r2, r3, #8
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	430a      	orrs	r2, r1
 800a316:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a318:	e000      	b.n	800a31c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800a31a:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	2201      	movs	r2, #1
 800a320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	2200      	movs	r2, #0
 800a328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a32c:	2300      	movs	r3, #0
}
 800a32e:	4618      	mov	r0, r3
 800a330:	3710      	adds	r7, #16
 800a332:	46bd      	mov	sp, r7
 800a334:	bd80      	pop	{r7, pc}
 800a336:	bf00      	nop

0800a338 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b084      	sub	sp, #16
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
 800a340:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a348:	2b01      	cmp	r3, #1
 800a34a:	d101      	bne.n	800a350 <HAL_TIM_ConfigClockSource+0x18>
 800a34c:	2302      	movs	r3, #2
 800a34e:	e0a6      	b.n	800a49e <HAL_TIM_ConfigClockSource+0x166>
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	2201      	movs	r2, #1
 800a354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	2202      	movs	r2, #2
 800a35c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	689b      	ldr	r3, [r3, #8]
 800a366:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a368:	68fa      	ldr	r2, [r7, #12]
 800a36a:	4b4f      	ldr	r3, [pc, #316]	; (800a4a8 <HAL_TIM_ConfigClockSource+0x170>)
 800a36c:	4013      	ands	r3, r2
 800a36e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a376:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	68fa      	ldr	r2, [r7, #12]
 800a37e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a380:	683b      	ldr	r3, [r7, #0]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	2b40      	cmp	r3, #64	; 0x40
 800a386:	d067      	beq.n	800a458 <HAL_TIM_ConfigClockSource+0x120>
 800a388:	2b40      	cmp	r3, #64	; 0x40
 800a38a:	d80b      	bhi.n	800a3a4 <HAL_TIM_ConfigClockSource+0x6c>
 800a38c:	2b10      	cmp	r3, #16
 800a38e:	d073      	beq.n	800a478 <HAL_TIM_ConfigClockSource+0x140>
 800a390:	2b10      	cmp	r3, #16
 800a392:	d802      	bhi.n	800a39a <HAL_TIM_ConfigClockSource+0x62>
 800a394:	2b00      	cmp	r3, #0
 800a396:	d06f      	beq.n	800a478 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800a398:	e078      	b.n	800a48c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800a39a:	2b20      	cmp	r3, #32
 800a39c:	d06c      	beq.n	800a478 <HAL_TIM_ConfigClockSource+0x140>
 800a39e:	2b30      	cmp	r3, #48	; 0x30
 800a3a0:	d06a      	beq.n	800a478 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800a3a2:	e073      	b.n	800a48c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800a3a4:	2b70      	cmp	r3, #112	; 0x70
 800a3a6:	d00d      	beq.n	800a3c4 <HAL_TIM_ConfigClockSource+0x8c>
 800a3a8:	2b70      	cmp	r3, #112	; 0x70
 800a3aa:	d804      	bhi.n	800a3b6 <HAL_TIM_ConfigClockSource+0x7e>
 800a3ac:	2b50      	cmp	r3, #80	; 0x50
 800a3ae:	d033      	beq.n	800a418 <HAL_TIM_ConfigClockSource+0xe0>
 800a3b0:	2b60      	cmp	r3, #96	; 0x60
 800a3b2:	d041      	beq.n	800a438 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800a3b4:	e06a      	b.n	800a48c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800a3b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a3ba:	d066      	beq.n	800a48a <HAL_TIM_ConfigClockSource+0x152>
 800a3bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a3c0:	d017      	beq.n	800a3f2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 800a3c2:	e063      	b.n	800a48c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	6818      	ldr	r0, [r3, #0]
 800a3c8:	683b      	ldr	r3, [r7, #0]
 800a3ca:	6899      	ldr	r1, [r3, #8]
 800a3cc:	683b      	ldr	r3, [r7, #0]
 800a3ce:	685a      	ldr	r2, [r3, #4]
 800a3d0:	683b      	ldr	r3, [r7, #0]
 800a3d2:	68db      	ldr	r3, [r3, #12]
 800a3d4:	f000 fc0a 	bl	800abec <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	689b      	ldr	r3, [r3, #8]
 800a3de:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a3e6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	68fa      	ldr	r2, [r7, #12]
 800a3ee:	609a      	str	r2, [r3, #8]
      break;
 800a3f0:	e04c      	b.n	800a48c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	6818      	ldr	r0, [r3, #0]
 800a3f6:	683b      	ldr	r3, [r7, #0]
 800a3f8:	6899      	ldr	r1, [r3, #8]
 800a3fa:	683b      	ldr	r3, [r7, #0]
 800a3fc:	685a      	ldr	r2, [r3, #4]
 800a3fe:	683b      	ldr	r3, [r7, #0]
 800a400:	68db      	ldr	r3, [r3, #12]
 800a402:	f000 fbf3 	bl	800abec <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	689a      	ldr	r2, [r3, #8]
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a414:	609a      	str	r2, [r3, #8]
      break;
 800a416:	e039      	b.n	800a48c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	6818      	ldr	r0, [r3, #0]
 800a41c:	683b      	ldr	r3, [r7, #0]
 800a41e:	6859      	ldr	r1, [r3, #4]
 800a420:	683b      	ldr	r3, [r7, #0]
 800a422:	68db      	ldr	r3, [r3, #12]
 800a424:	461a      	mov	r2, r3
 800a426:	f000 fb67 	bl	800aaf8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	2150      	movs	r1, #80	; 0x50
 800a430:	4618      	mov	r0, r3
 800a432:	f000 fbc0 	bl	800abb6 <TIM_ITRx_SetConfig>
      break;
 800a436:	e029      	b.n	800a48c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	6818      	ldr	r0, [r3, #0]
 800a43c:	683b      	ldr	r3, [r7, #0]
 800a43e:	6859      	ldr	r1, [r3, #4]
 800a440:	683b      	ldr	r3, [r7, #0]
 800a442:	68db      	ldr	r3, [r3, #12]
 800a444:	461a      	mov	r2, r3
 800a446:	f000 fb86 	bl	800ab56 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	2160      	movs	r1, #96	; 0x60
 800a450:	4618      	mov	r0, r3
 800a452:	f000 fbb0 	bl	800abb6 <TIM_ITRx_SetConfig>
      break;
 800a456:	e019      	b.n	800a48c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	6818      	ldr	r0, [r3, #0]
 800a45c:	683b      	ldr	r3, [r7, #0]
 800a45e:	6859      	ldr	r1, [r3, #4]
 800a460:	683b      	ldr	r3, [r7, #0]
 800a462:	68db      	ldr	r3, [r3, #12]
 800a464:	461a      	mov	r2, r3
 800a466:	f000 fb47 	bl	800aaf8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	2140      	movs	r1, #64	; 0x40
 800a470:	4618      	mov	r0, r3
 800a472:	f000 fba0 	bl	800abb6 <TIM_ITRx_SetConfig>
      break;
 800a476:	e009      	b.n	800a48c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681a      	ldr	r2, [r3, #0]
 800a47c:	683b      	ldr	r3, [r7, #0]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	4619      	mov	r1, r3
 800a482:	4610      	mov	r0, r2
 800a484:	f000 fb97 	bl	800abb6 <TIM_ITRx_SetConfig>
      break;
 800a488:	e000      	b.n	800a48c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800a48a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2201      	movs	r2, #1
 800a490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	2200      	movs	r2, #0
 800a498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a49c:	2300      	movs	r3, #0
}
 800a49e:	4618      	mov	r0, r3
 800a4a0:	3710      	adds	r7, #16
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	bd80      	pop	{r7, pc}
 800a4a6:	bf00      	nop
 800a4a8:	fffeff88 	.word	0xfffeff88

0800a4ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a4ac:	b480      	push	{r7}
 800a4ae:	b083      	sub	sp, #12
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a4b4:	bf00      	nop
 800a4b6:	370c      	adds	r7, #12
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4be:	4770      	bx	lr

0800a4c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a4c0:	b480      	push	{r7}
 800a4c2:	b083      	sub	sp, #12
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a4c8:	bf00      	nop
 800a4ca:	370c      	adds	r7, #12
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d2:	4770      	bx	lr

0800a4d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a4d4:	b480      	push	{r7}
 800a4d6:	b083      	sub	sp, #12
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a4dc:	bf00      	nop
 800a4de:	370c      	adds	r7, #12
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e6:	4770      	bx	lr

0800a4e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a4e8:	b480      	push	{r7}
 800a4ea:	b083      	sub	sp, #12
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a4f0:	bf00      	nop
 800a4f2:	370c      	adds	r7, #12
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fa:	4770      	bx	lr

0800a4fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a4fc:	b480      	push	{r7}
 800a4fe:	b085      	sub	sp, #20
 800a500:	af00      	add	r7, sp, #0
 800a502:	6078      	str	r0, [r7, #4]
 800a504:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	4a40      	ldr	r2, [pc, #256]	; (800a610 <TIM_Base_SetConfig+0x114>)
 800a510:	4293      	cmp	r3, r2
 800a512:	d013      	beq.n	800a53c <TIM_Base_SetConfig+0x40>
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a51a:	d00f      	beq.n	800a53c <TIM_Base_SetConfig+0x40>
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	4a3d      	ldr	r2, [pc, #244]	; (800a614 <TIM_Base_SetConfig+0x118>)
 800a520:	4293      	cmp	r3, r2
 800a522:	d00b      	beq.n	800a53c <TIM_Base_SetConfig+0x40>
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	4a3c      	ldr	r2, [pc, #240]	; (800a618 <TIM_Base_SetConfig+0x11c>)
 800a528:	4293      	cmp	r3, r2
 800a52a:	d007      	beq.n	800a53c <TIM_Base_SetConfig+0x40>
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	4a3b      	ldr	r2, [pc, #236]	; (800a61c <TIM_Base_SetConfig+0x120>)
 800a530:	4293      	cmp	r3, r2
 800a532:	d003      	beq.n	800a53c <TIM_Base_SetConfig+0x40>
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	4a3a      	ldr	r2, [pc, #232]	; (800a620 <TIM_Base_SetConfig+0x124>)
 800a538:	4293      	cmp	r3, r2
 800a53a:	d108      	bne.n	800a54e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a542:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a544:	683b      	ldr	r3, [r7, #0]
 800a546:	685b      	ldr	r3, [r3, #4]
 800a548:	68fa      	ldr	r2, [r7, #12]
 800a54a:	4313      	orrs	r3, r2
 800a54c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	4a2f      	ldr	r2, [pc, #188]	; (800a610 <TIM_Base_SetConfig+0x114>)
 800a552:	4293      	cmp	r3, r2
 800a554:	d02b      	beq.n	800a5ae <TIM_Base_SetConfig+0xb2>
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a55c:	d027      	beq.n	800a5ae <TIM_Base_SetConfig+0xb2>
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	4a2c      	ldr	r2, [pc, #176]	; (800a614 <TIM_Base_SetConfig+0x118>)
 800a562:	4293      	cmp	r3, r2
 800a564:	d023      	beq.n	800a5ae <TIM_Base_SetConfig+0xb2>
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	4a2b      	ldr	r2, [pc, #172]	; (800a618 <TIM_Base_SetConfig+0x11c>)
 800a56a:	4293      	cmp	r3, r2
 800a56c:	d01f      	beq.n	800a5ae <TIM_Base_SetConfig+0xb2>
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	4a2a      	ldr	r2, [pc, #168]	; (800a61c <TIM_Base_SetConfig+0x120>)
 800a572:	4293      	cmp	r3, r2
 800a574:	d01b      	beq.n	800a5ae <TIM_Base_SetConfig+0xb2>
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	4a29      	ldr	r2, [pc, #164]	; (800a620 <TIM_Base_SetConfig+0x124>)
 800a57a:	4293      	cmp	r3, r2
 800a57c:	d017      	beq.n	800a5ae <TIM_Base_SetConfig+0xb2>
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	4a28      	ldr	r2, [pc, #160]	; (800a624 <TIM_Base_SetConfig+0x128>)
 800a582:	4293      	cmp	r3, r2
 800a584:	d013      	beq.n	800a5ae <TIM_Base_SetConfig+0xb2>
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	4a27      	ldr	r2, [pc, #156]	; (800a628 <TIM_Base_SetConfig+0x12c>)
 800a58a:	4293      	cmp	r3, r2
 800a58c:	d00f      	beq.n	800a5ae <TIM_Base_SetConfig+0xb2>
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	4a26      	ldr	r2, [pc, #152]	; (800a62c <TIM_Base_SetConfig+0x130>)
 800a592:	4293      	cmp	r3, r2
 800a594:	d00b      	beq.n	800a5ae <TIM_Base_SetConfig+0xb2>
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	4a25      	ldr	r2, [pc, #148]	; (800a630 <TIM_Base_SetConfig+0x134>)
 800a59a:	4293      	cmp	r3, r2
 800a59c:	d007      	beq.n	800a5ae <TIM_Base_SetConfig+0xb2>
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	4a24      	ldr	r2, [pc, #144]	; (800a634 <TIM_Base_SetConfig+0x138>)
 800a5a2:	4293      	cmp	r3, r2
 800a5a4:	d003      	beq.n	800a5ae <TIM_Base_SetConfig+0xb2>
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	4a23      	ldr	r2, [pc, #140]	; (800a638 <TIM_Base_SetConfig+0x13c>)
 800a5aa:	4293      	cmp	r3, r2
 800a5ac:	d108      	bne.n	800a5c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a5b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a5b6:	683b      	ldr	r3, [r7, #0]
 800a5b8:	68db      	ldr	r3, [r3, #12]
 800a5ba:	68fa      	ldr	r2, [r7, #12]
 800a5bc:	4313      	orrs	r3, r2
 800a5be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a5c6:	683b      	ldr	r3, [r7, #0]
 800a5c8:	695b      	ldr	r3, [r3, #20]
 800a5ca:	4313      	orrs	r3, r2
 800a5cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	68fa      	ldr	r2, [r7, #12]
 800a5d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a5d4:	683b      	ldr	r3, [r7, #0]
 800a5d6:	689a      	ldr	r2, [r3, #8]
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a5dc:	683b      	ldr	r3, [r7, #0]
 800a5de:	681a      	ldr	r2, [r3, #0]
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	4a0a      	ldr	r2, [pc, #40]	; (800a610 <TIM_Base_SetConfig+0x114>)
 800a5e8:	4293      	cmp	r3, r2
 800a5ea:	d003      	beq.n	800a5f4 <TIM_Base_SetConfig+0xf8>
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	4a0c      	ldr	r2, [pc, #48]	; (800a620 <TIM_Base_SetConfig+0x124>)
 800a5f0:	4293      	cmp	r3, r2
 800a5f2:	d103      	bne.n	800a5fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a5f4:	683b      	ldr	r3, [r7, #0]
 800a5f6:	691a      	ldr	r2, [r3, #16]
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	2201      	movs	r2, #1
 800a600:	615a      	str	r2, [r3, #20]
}
 800a602:	bf00      	nop
 800a604:	3714      	adds	r7, #20
 800a606:	46bd      	mov	sp, r7
 800a608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60c:	4770      	bx	lr
 800a60e:	bf00      	nop
 800a610:	40010000 	.word	0x40010000
 800a614:	40000400 	.word	0x40000400
 800a618:	40000800 	.word	0x40000800
 800a61c:	40000c00 	.word	0x40000c00
 800a620:	40010400 	.word	0x40010400
 800a624:	40014000 	.word	0x40014000
 800a628:	40014400 	.word	0x40014400
 800a62c:	40014800 	.word	0x40014800
 800a630:	40001800 	.word	0x40001800
 800a634:	40001c00 	.word	0x40001c00
 800a638:	40002000 	.word	0x40002000

0800a63c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a63c:	b480      	push	{r7}
 800a63e:	b087      	sub	sp, #28
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
 800a644:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	6a1b      	ldr	r3, [r3, #32]
 800a64a:	f023 0201 	bic.w	r2, r3, #1
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	6a1b      	ldr	r3, [r3, #32]
 800a656:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	685b      	ldr	r3, [r3, #4]
 800a65c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	699b      	ldr	r3, [r3, #24]
 800a662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a664:	68fa      	ldr	r2, [r7, #12]
 800a666:	4b2b      	ldr	r3, [pc, #172]	; (800a714 <TIM_OC1_SetConfig+0xd8>)
 800a668:	4013      	ands	r3, r2
 800a66a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	f023 0303 	bic.w	r3, r3, #3
 800a672:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a674:	683b      	ldr	r3, [r7, #0]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	68fa      	ldr	r2, [r7, #12]
 800a67a:	4313      	orrs	r3, r2
 800a67c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a67e:	697b      	ldr	r3, [r7, #20]
 800a680:	f023 0302 	bic.w	r3, r3, #2
 800a684:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a686:	683b      	ldr	r3, [r7, #0]
 800a688:	689b      	ldr	r3, [r3, #8]
 800a68a:	697a      	ldr	r2, [r7, #20]
 800a68c:	4313      	orrs	r3, r2
 800a68e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	4a21      	ldr	r2, [pc, #132]	; (800a718 <TIM_OC1_SetConfig+0xdc>)
 800a694:	4293      	cmp	r3, r2
 800a696:	d003      	beq.n	800a6a0 <TIM_OC1_SetConfig+0x64>
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	4a20      	ldr	r2, [pc, #128]	; (800a71c <TIM_OC1_SetConfig+0xe0>)
 800a69c:	4293      	cmp	r3, r2
 800a69e:	d10c      	bne.n	800a6ba <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a6a0:	697b      	ldr	r3, [r7, #20]
 800a6a2:	f023 0308 	bic.w	r3, r3, #8
 800a6a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a6a8:	683b      	ldr	r3, [r7, #0]
 800a6aa:	68db      	ldr	r3, [r3, #12]
 800a6ac:	697a      	ldr	r2, [r7, #20]
 800a6ae:	4313      	orrs	r3, r2
 800a6b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a6b2:	697b      	ldr	r3, [r7, #20]
 800a6b4:	f023 0304 	bic.w	r3, r3, #4
 800a6b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	4a16      	ldr	r2, [pc, #88]	; (800a718 <TIM_OC1_SetConfig+0xdc>)
 800a6be:	4293      	cmp	r3, r2
 800a6c0:	d003      	beq.n	800a6ca <TIM_OC1_SetConfig+0x8e>
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	4a15      	ldr	r2, [pc, #84]	; (800a71c <TIM_OC1_SetConfig+0xe0>)
 800a6c6:	4293      	cmp	r3, r2
 800a6c8:	d111      	bne.n	800a6ee <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a6ca:	693b      	ldr	r3, [r7, #16]
 800a6cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a6d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a6d2:	693b      	ldr	r3, [r7, #16]
 800a6d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a6d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a6da:	683b      	ldr	r3, [r7, #0]
 800a6dc:	695b      	ldr	r3, [r3, #20]
 800a6de:	693a      	ldr	r2, [r7, #16]
 800a6e0:	4313      	orrs	r3, r2
 800a6e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a6e4:	683b      	ldr	r3, [r7, #0]
 800a6e6:	699b      	ldr	r3, [r3, #24]
 800a6e8:	693a      	ldr	r2, [r7, #16]
 800a6ea:	4313      	orrs	r3, r2
 800a6ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	693a      	ldr	r2, [r7, #16]
 800a6f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	68fa      	ldr	r2, [r7, #12]
 800a6f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a6fa:	683b      	ldr	r3, [r7, #0]
 800a6fc:	685a      	ldr	r2, [r3, #4]
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	697a      	ldr	r2, [r7, #20]
 800a706:	621a      	str	r2, [r3, #32]
}
 800a708:	bf00      	nop
 800a70a:	371c      	adds	r7, #28
 800a70c:	46bd      	mov	sp, r7
 800a70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a712:	4770      	bx	lr
 800a714:	fffeff8f 	.word	0xfffeff8f
 800a718:	40010000 	.word	0x40010000
 800a71c:	40010400 	.word	0x40010400

0800a720 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a720:	b480      	push	{r7}
 800a722:	b087      	sub	sp, #28
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]
 800a728:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	6a1b      	ldr	r3, [r3, #32]
 800a72e:	f023 0210 	bic.w	r2, r3, #16
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	6a1b      	ldr	r3, [r3, #32]
 800a73a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	685b      	ldr	r3, [r3, #4]
 800a740:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	699b      	ldr	r3, [r3, #24]
 800a746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a748:	68fa      	ldr	r2, [r7, #12]
 800a74a:	4b2e      	ldr	r3, [pc, #184]	; (800a804 <TIM_OC2_SetConfig+0xe4>)
 800a74c:	4013      	ands	r3, r2
 800a74e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a756:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a758:	683b      	ldr	r3, [r7, #0]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	021b      	lsls	r3, r3, #8
 800a75e:	68fa      	ldr	r2, [r7, #12]
 800a760:	4313      	orrs	r3, r2
 800a762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a764:	697b      	ldr	r3, [r7, #20]
 800a766:	f023 0320 	bic.w	r3, r3, #32
 800a76a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a76c:	683b      	ldr	r3, [r7, #0]
 800a76e:	689b      	ldr	r3, [r3, #8]
 800a770:	011b      	lsls	r3, r3, #4
 800a772:	697a      	ldr	r2, [r7, #20]
 800a774:	4313      	orrs	r3, r2
 800a776:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	4a23      	ldr	r2, [pc, #140]	; (800a808 <TIM_OC2_SetConfig+0xe8>)
 800a77c:	4293      	cmp	r3, r2
 800a77e:	d003      	beq.n	800a788 <TIM_OC2_SetConfig+0x68>
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	4a22      	ldr	r2, [pc, #136]	; (800a80c <TIM_OC2_SetConfig+0xec>)
 800a784:	4293      	cmp	r3, r2
 800a786:	d10d      	bne.n	800a7a4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a788:	697b      	ldr	r3, [r7, #20]
 800a78a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a78e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a790:	683b      	ldr	r3, [r7, #0]
 800a792:	68db      	ldr	r3, [r3, #12]
 800a794:	011b      	lsls	r3, r3, #4
 800a796:	697a      	ldr	r2, [r7, #20]
 800a798:	4313      	orrs	r3, r2
 800a79a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a79c:	697b      	ldr	r3, [r7, #20]
 800a79e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a7a2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	4a18      	ldr	r2, [pc, #96]	; (800a808 <TIM_OC2_SetConfig+0xe8>)
 800a7a8:	4293      	cmp	r3, r2
 800a7aa:	d003      	beq.n	800a7b4 <TIM_OC2_SetConfig+0x94>
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	4a17      	ldr	r2, [pc, #92]	; (800a80c <TIM_OC2_SetConfig+0xec>)
 800a7b0:	4293      	cmp	r3, r2
 800a7b2:	d113      	bne.n	800a7dc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a7b4:	693b      	ldr	r3, [r7, #16]
 800a7b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a7ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a7bc:	693b      	ldr	r3, [r7, #16]
 800a7be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a7c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a7c4:	683b      	ldr	r3, [r7, #0]
 800a7c6:	695b      	ldr	r3, [r3, #20]
 800a7c8:	009b      	lsls	r3, r3, #2
 800a7ca:	693a      	ldr	r2, [r7, #16]
 800a7cc:	4313      	orrs	r3, r2
 800a7ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a7d0:	683b      	ldr	r3, [r7, #0]
 800a7d2:	699b      	ldr	r3, [r3, #24]
 800a7d4:	009b      	lsls	r3, r3, #2
 800a7d6:	693a      	ldr	r2, [r7, #16]
 800a7d8:	4313      	orrs	r3, r2
 800a7da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	693a      	ldr	r2, [r7, #16]
 800a7e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	68fa      	ldr	r2, [r7, #12]
 800a7e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a7e8:	683b      	ldr	r3, [r7, #0]
 800a7ea:	685a      	ldr	r2, [r3, #4]
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	697a      	ldr	r2, [r7, #20]
 800a7f4:	621a      	str	r2, [r3, #32]
}
 800a7f6:	bf00      	nop
 800a7f8:	371c      	adds	r7, #28
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a800:	4770      	bx	lr
 800a802:	bf00      	nop
 800a804:	feff8fff 	.word	0xfeff8fff
 800a808:	40010000 	.word	0x40010000
 800a80c:	40010400 	.word	0x40010400

0800a810 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a810:	b480      	push	{r7}
 800a812:	b087      	sub	sp, #28
 800a814:	af00      	add	r7, sp, #0
 800a816:	6078      	str	r0, [r7, #4]
 800a818:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	6a1b      	ldr	r3, [r3, #32]
 800a81e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	6a1b      	ldr	r3, [r3, #32]
 800a82a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	685b      	ldr	r3, [r3, #4]
 800a830:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	69db      	ldr	r3, [r3, #28]
 800a836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a838:	68fa      	ldr	r2, [r7, #12]
 800a83a:	4b2d      	ldr	r3, [pc, #180]	; (800a8f0 <TIM_OC3_SetConfig+0xe0>)
 800a83c:	4013      	ands	r3, r2
 800a83e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	f023 0303 	bic.w	r3, r3, #3
 800a846:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a848:	683b      	ldr	r3, [r7, #0]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	68fa      	ldr	r2, [r7, #12]
 800a84e:	4313      	orrs	r3, r2
 800a850:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a852:	697b      	ldr	r3, [r7, #20]
 800a854:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a858:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a85a:	683b      	ldr	r3, [r7, #0]
 800a85c:	689b      	ldr	r3, [r3, #8]
 800a85e:	021b      	lsls	r3, r3, #8
 800a860:	697a      	ldr	r2, [r7, #20]
 800a862:	4313      	orrs	r3, r2
 800a864:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	4a22      	ldr	r2, [pc, #136]	; (800a8f4 <TIM_OC3_SetConfig+0xe4>)
 800a86a:	4293      	cmp	r3, r2
 800a86c:	d003      	beq.n	800a876 <TIM_OC3_SetConfig+0x66>
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	4a21      	ldr	r2, [pc, #132]	; (800a8f8 <TIM_OC3_SetConfig+0xe8>)
 800a872:	4293      	cmp	r3, r2
 800a874:	d10d      	bne.n	800a892 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a876:	697b      	ldr	r3, [r7, #20]
 800a878:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a87c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a87e:	683b      	ldr	r3, [r7, #0]
 800a880:	68db      	ldr	r3, [r3, #12]
 800a882:	021b      	lsls	r3, r3, #8
 800a884:	697a      	ldr	r2, [r7, #20]
 800a886:	4313      	orrs	r3, r2
 800a888:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a88a:	697b      	ldr	r3, [r7, #20]
 800a88c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a890:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	4a17      	ldr	r2, [pc, #92]	; (800a8f4 <TIM_OC3_SetConfig+0xe4>)
 800a896:	4293      	cmp	r3, r2
 800a898:	d003      	beq.n	800a8a2 <TIM_OC3_SetConfig+0x92>
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	4a16      	ldr	r2, [pc, #88]	; (800a8f8 <TIM_OC3_SetConfig+0xe8>)
 800a89e:	4293      	cmp	r3, r2
 800a8a0:	d113      	bne.n	800a8ca <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a8a2:	693b      	ldr	r3, [r7, #16]
 800a8a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a8a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a8aa:	693b      	ldr	r3, [r7, #16]
 800a8ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a8b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a8b2:	683b      	ldr	r3, [r7, #0]
 800a8b4:	695b      	ldr	r3, [r3, #20]
 800a8b6:	011b      	lsls	r3, r3, #4
 800a8b8:	693a      	ldr	r2, [r7, #16]
 800a8ba:	4313      	orrs	r3, r2
 800a8bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a8be:	683b      	ldr	r3, [r7, #0]
 800a8c0:	699b      	ldr	r3, [r3, #24]
 800a8c2:	011b      	lsls	r3, r3, #4
 800a8c4:	693a      	ldr	r2, [r7, #16]
 800a8c6:	4313      	orrs	r3, r2
 800a8c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	693a      	ldr	r2, [r7, #16]
 800a8ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	68fa      	ldr	r2, [r7, #12]
 800a8d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a8d6:	683b      	ldr	r3, [r7, #0]
 800a8d8:	685a      	ldr	r2, [r3, #4]
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	697a      	ldr	r2, [r7, #20]
 800a8e2:	621a      	str	r2, [r3, #32]
}
 800a8e4:	bf00      	nop
 800a8e6:	371c      	adds	r7, #28
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ee:	4770      	bx	lr
 800a8f0:	fffeff8f 	.word	0xfffeff8f
 800a8f4:	40010000 	.word	0x40010000
 800a8f8:	40010400 	.word	0x40010400

0800a8fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a8fc:	b480      	push	{r7}
 800a8fe:	b087      	sub	sp, #28
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
 800a904:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	6a1b      	ldr	r3, [r3, #32]
 800a90a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	6a1b      	ldr	r3, [r3, #32]
 800a916:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	685b      	ldr	r3, [r3, #4]
 800a91c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	69db      	ldr	r3, [r3, #28]
 800a922:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a924:	68fa      	ldr	r2, [r7, #12]
 800a926:	4b1e      	ldr	r3, [pc, #120]	; (800a9a0 <TIM_OC4_SetConfig+0xa4>)
 800a928:	4013      	ands	r3, r2
 800a92a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a932:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a934:	683b      	ldr	r3, [r7, #0]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	021b      	lsls	r3, r3, #8
 800a93a:	68fa      	ldr	r2, [r7, #12]
 800a93c:	4313      	orrs	r3, r2
 800a93e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a940:	693b      	ldr	r3, [r7, #16]
 800a942:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a946:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a948:	683b      	ldr	r3, [r7, #0]
 800a94a:	689b      	ldr	r3, [r3, #8]
 800a94c:	031b      	lsls	r3, r3, #12
 800a94e:	693a      	ldr	r2, [r7, #16]
 800a950:	4313      	orrs	r3, r2
 800a952:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	4a13      	ldr	r2, [pc, #76]	; (800a9a4 <TIM_OC4_SetConfig+0xa8>)
 800a958:	4293      	cmp	r3, r2
 800a95a:	d003      	beq.n	800a964 <TIM_OC4_SetConfig+0x68>
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	4a12      	ldr	r2, [pc, #72]	; (800a9a8 <TIM_OC4_SetConfig+0xac>)
 800a960:	4293      	cmp	r3, r2
 800a962:	d109      	bne.n	800a978 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a964:	697b      	ldr	r3, [r7, #20]
 800a966:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a96a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a96c:	683b      	ldr	r3, [r7, #0]
 800a96e:	695b      	ldr	r3, [r3, #20]
 800a970:	019b      	lsls	r3, r3, #6
 800a972:	697a      	ldr	r2, [r7, #20]
 800a974:	4313      	orrs	r3, r2
 800a976:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	697a      	ldr	r2, [r7, #20]
 800a97c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	68fa      	ldr	r2, [r7, #12]
 800a982:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a984:	683b      	ldr	r3, [r7, #0]
 800a986:	685a      	ldr	r2, [r3, #4]
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	693a      	ldr	r2, [r7, #16]
 800a990:	621a      	str	r2, [r3, #32]
}
 800a992:	bf00      	nop
 800a994:	371c      	adds	r7, #28
 800a996:	46bd      	mov	sp, r7
 800a998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99c:	4770      	bx	lr
 800a99e:	bf00      	nop
 800a9a0:	feff8fff 	.word	0xfeff8fff
 800a9a4:	40010000 	.word	0x40010000
 800a9a8:	40010400 	.word	0x40010400

0800a9ac <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a9ac:	b480      	push	{r7}
 800a9ae:	b087      	sub	sp, #28
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
 800a9b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	6a1b      	ldr	r3, [r3, #32]
 800a9ba:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	6a1b      	ldr	r3, [r3, #32]
 800a9c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	685b      	ldr	r3, [r3, #4]
 800a9cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a9d4:	68fa      	ldr	r2, [r7, #12]
 800a9d6:	4b1b      	ldr	r3, [pc, #108]	; (800aa44 <TIM_OC5_SetConfig+0x98>)
 800a9d8:	4013      	ands	r3, r2
 800a9da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a9dc:	683b      	ldr	r3, [r7, #0]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	68fa      	ldr	r2, [r7, #12]
 800a9e2:	4313      	orrs	r3, r2
 800a9e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a9e6:	693b      	ldr	r3, [r7, #16]
 800a9e8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a9ec:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a9ee:	683b      	ldr	r3, [r7, #0]
 800a9f0:	689b      	ldr	r3, [r3, #8]
 800a9f2:	041b      	lsls	r3, r3, #16
 800a9f4:	693a      	ldr	r2, [r7, #16]
 800a9f6:	4313      	orrs	r3, r2
 800a9f8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	4a12      	ldr	r2, [pc, #72]	; (800aa48 <TIM_OC5_SetConfig+0x9c>)
 800a9fe:	4293      	cmp	r3, r2
 800aa00:	d003      	beq.n	800aa0a <TIM_OC5_SetConfig+0x5e>
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	4a11      	ldr	r2, [pc, #68]	; (800aa4c <TIM_OC5_SetConfig+0xa0>)
 800aa06:	4293      	cmp	r3, r2
 800aa08:	d109      	bne.n	800aa1e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800aa0a:	697b      	ldr	r3, [r7, #20]
 800aa0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aa10:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800aa12:	683b      	ldr	r3, [r7, #0]
 800aa14:	695b      	ldr	r3, [r3, #20]
 800aa16:	021b      	lsls	r3, r3, #8
 800aa18:	697a      	ldr	r2, [r7, #20]
 800aa1a:	4313      	orrs	r3, r2
 800aa1c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	697a      	ldr	r2, [r7, #20]
 800aa22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	68fa      	ldr	r2, [r7, #12]
 800aa28:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800aa2a:	683b      	ldr	r3, [r7, #0]
 800aa2c:	685a      	ldr	r2, [r3, #4]
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	693a      	ldr	r2, [r7, #16]
 800aa36:	621a      	str	r2, [r3, #32]
}
 800aa38:	bf00      	nop
 800aa3a:	371c      	adds	r7, #28
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa42:	4770      	bx	lr
 800aa44:	fffeff8f 	.word	0xfffeff8f
 800aa48:	40010000 	.word	0x40010000
 800aa4c:	40010400 	.word	0x40010400

0800aa50 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800aa50:	b480      	push	{r7}
 800aa52:	b087      	sub	sp, #28
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
 800aa58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	6a1b      	ldr	r3, [r3, #32]
 800aa5e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	6a1b      	ldr	r3, [r3, #32]
 800aa6a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	685b      	ldr	r3, [r3, #4]
 800aa70:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800aa78:	68fa      	ldr	r2, [r7, #12]
 800aa7a:	4b1c      	ldr	r3, [pc, #112]	; (800aaec <TIM_OC6_SetConfig+0x9c>)
 800aa7c:	4013      	ands	r3, r2
 800aa7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aa80:	683b      	ldr	r3, [r7, #0]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	021b      	lsls	r3, r3, #8
 800aa86:	68fa      	ldr	r2, [r7, #12]
 800aa88:	4313      	orrs	r3, r2
 800aa8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800aa8c:	693b      	ldr	r3, [r7, #16]
 800aa8e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800aa92:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800aa94:	683b      	ldr	r3, [r7, #0]
 800aa96:	689b      	ldr	r3, [r3, #8]
 800aa98:	051b      	lsls	r3, r3, #20
 800aa9a:	693a      	ldr	r2, [r7, #16]
 800aa9c:	4313      	orrs	r3, r2
 800aa9e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	4a13      	ldr	r2, [pc, #76]	; (800aaf0 <TIM_OC6_SetConfig+0xa0>)
 800aaa4:	4293      	cmp	r3, r2
 800aaa6:	d003      	beq.n	800aab0 <TIM_OC6_SetConfig+0x60>
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	4a12      	ldr	r2, [pc, #72]	; (800aaf4 <TIM_OC6_SetConfig+0xa4>)
 800aaac:	4293      	cmp	r3, r2
 800aaae:	d109      	bne.n	800aac4 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800aab0:	697b      	ldr	r3, [r7, #20]
 800aab2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800aab6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800aab8:	683b      	ldr	r3, [r7, #0]
 800aaba:	695b      	ldr	r3, [r3, #20]
 800aabc:	029b      	lsls	r3, r3, #10
 800aabe:	697a      	ldr	r2, [r7, #20]
 800aac0:	4313      	orrs	r3, r2
 800aac2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	697a      	ldr	r2, [r7, #20]
 800aac8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	68fa      	ldr	r2, [r7, #12]
 800aace:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800aad0:	683b      	ldr	r3, [r7, #0]
 800aad2:	685a      	ldr	r2, [r3, #4]
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	693a      	ldr	r2, [r7, #16]
 800aadc:	621a      	str	r2, [r3, #32]
}
 800aade:	bf00      	nop
 800aae0:	371c      	adds	r7, #28
 800aae2:	46bd      	mov	sp, r7
 800aae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae8:	4770      	bx	lr
 800aaea:	bf00      	nop
 800aaec:	feff8fff 	.word	0xfeff8fff
 800aaf0:	40010000 	.word	0x40010000
 800aaf4:	40010400 	.word	0x40010400

0800aaf8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aaf8:	b480      	push	{r7}
 800aafa:	b087      	sub	sp, #28
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	60f8      	str	r0, [r7, #12]
 800ab00:	60b9      	str	r1, [r7, #8]
 800ab02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	6a1b      	ldr	r3, [r3, #32]
 800ab08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	6a1b      	ldr	r3, [r3, #32]
 800ab0e:	f023 0201 	bic.w	r2, r3, #1
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	699b      	ldr	r3, [r3, #24]
 800ab1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ab1c:	693b      	ldr	r3, [r7, #16]
 800ab1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ab22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	011b      	lsls	r3, r3, #4
 800ab28:	693a      	ldr	r2, [r7, #16]
 800ab2a:	4313      	orrs	r3, r2
 800ab2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ab2e:	697b      	ldr	r3, [r7, #20]
 800ab30:	f023 030a 	bic.w	r3, r3, #10
 800ab34:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ab36:	697a      	ldr	r2, [r7, #20]
 800ab38:	68bb      	ldr	r3, [r7, #8]
 800ab3a:	4313      	orrs	r3, r2
 800ab3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	693a      	ldr	r2, [r7, #16]
 800ab42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	697a      	ldr	r2, [r7, #20]
 800ab48:	621a      	str	r2, [r3, #32]
}
 800ab4a:	bf00      	nop
 800ab4c:	371c      	adds	r7, #28
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab54:	4770      	bx	lr

0800ab56 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ab56:	b480      	push	{r7}
 800ab58:	b087      	sub	sp, #28
 800ab5a:	af00      	add	r7, sp, #0
 800ab5c:	60f8      	str	r0, [r7, #12]
 800ab5e:	60b9      	str	r1, [r7, #8]
 800ab60:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	6a1b      	ldr	r3, [r3, #32]
 800ab66:	f023 0210 	bic.w	r2, r3, #16
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	699b      	ldr	r3, [r3, #24]
 800ab72:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	6a1b      	ldr	r3, [r3, #32]
 800ab78:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ab7a:	697b      	ldr	r3, [r7, #20]
 800ab7c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ab80:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	031b      	lsls	r3, r3, #12
 800ab86:	697a      	ldr	r2, [r7, #20]
 800ab88:	4313      	orrs	r3, r2
 800ab8a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ab8c:	693b      	ldr	r3, [r7, #16]
 800ab8e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ab92:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ab94:	68bb      	ldr	r3, [r7, #8]
 800ab96:	011b      	lsls	r3, r3, #4
 800ab98:	693a      	ldr	r2, [r7, #16]
 800ab9a:	4313      	orrs	r3, r2
 800ab9c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	697a      	ldr	r2, [r7, #20]
 800aba2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	693a      	ldr	r2, [r7, #16]
 800aba8:	621a      	str	r2, [r3, #32]
}
 800abaa:	bf00      	nop
 800abac:	371c      	adds	r7, #28
 800abae:	46bd      	mov	sp, r7
 800abb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb4:	4770      	bx	lr

0800abb6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800abb6:	b480      	push	{r7}
 800abb8:	b085      	sub	sp, #20
 800abba:	af00      	add	r7, sp, #0
 800abbc:	6078      	str	r0, [r7, #4]
 800abbe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	689b      	ldr	r3, [r3, #8]
 800abc4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800abcc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800abce:	683a      	ldr	r2, [r7, #0]
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	4313      	orrs	r3, r2
 800abd4:	f043 0307 	orr.w	r3, r3, #7
 800abd8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	68fa      	ldr	r2, [r7, #12]
 800abde:	609a      	str	r2, [r3, #8]
}
 800abe0:	bf00      	nop
 800abe2:	3714      	adds	r7, #20
 800abe4:	46bd      	mov	sp, r7
 800abe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abea:	4770      	bx	lr

0800abec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800abec:	b480      	push	{r7}
 800abee:	b087      	sub	sp, #28
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	60f8      	str	r0, [r7, #12]
 800abf4:	60b9      	str	r1, [r7, #8]
 800abf6:	607a      	str	r2, [r7, #4]
 800abf8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	689b      	ldr	r3, [r3, #8]
 800abfe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ac00:	697b      	ldr	r3, [r7, #20]
 800ac02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ac06:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ac08:	683b      	ldr	r3, [r7, #0]
 800ac0a:	021a      	lsls	r2, r3, #8
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	431a      	orrs	r2, r3
 800ac10:	68bb      	ldr	r3, [r7, #8]
 800ac12:	4313      	orrs	r3, r2
 800ac14:	697a      	ldr	r2, [r7, #20]
 800ac16:	4313      	orrs	r3, r2
 800ac18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	697a      	ldr	r2, [r7, #20]
 800ac1e:	609a      	str	r2, [r3, #8]
}
 800ac20:	bf00      	nop
 800ac22:	371c      	adds	r7, #28
 800ac24:	46bd      	mov	sp, r7
 800ac26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2a:	4770      	bx	lr

0800ac2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ac2c:	b480      	push	{r7}
 800ac2e:	b085      	sub	sp, #20
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
 800ac34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ac3c:	2b01      	cmp	r3, #1
 800ac3e:	d101      	bne.n	800ac44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ac40:	2302      	movs	r3, #2
 800ac42:	e06d      	b.n	800ad20 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	2201      	movs	r2, #1
 800ac48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	2202      	movs	r2, #2
 800ac50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	685b      	ldr	r3, [r3, #4]
 800ac5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	689b      	ldr	r3, [r3, #8]
 800ac62:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	4a30      	ldr	r2, [pc, #192]	; (800ad2c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ac6a:	4293      	cmp	r3, r2
 800ac6c:	d004      	beq.n	800ac78 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	4a2f      	ldr	r2, [pc, #188]	; (800ad30 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ac74:	4293      	cmp	r3, r2
 800ac76:	d108      	bne.n	800ac8a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ac7e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ac80:	683b      	ldr	r3, [r7, #0]
 800ac82:	685b      	ldr	r3, [r3, #4]
 800ac84:	68fa      	ldr	r2, [r7, #12]
 800ac86:	4313      	orrs	r3, r2
 800ac88:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac90:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ac92:	683b      	ldr	r3, [r7, #0]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	68fa      	ldr	r2, [r7, #12]
 800ac98:	4313      	orrs	r3, r2
 800ac9a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	68fa      	ldr	r2, [r7, #12]
 800aca2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	4a20      	ldr	r2, [pc, #128]	; (800ad2c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800acaa:	4293      	cmp	r3, r2
 800acac:	d022      	beq.n	800acf4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800acb6:	d01d      	beq.n	800acf4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	4a1d      	ldr	r2, [pc, #116]	; (800ad34 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800acbe:	4293      	cmp	r3, r2
 800acc0:	d018      	beq.n	800acf4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	4a1c      	ldr	r2, [pc, #112]	; (800ad38 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800acc8:	4293      	cmp	r3, r2
 800acca:	d013      	beq.n	800acf4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	4a1a      	ldr	r2, [pc, #104]	; (800ad3c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800acd2:	4293      	cmp	r3, r2
 800acd4:	d00e      	beq.n	800acf4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	4a15      	ldr	r2, [pc, #84]	; (800ad30 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800acdc:	4293      	cmp	r3, r2
 800acde:	d009      	beq.n	800acf4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	4a16      	ldr	r2, [pc, #88]	; (800ad40 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ace6:	4293      	cmp	r3, r2
 800ace8:	d004      	beq.n	800acf4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	4a15      	ldr	r2, [pc, #84]	; (800ad44 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800acf0:	4293      	cmp	r3, r2
 800acf2:	d10c      	bne.n	800ad0e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800acf4:	68bb      	ldr	r3, [r7, #8]
 800acf6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800acfa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800acfc:	683b      	ldr	r3, [r7, #0]
 800acfe:	689b      	ldr	r3, [r3, #8]
 800ad00:	68ba      	ldr	r2, [r7, #8]
 800ad02:	4313      	orrs	r3, r2
 800ad04:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	68ba      	ldr	r2, [r7, #8]
 800ad0c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	2201      	movs	r2, #1
 800ad12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	2200      	movs	r2, #0
 800ad1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ad1e:	2300      	movs	r3, #0
}
 800ad20:	4618      	mov	r0, r3
 800ad22:	3714      	adds	r7, #20
 800ad24:	46bd      	mov	sp, r7
 800ad26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2a:	4770      	bx	lr
 800ad2c:	40010000 	.word	0x40010000
 800ad30:	40010400 	.word	0x40010400
 800ad34:	40000400 	.word	0x40000400
 800ad38:	40000800 	.word	0x40000800
 800ad3c:	40000c00 	.word	0x40000c00
 800ad40:	40014000 	.word	0x40014000
 800ad44:	40001800 	.word	0x40001800

0800ad48 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ad48:	b480      	push	{r7}
 800ad4a:	b085      	sub	sp, #20
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
 800ad50:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ad52:	2300      	movs	r3, #0
 800ad54:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ad5c:	2b01      	cmp	r3, #1
 800ad5e:	d101      	bne.n	800ad64 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ad60:	2302      	movs	r3, #2
 800ad62:	e065      	b.n	800ae30 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	2201      	movs	r2, #1
 800ad68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ad72:	683b      	ldr	r3, [r7, #0]
 800ad74:	68db      	ldr	r3, [r3, #12]
 800ad76:	4313      	orrs	r3, r2
 800ad78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ad80:	683b      	ldr	r3, [r7, #0]
 800ad82:	689b      	ldr	r3, [r3, #8]
 800ad84:	4313      	orrs	r3, r2
 800ad86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800ad8e:	683b      	ldr	r3, [r7, #0]
 800ad90:	685b      	ldr	r3, [r3, #4]
 800ad92:	4313      	orrs	r3, r2
 800ad94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800ad9c:	683b      	ldr	r3, [r7, #0]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	4313      	orrs	r3, r2
 800ada2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800adaa:	683b      	ldr	r3, [r7, #0]
 800adac:	691b      	ldr	r3, [r3, #16]
 800adae:	4313      	orrs	r3, r2
 800adb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800adb8:	683b      	ldr	r3, [r7, #0]
 800adba:	695b      	ldr	r3, [r3, #20]
 800adbc:	4313      	orrs	r3, r2
 800adbe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800adc6:	683b      	ldr	r3, [r7, #0]
 800adc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adca:	4313      	orrs	r3, r2
 800adcc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800add4:	683b      	ldr	r3, [r7, #0]
 800add6:	699b      	ldr	r3, [r3, #24]
 800add8:	041b      	lsls	r3, r3, #16
 800adda:	4313      	orrs	r3, r2
 800addc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	4a16      	ldr	r2, [pc, #88]	; (800ae3c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800ade4:	4293      	cmp	r3, r2
 800ade6:	d004      	beq.n	800adf2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	4a14      	ldr	r2, [pc, #80]	; (800ae40 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800adee:	4293      	cmp	r3, r2
 800adf0:	d115      	bne.n	800ae1e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800adf8:	683b      	ldr	r3, [r7, #0]
 800adfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adfc:	051b      	lsls	r3, r3, #20
 800adfe:	4313      	orrs	r3, r2
 800ae00:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800ae08:	683b      	ldr	r3, [r7, #0]
 800ae0a:	69db      	ldr	r3, [r3, #28]
 800ae0c:	4313      	orrs	r3, r2
 800ae0e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800ae16:	683b      	ldr	r3, [r7, #0]
 800ae18:	6a1b      	ldr	r3, [r3, #32]
 800ae1a:	4313      	orrs	r3, r2
 800ae1c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	68fa      	ldr	r2, [r7, #12]
 800ae24:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	2200      	movs	r2, #0
 800ae2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ae2e:	2300      	movs	r3, #0
}
 800ae30:	4618      	mov	r0, r3
 800ae32:	3714      	adds	r7, #20
 800ae34:	46bd      	mov	sp, r7
 800ae36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae3a:	4770      	bx	lr
 800ae3c:	40010000 	.word	0x40010000
 800ae40:	40010400 	.word	0x40010400

0800ae44 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ae44:	b480      	push	{r7}
 800ae46:	b083      	sub	sp, #12
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ae4c:	bf00      	nop
 800ae4e:	370c      	adds	r7, #12
 800ae50:	46bd      	mov	sp, r7
 800ae52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae56:	4770      	bx	lr

0800ae58 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ae58:	b480      	push	{r7}
 800ae5a:	b083      	sub	sp, #12
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ae60:	bf00      	nop
 800ae62:	370c      	adds	r7, #12
 800ae64:	46bd      	mov	sp, r7
 800ae66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6a:	4770      	bx	lr

0800ae6c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ae6c:	b480      	push	{r7}
 800ae6e:	b083      	sub	sp, #12
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ae74:	bf00      	nop
 800ae76:	370c      	adds	r7, #12
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7e:	4770      	bx	lr

0800ae80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ae80:	b580      	push	{r7, lr}
 800ae82:	b082      	sub	sp, #8
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d101      	bne.n	800ae92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ae8e:	2301      	movs	r3, #1
 800ae90:	e040      	b.n	800af14 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d106      	bne.n	800aea8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	2200      	movs	r2, #0
 800ae9e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800aea2:	6878      	ldr	r0, [r7, #4]
 800aea4:	f7f7 fc3a 	bl	800271c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	2224      	movs	r2, #36	; 0x24
 800aeac:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	681a      	ldr	r2, [r3, #0]
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	f022 0201 	bic.w	r2, r2, #1
 800aebc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800aebe:	6878      	ldr	r0, [r7, #4]
 800aec0:	f000 f82c 	bl	800af1c <UART_SetConfig>
 800aec4:	4603      	mov	r3, r0
 800aec6:	2b01      	cmp	r3, #1
 800aec8:	d101      	bne.n	800aece <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800aeca:	2301      	movs	r3, #1
 800aecc:	e022      	b.n	800af14 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d002      	beq.n	800aedc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800aed6:	6878      	ldr	r0, [r7, #4]
 800aed8:	f000 faca 	bl	800b470 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	685a      	ldr	r2, [r3, #4]
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800aeea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	689a      	ldr	r2, [r3, #8]
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800aefa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	681a      	ldr	r2, [r3, #0]
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	f042 0201 	orr.w	r2, r2, #1
 800af0a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800af0c:	6878      	ldr	r0, [r7, #4]
 800af0e:	f000 fb51 	bl	800b5b4 <UART_CheckIdleState>
 800af12:	4603      	mov	r3, r0
}
 800af14:	4618      	mov	r0, r3
 800af16:	3708      	adds	r7, #8
 800af18:	46bd      	mov	sp, r7
 800af1a:	bd80      	pop	{r7, pc}

0800af1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800af1c:	b580      	push	{r7, lr}
 800af1e:	b088      	sub	sp, #32
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800af24:	2300      	movs	r3, #0
 800af26:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800af28:	2300      	movs	r3, #0
 800af2a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	689a      	ldr	r2, [r3, #8]
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	691b      	ldr	r3, [r3, #16]
 800af34:	431a      	orrs	r2, r3
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	695b      	ldr	r3, [r3, #20]
 800af3a:	431a      	orrs	r2, r3
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	69db      	ldr	r3, [r3, #28]
 800af40:	4313      	orrs	r3, r2
 800af42:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	681a      	ldr	r2, [r3, #0]
 800af4a:	4bb1      	ldr	r3, [pc, #708]	; (800b210 <UART_SetConfig+0x2f4>)
 800af4c:	4013      	ands	r3, r2
 800af4e:	687a      	ldr	r2, [r7, #4]
 800af50:	6812      	ldr	r2, [r2, #0]
 800af52:	6939      	ldr	r1, [r7, #16]
 800af54:	430b      	orrs	r3, r1
 800af56:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	685b      	ldr	r3, [r3, #4]
 800af5e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	68da      	ldr	r2, [r3, #12]
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	430a      	orrs	r2, r1
 800af6c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	699b      	ldr	r3, [r3, #24]
 800af72:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	6a1b      	ldr	r3, [r3, #32]
 800af78:	693a      	ldr	r2, [r7, #16]
 800af7a:	4313      	orrs	r3, r2
 800af7c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	689b      	ldr	r3, [r3, #8]
 800af84:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	693a      	ldr	r2, [r7, #16]
 800af8e:	430a      	orrs	r2, r1
 800af90:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	4a9f      	ldr	r2, [pc, #636]	; (800b214 <UART_SetConfig+0x2f8>)
 800af98:	4293      	cmp	r3, r2
 800af9a:	d121      	bne.n	800afe0 <UART_SetConfig+0xc4>
 800af9c:	4b9e      	ldr	r3, [pc, #632]	; (800b218 <UART_SetConfig+0x2fc>)
 800af9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800afa2:	f003 0303 	and.w	r3, r3, #3
 800afa6:	2b03      	cmp	r3, #3
 800afa8:	d816      	bhi.n	800afd8 <UART_SetConfig+0xbc>
 800afaa:	a201      	add	r2, pc, #4	; (adr r2, 800afb0 <UART_SetConfig+0x94>)
 800afac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afb0:	0800afc1 	.word	0x0800afc1
 800afb4:	0800afcd 	.word	0x0800afcd
 800afb8:	0800afc7 	.word	0x0800afc7
 800afbc:	0800afd3 	.word	0x0800afd3
 800afc0:	2301      	movs	r3, #1
 800afc2:	77fb      	strb	r3, [r7, #31]
 800afc4:	e151      	b.n	800b26a <UART_SetConfig+0x34e>
 800afc6:	2302      	movs	r3, #2
 800afc8:	77fb      	strb	r3, [r7, #31]
 800afca:	e14e      	b.n	800b26a <UART_SetConfig+0x34e>
 800afcc:	2304      	movs	r3, #4
 800afce:	77fb      	strb	r3, [r7, #31]
 800afd0:	e14b      	b.n	800b26a <UART_SetConfig+0x34e>
 800afd2:	2308      	movs	r3, #8
 800afd4:	77fb      	strb	r3, [r7, #31]
 800afd6:	e148      	b.n	800b26a <UART_SetConfig+0x34e>
 800afd8:	2310      	movs	r3, #16
 800afda:	77fb      	strb	r3, [r7, #31]
 800afdc:	bf00      	nop
 800afde:	e144      	b.n	800b26a <UART_SetConfig+0x34e>
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	4a8d      	ldr	r2, [pc, #564]	; (800b21c <UART_SetConfig+0x300>)
 800afe6:	4293      	cmp	r3, r2
 800afe8:	d134      	bne.n	800b054 <UART_SetConfig+0x138>
 800afea:	4b8b      	ldr	r3, [pc, #556]	; (800b218 <UART_SetConfig+0x2fc>)
 800afec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aff0:	f003 030c 	and.w	r3, r3, #12
 800aff4:	2b0c      	cmp	r3, #12
 800aff6:	d829      	bhi.n	800b04c <UART_SetConfig+0x130>
 800aff8:	a201      	add	r2, pc, #4	; (adr r2, 800b000 <UART_SetConfig+0xe4>)
 800affa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800affe:	bf00      	nop
 800b000:	0800b035 	.word	0x0800b035
 800b004:	0800b04d 	.word	0x0800b04d
 800b008:	0800b04d 	.word	0x0800b04d
 800b00c:	0800b04d 	.word	0x0800b04d
 800b010:	0800b041 	.word	0x0800b041
 800b014:	0800b04d 	.word	0x0800b04d
 800b018:	0800b04d 	.word	0x0800b04d
 800b01c:	0800b04d 	.word	0x0800b04d
 800b020:	0800b03b 	.word	0x0800b03b
 800b024:	0800b04d 	.word	0x0800b04d
 800b028:	0800b04d 	.word	0x0800b04d
 800b02c:	0800b04d 	.word	0x0800b04d
 800b030:	0800b047 	.word	0x0800b047
 800b034:	2300      	movs	r3, #0
 800b036:	77fb      	strb	r3, [r7, #31]
 800b038:	e117      	b.n	800b26a <UART_SetConfig+0x34e>
 800b03a:	2302      	movs	r3, #2
 800b03c:	77fb      	strb	r3, [r7, #31]
 800b03e:	e114      	b.n	800b26a <UART_SetConfig+0x34e>
 800b040:	2304      	movs	r3, #4
 800b042:	77fb      	strb	r3, [r7, #31]
 800b044:	e111      	b.n	800b26a <UART_SetConfig+0x34e>
 800b046:	2308      	movs	r3, #8
 800b048:	77fb      	strb	r3, [r7, #31]
 800b04a:	e10e      	b.n	800b26a <UART_SetConfig+0x34e>
 800b04c:	2310      	movs	r3, #16
 800b04e:	77fb      	strb	r3, [r7, #31]
 800b050:	bf00      	nop
 800b052:	e10a      	b.n	800b26a <UART_SetConfig+0x34e>
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	4a71      	ldr	r2, [pc, #452]	; (800b220 <UART_SetConfig+0x304>)
 800b05a:	4293      	cmp	r3, r2
 800b05c:	d120      	bne.n	800b0a0 <UART_SetConfig+0x184>
 800b05e:	4b6e      	ldr	r3, [pc, #440]	; (800b218 <UART_SetConfig+0x2fc>)
 800b060:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b064:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b068:	2b10      	cmp	r3, #16
 800b06a:	d00f      	beq.n	800b08c <UART_SetConfig+0x170>
 800b06c:	2b10      	cmp	r3, #16
 800b06e:	d802      	bhi.n	800b076 <UART_SetConfig+0x15a>
 800b070:	2b00      	cmp	r3, #0
 800b072:	d005      	beq.n	800b080 <UART_SetConfig+0x164>
 800b074:	e010      	b.n	800b098 <UART_SetConfig+0x17c>
 800b076:	2b20      	cmp	r3, #32
 800b078:	d005      	beq.n	800b086 <UART_SetConfig+0x16a>
 800b07a:	2b30      	cmp	r3, #48	; 0x30
 800b07c:	d009      	beq.n	800b092 <UART_SetConfig+0x176>
 800b07e:	e00b      	b.n	800b098 <UART_SetConfig+0x17c>
 800b080:	2300      	movs	r3, #0
 800b082:	77fb      	strb	r3, [r7, #31]
 800b084:	e0f1      	b.n	800b26a <UART_SetConfig+0x34e>
 800b086:	2302      	movs	r3, #2
 800b088:	77fb      	strb	r3, [r7, #31]
 800b08a:	e0ee      	b.n	800b26a <UART_SetConfig+0x34e>
 800b08c:	2304      	movs	r3, #4
 800b08e:	77fb      	strb	r3, [r7, #31]
 800b090:	e0eb      	b.n	800b26a <UART_SetConfig+0x34e>
 800b092:	2308      	movs	r3, #8
 800b094:	77fb      	strb	r3, [r7, #31]
 800b096:	e0e8      	b.n	800b26a <UART_SetConfig+0x34e>
 800b098:	2310      	movs	r3, #16
 800b09a:	77fb      	strb	r3, [r7, #31]
 800b09c:	bf00      	nop
 800b09e:	e0e4      	b.n	800b26a <UART_SetConfig+0x34e>
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	4a5f      	ldr	r2, [pc, #380]	; (800b224 <UART_SetConfig+0x308>)
 800b0a6:	4293      	cmp	r3, r2
 800b0a8:	d120      	bne.n	800b0ec <UART_SetConfig+0x1d0>
 800b0aa:	4b5b      	ldr	r3, [pc, #364]	; (800b218 <UART_SetConfig+0x2fc>)
 800b0ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b0b0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b0b4:	2b40      	cmp	r3, #64	; 0x40
 800b0b6:	d00f      	beq.n	800b0d8 <UART_SetConfig+0x1bc>
 800b0b8:	2b40      	cmp	r3, #64	; 0x40
 800b0ba:	d802      	bhi.n	800b0c2 <UART_SetConfig+0x1a6>
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d005      	beq.n	800b0cc <UART_SetConfig+0x1b0>
 800b0c0:	e010      	b.n	800b0e4 <UART_SetConfig+0x1c8>
 800b0c2:	2b80      	cmp	r3, #128	; 0x80
 800b0c4:	d005      	beq.n	800b0d2 <UART_SetConfig+0x1b6>
 800b0c6:	2bc0      	cmp	r3, #192	; 0xc0
 800b0c8:	d009      	beq.n	800b0de <UART_SetConfig+0x1c2>
 800b0ca:	e00b      	b.n	800b0e4 <UART_SetConfig+0x1c8>
 800b0cc:	2300      	movs	r3, #0
 800b0ce:	77fb      	strb	r3, [r7, #31]
 800b0d0:	e0cb      	b.n	800b26a <UART_SetConfig+0x34e>
 800b0d2:	2302      	movs	r3, #2
 800b0d4:	77fb      	strb	r3, [r7, #31]
 800b0d6:	e0c8      	b.n	800b26a <UART_SetConfig+0x34e>
 800b0d8:	2304      	movs	r3, #4
 800b0da:	77fb      	strb	r3, [r7, #31]
 800b0dc:	e0c5      	b.n	800b26a <UART_SetConfig+0x34e>
 800b0de:	2308      	movs	r3, #8
 800b0e0:	77fb      	strb	r3, [r7, #31]
 800b0e2:	e0c2      	b.n	800b26a <UART_SetConfig+0x34e>
 800b0e4:	2310      	movs	r3, #16
 800b0e6:	77fb      	strb	r3, [r7, #31]
 800b0e8:	bf00      	nop
 800b0ea:	e0be      	b.n	800b26a <UART_SetConfig+0x34e>
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	4a4d      	ldr	r2, [pc, #308]	; (800b228 <UART_SetConfig+0x30c>)
 800b0f2:	4293      	cmp	r3, r2
 800b0f4:	d124      	bne.n	800b140 <UART_SetConfig+0x224>
 800b0f6:	4b48      	ldr	r3, [pc, #288]	; (800b218 <UART_SetConfig+0x2fc>)
 800b0f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b0fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b100:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b104:	d012      	beq.n	800b12c <UART_SetConfig+0x210>
 800b106:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b10a:	d802      	bhi.n	800b112 <UART_SetConfig+0x1f6>
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d007      	beq.n	800b120 <UART_SetConfig+0x204>
 800b110:	e012      	b.n	800b138 <UART_SetConfig+0x21c>
 800b112:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b116:	d006      	beq.n	800b126 <UART_SetConfig+0x20a>
 800b118:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b11c:	d009      	beq.n	800b132 <UART_SetConfig+0x216>
 800b11e:	e00b      	b.n	800b138 <UART_SetConfig+0x21c>
 800b120:	2300      	movs	r3, #0
 800b122:	77fb      	strb	r3, [r7, #31]
 800b124:	e0a1      	b.n	800b26a <UART_SetConfig+0x34e>
 800b126:	2302      	movs	r3, #2
 800b128:	77fb      	strb	r3, [r7, #31]
 800b12a:	e09e      	b.n	800b26a <UART_SetConfig+0x34e>
 800b12c:	2304      	movs	r3, #4
 800b12e:	77fb      	strb	r3, [r7, #31]
 800b130:	e09b      	b.n	800b26a <UART_SetConfig+0x34e>
 800b132:	2308      	movs	r3, #8
 800b134:	77fb      	strb	r3, [r7, #31]
 800b136:	e098      	b.n	800b26a <UART_SetConfig+0x34e>
 800b138:	2310      	movs	r3, #16
 800b13a:	77fb      	strb	r3, [r7, #31]
 800b13c:	bf00      	nop
 800b13e:	e094      	b.n	800b26a <UART_SetConfig+0x34e>
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	4a39      	ldr	r2, [pc, #228]	; (800b22c <UART_SetConfig+0x310>)
 800b146:	4293      	cmp	r3, r2
 800b148:	d124      	bne.n	800b194 <UART_SetConfig+0x278>
 800b14a:	4b33      	ldr	r3, [pc, #204]	; (800b218 <UART_SetConfig+0x2fc>)
 800b14c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b150:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b154:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b158:	d012      	beq.n	800b180 <UART_SetConfig+0x264>
 800b15a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b15e:	d802      	bhi.n	800b166 <UART_SetConfig+0x24a>
 800b160:	2b00      	cmp	r3, #0
 800b162:	d007      	beq.n	800b174 <UART_SetConfig+0x258>
 800b164:	e012      	b.n	800b18c <UART_SetConfig+0x270>
 800b166:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b16a:	d006      	beq.n	800b17a <UART_SetConfig+0x25e>
 800b16c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b170:	d009      	beq.n	800b186 <UART_SetConfig+0x26a>
 800b172:	e00b      	b.n	800b18c <UART_SetConfig+0x270>
 800b174:	2301      	movs	r3, #1
 800b176:	77fb      	strb	r3, [r7, #31]
 800b178:	e077      	b.n	800b26a <UART_SetConfig+0x34e>
 800b17a:	2302      	movs	r3, #2
 800b17c:	77fb      	strb	r3, [r7, #31]
 800b17e:	e074      	b.n	800b26a <UART_SetConfig+0x34e>
 800b180:	2304      	movs	r3, #4
 800b182:	77fb      	strb	r3, [r7, #31]
 800b184:	e071      	b.n	800b26a <UART_SetConfig+0x34e>
 800b186:	2308      	movs	r3, #8
 800b188:	77fb      	strb	r3, [r7, #31]
 800b18a:	e06e      	b.n	800b26a <UART_SetConfig+0x34e>
 800b18c:	2310      	movs	r3, #16
 800b18e:	77fb      	strb	r3, [r7, #31]
 800b190:	bf00      	nop
 800b192:	e06a      	b.n	800b26a <UART_SetConfig+0x34e>
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	4a25      	ldr	r2, [pc, #148]	; (800b230 <UART_SetConfig+0x314>)
 800b19a:	4293      	cmp	r3, r2
 800b19c:	d124      	bne.n	800b1e8 <UART_SetConfig+0x2cc>
 800b19e:	4b1e      	ldr	r3, [pc, #120]	; (800b218 <UART_SetConfig+0x2fc>)
 800b1a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b1a4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800b1a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b1ac:	d012      	beq.n	800b1d4 <UART_SetConfig+0x2b8>
 800b1ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b1b2:	d802      	bhi.n	800b1ba <UART_SetConfig+0x29e>
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d007      	beq.n	800b1c8 <UART_SetConfig+0x2ac>
 800b1b8:	e012      	b.n	800b1e0 <UART_SetConfig+0x2c4>
 800b1ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b1be:	d006      	beq.n	800b1ce <UART_SetConfig+0x2b2>
 800b1c0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b1c4:	d009      	beq.n	800b1da <UART_SetConfig+0x2be>
 800b1c6:	e00b      	b.n	800b1e0 <UART_SetConfig+0x2c4>
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	77fb      	strb	r3, [r7, #31]
 800b1cc:	e04d      	b.n	800b26a <UART_SetConfig+0x34e>
 800b1ce:	2302      	movs	r3, #2
 800b1d0:	77fb      	strb	r3, [r7, #31]
 800b1d2:	e04a      	b.n	800b26a <UART_SetConfig+0x34e>
 800b1d4:	2304      	movs	r3, #4
 800b1d6:	77fb      	strb	r3, [r7, #31]
 800b1d8:	e047      	b.n	800b26a <UART_SetConfig+0x34e>
 800b1da:	2308      	movs	r3, #8
 800b1dc:	77fb      	strb	r3, [r7, #31]
 800b1de:	e044      	b.n	800b26a <UART_SetConfig+0x34e>
 800b1e0:	2310      	movs	r3, #16
 800b1e2:	77fb      	strb	r3, [r7, #31]
 800b1e4:	bf00      	nop
 800b1e6:	e040      	b.n	800b26a <UART_SetConfig+0x34e>
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	4a11      	ldr	r2, [pc, #68]	; (800b234 <UART_SetConfig+0x318>)
 800b1ee:	4293      	cmp	r3, r2
 800b1f0:	d139      	bne.n	800b266 <UART_SetConfig+0x34a>
 800b1f2:	4b09      	ldr	r3, [pc, #36]	; (800b218 <UART_SetConfig+0x2fc>)
 800b1f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b1f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800b1fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b200:	d027      	beq.n	800b252 <UART_SetConfig+0x336>
 800b202:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b206:	d817      	bhi.n	800b238 <UART_SetConfig+0x31c>
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d01c      	beq.n	800b246 <UART_SetConfig+0x32a>
 800b20c:	e027      	b.n	800b25e <UART_SetConfig+0x342>
 800b20e:	bf00      	nop
 800b210:	efff69f3 	.word	0xefff69f3
 800b214:	40011000 	.word	0x40011000
 800b218:	40023800 	.word	0x40023800
 800b21c:	40004400 	.word	0x40004400
 800b220:	40004800 	.word	0x40004800
 800b224:	40004c00 	.word	0x40004c00
 800b228:	40005000 	.word	0x40005000
 800b22c:	40011400 	.word	0x40011400
 800b230:	40007800 	.word	0x40007800
 800b234:	40007c00 	.word	0x40007c00
 800b238:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b23c:	d006      	beq.n	800b24c <UART_SetConfig+0x330>
 800b23e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800b242:	d009      	beq.n	800b258 <UART_SetConfig+0x33c>
 800b244:	e00b      	b.n	800b25e <UART_SetConfig+0x342>
 800b246:	2300      	movs	r3, #0
 800b248:	77fb      	strb	r3, [r7, #31]
 800b24a:	e00e      	b.n	800b26a <UART_SetConfig+0x34e>
 800b24c:	2302      	movs	r3, #2
 800b24e:	77fb      	strb	r3, [r7, #31]
 800b250:	e00b      	b.n	800b26a <UART_SetConfig+0x34e>
 800b252:	2304      	movs	r3, #4
 800b254:	77fb      	strb	r3, [r7, #31]
 800b256:	e008      	b.n	800b26a <UART_SetConfig+0x34e>
 800b258:	2308      	movs	r3, #8
 800b25a:	77fb      	strb	r3, [r7, #31]
 800b25c:	e005      	b.n	800b26a <UART_SetConfig+0x34e>
 800b25e:	2310      	movs	r3, #16
 800b260:	77fb      	strb	r3, [r7, #31]
 800b262:	bf00      	nop
 800b264:	e001      	b.n	800b26a <UART_SetConfig+0x34e>
 800b266:	2310      	movs	r3, #16
 800b268:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	69db      	ldr	r3, [r3, #28]
 800b26e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b272:	d17f      	bne.n	800b374 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800b274:	7ffb      	ldrb	r3, [r7, #31]
 800b276:	2b08      	cmp	r3, #8
 800b278:	d85c      	bhi.n	800b334 <UART_SetConfig+0x418>
 800b27a:	a201      	add	r2, pc, #4	; (adr r2, 800b280 <UART_SetConfig+0x364>)
 800b27c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b280:	0800b2a5 	.word	0x0800b2a5
 800b284:	0800b2c5 	.word	0x0800b2c5
 800b288:	0800b2e5 	.word	0x0800b2e5
 800b28c:	0800b335 	.word	0x0800b335
 800b290:	0800b2fd 	.word	0x0800b2fd
 800b294:	0800b335 	.word	0x0800b335
 800b298:	0800b335 	.word	0x0800b335
 800b29c:	0800b335 	.word	0x0800b335
 800b2a0:	0800b31d 	.word	0x0800b31d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b2a4:	f7fc f9be 	bl	8007624 <HAL_RCC_GetPCLK1Freq>
 800b2a8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	005a      	lsls	r2, r3, #1
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	685b      	ldr	r3, [r3, #4]
 800b2b2:	085b      	lsrs	r3, r3, #1
 800b2b4:	441a      	add	r2, r3
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	685b      	ldr	r3, [r3, #4]
 800b2ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2be:	b29b      	uxth	r3, r3
 800b2c0:	61bb      	str	r3, [r7, #24]
        break;
 800b2c2:	e03a      	b.n	800b33a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b2c4:	f7fc f9c2 	bl	800764c <HAL_RCC_GetPCLK2Freq>
 800b2c8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	005a      	lsls	r2, r3, #1
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	685b      	ldr	r3, [r3, #4]
 800b2d2:	085b      	lsrs	r3, r3, #1
 800b2d4:	441a      	add	r2, r3
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	685b      	ldr	r3, [r3, #4]
 800b2da:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2de:	b29b      	uxth	r3, r3
 800b2e0:	61bb      	str	r3, [r7, #24]
        break;
 800b2e2:	e02a      	b.n	800b33a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	685b      	ldr	r3, [r3, #4]
 800b2e8:	085a      	lsrs	r2, r3, #1
 800b2ea:	4b5f      	ldr	r3, [pc, #380]	; (800b468 <UART_SetConfig+0x54c>)
 800b2ec:	4413      	add	r3, r2
 800b2ee:	687a      	ldr	r2, [r7, #4]
 800b2f0:	6852      	ldr	r2, [r2, #4]
 800b2f2:	fbb3 f3f2 	udiv	r3, r3, r2
 800b2f6:	b29b      	uxth	r3, r3
 800b2f8:	61bb      	str	r3, [r7, #24]
        break;
 800b2fa:	e01e      	b.n	800b33a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b2fc:	f7fc f8d4 	bl	80074a8 <HAL_RCC_GetSysClockFreq>
 800b300:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	005a      	lsls	r2, r3, #1
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	685b      	ldr	r3, [r3, #4]
 800b30a:	085b      	lsrs	r3, r3, #1
 800b30c:	441a      	add	r2, r3
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	685b      	ldr	r3, [r3, #4]
 800b312:	fbb2 f3f3 	udiv	r3, r2, r3
 800b316:	b29b      	uxth	r3, r3
 800b318:	61bb      	str	r3, [r7, #24]
        break;
 800b31a:	e00e      	b.n	800b33a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	685b      	ldr	r3, [r3, #4]
 800b320:	085b      	lsrs	r3, r3, #1
 800b322:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	685b      	ldr	r3, [r3, #4]
 800b32a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b32e:	b29b      	uxth	r3, r3
 800b330:	61bb      	str	r3, [r7, #24]
        break;
 800b332:	e002      	b.n	800b33a <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800b334:	2301      	movs	r3, #1
 800b336:	75fb      	strb	r3, [r7, #23]
        break;
 800b338:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b33a:	69bb      	ldr	r3, [r7, #24]
 800b33c:	2b0f      	cmp	r3, #15
 800b33e:	d916      	bls.n	800b36e <UART_SetConfig+0x452>
 800b340:	69bb      	ldr	r3, [r7, #24]
 800b342:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b346:	d212      	bcs.n	800b36e <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b348:	69bb      	ldr	r3, [r7, #24]
 800b34a:	b29b      	uxth	r3, r3
 800b34c:	f023 030f 	bic.w	r3, r3, #15
 800b350:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b352:	69bb      	ldr	r3, [r7, #24]
 800b354:	085b      	lsrs	r3, r3, #1
 800b356:	b29b      	uxth	r3, r3
 800b358:	f003 0307 	and.w	r3, r3, #7
 800b35c:	b29a      	uxth	r2, r3
 800b35e:	897b      	ldrh	r3, [r7, #10]
 800b360:	4313      	orrs	r3, r2
 800b362:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	897a      	ldrh	r2, [r7, #10]
 800b36a:	60da      	str	r2, [r3, #12]
 800b36c:	e070      	b.n	800b450 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800b36e:	2301      	movs	r3, #1
 800b370:	75fb      	strb	r3, [r7, #23]
 800b372:	e06d      	b.n	800b450 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800b374:	7ffb      	ldrb	r3, [r7, #31]
 800b376:	2b08      	cmp	r3, #8
 800b378:	d859      	bhi.n	800b42e <UART_SetConfig+0x512>
 800b37a:	a201      	add	r2, pc, #4	; (adr r2, 800b380 <UART_SetConfig+0x464>)
 800b37c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b380:	0800b3a5 	.word	0x0800b3a5
 800b384:	0800b3c3 	.word	0x0800b3c3
 800b388:	0800b3e1 	.word	0x0800b3e1
 800b38c:	0800b42f 	.word	0x0800b42f
 800b390:	0800b3f9 	.word	0x0800b3f9
 800b394:	0800b42f 	.word	0x0800b42f
 800b398:	0800b42f 	.word	0x0800b42f
 800b39c:	0800b42f 	.word	0x0800b42f
 800b3a0:	0800b417 	.word	0x0800b417
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b3a4:	f7fc f93e 	bl	8007624 <HAL_RCC_GetPCLK1Freq>
 800b3a8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	685b      	ldr	r3, [r3, #4]
 800b3ae:	085a      	lsrs	r2, r3, #1
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	441a      	add	r2, r3
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	685b      	ldr	r3, [r3, #4]
 800b3b8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b3bc:	b29b      	uxth	r3, r3
 800b3be:	61bb      	str	r3, [r7, #24]
        break;
 800b3c0:	e038      	b.n	800b434 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b3c2:	f7fc f943 	bl	800764c <HAL_RCC_GetPCLK2Freq>
 800b3c6:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	685b      	ldr	r3, [r3, #4]
 800b3cc:	085a      	lsrs	r2, r3, #1
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	441a      	add	r2, r3
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	685b      	ldr	r3, [r3, #4]
 800b3d6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b3da:	b29b      	uxth	r3, r3
 800b3dc:	61bb      	str	r3, [r7, #24]
        break;
 800b3de:	e029      	b.n	800b434 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	685b      	ldr	r3, [r3, #4]
 800b3e4:	085a      	lsrs	r2, r3, #1
 800b3e6:	4b21      	ldr	r3, [pc, #132]	; (800b46c <UART_SetConfig+0x550>)
 800b3e8:	4413      	add	r3, r2
 800b3ea:	687a      	ldr	r2, [r7, #4]
 800b3ec:	6852      	ldr	r2, [r2, #4]
 800b3ee:	fbb3 f3f2 	udiv	r3, r3, r2
 800b3f2:	b29b      	uxth	r3, r3
 800b3f4:	61bb      	str	r3, [r7, #24]
        break;
 800b3f6:	e01d      	b.n	800b434 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b3f8:	f7fc f856 	bl	80074a8 <HAL_RCC_GetSysClockFreq>
 800b3fc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	685b      	ldr	r3, [r3, #4]
 800b402:	085a      	lsrs	r2, r3, #1
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	441a      	add	r2, r3
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	685b      	ldr	r3, [r3, #4]
 800b40c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b410:	b29b      	uxth	r3, r3
 800b412:	61bb      	str	r3, [r7, #24]
        break;
 800b414:	e00e      	b.n	800b434 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	685b      	ldr	r3, [r3, #4]
 800b41a:	085b      	lsrs	r3, r3, #1
 800b41c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	685b      	ldr	r3, [r3, #4]
 800b424:	fbb2 f3f3 	udiv	r3, r2, r3
 800b428:	b29b      	uxth	r3, r3
 800b42a:	61bb      	str	r3, [r7, #24]
        break;
 800b42c:	e002      	b.n	800b434 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800b42e:	2301      	movs	r3, #1
 800b430:	75fb      	strb	r3, [r7, #23]
        break;
 800b432:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b434:	69bb      	ldr	r3, [r7, #24]
 800b436:	2b0f      	cmp	r3, #15
 800b438:	d908      	bls.n	800b44c <UART_SetConfig+0x530>
 800b43a:	69bb      	ldr	r3, [r7, #24]
 800b43c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b440:	d204      	bcs.n	800b44c <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	69ba      	ldr	r2, [r7, #24]
 800b448:	60da      	str	r2, [r3, #12]
 800b44a:	e001      	b.n	800b450 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800b44c:	2301      	movs	r3, #1
 800b44e:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	2200      	movs	r2, #0
 800b454:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	2200      	movs	r2, #0
 800b45a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800b45c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b45e:	4618      	mov	r0, r3
 800b460:	3720      	adds	r7, #32
 800b462:	46bd      	mov	sp, r7
 800b464:	bd80      	pop	{r7, pc}
 800b466:	bf00      	nop
 800b468:	01e84800 	.word	0x01e84800
 800b46c:	00f42400 	.word	0x00f42400

0800b470 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b470:	b480      	push	{r7}
 800b472:	b083      	sub	sp, #12
 800b474:	af00      	add	r7, sp, #0
 800b476:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b47c:	f003 0301 	and.w	r3, r3, #1
 800b480:	2b00      	cmp	r3, #0
 800b482:	d00a      	beq.n	800b49a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	685b      	ldr	r3, [r3, #4]
 800b48a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	430a      	orrs	r2, r1
 800b498:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b49e:	f003 0302 	and.w	r3, r3, #2
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d00a      	beq.n	800b4bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	685b      	ldr	r3, [r3, #4]
 800b4ac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	430a      	orrs	r2, r1
 800b4ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4c0:	f003 0304 	and.w	r3, r3, #4
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d00a      	beq.n	800b4de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	685b      	ldr	r3, [r3, #4]
 800b4ce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	430a      	orrs	r2, r1
 800b4dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4e2:	f003 0308 	and.w	r3, r3, #8
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d00a      	beq.n	800b500 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	685b      	ldr	r3, [r3, #4]
 800b4f0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	430a      	orrs	r2, r1
 800b4fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b504:	f003 0310 	and.w	r3, r3, #16
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d00a      	beq.n	800b522 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	689b      	ldr	r3, [r3, #8]
 800b512:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	430a      	orrs	r2, r1
 800b520:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b526:	f003 0320 	and.w	r3, r3, #32
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d00a      	beq.n	800b544 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	689b      	ldr	r3, [r3, #8]
 800b534:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	430a      	orrs	r2, r1
 800b542:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b548:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d01a      	beq.n	800b586 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	685b      	ldr	r3, [r3, #4]
 800b556:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	430a      	orrs	r2, r1
 800b564:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b56a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b56e:	d10a      	bne.n	800b586 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	685b      	ldr	r3, [r3, #4]
 800b576:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	430a      	orrs	r2, r1
 800b584:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b58a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d00a      	beq.n	800b5a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	685b      	ldr	r3, [r3, #4]
 800b598:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	430a      	orrs	r2, r1
 800b5a6:	605a      	str	r2, [r3, #4]
  }
}
 800b5a8:	bf00      	nop
 800b5aa:	370c      	adds	r7, #12
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b2:	4770      	bx	lr

0800b5b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b5b4:	b580      	push	{r7, lr}
 800b5b6:	b086      	sub	sp, #24
 800b5b8:	af02      	add	r7, sp, #8
 800b5ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	2200      	movs	r2, #0
 800b5c0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800b5c2:	f7f7 fb73 	bl	8002cac <HAL_GetTick>
 800b5c6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	f003 0308 	and.w	r3, r3, #8
 800b5d2:	2b08      	cmp	r3, #8
 800b5d4:	d10e      	bne.n	800b5f4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b5d6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b5da:	9300      	str	r3, [sp, #0]
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	2200      	movs	r2, #0
 800b5e0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b5e4:	6878      	ldr	r0, [r7, #4]
 800b5e6:	f000 f814 	bl	800b612 <UART_WaitOnFlagUntilTimeout>
 800b5ea:	4603      	mov	r3, r0
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d001      	beq.n	800b5f4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b5f0:	2303      	movs	r3, #3
 800b5f2:	e00a      	b.n	800b60a <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	2220      	movs	r2, #32
 800b5f8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	2220      	movs	r2, #32
 800b5fe:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	2200      	movs	r2, #0
 800b604:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800b608:	2300      	movs	r3, #0
}
 800b60a:	4618      	mov	r0, r3
 800b60c:	3710      	adds	r7, #16
 800b60e:	46bd      	mov	sp, r7
 800b610:	bd80      	pop	{r7, pc}

0800b612 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b612:	b580      	push	{r7, lr}
 800b614:	b084      	sub	sp, #16
 800b616:	af00      	add	r7, sp, #0
 800b618:	60f8      	str	r0, [r7, #12]
 800b61a:	60b9      	str	r1, [r7, #8]
 800b61c:	603b      	str	r3, [r7, #0]
 800b61e:	4613      	mov	r3, r2
 800b620:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b622:	e05d      	b.n	800b6e0 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b624:	69bb      	ldr	r3, [r7, #24]
 800b626:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b62a:	d059      	beq.n	800b6e0 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b62c:	f7f7 fb3e 	bl	8002cac <HAL_GetTick>
 800b630:	4602      	mov	r2, r0
 800b632:	683b      	ldr	r3, [r7, #0]
 800b634:	1ad3      	subs	r3, r2, r3
 800b636:	69ba      	ldr	r2, [r7, #24]
 800b638:	429a      	cmp	r2, r3
 800b63a:	d302      	bcc.n	800b642 <UART_WaitOnFlagUntilTimeout+0x30>
 800b63c:	69bb      	ldr	r3, [r7, #24]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d11b      	bne.n	800b67a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	681a      	ldr	r2, [r3, #0]
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b650:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	689a      	ldr	r2, [r3, #8]
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	f022 0201 	bic.w	r2, r2, #1
 800b660:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	2220      	movs	r2, #32
 800b666:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	2220      	movs	r2, #32
 800b66c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	2200      	movs	r2, #0
 800b672:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800b676:	2303      	movs	r3, #3
 800b678:	e042      	b.n	800b700 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	f003 0304 	and.w	r3, r3, #4
 800b684:	2b00      	cmp	r3, #0
 800b686:	d02b      	beq.n	800b6e0 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	69db      	ldr	r3, [r3, #28]
 800b68e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b692:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b696:	d123      	bne.n	800b6e0 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b6a0:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	681a      	ldr	r2, [r3, #0]
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b6b0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	689a      	ldr	r2, [r3, #8]
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	f022 0201 	bic.w	r2, r2, #1
 800b6c0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	2220      	movs	r2, #32
 800b6c6:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	2220      	movs	r2, #32
 800b6cc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	2220      	movs	r2, #32
 800b6d2:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	2200      	movs	r2, #0
 800b6d8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800b6dc:	2303      	movs	r3, #3
 800b6de:	e00f      	b.n	800b700 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	69da      	ldr	r2, [r3, #28]
 800b6e6:	68bb      	ldr	r3, [r7, #8]
 800b6e8:	4013      	ands	r3, r2
 800b6ea:	68ba      	ldr	r2, [r7, #8]
 800b6ec:	429a      	cmp	r2, r3
 800b6ee:	bf0c      	ite	eq
 800b6f0:	2301      	moveq	r3, #1
 800b6f2:	2300      	movne	r3, #0
 800b6f4:	b2db      	uxtb	r3, r3
 800b6f6:	461a      	mov	r2, r3
 800b6f8:	79fb      	ldrb	r3, [r7, #7]
 800b6fa:	429a      	cmp	r2, r3
 800b6fc:	d092      	beq.n	800b624 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b6fe:	2300      	movs	r3, #0
}
 800b700:	4618      	mov	r0, r3
 800b702:	3710      	adds	r7, #16
 800b704:	46bd      	mov	sp, r7
 800b706:	bd80      	pop	{r7, pc}

0800b708 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800b708:	b480      	push	{r7}
 800b70a:	b085      	sub	sp, #20
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]
 800b710:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800b712:	2300      	movs	r3, #0
 800b714:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800b716:	2300      	movs	r3, #0
 800b718:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800b71a:	683b      	ldr	r3, [r7, #0]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	2b01      	cmp	r3, #1
 800b720:	d027      	beq.n	800b772 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800b728:	68fa      	ldr	r2, [r7, #12]
 800b72a:	4b2f      	ldr	r3, [pc, #188]	; (800b7e8 <FMC_SDRAM_Init+0xe0>)
 800b72c:	4013      	ands	r3, r2
 800b72e:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b730:	683b      	ldr	r3, [r7, #0]
 800b732:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800b734:	683b      	ldr	r3, [r7, #0]
 800b736:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b738:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800b73a:	683b      	ldr	r3, [r7, #0]
 800b73c:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800b73e:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800b740:	683b      	ldr	r3, [r7, #0]
 800b742:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800b744:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800b746:	683b      	ldr	r3, [r7, #0]
 800b748:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800b74a:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800b74c:	683b      	ldr	r3, [r7, #0]
 800b74e:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800b750:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800b752:	683b      	ldr	r3, [r7, #0]
 800b754:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800b756:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800b758:	683b      	ldr	r3, [r7, #0]
 800b75a:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800b75c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800b75e:	683b      	ldr	r3, [r7, #0]
 800b760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800b762:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b764:	68fa      	ldr	r2, [r7, #12]
 800b766:	4313      	orrs	r3, r2
 800b768:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	68fa      	ldr	r2, [r7, #12]
 800b76e:	601a      	str	r2, [r3, #0]
 800b770:	e032      	b.n	800b7d8 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b77e:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800b780:	683b      	ldr	r3, [r7, #0]
 800b782:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800b784:	683b      	ldr	r3, [r7, #0]
 800b786:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800b788:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800b78a:	683b      	ldr	r3, [r7, #0]
 800b78c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800b78e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800b790:	68fa      	ldr	r2, [r7, #12]
 800b792:	4313      	orrs	r3, r2
 800b794:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	685b      	ldr	r3, [r3, #4]
 800b79a:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800b79c:	68ba      	ldr	r2, [r7, #8]
 800b79e:	4b12      	ldr	r3, [pc, #72]	; (800b7e8 <FMC_SDRAM_Init+0xe0>)
 800b7a0:	4013      	ands	r3, r2
 800b7a2:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b7a4:	683b      	ldr	r3, [r7, #0]
 800b7a6:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800b7a8:	683b      	ldr	r3, [r7, #0]
 800b7aa:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b7ac:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800b7ae:	683b      	ldr	r3, [r7, #0]
 800b7b0:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800b7b2:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800b7b4:	683b      	ldr	r3, [r7, #0]
 800b7b6:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800b7b8:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800b7ba:	683b      	ldr	r3, [r7, #0]
 800b7bc:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800b7be:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800b7c0:	683b      	ldr	r3, [r7, #0]
 800b7c2:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800b7c4:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b7c6:	68ba      	ldr	r2, [r7, #8]
 800b7c8:	4313      	orrs	r3, r2
 800b7ca:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	68fa      	ldr	r2, [r7, #12]
 800b7d0:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	68ba      	ldr	r2, [r7, #8]
 800b7d6:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800b7d8:	2300      	movs	r3, #0
}
 800b7da:	4618      	mov	r0, r3
 800b7dc:	3714      	adds	r7, #20
 800b7de:	46bd      	mov	sp, r7
 800b7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e4:	4770      	bx	lr
 800b7e6:	bf00      	nop
 800b7e8:	ffff8000 	.word	0xffff8000

0800b7ec <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800b7ec:	b480      	push	{r7}
 800b7ee:	b087      	sub	sp, #28
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	60f8      	str	r0, [r7, #12]
 800b7f4:	60b9      	str	r1, [r7, #8]
 800b7f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	2b01      	cmp	r3, #1
 800b804:	d02e      	beq.n	800b864 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	689b      	ldr	r3, [r3, #8]
 800b80a:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800b80c:	697b      	ldr	r3, [r7, #20]
 800b80e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b812:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b814:	68bb      	ldr	r3, [r7, #8]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800b81a:	68bb      	ldr	r3, [r7, #8]
 800b81c:	685b      	ldr	r3, [r3, #4]
 800b81e:	3b01      	subs	r3, #1
 800b820:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b822:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800b824:	68bb      	ldr	r3, [r7, #8]
 800b826:	689b      	ldr	r3, [r3, #8]
 800b828:	3b01      	subs	r3, #1
 800b82a:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800b82c:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800b82e:	68bb      	ldr	r3, [r7, #8]
 800b830:	68db      	ldr	r3, [r3, #12]
 800b832:	3b01      	subs	r3, #1
 800b834:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800b836:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800b838:	68bb      	ldr	r3, [r7, #8]
 800b83a:	691b      	ldr	r3, [r3, #16]
 800b83c:	3b01      	subs	r3, #1
 800b83e:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800b840:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800b842:	68bb      	ldr	r3, [r7, #8]
 800b844:	695b      	ldr	r3, [r3, #20]
 800b846:	3b01      	subs	r3, #1
 800b848:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800b84a:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800b84c:	68bb      	ldr	r3, [r7, #8]
 800b84e:	699b      	ldr	r3, [r3, #24]
 800b850:	3b01      	subs	r3, #1
 800b852:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b854:	4313      	orrs	r3, r2
 800b856:	697a      	ldr	r2, [r7, #20]
 800b858:	4313      	orrs	r3, r2
 800b85a:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	697a      	ldr	r2, [r7, #20]
 800b860:	609a      	str	r2, [r3, #8]
 800b862:	e039      	b.n	800b8d8 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	689b      	ldr	r3, [r3, #8]
 800b868:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800b86a:	697a      	ldr	r2, [r7, #20]
 800b86c:	4b1e      	ldr	r3, [pc, #120]	; (800b8e8 <FMC_SDRAM_Timing_Init+0xfc>)
 800b86e:	4013      	ands	r3, r2
 800b870:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800b872:	68bb      	ldr	r3, [r7, #8]
 800b874:	68db      	ldr	r3, [r3, #12]
 800b876:	3b01      	subs	r3, #1
 800b878:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800b87a:	68bb      	ldr	r3, [r7, #8]
 800b87c:	695b      	ldr	r3, [r3, #20]
 800b87e:	3b01      	subs	r3, #1
 800b880:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800b882:	4313      	orrs	r3, r2
 800b884:	697a      	ldr	r2, [r7, #20]
 800b886:	4313      	orrs	r3, r2
 800b888:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	68db      	ldr	r3, [r3, #12]
 800b88e:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800b890:	693b      	ldr	r3, [r7, #16]
 800b892:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b896:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b898:	68bb      	ldr	r3, [r7, #8]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800b89e:	68bb      	ldr	r3, [r7, #8]
 800b8a0:	685b      	ldr	r3, [r3, #4]
 800b8a2:	3b01      	subs	r3, #1
 800b8a4:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b8a6:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800b8a8:	68bb      	ldr	r3, [r7, #8]
 800b8aa:	689b      	ldr	r3, [r3, #8]
 800b8ac:	3b01      	subs	r3, #1
 800b8ae:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800b8b0:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800b8b2:	68bb      	ldr	r3, [r7, #8]
 800b8b4:	691b      	ldr	r3, [r3, #16]
 800b8b6:	3b01      	subs	r3, #1
 800b8b8:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800b8ba:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800b8bc:	68bb      	ldr	r3, [r7, #8]
 800b8be:	699b      	ldr	r3, [r3, #24]
 800b8c0:	3b01      	subs	r3, #1
 800b8c2:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b8c4:	4313      	orrs	r3, r2
 800b8c6:	693a      	ldr	r2, [r7, #16]
 800b8c8:	4313      	orrs	r3, r2
 800b8ca:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	697a      	ldr	r2, [r7, #20]
 800b8d0:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	693a      	ldr	r2, [r7, #16]
 800b8d6:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800b8d8:	2300      	movs	r3, #0
}
 800b8da:	4618      	mov	r0, r3
 800b8dc:	371c      	adds	r7, #28
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e4:	4770      	bx	lr
 800b8e6:	bf00      	nop
 800b8e8:	ff0f0fff 	.word	0xff0f0fff

0800b8ec <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800b8ec:	b084      	sub	sp, #16
 800b8ee:	b480      	push	{r7}
 800b8f0:	b085      	sub	sp, #20
 800b8f2:	af00      	add	r7, sp, #0
 800b8f4:	6078      	str	r0, [r7, #4]
 800b8f6:	f107 001c 	add.w	r0, r7, #28
 800b8fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800b8fe:	2300      	movs	r3, #0
 800b900:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800b902:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800b904:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800b906:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800b908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800b90a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800b90c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800b90e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800b910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800b912:	431a      	orrs	r2, r3
             Init.ClockDiv
 800b914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800b916:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800b918:	68fa      	ldr	r2, [r7, #12]
 800b91a:	4313      	orrs	r3, r2
 800b91c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	685a      	ldr	r2, [r3, #4]
 800b922:	4b07      	ldr	r3, [pc, #28]	; (800b940 <SDMMC_Init+0x54>)
 800b924:	4013      	ands	r3, r2
 800b926:	68fa      	ldr	r2, [r7, #12]
 800b928:	431a      	orrs	r2, r3
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800b92e:	2300      	movs	r3, #0
}
 800b930:	4618      	mov	r0, r3
 800b932:	3714      	adds	r7, #20
 800b934:	46bd      	mov	sp, r7
 800b936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b93a:	b004      	add	sp, #16
 800b93c:	4770      	bx	lr
 800b93e:	bf00      	nop
 800b940:	ffff8100 	.word	0xffff8100

0800b944 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800b944:	b480      	push	{r7}
 800b946:	b083      	sub	sp, #12
 800b948:	af00      	add	r7, sp, #0
 800b94a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800b952:	4618      	mov	r0, r3
 800b954:	370c      	adds	r7, #12
 800b956:	46bd      	mov	sp, r7
 800b958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95c:	4770      	bx	lr

0800b95e <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800b95e:	b580      	push	{r7, lr}
 800b960:	b082      	sub	sp, #8
 800b962:	af00      	add	r7, sp, #0
 800b964:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	2203      	movs	r2, #3
 800b96a:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800b96c:	2002      	movs	r0, #2
 800b96e:	f7f7 f9a9 	bl	8002cc4 <HAL_Delay>
  
  return HAL_OK;
 800b972:	2300      	movs	r3, #0
}
 800b974:	4618      	mov	r0, r3
 800b976:	3708      	adds	r7, #8
 800b978:	46bd      	mov	sp, r7
 800b97a:	bd80      	pop	{r7, pc}

0800b97c <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800b97c:	b480      	push	{r7}
 800b97e:	b083      	sub	sp, #12
 800b980:	af00      	add	r7, sp, #0
 800b982:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	f003 0303 	and.w	r3, r3, #3
}
 800b98c:	4618      	mov	r0, r3
 800b98e:	370c      	adds	r7, #12
 800b990:	46bd      	mov	sp, r7
 800b992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b996:	4770      	bx	lr

0800b998 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800b998:	b480      	push	{r7}
 800b99a:	b085      	sub	sp, #20
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	6078      	str	r0, [r7, #4]
 800b9a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800b9a6:	683b      	ldr	r3, [r7, #0]
 800b9a8:	681a      	ldr	r2, [r3, #0]
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b9ae:	683b      	ldr	r3, [r7, #0]
 800b9b0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800b9b2:	683b      	ldr	r3, [r7, #0]
 800b9b4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b9b6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800b9b8:	683b      	ldr	r3, [r7, #0]
 800b9ba:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800b9bc:	431a      	orrs	r2, r3
                       Command->CPSM);
 800b9be:	683b      	ldr	r3, [r7, #0]
 800b9c0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800b9c2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b9c4:	68fa      	ldr	r2, [r7, #12]
 800b9c6:	4313      	orrs	r3, r2
 800b9c8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	68da      	ldr	r2, [r3, #12]
 800b9ce:	4b06      	ldr	r3, [pc, #24]	; (800b9e8 <SDMMC_SendCommand+0x50>)
 800b9d0:	4013      	ands	r3, r2
 800b9d2:	68fa      	ldr	r2, [r7, #12]
 800b9d4:	431a      	orrs	r2, r3
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800b9da:	2300      	movs	r3, #0
}
 800b9dc:	4618      	mov	r0, r3
 800b9de:	3714      	adds	r7, #20
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e6:	4770      	bx	lr
 800b9e8:	fffff000 	.word	0xfffff000

0800b9ec <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800b9ec:	b480      	push	{r7}
 800b9ee:	b083      	sub	sp, #12
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	691b      	ldr	r3, [r3, #16]
 800b9f8:	b2db      	uxtb	r3, r3
}
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	370c      	adds	r7, #12
 800b9fe:	46bd      	mov	sp, r7
 800ba00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba04:	4770      	bx	lr

0800ba06 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800ba06:	b480      	push	{r7}
 800ba08:	b085      	sub	sp, #20
 800ba0a:	af00      	add	r7, sp, #0
 800ba0c:	6078      	str	r0, [r7, #4]
 800ba0e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	3314      	adds	r3, #20
 800ba14:	461a      	mov	r2, r3
 800ba16:	683b      	ldr	r3, [r7, #0]
 800ba18:	4413      	add	r3, r2
 800ba1a:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	681b      	ldr	r3, [r3, #0]
}  
 800ba20:	4618      	mov	r0, r3
 800ba22:	3714      	adds	r7, #20
 800ba24:	46bd      	mov	sp, r7
 800ba26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba2a:	4770      	bx	lr

0800ba2c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800ba2c:	b480      	push	{r7}
 800ba2e:	b085      	sub	sp, #20
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	6078      	str	r0, [r7, #4]
 800ba34:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ba36:	2300      	movs	r3, #0
 800ba38:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800ba3a:	683b      	ldr	r3, [r7, #0]
 800ba3c:	681a      	ldr	r2, [r3, #0]
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800ba42:	683b      	ldr	r3, [r7, #0]
 800ba44:	685a      	ldr	r2, [r3, #4]
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ba4a:	683b      	ldr	r3, [r7, #0]
 800ba4c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800ba4e:	683b      	ldr	r3, [r7, #0]
 800ba50:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ba52:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800ba54:	683b      	ldr	r3, [r7, #0]
 800ba56:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800ba58:	431a      	orrs	r2, r3
                       Data->DPSM);
 800ba5a:	683b      	ldr	r3, [r7, #0]
 800ba5c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800ba5e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ba60:	68fa      	ldr	r2, [r7, #12]
 800ba62:	4313      	orrs	r3, r2
 800ba64:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba6a:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	431a      	orrs	r2, r3
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800ba76:	2300      	movs	r3, #0

}
 800ba78:	4618      	mov	r0, r3
 800ba7a:	3714      	adds	r7, #20
 800ba7c:	46bd      	mov	sp, r7
 800ba7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba82:	4770      	bx	lr

0800ba84 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800ba84:	b580      	push	{r7, lr}
 800ba86:	b088      	sub	sp, #32
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	6078      	str	r0, [r7, #4]
 800ba8c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800ba8e:	683b      	ldr	r3, [r7, #0]
 800ba90:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800ba92:	2310      	movs	r3, #16
 800ba94:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ba96:	2340      	movs	r3, #64	; 0x40
 800ba98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ba9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800baa2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800baa4:	f107 0308 	add.w	r3, r7, #8
 800baa8:	4619      	mov	r1, r3
 800baaa:	6878      	ldr	r0, [r7, #4]
 800baac:	f7ff ff74 	bl	800b998 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800bab0:	f241 3288 	movw	r2, #5000	; 0x1388
 800bab4:	2110      	movs	r1, #16
 800bab6:	6878      	ldr	r0, [r7, #4]
 800bab8:	f000 fa42 	bl	800bf40 <SDMMC_GetCmdResp1>
 800babc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800babe:	69fb      	ldr	r3, [r7, #28]
}
 800bac0:	4618      	mov	r0, r3
 800bac2:	3720      	adds	r7, #32
 800bac4:	46bd      	mov	sp, r7
 800bac6:	bd80      	pop	{r7, pc}

0800bac8 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800bac8:	b580      	push	{r7, lr}
 800baca:	b088      	sub	sp, #32
 800bacc:	af00      	add	r7, sp, #0
 800bace:	6078      	str	r0, [r7, #4]
 800bad0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800bad2:	683b      	ldr	r3, [r7, #0]
 800bad4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800bad6:	2311      	movs	r3, #17
 800bad8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bada:	2340      	movs	r3, #64	; 0x40
 800badc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bade:	2300      	movs	r3, #0
 800bae0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bae2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bae6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bae8:	f107 0308 	add.w	r3, r7, #8
 800baec:	4619      	mov	r1, r3
 800baee:	6878      	ldr	r0, [r7, #4]
 800baf0:	f7ff ff52 	bl	800b998 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800baf4:	f241 3288 	movw	r2, #5000	; 0x1388
 800baf8:	2111      	movs	r1, #17
 800bafa:	6878      	ldr	r0, [r7, #4]
 800bafc:	f000 fa20 	bl	800bf40 <SDMMC_GetCmdResp1>
 800bb00:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bb02:	69fb      	ldr	r3, [r7, #28]
}
 800bb04:	4618      	mov	r0, r3
 800bb06:	3720      	adds	r7, #32
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	bd80      	pop	{r7, pc}

0800bb0c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	b088      	sub	sp, #32
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	6078      	str	r0, [r7, #4]
 800bb14:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800bb16:	683b      	ldr	r3, [r7, #0]
 800bb18:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800bb1a:	2312      	movs	r3, #18
 800bb1c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bb1e:	2340      	movs	r3, #64	; 0x40
 800bb20:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bb22:	2300      	movs	r3, #0
 800bb24:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bb26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bb2a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bb2c:	f107 0308 	add.w	r3, r7, #8
 800bb30:	4619      	mov	r1, r3
 800bb32:	6878      	ldr	r0, [r7, #4]
 800bb34:	f7ff ff30 	bl	800b998 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800bb38:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb3c:	2112      	movs	r1, #18
 800bb3e:	6878      	ldr	r0, [r7, #4]
 800bb40:	f000 f9fe 	bl	800bf40 <SDMMC_GetCmdResp1>
 800bb44:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bb46:	69fb      	ldr	r3, [r7, #28]
}
 800bb48:	4618      	mov	r0, r3
 800bb4a:	3720      	adds	r7, #32
 800bb4c:	46bd      	mov	sp, r7
 800bb4e:	bd80      	pop	{r7, pc}

0800bb50 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800bb50:	b580      	push	{r7, lr}
 800bb52:	b088      	sub	sp, #32
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	6078      	str	r0, [r7, #4]
 800bb58:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800bb5a:	683b      	ldr	r3, [r7, #0]
 800bb5c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800bb5e:	2318      	movs	r3, #24
 800bb60:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bb62:	2340      	movs	r3, #64	; 0x40
 800bb64:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bb66:	2300      	movs	r3, #0
 800bb68:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bb6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bb6e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bb70:	f107 0308 	add.w	r3, r7, #8
 800bb74:	4619      	mov	r1, r3
 800bb76:	6878      	ldr	r0, [r7, #4]
 800bb78:	f7ff ff0e 	bl	800b998 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800bb7c:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb80:	2118      	movs	r1, #24
 800bb82:	6878      	ldr	r0, [r7, #4]
 800bb84:	f000 f9dc 	bl	800bf40 <SDMMC_GetCmdResp1>
 800bb88:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bb8a:	69fb      	ldr	r3, [r7, #28]
}
 800bb8c:	4618      	mov	r0, r3
 800bb8e:	3720      	adds	r7, #32
 800bb90:	46bd      	mov	sp, r7
 800bb92:	bd80      	pop	{r7, pc}

0800bb94 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800bb94:	b580      	push	{r7, lr}
 800bb96:	b088      	sub	sp, #32
 800bb98:	af00      	add	r7, sp, #0
 800bb9a:	6078      	str	r0, [r7, #4]
 800bb9c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800bb9e:	683b      	ldr	r3, [r7, #0]
 800bba0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800bba2:	2319      	movs	r3, #25
 800bba4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bba6:	2340      	movs	r3, #64	; 0x40
 800bba8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bbaa:	2300      	movs	r3, #0
 800bbac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bbae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bbb2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bbb4:	f107 0308 	add.w	r3, r7, #8
 800bbb8:	4619      	mov	r1, r3
 800bbba:	6878      	ldr	r0, [r7, #4]
 800bbbc:	f7ff feec 	bl	800b998 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800bbc0:	f241 3288 	movw	r2, #5000	; 0x1388
 800bbc4:	2119      	movs	r1, #25
 800bbc6:	6878      	ldr	r0, [r7, #4]
 800bbc8:	f000 f9ba 	bl	800bf40 <SDMMC_GetCmdResp1>
 800bbcc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bbce:	69fb      	ldr	r3, [r7, #28]
}
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	3720      	adds	r7, #32
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	bd80      	pop	{r7, pc}

0800bbd8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800bbd8:	b580      	push	{r7, lr}
 800bbda:	b088      	sub	sp, #32
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800bbe4:	230c      	movs	r3, #12
 800bbe6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bbe8:	2340      	movs	r3, #64	; 0x40
 800bbea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bbec:	2300      	movs	r3, #0
 800bbee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bbf0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bbf4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bbf6:	f107 0308 	add.w	r3, r7, #8
 800bbfa:	4619      	mov	r1, r3
 800bbfc:	6878      	ldr	r0, [r7, #4]
 800bbfe:	f7ff fecb 	bl	800b998 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800bc02:	4a05      	ldr	r2, [pc, #20]	; (800bc18 <SDMMC_CmdStopTransfer+0x40>)
 800bc04:	210c      	movs	r1, #12
 800bc06:	6878      	ldr	r0, [r7, #4]
 800bc08:	f000 f99a 	bl	800bf40 <SDMMC_GetCmdResp1>
 800bc0c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bc0e:	69fb      	ldr	r3, [r7, #28]
}
 800bc10:	4618      	mov	r0, r3
 800bc12:	3720      	adds	r7, #32
 800bc14:	46bd      	mov	sp, r7
 800bc16:	bd80      	pop	{r7, pc}
 800bc18:	05f5e100 	.word	0x05f5e100

0800bc1c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	b08a      	sub	sp, #40	; 0x28
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	60f8      	str	r0, [r7, #12]
 800bc24:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800bc28:	683b      	ldr	r3, [r7, #0]
 800bc2a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800bc2c:	2307      	movs	r3, #7
 800bc2e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bc30:	2340      	movs	r3, #64	; 0x40
 800bc32:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bc34:	2300      	movs	r3, #0
 800bc36:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bc38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bc3c:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bc3e:	f107 0310 	add.w	r3, r7, #16
 800bc42:	4619      	mov	r1, r3
 800bc44:	68f8      	ldr	r0, [r7, #12]
 800bc46:	f7ff fea7 	bl	800b998 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800bc4a:	f241 3288 	movw	r2, #5000	; 0x1388
 800bc4e:	2107      	movs	r1, #7
 800bc50:	68f8      	ldr	r0, [r7, #12]
 800bc52:	f000 f975 	bl	800bf40 <SDMMC_GetCmdResp1>
 800bc56:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800bc58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	3728      	adds	r7, #40	; 0x28
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	bd80      	pop	{r7, pc}

0800bc62 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800bc62:	b580      	push	{r7, lr}
 800bc64:	b088      	sub	sp, #32
 800bc66:	af00      	add	r7, sp, #0
 800bc68:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800bc6e:	2300      	movs	r3, #0
 800bc70:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800bc72:	2300      	movs	r3, #0
 800bc74:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bc76:	2300      	movs	r3, #0
 800bc78:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bc7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bc7e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bc80:	f107 0308 	add.w	r3, r7, #8
 800bc84:	4619      	mov	r1, r3
 800bc86:	6878      	ldr	r0, [r7, #4]
 800bc88:	f7ff fe86 	bl	800b998 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800bc8c:	6878      	ldr	r0, [r7, #4]
 800bc8e:	f000 f92f 	bl	800bef0 <SDMMC_GetCmdError>
 800bc92:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bc94:	69fb      	ldr	r3, [r7, #28]
}
 800bc96:	4618      	mov	r0, r3
 800bc98:	3720      	adds	r7, #32
 800bc9a:	46bd      	mov	sp, r7
 800bc9c:	bd80      	pop	{r7, pc}

0800bc9e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800bc9e:	b580      	push	{r7, lr}
 800bca0:	b088      	sub	sp, #32
 800bca2:	af00      	add	r7, sp, #0
 800bca4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800bca6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800bcaa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800bcac:	2308      	movs	r3, #8
 800bcae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bcb0:	2340      	movs	r3, #64	; 0x40
 800bcb2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bcb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bcbc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bcbe:	f107 0308 	add.w	r3, r7, #8
 800bcc2:	4619      	mov	r1, r3
 800bcc4:	6878      	ldr	r0, [r7, #4]
 800bcc6:	f7ff fe67 	bl	800b998 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800bcca:	6878      	ldr	r0, [r7, #4]
 800bccc:	f000 fb18 	bl	800c300 <SDMMC_GetCmdResp7>
 800bcd0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bcd2:	69fb      	ldr	r3, [r7, #28]
}
 800bcd4:	4618      	mov	r0, r3
 800bcd6:	3720      	adds	r7, #32
 800bcd8:	46bd      	mov	sp, r7
 800bcda:	bd80      	pop	{r7, pc}

0800bcdc <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800bcdc:	b580      	push	{r7, lr}
 800bcde:	b088      	sub	sp, #32
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	6078      	str	r0, [r7, #4]
 800bce4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800bce6:	683b      	ldr	r3, [r7, #0]
 800bce8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800bcea:	2337      	movs	r3, #55	; 0x37
 800bcec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bcee:	2340      	movs	r3, #64	; 0x40
 800bcf0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bcf6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bcfa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bcfc:	f107 0308 	add.w	r3, r7, #8
 800bd00:	4619      	mov	r1, r3
 800bd02:	6878      	ldr	r0, [r7, #4]
 800bd04:	f7ff fe48 	bl	800b998 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800bd08:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd0c:	2137      	movs	r1, #55	; 0x37
 800bd0e:	6878      	ldr	r0, [r7, #4]
 800bd10:	f000 f916 	bl	800bf40 <SDMMC_GetCmdResp1>
 800bd14:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bd16:	69fb      	ldr	r3, [r7, #28]
}
 800bd18:	4618      	mov	r0, r3
 800bd1a:	3720      	adds	r7, #32
 800bd1c:	46bd      	mov	sp, r7
 800bd1e:	bd80      	pop	{r7, pc}

0800bd20 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800bd20:	b580      	push	{r7, lr}
 800bd22:	b088      	sub	sp, #32
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	6078      	str	r0, [r7, #4]
 800bd28:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800bd2a:	683a      	ldr	r2, [r7, #0]
 800bd2c:	4b0d      	ldr	r3, [pc, #52]	; (800bd64 <SDMMC_CmdAppOperCommand+0x44>)
 800bd2e:	4313      	orrs	r3, r2
 800bd30:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800bd32:	2329      	movs	r3, #41	; 0x29
 800bd34:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bd36:	2340      	movs	r3, #64	; 0x40
 800bd38:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bd3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bd42:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bd44:	f107 0308 	add.w	r3, r7, #8
 800bd48:	4619      	mov	r1, r3
 800bd4a:	6878      	ldr	r0, [r7, #4]
 800bd4c:	f7ff fe24 	bl	800b998 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800bd50:	6878      	ldr	r0, [r7, #4]
 800bd52:	f000 fa27 	bl	800c1a4 <SDMMC_GetCmdResp3>
 800bd56:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bd58:	69fb      	ldr	r3, [r7, #28]
}
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	3720      	adds	r7, #32
 800bd5e:	46bd      	mov	sp, r7
 800bd60:	bd80      	pop	{r7, pc}
 800bd62:	bf00      	nop
 800bd64:	80100000 	.word	0x80100000

0800bd68 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800bd68:	b580      	push	{r7, lr}
 800bd6a:	b088      	sub	sp, #32
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	6078      	str	r0, [r7, #4]
 800bd70:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800bd72:	683b      	ldr	r3, [r7, #0]
 800bd74:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800bd76:	2306      	movs	r3, #6
 800bd78:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bd7a:	2340      	movs	r3, #64	; 0x40
 800bd7c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bd7e:	2300      	movs	r3, #0
 800bd80:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bd82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bd86:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bd88:	f107 0308 	add.w	r3, r7, #8
 800bd8c:	4619      	mov	r1, r3
 800bd8e:	6878      	ldr	r0, [r7, #4]
 800bd90:	f7ff fe02 	bl	800b998 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800bd94:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd98:	2106      	movs	r1, #6
 800bd9a:	6878      	ldr	r0, [r7, #4]
 800bd9c:	f000 f8d0 	bl	800bf40 <SDMMC_GetCmdResp1>
 800bda0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bda2:	69fb      	ldr	r3, [r7, #28]
}
 800bda4:	4618      	mov	r0, r3
 800bda6:	3720      	adds	r7, #32
 800bda8:	46bd      	mov	sp, r7
 800bdaa:	bd80      	pop	{r7, pc}

0800bdac <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800bdac:	b580      	push	{r7, lr}
 800bdae:	b088      	sub	sp, #32
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800bdb8:	2333      	movs	r3, #51	; 0x33
 800bdba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bdbc:	2340      	movs	r3, #64	; 0x40
 800bdbe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bdc0:	2300      	movs	r3, #0
 800bdc2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bdc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bdc8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800bdca:	f107 0308 	add.w	r3, r7, #8
 800bdce:	4619      	mov	r1, r3
 800bdd0:	6878      	ldr	r0, [r7, #4]
 800bdd2:	f7ff fde1 	bl	800b998 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800bdd6:	f241 3288 	movw	r2, #5000	; 0x1388
 800bdda:	2133      	movs	r1, #51	; 0x33
 800bddc:	6878      	ldr	r0, [r7, #4]
 800bdde:	f000 f8af 	bl	800bf40 <SDMMC_GetCmdResp1>
 800bde2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bde4:	69fb      	ldr	r3, [r7, #28]
}
 800bde6:	4618      	mov	r0, r3
 800bde8:	3720      	adds	r7, #32
 800bdea:	46bd      	mov	sp, r7
 800bdec:	bd80      	pop	{r7, pc}

0800bdee <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800bdee:	b580      	push	{r7, lr}
 800bdf0:	b088      	sub	sp, #32
 800bdf2:	af00      	add	r7, sp, #0
 800bdf4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800bdf6:	2300      	movs	r3, #0
 800bdf8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800bdfa:	2302      	movs	r3, #2
 800bdfc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800bdfe:	23c0      	movs	r3, #192	; 0xc0
 800be00:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800be02:	2300      	movs	r3, #0
 800be04:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800be06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800be0a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800be0c:	f107 0308 	add.w	r3, r7, #8
 800be10:	4619      	mov	r1, r3
 800be12:	6878      	ldr	r0, [r7, #4]
 800be14:	f7ff fdc0 	bl	800b998 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800be18:	6878      	ldr	r0, [r7, #4]
 800be1a:	f000 f97d 	bl	800c118 <SDMMC_GetCmdResp2>
 800be1e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800be20:	69fb      	ldr	r3, [r7, #28]
}
 800be22:	4618      	mov	r0, r3
 800be24:	3720      	adds	r7, #32
 800be26:	46bd      	mov	sp, r7
 800be28:	bd80      	pop	{r7, pc}

0800be2a <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800be2a:	b580      	push	{r7, lr}
 800be2c:	b088      	sub	sp, #32
 800be2e:	af00      	add	r7, sp, #0
 800be30:	6078      	str	r0, [r7, #4]
 800be32:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800be34:	683b      	ldr	r3, [r7, #0]
 800be36:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800be38:	2309      	movs	r3, #9
 800be3a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800be3c:	23c0      	movs	r3, #192	; 0xc0
 800be3e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800be40:	2300      	movs	r3, #0
 800be42:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800be44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800be48:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800be4a:	f107 0308 	add.w	r3, r7, #8
 800be4e:	4619      	mov	r1, r3
 800be50:	6878      	ldr	r0, [r7, #4]
 800be52:	f7ff fda1 	bl	800b998 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800be56:	6878      	ldr	r0, [r7, #4]
 800be58:	f000 f95e 	bl	800c118 <SDMMC_GetCmdResp2>
 800be5c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800be5e:	69fb      	ldr	r3, [r7, #28]
}
 800be60:	4618      	mov	r0, r3
 800be62:	3720      	adds	r7, #32
 800be64:	46bd      	mov	sp, r7
 800be66:	bd80      	pop	{r7, pc}

0800be68 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800be68:	b580      	push	{r7, lr}
 800be6a:	b088      	sub	sp, #32
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	6078      	str	r0, [r7, #4]
 800be70:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800be72:	2300      	movs	r3, #0
 800be74:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800be76:	2303      	movs	r3, #3
 800be78:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800be7a:	2340      	movs	r3, #64	; 0x40
 800be7c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800be7e:	2300      	movs	r3, #0
 800be80:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800be82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800be86:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800be88:	f107 0308 	add.w	r3, r7, #8
 800be8c:	4619      	mov	r1, r3
 800be8e:	6878      	ldr	r0, [r7, #4]
 800be90:	f7ff fd82 	bl	800b998 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800be94:	683a      	ldr	r2, [r7, #0]
 800be96:	2103      	movs	r1, #3
 800be98:	6878      	ldr	r0, [r7, #4]
 800be9a:	f000 f9bd 	bl	800c218 <SDMMC_GetCmdResp6>
 800be9e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bea0:	69fb      	ldr	r3, [r7, #28]
}
 800bea2:	4618      	mov	r0, r3
 800bea4:	3720      	adds	r7, #32
 800bea6:	46bd      	mov	sp, r7
 800bea8:	bd80      	pop	{r7, pc}

0800beaa <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800beaa:	b580      	push	{r7, lr}
 800beac:	b088      	sub	sp, #32
 800beae:	af00      	add	r7, sp, #0
 800beb0:	6078      	str	r0, [r7, #4]
 800beb2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800beb4:	683b      	ldr	r3, [r7, #0]
 800beb6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800beb8:	230d      	movs	r3, #13
 800beba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800bebc:	2340      	movs	r3, #64	; 0x40
 800bebe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800bec0:	2300      	movs	r3, #0
 800bec2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800bec4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bec8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800beca:	f107 0308 	add.w	r3, r7, #8
 800bece:	4619      	mov	r1, r3
 800bed0:	6878      	ldr	r0, [r7, #4]
 800bed2:	f7ff fd61 	bl	800b998 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800bed6:	f241 3288 	movw	r2, #5000	; 0x1388
 800beda:	210d      	movs	r1, #13
 800bedc:	6878      	ldr	r0, [r7, #4]
 800bede:	f000 f82f 	bl	800bf40 <SDMMC_GetCmdResp1>
 800bee2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800bee4:	69fb      	ldr	r3, [r7, #28]
}
 800bee6:	4618      	mov	r0, r3
 800bee8:	3720      	adds	r7, #32
 800beea:	46bd      	mov	sp, r7
 800beec:	bd80      	pop	{r7, pc}
	...

0800bef0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800bef0:	b490      	push	{r4, r7}
 800bef2:	b082      	sub	sp, #8
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bef8:	4b0f      	ldr	r3, [pc, #60]	; (800bf38 <SDMMC_GetCmdError+0x48>)
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	4a0f      	ldr	r2, [pc, #60]	; (800bf3c <SDMMC_GetCmdError+0x4c>)
 800befe:	fba2 2303 	umull	r2, r3, r2, r3
 800bf02:	0a5b      	lsrs	r3, r3, #9
 800bf04:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf08:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800bf0c:	4623      	mov	r3, r4
 800bf0e:	1e5c      	subs	r4, r3, #1
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d102      	bne.n	800bf1a <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bf14:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bf18:	e009      	b.n	800bf2e <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d0f2      	beq.n	800bf0c <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	22c5      	movs	r2, #197	; 0xc5
 800bf2a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800bf2c:	2300      	movs	r3, #0
}
 800bf2e:	4618      	mov	r0, r3
 800bf30:	3708      	adds	r7, #8
 800bf32:	46bd      	mov	sp, r7
 800bf34:	bc90      	pop	{r4, r7}
 800bf36:	4770      	bx	lr
 800bf38:	20000000 	.word	0x20000000
 800bf3c:	10624dd3 	.word	0x10624dd3

0800bf40 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800bf40:	b590      	push	{r4, r7, lr}
 800bf42:	b087      	sub	sp, #28
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	60f8      	str	r0, [r7, #12]
 800bf48:	460b      	mov	r3, r1
 800bf4a:	607a      	str	r2, [r7, #4]
 800bf4c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800bf4e:	4b6f      	ldr	r3, [pc, #444]	; (800c10c <SDMMC_GetCmdResp1+0x1cc>)
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	4a6f      	ldr	r2, [pc, #444]	; (800c110 <SDMMC_GetCmdResp1+0x1d0>)
 800bf54:	fba2 2303 	umull	r2, r3, r2, r3
 800bf58:	0a5b      	lsrs	r3, r3, #9
 800bf5a:	687a      	ldr	r2, [r7, #4]
 800bf5c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800bf60:	4623      	mov	r3, r4
 800bf62:	1e5c      	subs	r4, r3, #1
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d102      	bne.n	800bf6e <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bf68:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bf6c:	e0c9      	b.n	800c102 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf72:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bf74:	697b      	ldr	r3, [r7, #20]
 800bf76:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d0f0      	beq.n	800bf60 <SDMMC_GetCmdResp1+0x20>
 800bf7e:	697b      	ldr	r3, [r7, #20]
 800bf80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d1eb      	bne.n	800bf60 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf8c:	f003 0304 	and.w	r3, r3, #4
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d004      	beq.n	800bf9e <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	2204      	movs	r2, #4
 800bf98:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bf9a:	2304      	movs	r3, #4
 800bf9c:	e0b1      	b.n	800c102 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bfa2:	f003 0301 	and.w	r3, r3, #1
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d004      	beq.n	800bfb4 <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	2201      	movs	r2, #1
 800bfae:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bfb0:	2301      	movs	r3, #1
 800bfb2:	e0a6      	b.n	800c102 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	22c5      	movs	r2, #197	; 0xc5
 800bfb8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800bfba:	68f8      	ldr	r0, [r7, #12]
 800bfbc:	f7ff fd16 	bl	800b9ec <SDMMC_GetCommandResponse>
 800bfc0:	4603      	mov	r3, r0
 800bfc2:	461a      	mov	r2, r3
 800bfc4:	7afb      	ldrb	r3, [r7, #11]
 800bfc6:	4293      	cmp	r3, r2
 800bfc8:	d001      	beq.n	800bfce <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bfca:	2301      	movs	r3, #1
 800bfcc:	e099      	b.n	800c102 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800bfce:	2100      	movs	r1, #0
 800bfd0:	68f8      	ldr	r0, [r7, #12]
 800bfd2:	f7ff fd18 	bl	800ba06 <SDMMC_GetResponse>
 800bfd6:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800bfd8:	693a      	ldr	r2, [r7, #16]
 800bfda:	4b4e      	ldr	r3, [pc, #312]	; (800c114 <SDMMC_GetCmdResp1+0x1d4>)
 800bfdc:	4013      	ands	r3, r2
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d101      	bne.n	800bfe6 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	e08d      	b.n	800c102 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800bfe6:	693b      	ldr	r3, [r7, #16]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	da02      	bge.n	800bff2 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800bfec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bff0:	e087      	b.n	800c102 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800bff2:	693b      	ldr	r3, [r7, #16]
 800bff4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d001      	beq.n	800c000 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800bffc:	2340      	movs	r3, #64	; 0x40
 800bffe:	e080      	b.n	800c102 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c000:	693b      	ldr	r3, [r7, #16]
 800c002:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c006:	2b00      	cmp	r3, #0
 800c008:	d001      	beq.n	800c00e <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c00a:	2380      	movs	r3, #128	; 0x80
 800c00c:	e079      	b.n	800c102 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c00e:	693b      	ldr	r3, [r7, #16]
 800c010:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c014:	2b00      	cmp	r3, #0
 800c016:	d002      	beq.n	800c01e <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c018:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c01c:	e071      	b.n	800c102 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c01e:	693b      	ldr	r3, [r7, #16]
 800c020:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c024:	2b00      	cmp	r3, #0
 800c026:	d002      	beq.n	800c02e <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c028:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c02c:	e069      	b.n	800c102 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c02e:	693b      	ldr	r3, [r7, #16]
 800c030:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c034:	2b00      	cmp	r3, #0
 800c036:	d002      	beq.n	800c03e <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c038:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c03c:	e061      	b.n	800c102 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c03e:	693b      	ldr	r3, [r7, #16]
 800c040:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c044:	2b00      	cmp	r3, #0
 800c046:	d002      	beq.n	800c04e <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c048:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c04c:	e059      	b.n	800c102 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c04e:	693b      	ldr	r3, [r7, #16]
 800c050:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c054:	2b00      	cmp	r3, #0
 800c056:	d002      	beq.n	800c05e <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c058:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c05c:	e051      	b.n	800c102 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c05e:	693b      	ldr	r3, [r7, #16]
 800c060:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c064:	2b00      	cmp	r3, #0
 800c066:	d002      	beq.n	800c06e <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c068:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c06c:	e049      	b.n	800c102 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c06e:	693b      	ldr	r3, [r7, #16]
 800c070:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c074:	2b00      	cmp	r3, #0
 800c076:	d002      	beq.n	800c07e <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c078:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c07c:	e041      	b.n	800c102 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c07e:	693b      	ldr	r3, [r7, #16]
 800c080:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c084:	2b00      	cmp	r3, #0
 800c086:	d002      	beq.n	800c08e <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800c088:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c08c:	e039      	b.n	800c102 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c08e:	693b      	ldr	r3, [r7, #16]
 800c090:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c094:	2b00      	cmp	r3, #0
 800c096:	d002      	beq.n	800c09e <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c098:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c09c:	e031      	b.n	800c102 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c09e:	693b      	ldr	r3, [r7, #16]
 800c0a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d002      	beq.n	800c0ae <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c0a8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800c0ac:	e029      	b.n	800c102 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c0ae:	693b      	ldr	r3, [r7, #16]
 800c0b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d002      	beq.n	800c0be <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c0b8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c0bc:	e021      	b.n	800c102 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c0be:	693b      	ldr	r3, [r7, #16]
 800c0c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d002      	beq.n	800c0ce <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c0c8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800c0cc:	e019      	b.n	800c102 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c0ce:	693b      	ldr	r3, [r7, #16]
 800c0d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d002      	beq.n	800c0de <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c0d8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800c0dc:	e011      	b.n	800c102 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c0de:	693b      	ldr	r3, [r7, #16]
 800c0e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d002      	beq.n	800c0ee <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800c0e8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c0ec:	e009      	b.n	800c102 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800c0ee:	693b      	ldr	r3, [r7, #16]
 800c0f0:	f003 0308 	and.w	r3, r3, #8
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d002      	beq.n	800c0fe <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800c0f8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800c0fc:	e001      	b.n	800c102 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c0fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c102:	4618      	mov	r0, r3
 800c104:	371c      	adds	r7, #28
 800c106:	46bd      	mov	sp, r7
 800c108:	bd90      	pop	{r4, r7, pc}
 800c10a:	bf00      	nop
 800c10c:	20000000 	.word	0x20000000
 800c110:	10624dd3 	.word	0x10624dd3
 800c114:	fdffe008 	.word	0xfdffe008

0800c118 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800c118:	b490      	push	{r4, r7}
 800c11a:	b084      	sub	sp, #16
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c120:	4b1e      	ldr	r3, [pc, #120]	; (800c19c <SDMMC_GetCmdResp2+0x84>)
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	4a1e      	ldr	r2, [pc, #120]	; (800c1a0 <SDMMC_GetCmdResp2+0x88>)
 800c126:	fba2 2303 	umull	r2, r3, r2, r3
 800c12a:	0a5b      	lsrs	r3, r3, #9
 800c12c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c130:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c134:	4623      	mov	r3, r4
 800c136:	1e5c      	subs	r4, r3, #1
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d102      	bne.n	800c142 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c13c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c140:	e026      	b.n	800c190 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c146:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d0f0      	beq.n	800c134 <SDMMC_GetCmdResp2+0x1c>
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d1eb      	bne.n	800c134 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c160:	f003 0304 	and.w	r3, r3, #4
 800c164:	2b00      	cmp	r3, #0
 800c166:	d004      	beq.n	800c172 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	2204      	movs	r2, #4
 800c16c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c16e:	2304      	movs	r3, #4
 800c170:	e00e      	b.n	800c190 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c176:	f003 0301 	and.w	r3, r3, #1
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d004      	beq.n	800c188 <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	2201      	movs	r2, #1
 800c182:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c184:	2301      	movs	r3, #1
 800c186:	e003      	b.n	800c190 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	22c5      	movs	r2, #197	; 0xc5
 800c18c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800c18e:	2300      	movs	r3, #0
}
 800c190:	4618      	mov	r0, r3
 800c192:	3710      	adds	r7, #16
 800c194:	46bd      	mov	sp, r7
 800c196:	bc90      	pop	{r4, r7}
 800c198:	4770      	bx	lr
 800c19a:	bf00      	nop
 800c19c:	20000000 	.word	0x20000000
 800c1a0:	10624dd3 	.word	0x10624dd3

0800c1a4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800c1a4:	b490      	push	{r4, r7}
 800c1a6:	b084      	sub	sp, #16
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c1ac:	4b18      	ldr	r3, [pc, #96]	; (800c210 <SDMMC_GetCmdResp3+0x6c>)
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	4a18      	ldr	r2, [pc, #96]	; (800c214 <SDMMC_GetCmdResp3+0x70>)
 800c1b2:	fba2 2303 	umull	r2, r3, r2, r3
 800c1b6:	0a5b      	lsrs	r3, r3, #9
 800c1b8:	f241 3288 	movw	r2, #5000	; 0x1388
 800c1bc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c1c0:	4623      	mov	r3, r4
 800c1c2:	1e5c      	subs	r4, r3, #1
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d102      	bne.n	800c1ce <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c1c8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c1cc:	e01b      	b.n	800c206 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1d2:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d0f0      	beq.n	800c1c0 <SDMMC_GetCmdResp3+0x1c>
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d1eb      	bne.n	800c1c0 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1ec:	f003 0304 	and.w	r3, r3, #4
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d004      	beq.n	800c1fe <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	2204      	movs	r2, #4
 800c1f8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c1fa:	2304      	movs	r3, #4
 800c1fc:	e003      	b.n	800c206 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	22c5      	movs	r2, #197	; 0xc5
 800c202:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800c204:	2300      	movs	r3, #0
}
 800c206:	4618      	mov	r0, r3
 800c208:	3710      	adds	r7, #16
 800c20a:	46bd      	mov	sp, r7
 800c20c:	bc90      	pop	{r4, r7}
 800c20e:	4770      	bx	lr
 800c210:	20000000 	.word	0x20000000
 800c214:	10624dd3 	.word	0x10624dd3

0800c218 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800c218:	b590      	push	{r4, r7, lr}
 800c21a:	b087      	sub	sp, #28
 800c21c:	af00      	add	r7, sp, #0
 800c21e:	60f8      	str	r0, [r7, #12]
 800c220:	460b      	mov	r3, r1
 800c222:	607a      	str	r2, [r7, #4]
 800c224:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c226:	4b34      	ldr	r3, [pc, #208]	; (800c2f8 <SDMMC_GetCmdResp6+0xe0>)
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	4a34      	ldr	r2, [pc, #208]	; (800c2fc <SDMMC_GetCmdResp6+0xe4>)
 800c22c:	fba2 2303 	umull	r2, r3, r2, r3
 800c230:	0a5b      	lsrs	r3, r3, #9
 800c232:	f241 3288 	movw	r2, #5000	; 0x1388
 800c236:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c23a:	4623      	mov	r3, r4
 800c23c:	1e5c      	subs	r4, r3, #1
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d102      	bne.n	800c248 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c242:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c246:	e052      	b.n	800c2ee <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c24c:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c24e:	697b      	ldr	r3, [r7, #20]
 800c250:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c254:	2b00      	cmp	r3, #0
 800c256:	d0f0      	beq.n	800c23a <SDMMC_GetCmdResp6+0x22>
 800c258:	697b      	ldr	r3, [r7, #20]
 800c25a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d1eb      	bne.n	800c23a <SDMMC_GetCmdResp6+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c266:	f003 0304 	and.w	r3, r3, #4
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d004      	beq.n	800c278 <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	2204      	movs	r2, #4
 800c272:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c274:	2304      	movs	r3, #4
 800c276:	e03a      	b.n	800c2ee <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c27c:	f003 0301 	and.w	r3, r3, #1
 800c280:	2b00      	cmp	r3, #0
 800c282:	d004      	beq.n	800c28e <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	2201      	movs	r2, #1
 800c288:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c28a:	2301      	movs	r3, #1
 800c28c:	e02f      	b.n	800c2ee <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c28e:	68f8      	ldr	r0, [r7, #12]
 800c290:	f7ff fbac 	bl	800b9ec <SDMMC_GetCommandResponse>
 800c294:	4603      	mov	r3, r0
 800c296:	461a      	mov	r2, r3
 800c298:	7afb      	ldrb	r3, [r7, #11]
 800c29a:	4293      	cmp	r3, r2
 800c29c:	d001      	beq.n	800c2a2 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c29e:	2301      	movs	r3, #1
 800c2a0:	e025      	b.n	800c2ee <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	22c5      	movs	r2, #197	; 0xc5
 800c2a6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c2a8:	2100      	movs	r1, #0
 800c2aa:	68f8      	ldr	r0, [r7, #12]
 800c2ac:	f7ff fbab 	bl	800ba06 <SDMMC_GetResponse>
 800c2b0:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800c2b2:	693b      	ldr	r3, [r7, #16]
 800c2b4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d106      	bne.n	800c2ca <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800c2bc:	693b      	ldr	r3, [r7, #16]
 800c2be:	0c1b      	lsrs	r3, r3, #16
 800c2c0:	b29a      	uxth	r2, r3
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	e011      	b.n	800c2ee <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800c2ca:	693b      	ldr	r3, [r7, #16]
 800c2cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d002      	beq.n	800c2da <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c2d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c2d8:	e009      	b.n	800c2ee <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800c2da:	693b      	ldr	r3, [r7, #16]
 800c2dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d002      	beq.n	800c2ea <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c2e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c2e8:	e001      	b.n	800c2ee <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c2ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	371c      	adds	r7, #28
 800c2f2:	46bd      	mov	sp, r7
 800c2f4:	bd90      	pop	{r4, r7, pc}
 800c2f6:	bf00      	nop
 800c2f8:	20000000 	.word	0x20000000
 800c2fc:	10624dd3 	.word	0x10624dd3

0800c300 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800c300:	b490      	push	{r4, r7}
 800c302:	b084      	sub	sp, #16
 800c304:	af00      	add	r7, sp, #0
 800c306:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c308:	4b21      	ldr	r3, [pc, #132]	; (800c390 <SDMMC_GetCmdResp7+0x90>)
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	4a21      	ldr	r2, [pc, #132]	; (800c394 <SDMMC_GetCmdResp7+0x94>)
 800c30e:	fba2 2303 	umull	r2, r3, r2, r3
 800c312:	0a5b      	lsrs	r3, r3, #9
 800c314:	f241 3288 	movw	r2, #5000	; 0x1388
 800c318:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c31c:	4623      	mov	r3, r4
 800c31e:	1e5c      	subs	r4, r3, #1
 800c320:	2b00      	cmp	r3, #0
 800c322:	d102      	bne.n	800c32a <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c324:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c328:	e02c      	b.n	800c384 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDMMCx->STA;
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c32e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c336:	2b00      	cmp	r3, #0
 800c338:	d0f0      	beq.n	800c31c <SDMMC_GetCmdResp7+0x1c>
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c340:	2b00      	cmp	r3, #0
 800c342:	d1eb      	bne.n	800c31c <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c348:	f003 0304 	and.w	r3, r3, #4
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d004      	beq.n	800c35a <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	2204      	movs	r2, #4
 800c354:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c356:	2304      	movs	r3, #4
 800c358:	e014      	b.n	800c384 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c35e:	f003 0301 	and.w	r3, r3, #1
 800c362:	2b00      	cmp	r3, #0
 800c364:	d004      	beq.n	800c370 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	2201      	movs	r2, #1
 800c36a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c36c:	2301      	movs	r3, #1
 800c36e:	e009      	b.n	800c384 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c374:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d002      	beq.n	800c382 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	2240      	movs	r2, #64	; 0x40
 800c380:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800c382:	2300      	movs	r3, #0
  
}
 800c384:	4618      	mov	r0, r3
 800c386:	3710      	adds	r7, #16
 800c388:	46bd      	mov	sp, r7
 800c38a:	bc90      	pop	{r4, r7}
 800c38c:	4770      	bx	lr
 800c38e:	bf00      	nop
 800c390:	20000000 	.word	0x20000000
 800c394:	10624dd3 	.word	0x10624dd3

0800c398 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c398:	b084      	sub	sp, #16
 800c39a:	b580      	push	{r7, lr}
 800c39c:	b084      	sub	sp, #16
 800c39e:	af00      	add	r7, sp, #0
 800c3a0:	6078      	str	r0, [r7, #4]
 800c3a2:	f107 001c 	add.w	r0, r7, #28
 800c3a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c3aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3ac:	2b01      	cmp	r3, #1
 800c3ae:	d120      	bne.n	800c3f2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3b4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	68da      	ldr	r2, [r3, #12]
 800c3c0:	4b20      	ldr	r3, [pc, #128]	; (800c444 <USB_CoreInit+0xac>)
 800c3c2:	4013      	ands	r3, r2
 800c3c4:	687a      	ldr	r2, [r7, #4]
 800c3c6:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	68db      	ldr	r3, [r3, #12]
 800c3cc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c3d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c3d6:	2b01      	cmp	r3, #1
 800c3d8:	d105      	bne.n	800c3e6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	68db      	ldr	r3, [r3, #12]
 800c3de:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800c3e6:	6878      	ldr	r0, [r7, #4]
 800c3e8:	f000 f942 	bl	800c670 <USB_CoreReset>
 800c3ec:	4603      	mov	r3, r0
 800c3ee:	73fb      	strb	r3, [r7, #15]
 800c3f0:	e010      	b.n	800c414 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	68db      	ldr	r3, [r3, #12]
 800c3f6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800c3fe:	6878      	ldr	r0, [r7, #4]
 800c400:	f000 f936 	bl	800c670 <USB_CoreReset>
 800c404:	4603      	mov	r3, r0
 800c406:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c40c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800c414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c416:	2b01      	cmp	r3, #1
 800c418:	d10b      	bne.n	800c432 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	689b      	ldr	r3, [r3, #8]
 800c41e:	f043 0206 	orr.w	r2, r3, #6
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	689b      	ldr	r3, [r3, #8]
 800c42a:	f043 0220 	orr.w	r2, r3, #32
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c432:	7bfb      	ldrb	r3, [r7, #15]
}
 800c434:	4618      	mov	r0, r3
 800c436:	3710      	adds	r7, #16
 800c438:	46bd      	mov	sp, r7
 800c43a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c43e:	b004      	add	sp, #16
 800c440:	4770      	bx	lr
 800c442:	bf00      	nop
 800c444:	ffbdffbf 	.word	0xffbdffbf

0800c448 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c448:	b480      	push	{r7}
 800c44a:	b083      	sub	sp, #12
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	689b      	ldr	r3, [r3, #8]
 800c454:	f043 0201 	orr.w	r2, r3, #1
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c45c:	2300      	movs	r3, #0
}
 800c45e:	4618      	mov	r0, r3
 800c460:	370c      	adds	r7, #12
 800c462:	46bd      	mov	sp, r7
 800c464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c468:	4770      	bx	lr

0800c46a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c46a:	b480      	push	{r7}
 800c46c:	b083      	sub	sp, #12
 800c46e:	af00      	add	r7, sp, #0
 800c470:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	689b      	ldr	r3, [r3, #8]
 800c476:	f023 0201 	bic.w	r2, r3, #1
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c47e:	2300      	movs	r3, #0
}
 800c480:	4618      	mov	r0, r3
 800c482:	370c      	adds	r7, #12
 800c484:	46bd      	mov	sp, r7
 800c486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c48a:	4770      	bx	lr

0800c48c <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c48c:	b580      	push	{r7, lr}
 800c48e:	b082      	sub	sp, #8
 800c490:	af00      	add	r7, sp, #0
 800c492:	6078      	str	r0, [r7, #4]
 800c494:	460b      	mov	r3, r1
 800c496:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	68db      	ldr	r3, [r3, #12]
 800c49c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c4a4:	78fb      	ldrb	r3, [r7, #3]
 800c4a6:	2b01      	cmp	r3, #1
 800c4a8:	d106      	bne.n	800c4b8 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	68db      	ldr	r3, [r3, #12]
 800c4ae:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	60da      	str	r2, [r3, #12]
 800c4b6:	e00b      	b.n	800c4d0 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800c4b8:	78fb      	ldrb	r3, [r7, #3]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d106      	bne.n	800c4cc <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	68db      	ldr	r3, [r3, #12]
 800c4c2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	60da      	str	r2, [r3, #12]
 800c4ca:	e001      	b.n	800c4d0 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800c4cc:	2301      	movs	r3, #1
 800c4ce:	e003      	b.n	800c4d8 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800c4d0:	2032      	movs	r0, #50	; 0x32
 800c4d2:	f7f6 fbf7 	bl	8002cc4 <HAL_Delay>

  return HAL_OK;
 800c4d6:	2300      	movs	r3, #0
}
 800c4d8:	4618      	mov	r0, r3
 800c4da:	3708      	adds	r7, #8
 800c4dc:	46bd      	mov	sp, r7
 800c4de:	bd80      	pop	{r7, pc}

0800c4e0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c4e0:	b480      	push	{r7}
 800c4e2:	b085      	sub	sp, #20
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	6078      	str	r0, [r7, #4]
 800c4e8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800c4ea:	2300      	movs	r3, #0
 800c4ec:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c4ee:	683b      	ldr	r3, [r7, #0]
 800c4f0:	019b      	lsls	r3, r3, #6
 800c4f2:	f043 0220 	orr.w	r2, r3, #32
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	3301      	adds	r3, #1
 800c4fe:	60fb      	str	r3, [r7, #12]
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	4a09      	ldr	r2, [pc, #36]	; (800c528 <USB_FlushTxFifo+0x48>)
 800c504:	4293      	cmp	r3, r2
 800c506:	d901      	bls.n	800c50c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800c508:	2303      	movs	r3, #3
 800c50a:	e006      	b.n	800c51a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	691b      	ldr	r3, [r3, #16]
 800c510:	f003 0320 	and.w	r3, r3, #32
 800c514:	2b20      	cmp	r3, #32
 800c516:	d0f0      	beq.n	800c4fa <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800c518:	2300      	movs	r3, #0
}
 800c51a:	4618      	mov	r0, r3
 800c51c:	3714      	adds	r7, #20
 800c51e:	46bd      	mov	sp, r7
 800c520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c524:	4770      	bx	lr
 800c526:	bf00      	nop
 800c528:	00030d40 	.word	0x00030d40

0800c52c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c52c:	b480      	push	{r7}
 800c52e:	b085      	sub	sp, #20
 800c530:	af00      	add	r7, sp, #0
 800c532:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800c534:	2300      	movs	r3, #0
 800c536:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	2210      	movs	r2, #16
 800c53c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	3301      	adds	r3, #1
 800c542:	60fb      	str	r3, [r7, #12]
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	4a09      	ldr	r2, [pc, #36]	; (800c56c <USB_FlushRxFifo+0x40>)
 800c548:	4293      	cmp	r3, r2
 800c54a:	d901      	bls.n	800c550 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800c54c:	2303      	movs	r3, #3
 800c54e:	e006      	b.n	800c55e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	691b      	ldr	r3, [r3, #16]
 800c554:	f003 0310 	and.w	r3, r3, #16
 800c558:	2b10      	cmp	r3, #16
 800c55a:	d0f0      	beq.n	800c53e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800c55c:	2300      	movs	r3, #0
}
 800c55e:	4618      	mov	r0, r3
 800c560:	3714      	adds	r7, #20
 800c562:	46bd      	mov	sp, r7
 800c564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c568:	4770      	bx	lr
 800c56a:	bf00      	nop
 800c56c:	00030d40 	.word	0x00030d40

0800c570 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800c570:	b480      	push	{r7}
 800c572:	b089      	sub	sp, #36	; 0x24
 800c574:	af00      	add	r7, sp, #0
 800c576:	60f8      	str	r0, [r7, #12]
 800c578:	60b9      	str	r1, [r7, #8]
 800c57a:	4611      	mov	r1, r2
 800c57c:	461a      	mov	r2, r3
 800c57e:	460b      	mov	r3, r1
 800c580:	71fb      	strb	r3, [r7, #7]
 800c582:	4613      	mov	r3, r2
 800c584:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800c58a:	68bb      	ldr	r3, [r7, #8]
 800c58c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800c58e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c592:	2b00      	cmp	r3, #0
 800c594:	d11a      	bne.n	800c5cc <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800c596:	88bb      	ldrh	r3, [r7, #4]
 800c598:	3303      	adds	r3, #3
 800c59a:	089b      	lsrs	r3, r3, #2
 800c59c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800c59e:	2300      	movs	r3, #0
 800c5a0:	61bb      	str	r3, [r7, #24]
 800c5a2:	e00f      	b.n	800c5c4 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800c5a4:	79fb      	ldrb	r3, [r7, #7]
 800c5a6:	031a      	lsls	r2, r3, #12
 800c5a8:	697b      	ldr	r3, [r7, #20]
 800c5aa:	4413      	add	r3, r2
 800c5ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c5b0:	461a      	mov	r2, r3
 800c5b2:	69fb      	ldr	r3, [r7, #28]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	6013      	str	r3, [r2, #0]
      pSrc++;
 800c5b8:	69fb      	ldr	r3, [r7, #28]
 800c5ba:	3304      	adds	r3, #4
 800c5bc:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800c5be:	69bb      	ldr	r3, [r7, #24]
 800c5c0:	3301      	adds	r3, #1
 800c5c2:	61bb      	str	r3, [r7, #24]
 800c5c4:	69ba      	ldr	r2, [r7, #24]
 800c5c6:	693b      	ldr	r3, [r7, #16]
 800c5c8:	429a      	cmp	r2, r3
 800c5ca:	d3eb      	bcc.n	800c5a4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800c5cc:	2300      	movs	r3, #0
}
 800c5ce:	4618      	mov	r0, r3
 800c5d0:	3724      	adds	r7, #36	; 0x24
 800c5d2:	46bd      	mov	sp, r7
 800c5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d8:	4770      	bx	lr

0800c5da <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800c5da:	b480      	push	{r7}
 800c5dc:	b089      	sub	sp, #36	; 0x24
 800c5de:	af00      	add	r7, sp, #0
 800c5e0:	60f8      	str	r0, [r7, #12]
 800c5e2:	60b9      	str	r1, [r7, #8]
 800c5e4:	4613      	mov	r3, r2
 800c5e6:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800c5ec:	68bb      	ldr	r3, [r7, #8]
 800c5ee:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800c5f0:	88fb      	ldrh	r3, [r7, #6]
 800c5f2:	3303      	adds	r3, #3
 800c5f4:	089b      	lsrs	r3, r3, #2
 800c5f6:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800c5f8:	2300      	movs	r3, #0
 800c5fa:	61bb      	str	r3, [r7, #24]
 800c5fc:	e00b      	b.n	800c616 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c5fe:	697b      	ldr	r3, [r7, #20]
 800c600:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c604:	681a      	ldr	r2, [r3, #0]
 800c606:	69fb      	ldr	r3, [r7, #28]
 800c608:	601a      	str	r2, [r3, #0]
    pDest++;
 800c60a:	69fb      	ldr	r3, [r7, #28]
 800c60c:	3304      	adds	r3, #4
 800c60e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800c610:	69bb      	ldr	r3, [r7, #24]
 800c612:	3301      	adds	r3, #1
 800c614:	61bb      	str	r3, [r7, #24]
 800c616:	69ba      	ldr	r2, [r7, #24]
 800c618:	693b      	ldr	r3, [r7, #16]
 800c61a:	429a      	cmp	r2, r3
 800c61c:	d3ef      	bcc.n	800c5fe <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800c61e:	69fb      	ldr	r3, [r7, #28]
}
 800c620:	4618      	mov	r0, r3
 800c622:	3724      	adds	r7, #36	; 0x24
 800c624:	46bd      	mov	sp, r7
 800c626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c62a:	4770      	bx	lr

0800c62c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800c62c:	b480      	push	{r7}
 800c62e:	b085      	sub	sp, #20
 800c630:	af00      	add	r7, sp, #0
 800c632:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	695b      	ldr	r3, [r3, #20]
 800c638:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	699b      	ldr	r3, [r3, #24]
 800c63e:	68fa      	ldr	r2, [r7, #12]
 800c640:	4013      	ands	r3, r2
 800c642:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800c644:	68fb      	ldr	r3, [r7, #12]
}
 800c646:	4618      	mov	r0, r3
 800c648:	3714      	adds	r7, #20
 800c64a:	46bd      	mov	sp, r7
 800c64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c650:	4770      	bx	lr

0800c652 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800c652:	b480      	push	{r7}
 800c654:	b083      	sub	sp, #12
 800c656:	af00      	add	r7, sp, #0
 800c658:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	695b      	ldr	r3, [r3, #20]
 800c65e:	f003 0301 	and.w	r3, r3, #1
}
 800c662:	4618      	mov	r0, r3
 800c664:	370c      	adds	r7, #12
 800c666:	46bd      	mov	sp, r7
 800c668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c66c:	4770      	bx	lr
	...

0800c670 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c670:	b480      	push	{r7}
 800c672:	b085      	sub	sp, #20
 800c674:	af00      	add	r7, sp, #0
 800c676:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800c678:	2300      	movs	r3, #0
 800c67a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	3301      	adds	r3, #1
 800c680:	60fb      	str	r3, [r7, #12]
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	4a13      	ldr	r2, [pc, #76]	; (800c6d4 <USB_CoreReset+0x64>)
 800c686:	4293      	cmp	r3, r2
 800c688:	d901      	bls.n	800c68e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c68a:	2303      	movs	r3, #3
 800c68c:	e01b      	b.n	800c6c6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	691b      	ldr	r3, [r3, #16]
 800c692:	2b00      	cmp	r3, #0
 800c694:	daf2      	bge.n	800c67c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c696:	2300      	movs	r3, #0
 800c698:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	691b      	ldr	r3, [r3, #16]
 800c69e:	f043 0201 	orr.w	r2, r3, #1
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	3301      	adds	r3, #1
 800c6aa:	60fb      	str	r3, [r7, #12]
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	4a09      	ldr	r2, [pc, #36]	; (800c6d4 <USB_CoreReset+0x64>)
 800c6b0:	4293      	cmp	r3, r2
 800c6b2:	d901      	bls.n	800c6b8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c6b4:	2303      	movs	r3, #3
 800c6b6:	e006      	b.n	800c6c6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	691b      	ldr	r3, [r3, #16]
 800c6bc:	f003 0301 	and.w	r3, r3, #1
 800c6c0:	2b01      	cmp	r3, #1
 800c6c2:	d0f0      	beq.n	800c6a6 <USB_CoreReset+0x36>

  return HAL_OK;
 800c6c4:	2300      	movs	r3, #0
}
 800c6c6:	4618      	mov	r0, r3
 800c6c8:	3714      	adds	r7, #20
 800c6ca:	46bd      	mov	sp, r7
 800c6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d0:	4770      	bx	lr
 800c6d2:	bf00      	nop
 800c6d4:	00030d40 	.word	0x00030d40

0800c6d8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c6d8:	b084      	sub	sp, #16
 800c6da:	b580      	push	{r7, lr}
 800c6dc:	b084      	sub	sp, #16
 800c6de:	af00      	add	r7, sp, #0
 800c6e0:	6078      	str	r0, [r7, #4]
 800c6e2:	f107 001c 	add.w	r0, r7, #28
 800c6e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c6ee:	68bb      	ldr	r3, [r7, #8]
 800c6f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c6f4:	461a      	mov	r2, r3
 800c6f6:	2300      	movs	r3, #0
 800c6f8:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6fe:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	639a      	str	r2, [r3, #56]	; 0x38

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c70a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d018      	beq.n	800c744 <USB_HostInit+0x6c>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800c712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c714:	2b01      	cmp	r3, #1
 800c716:	d10a      	bne.n	800c72e <USB_HostInit+0x56>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800c718:	68bb      	ldr	r3, [r7, #8]
 800c71a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	68ba      	ldr	r2, [r7, #8]
 800c722:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c726:	f043 0304 	orr.w	r3, r3, #4
 800c72a:	6013      	str	r3, [r2, #0]
 800c72c:	e014      	b.n	800c758 <USB_HostInit+0x80>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800c72e:	68bb      	ldr	r3, [r7, #8]
 800c730:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	68ba      	ldr	r2, [r7, #8]
 800c738:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c73c:	f023 0304 	bic.w	r3, r3, #4
 800c740:	6013      	str	r3, [r2, #0]
 800c742:	e009      	b.n	800c758 <USB_HostInit+0x80>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800c744:	68bb      	ldr	r3, [r7, #8]
 800c746:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	68ba      	ldr	r2, [r7, #8]
 800c74e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c752:	f023 0304 	bic.w	r3, r3, #4
 800c756:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800c758:	2110      	movs	r1, #16
 800c75a:	6878      	ldr	r0, [r7, #4]
 800c75c:	f7ff fec0 	bl	800c4e0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800c760:	6878      	ldr	r0, [r7, #4]
 800c762:	f7ff fee3 	bl	800c52c <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800c766:	2300      	movs	r3, #0
 800c768:	60fb      	str	r3, [r7, #12]
 800c76a:	e015      	b.n	800c798 <USB_HostInit+0xc0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	015a      	lsls	r2, r3, #5
 800c770:	68bb      	ldr	r3, [r7, #8]
 800c772:	4413      	add	r3, r2
 800c774:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c778:	461a      	mov	r2, r3
 800c77a:	f04f 33ff 	mov.w	r3, #4294967295
 800c77e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	015a      	lsls	r2, r3, #5
 800c784:	68bb      	ldr	r3, [r7, #8]
 800c786:	4413      	add	r3, r2
 800c788:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c78c:	461a      	mov	r2, r3
 800c78e:	2300      	movs	r3, #0
 800c790:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	3301      	adds	r3, #1
 800c796:	60fb      	str	r3, [r7, #12]
 800c798:	6a3b      	ldr	r3, [r7, #32]
 800c79a:	68fa      	ldr	r2, [r7, #12]
 800c79c:	429a      	cmp	r2, r3
 800c79e:	d3e5      	bcc.n	800c76c <USB_HostInit+0x94>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800c7a0:	2101      	movs	r1, #1
 800c7a2:	6878      	ldr	r0, [r7, #4]
 800c7a4:	f000 f8ac 	bl	800c900 <USB_DriveVbus>

  HAL_Delay(200U);
 800c7a8:	20c8      	movs	r0, #200	; 0xc8
 800c7aa:	f7f6 fa8b 	bl	8002cc4 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	2200      	movs	r2, #0
 800c7b2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	f04f 32ff 	mov.w	r2, #4294967295
 800c7ba:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d00b      	beq.n	800c7e0 <USB_HostInit+0x108>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c7ce:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	4a14      	ldr	r2, [pc, #80]	; (800c824 <USB_HostInit+0x14c>)
 800c7d4:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	4a13      	ldr	r2, [pc, #76]	; (800c828 <USB_HostInit+0x150>)
 800c7da:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800c7de:	e009      	b.n	800c7f4 <USB_HostInit+0x11c>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	2280      	movs	r2, #128	; 0x80
 800c7e4:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	4a10      	ldr	r2, [pc, #64]	; (800c82c <USB_HostInit+0x154>)
 800c7ea:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	4a10      	ldr	r2, [pc, #64]	; (800c830 <USB_HostInit+0x158>)
 800c7f0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c7f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d105      	bne.n	800c806 <USB_HostInit+0x12e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	699b      	ldr	r3, [r3, #24]
 800c7fe:	f043 0210 	orr.w	r2, r3, #16
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	699a      	ldr	r2, [r3, #24]
 800c80a:	4b0a      	ldr	r3, [pc, #40]	; (800c834 <USB_HostInit+0x15c>)
 800c80c:	4313      	orrs	r3, r2
 800c80e:	687a      	ldr	r2, [r7, #4]
 800c810:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800c812:	2300      	movs	r3, #0
}
 800c814:	4618      	mov	r0, r3
 800c816:	3710      	adds	r7, #16
 800c818:	46bd      	mov	sp, r7
 800c81a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c81e:	b004      	add	sp, #16
 800c820:	4770      	bx	lr
 800c822:	bf00      	nop
 800c824:	01000200 	.word	0x01000200
 800c828:	00e00300 	.word	0x00e00300
 800c82c:	00600080 	.word	0x00600080
 800c830:	004000e0 	.word	0x004000e0
 800c834:	a3200008 	.word	0xa3200008

0800c838 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800c838:	b480      	push	{r7}
 800c83a:	b085      	sub	sp, #20
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	6078      	str	r0, [r7, #4]
 800c840:	460b      	mov	r3, r1
 800c842:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	68fa      	ldr	r2, [r7, #12]
 800c852:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c856:	f023 0303 	bic.w	r3, r3, #3
 800c85a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c862:	681a      	ldr	r2, [r3, #0]
 800c864:	78fb      	ldrb	r3, [r7, #3]
 800c866:	f003 0303 	and.w	r3, r3, #3
 800c86a:	68f9      	ldr	r1, [r7, #12]
 800c86c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800c870:	4313      	orrs	r3, r2
 800c872:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800c874:	78fb      	ldrb	r3, [r7, #3]
 800c876:	2b01      	cmp	r3, #1
 800c878:	d107      	bne.n	800c88a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c880:	461a      	mov	r2, r3
 800c882:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800c886:	6053      	str	r3, [r2, #4]
 800c888:	e009      	b.n	800c89e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800c88a:	78fb      	ldrb	r3, [r7, #3]
 800c88c:	2b02      	cmp	r3, #2
 800c88e:	d106      	bne.n	800c89e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c896:	461a      	mov	r2, r3
 800c898:	f241 7370 	movw	r3, #6000	; 0x1770
 800c89c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800c89e:	2300      	movs	r3, #0
}
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	3714      	adds	r7, #20
 800c8a4:	46bd      	mov	sp, r7
 800c8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8aa:	4770      	bx	lr

0800c8ac <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800c8ac:	b580      	push	{r7, lr}
 800c8ae:	b084      	sub	sp, #16
 800c8b0:	af00      	add	r7, sp, #0
 800c8b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800c8b8:	2300      	movs	r3, #0
 800c8ba:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800c8c6:	68bb      	ldr	r3, [r7, #8]
 800c8c8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800c8cc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800c8ce:	68bb      	ldr	r3, [r7, #8]
 800c8d0:	68fa      	ldr	r2, [r7, #12]
 800c8d2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800c8d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c8da:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800c8dc:	2064      	movs	r0, #100	; 0x64
 800c8de:	f7f6 f9f1 	bl	8002cc4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800c8e2:	68bb      	ldr	r3, [r7, #8]
 800c8e4:	68fa      	ldr	r2, [r7, #12]
 800c8e6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800c8ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c8ee:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800c8f0:	200a      	movs	r0, #10
 800c8f2:	f7f6 f9e7 	bl	8002cc4 <HAL_Delay>

  return HAL_OK;
 800c8f6:	2300      	movs	r3, #0
}
 800c8f8:	4618      	mov	r0, r3
 800c8fa:	3710      	adds	r7, #16
 800c8fc:	46bd      	mov	sp, r7
 800c8fe:	bd80      	pop	{r7, pc}

0800c900 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800c900:	b480      	push	{r7}
 800c902:	b085      	sub	sp, #20
 800c904:	af00      	add	r7, sp, #0
 800c906:	6078      	str	r0, [r7, #4]
 800c908:	460b      	mov	r3, r1
 800c90a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800c910:	2300      	movs	r3, #0
 800c912:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800c91e:	68bb      	ldr	r3, [r7, #8]
 800c920:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800c924:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800c926:	68bb      	ldr	r3, [r7, #8]
 800c928:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d109      	bne.n	800c944 <USB_DriveVbus+0x44>
 800c930:	78fb      	ldrb	r3, [r7, #3]
 800c932:	2b01      	cmp	r3, #1
 800c934:	d106      	bne.n	800c944 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800c936:	68bb      	ldr	r3, [r7, #8]
 800c938:	68fa      	ldr	r2, [r7, #12]
 800c93a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800c93e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800c942:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800c944:	68bb      	ldr	r3, [r7, #8]
 800c946:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c94a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c94e:	d109      	bne.n	800c964 <USB_DriveVbus+0x64>
 800c950:	78fb      	ldrb	r3, [r7, #3]
 800c952:	2b00      	cmp	r3, #0
 800c954:	d106      	bne.n	800c964 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800c956:	68bb      	ldr	r3, [r7, #8]
 800c958:	68fa      	ldr	r2, [r7, #12]
 800c95a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800c95e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c962:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800c964:	2300      	movs	r3, #0
}
 800c966:	4618      	mov	r0, r3
 800c968:	3714      	adds	r7, #20
 800c96a:	46bd      	mov	sp, r7
 800c96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c970:	4770      	bx	lr

0800c972 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800c972:	b480      	push	{r7}
 800c974:	b085      	sub	sp, #20
 800c976:	af00      	add	r7, sp, #0
 800c978:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800c97e:	2300      	movs	r3, #0
 800c980:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800c98c:	68bb      	ldr	r3, [r7, #8]
 800c98e:	0c5b      	lsrs	r3, r3, #17
 800c990:	f003 0303 	and.w	r3, r3, #3
}
 800c994:	4618      	mov	r0, r3
 800c996:	3714      	adds	r7, #20
 800c998:	46bd      	mov	sp, r7
 800c99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c99e:	4770      	bx	lr

0800c9a0 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800c9a0:	b480      	push	{r7}
 800c9a2:	b085      	sub	sp, #20
 800c9a4:	af00      	add	r7, sp, #0
 800c9a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c9b2:	689b      	ldr	r3, [r3, #8]
 800c9b4:	b29b      	uxth	r3, r3
}
 800c9b6:	4618      	mov	r0, r3
 800c9b8:	3714      	adds	r7, #20
 800c9ba:	46bd      	mov	sp, r7
 800c9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c0:	4770      	bx	lr
	...

0800c9c4 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 800c9c4:	b480      	push	{r7}
 800c9c6:	b087      	sub	sp, #28
 800c9c8:	af00      	add	r7, sp, #0
 800c9ca:	6078      	str	r0, [r7, #4]
 800c9cc:	4608      	mov	r0, r1
 800c9ce:	4611      	mov	r1, r2
 800c9d0:	461a      	mov	r2, r3
 800c9d2:	4603      	mov	r3, r0
 800c9d4:	70fb      	strb	r3, [r7, #3]
 800c9d6:	460b      	mov	r3, r1
 800c9d8:	70bb      	strb	r3, [r7, #2]
 800c9da:	4613      	mov	r3, r2
 800c9dc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800c9de:	2300      	movs	r3, #0
 800c9e0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800c9e6:	78fb      	ldrb	r3, [r7, #3]
 800c9e8:	015a      	lsls	r2, r3, #5
 800c9ea:	68bb      	ldr	r3, [r7, #8]
 800c9ec:	4413      	add	r3, r2
 800c9ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c9f2:	461a      	mov	r2, r3
 800c9f4:	f04f 33ff 	mov.w	r3, #4294967295
 800c9f8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800c9fa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c9fe:	2b03      	cmp	r3, #3
 800ca00:	d87e      	bhi.n	800cb00 <USB_HC_Init+0x13c>
 800ca02:	a201      	add	r2, pc, #4	; (adr r2, 800ca08 <USB_HC_Init+0x44>)
 800ca04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca08:	0800ca19 	.word	0x0800ca19
 800ca0c:	0800cac3 	.word	0x0800cac3
 800ca10:	0800ca19 	.word	0x0800ca19
 800ca14:	0800ca85 	.word	0x0800ca85
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800ca18:	78fb      	ldrb	r3, [r7, #3]
 800ca1a:	015a      	lsls	r2, r3, #5
 800ca1c:	68bb      	ldr	r3, [r7, #8]
 800ca1e:	4413      	add	r3, r2
 800ca20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ca24:	461a      	mov	r2, r3
 800ca26:	f240 439d 	movw	r3, #1181	; 0x49d
 800ca2a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800ca2c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	da10      	bge.n	800ca56 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800ca34:	78fb      	ldrb	r3, [r7, #3]
 800ca36:	015a      	lsls	r2, r3, #5
 800ca38:	68bb      	ldr	r3, [r7, #8]
 800ca3a:	4413      	add	r3, r2
 800ca3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ca40:	68db      	ldr	r3, [r3, #12]
 800ca42:	78fa      	ldrb	r2, [r7, #3]
 800ca44:	0151      	lsls	r1, r2, #5
 800ca46:	68ba      	ldr	r2, [r7, #8]
 800ca48:	440a      	add	r2, r1
 800ca4a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ca4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ca52:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 800ca54:	e057      	b.n	800cb06 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d051      	beq.n	800cb06 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800ca62:	78fb      	ldrb	r3, [r7, #3]
 800ca64:	015a      	lsls	r2, r3, #5
 800ca66:	68bb      	ldr	r3, [r7, #8]
 800ca68:	4413      	add	r3, r2
 800ca6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ca6e:	68db      	ldr	r3, [r3, #12]
 800ca70:	78fa      	ldrb	r2, [r7, #3]
 800ca72:	0151      	lsls	r1, r2, #5
 800ca74:	68ba      	ldr	r2, [r7, #8]
 800ca76:	440a      	add	r2, r1
 800ca78:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ca7c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800ca80:	60d3      	str	r3, [r2, #12]
      break;
 800ca82:	e040      	b.n	800cb06 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800ca84:	78fb      	ldrb	r3, [r7, #3]
 800ca86:	015a      	lsls	r2, r3, #5
 800ca88:	68bb      	ldr	r3, [r7, #8]
 800ca8a:	4413      	add	r3, r2
 800ca8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ca90:	461a      	mov	r2, r3
 800ca92:	f240 639d 	movw	r3, #1693	; 0x69d
 800ca96:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800ca98:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	da34      	bge.n	800cb0a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800caa0:	78fb      	ldrb	r3, [r7, #3]
 800caa2:	015a      	lsls	r2, r3, #5
 800caa4:	68bb      	ldr	r3, [r7, #8]
 800caa6:	4413      	add	r3, r2
 800caa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800caac:	68db      	ldr	r3, [r3, #12]
 800caae:	78fa      	ldrb	r2, [r7, #3]
 800cab0:	0151      	lsls	r1, r2, #5
 800cab2:	68ba      	ldr	r2, [r7, #8]
 800cab4:	440a      	add	r2, r1
 800cab6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800caba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cabe:	60d3      	str	r3, [r2, #12]
      }

      break;
 800cac0:	e023      	b.n	800cb0a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800cac2:	78fb      	ldrb	r3, [r7, #3]
 800cac4:	015a      	lsls	r2, r3, #5
 800cac6:	68bb      	ldr	r3, [r7, #8]
 800cac8:	4413      	add	r3, r2
 800caca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cace:	461a      	mov	r2, r3
 800cad0:	f240 2325 	movw	r3, #549	; 0x225
 800cad4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800cad6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800cada:	2b00      	cmp	r3, #0
 800cadc:	da17      	bge.n	800cb0e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800cade:	78fb      	ldrb	r3, [r7, #3]
 800cae0:	015a      	lsls	r2, r3, #5
 800cae2:	68bb      	ldr	r3, [r7, #8]
 800cae4:	4413      	add	r3, r2
 800cae6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800caea:	68db      	ldr	r3, [r3, #12]
 800caec:	78fa      	ldrb	r2, [r7, #3]
 800caee:	0151      	lsls	r1, r2, #5
 800caf0:	68ba      	ldr	r2, [r7, #8]
 800caf2:	440a      	add	r2, r1
 800caf4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800caf8:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800cafc:	60d3      	str	r3, [r2, #12]
      }
      break;
 800cafe:	e006      	b.n	800cb0e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800cb00:	2301      	movs	r3, #1
 800cb02:	75fb      	strb	r3, [r7, #23]
      break;
 800cb04:	e004      	b.n	800cb10 <USB_HC_Init+0x14c>
      break;
 800cb06:	bf00      	nop
 800cb08:	e002      	b.n	800cb10 <USB_HC_Init+0x14c>
      break;
 800cb0a:	bf00      	nop
 800cb0c:	e000      	b.n	800cb10 <USB_HC_Init+0x14c>
      break;
 800cb0e:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800cb10:	68bb      	ldr	r3, [r7, #8]
 800cb12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cb16:	699a      	ldr	r2, [r3, #24]
 800cb18:	78fb      	ldrb	r3, [r7, #3]
 800cb1a:	f003 030f 	and.w	r3, r3, #15
 800cb1e:	2101      	movs	r1, #1
 800cb20:	fa01 f303 	lsl.w	r3, r1, r3
 800cb24:	68b9      	ldr	r1, [r7, #8]
 800cb26:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800cb2a:	4313      	orrs	r3, r2
 800cb2c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	699b      	ldr	r3, [r3, #24]
 800cb32:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800cb3a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	da03      	bge.n	800cb4a <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800cb42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cb46:	613b      	str	r3, [r7, #16]
 800cb48:	e001      	b.n	800cb4e <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800cb4a:	2300      	movs	r3, #0
 800cb4c:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 800cb4e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cb52:	2b02      	cmp	r3, #2
 800cb54:	d103      	bne.n	800cb5e <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800cb56:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800cb5a:	60fb      	str	r3, [r7, #12]
 800cb5c:	e001      	b.n	800cb62 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800cb5e:	2300      	movs	r3, #0
 800cb60:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800cb62:	787b      	ldrb	r3, [r7, #1]
 800cb64:	059b      	lsls	r3, r3, #22
 800cb66:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800cb6a:	78bb      	ldrb	r3, [r7, #2]
 800cb6c:	02db      	lsls	r3, r3, #11
 800cb6e:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800cb72:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800cb74:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800cb78:	049b      	lsls	r3, r3, #18
 800cb7a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800cb7e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800cb80:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800cb82:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800cb86:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800cb88:	693b      	ldr	r3, [r7, #16]
 800cb8a:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800cb8c:	78fb      	ldrb	r3, [r7, #3]
 800cb8e:	0159      	lsls	r1, r3, #5
 800cb90:	68bb      	ldr	r3, [r7, #8]
 800cb92:	440b      	add	r3, r1
 800cb94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cb98:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800cb9e:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800cba0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800cba4:	2b03      	cmp	r3, #3
 800cba6:	d10f      	bne.n	800cbc8 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800cba8:	78fb      	ldrb	r3, [r7, #3]
 800cbaa:	015a      	lsls	r2, r3, #5
 800cbac:	68bb      	ldr	r3, [r7, #8]
 800cbae:	4413      	add	r3, r2
 800cbb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	78fa      	ldrb	r2, [r7, #3]
 800cbb8:	0151      	lsls	r1, r2, #5
 800cbba:	68ba      	ldr	r2, [r7, #8]
 800cbbc:	440a      	add	r2, r1
 800cbbe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cbc2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800cbc6:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800cbc8:	7dfb      	ldrb	r3, [r7, #23]
}
 800cbca:	4618      	mov	r0, r3
 800cbcc:	371c      	adds	r7, #28
 800cbce:	46bd      	mov	sp, r7
 800cbd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd4:	4770      	bx	lr
 800cbd6:	bf00      	nop

0800cbd8 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800cbd8:	b580      	push	{r7, lr}
 800cbda:	b08c      	sub	sp, #48	; 0x30
 800cbdc:	af02      	add	r7, sp, #8
 800cbde:	60f8      	str	r0, [r7, #12]
 800cbe0:	60b9      	str	r1, [r7, #8]
 800cbe2:	4613      	mov	r3, r2
 800cbe4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800cbea:	68bb      	ldr	r3, [r7, #8]
 800cbec:	785b      	ldrb	r3, [r3, #1]
 800cbee:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800cbf0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cbf4:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d028      	beq.n	800cc54 <USB_HC_StartXfer+0x7c>
 800cc02:	68bb      	ldr	r3, [r7, #8]
 800cc04:	791b      	ldrb	r3, [r3, #4]
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d124      	bne.n	800cc54 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 800cc0a:	79fb      	ldrb	r3, [r7, #7]
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d10b      	bne.n	800cc28 <USB_HC_StartXfer+0x50>
 800cc10:	68bb      	ldr	r3, [r7, #8]
 800cc12:	795b      	ldrb	r3, [r3, #5]
 800cc14:	2b01      	cmp	r3, #1
 800cc16:	d107      	bne.n	800cc28 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800cc18:	68bb      	ldr	r3, [r7, #8]
 800cc1a:	785b      	ldrb	r3, [r3, #1]
 800cc1c:	4619      	mov	r1, r3
 800cc1e:	68f8      	ldr	r0, [r7, #12]
 800cc20:	f000 fa2e 	bl	800d080 <USB_DoPing>
      return HAL_OK;
 800cc24:	2300      	movs	r3, #0
 800cc26:	e112      	b.n	800ce4e <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 800cc28:	79fb      	ldrb	r3, [r7, #7]
 800cc2a:	2b01      	cmp	r3, #1
 800cc2c:	d112      	bne.n	800cc54 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800cc2e:	69fb      	ldr	r3, [r7, #28]
 800cc30:	015a      	lsls	r2, r3, #5
 800cc32:	6a3b      	ldr	r3, [r7, #32]
 800cc34:	4413      	add	r3, r2
 800cc36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cc3a:	68db      	ldr	r3, [r3, #12]
 800cc3c:	69fa      	ldr	r2, [r7, #28]
 800cc3e:	0151      	lsls	r1, r2, #5
 800cc40:	6a3a      	ldr	r2, [r7, #32]
 800cc42:	440a      	add	r2, r1
 800cc44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cc48:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800cc4c:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 800cc4e:	68bb      	ldr	r3, [r7, #8]
 800cc50:	2200      	movs	r2, #0
 800cc52:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800cc54:	68bb      	ldr	r3, [r7, #8]
 800cc56:	691b      	ldr	r3, [r3, #16]
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d018      	beq.n	800cc8e <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800cc5c:	68bb      	ldr	r3, [r7, #8]
 800cc5e:	691b      	ldr	r3, [r3, #16]
 800cc60:	68ba      	ldr	r2, [r7, #8]
 800cc62:	8912      	ldrh	r2, [r2, #8]
 800cc64:	4413      	add	r3, r2
 800cc66:	3b01      	subs	r3, #1
 800cc68:	68ba      	ldr	r2, [r7, #8]
 800cc6a:	8912      	ldrh	r2, [r2, #8]
 800cc6c:	fbb3 f3f2 	udiv	r3, r3, r2
 800cc70:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800cc72:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800cc74:	8b7b      	ldrh	r3, [r7, #26]
 800cc76:	429a      	cmp	r2, r3
 800cc78:	d90b      	bls.n	800cc92 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 800cc7a:	8b7b      	ldrh	r3, [r7, #26]
 800cc7c:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800cc7e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800cc80:	68ba      	ldr	r2, [r7, #8]
 800cc82:	8912      	ldrh	r2, [r2, #8]
 800cc84:	fb02 f203 	mul.w	r2, r2, r3
 800cc88:	68bb      	ldr	r3, [r7, #8]
 800cc8a:	611a      	str	r2, [r3, #16]
 800cc8c:	e001      	b.n	800cc92 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 800cc8e:	2301      	movs	r3, #1
 800cc90:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 800cc92:	68bb      	ldr	r3, [r7, #8]
 800cc94:	78db      	ldrb	r3, [r3, #3]
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d006      	beq.n	800cca8 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800cc9a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800cc9c:	68ba      	ldr	r2, [r7, #8]
 800cc9e:	8912      	ldrh	r2, [r2, #8]
 800cca0:	fb02 f203 	mul.w	r2, r2, r3
 800cca4:	68bb      	ldr	r3, [r7, #8]
 800cca6:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800cca8:	68bb      	ldr	r3, [r7, #8]
 800ccaa:	691b      	ldr	r3, [r3, #16]
 800ccac:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800ccb0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ccb2:	04d9      	lsls	r1, r3, #19
 800ccb4:	4b68      	ldr	r3, [pc, #416]	; (800ce58 <USB_HC_StartXfer+0x280>)
 800ccb6:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800ccb8:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800ccba:	68bb      	ldr	r3, [r7, #8]
 800ccbc:	7a9b      	ldrb	r3, [r3, #10]
 800ccbe:	075b      	lsls	r3, r3, #29
 800ccc0:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800ccc4:	69f9      	ldr	r1, [r7, #28]
 800ccc6:	0148      	lsls	r0, r1, #5
 800ccc8:	6a39      	ldr	r1, [r7, #32]
 800ccca:	4401      	add	r1, r0
 800cccc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800ccd0:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800ccd2:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800ccd4:	79fb      	ldrb	r3, [r7, #7]
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d009      	beq.n	800ccee <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800ccda:	68bb      	ldr	r3, [r7, #8]
 800ccdc:	68d9      	ldr	r1, [r3, #12]
 800ccde:	69fb      	ldr	r3, [r7, #28]
 800cce0:	015a      	lsls	r2, r3, #5
 800cce2:	6a3b      	ldr	r3, [r7, #32]
 800cce4:	4413      	add	r3, r2
 800cce6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ccea:	460a      	mov	r2, r1
 800ccec:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800ccee:	6a3b      	ldr	r3, [r7, #32]
 800ccf0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ccf4:	689b      	ldr	r3, [r3, #8]
 800ccf6:	f003 0301 	and.w	r3, r3, #1
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	bf0c      	ite	eq
 800ccfe:	2301      	moveq	r3, #1
 800cd00:	2300      	movne	r3, #0
 800cd02:	b2db      	uxtb	r3, r3
 800cd04:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800cd06:	69fb      	ldr	r3, [r7, #28]
 800cd08:	015a      	lsls	r2, r3, #5
 800cd0a:	6a3b      	ldr	r3, [r7, #32]
 800cd0c:	4413      	add	r3, r2
 800cd0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	69fa      	ldr	r2, [r7, #28]
 800cd16:	0151      	lsls	r1, r2, #5
 800cd18:	6a3a      	ldr	r2, [r7, #32]
 800cd1a:	440a      	add	r2, r1
 800cd1c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cd20:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800cd24:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800cd26:	69fb      	ldr	r3, [r7, #28]
 800cd28:	015a      	lsls	r2, r3, #5
 800cd2a:	6a3b      	ldr	r3, [r7, #32]
 800cd2c:	4413      	add	r3, r2
 800cd2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cd32:	681a      	ldr	r2, [r3, #0]
 800cd34:	7e7b      	ldrb	r3, [r7, #25]
 800cd36:	075b      	lsls	r3, r3, #29
 800cd38:	69f9      	ldr	r1, [r7, #28]
 800cd3a:	0148      	lsls	r0, r1, #5
 800cd3c:	6a39      	ldr	r1, [r7, #32]
 800cd3e:	4401      	add	r1, r0
 800cd40:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800cd44:	4313      	orrs	r3, r2
 800cd46:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800cd48:	69fb      	ldr	r3, [r7, #28]
 800cd4a:	015a      	lsls	r2, r3, #5
 800cd4c:	6a3b      	ldr	r3, [r7, #32]
 800cd4e:	4413      	add	r3, r2
 800cd50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	4a41      	ldr	r2, [pc, #260]	; (800ce5c <USB_HC_StartXfer+0x284>)
 800cd58:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800cd5a:	4b40      	ldr	r3, [pc, #256]	; (800ce5c <USB_HC_StartXfer+0x284>)
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800cd62:	4a3e      	ldr	r2, [pc, #248]	; (800ce5c <USB_HC_StartXfer+0x284>)
 800cd64:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800cd66:	68bb      	ldr	r3, [r7, #8]
 800cd68:	78db      	ldrb	r3, [r3, #3]
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d006      	beq.n	800cd7c <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800cd6e:	4b3b      	ldr	r3, [pc, #236]	; (800ce5c <USB_HC_StartXfer+0x284>)
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cd76:	4a39      	ldr	r2, [pc, #228]	; (800ce5c <USB_HC_StartXfer+0x284>)
 800cd78:	6013      	str	r3, [r2, #0]
 800cd7a:	e005      	b.n	800cd88 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800cd7c:	4b37      	ldr	r3, [pc, #220]	; (800ce5c <USB_HC_StartXfer+0x284>)
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800cd84:	4a35      	ldr	r2, [pc, #212]	; (800ce5c <USB_HC_StartXfer+0x284>)
 800cd86:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800cd88:	4b34      	ldr	r3, [pc, #208]	; (800ce5c <USB_HC_StartXfer+0x284>)
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cd90:	4a32      	ldr	r2, [pc, #200]	; (800ce5c <USB_HC_StartXfer+0x284>)
 800cd92:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800cd94:	69fb      	ldr	r3, [r7, #28]
 800cd96:	015a      	lsls	r2, r3, #5
 800cd98:	6a3b      	ldr	r3, [r7, #32]
 800cd9a:	4413      	add	r3, r2
 800cd9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cda0:	461a      	mov	r2, r3
 800cda2:	4b2e      	ldr	r3, [pc, #184]	; (800ce5c <USB_HC_StartXfer+0x284>)
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 800cda8:	79fb      	ldrb	r3, [r7, #7]
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d14e      	bne.n	800ce4c <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800cdae:	68bb      	ldr	r3, [r7, #8]
 800cdb0:	78db      	ldrb	r3, [r3, #3]
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d14a      	bne.n	800ce4c <USB_HC_StartXfer+0x274>
 800cdb6:	68bb      	ldr	r3, [r7, #8]
 800cdb8:	691b      	ldr	r3, [r3, #16]
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d046      	beq.n	800ce4c <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 800cdbe:	68bb      	ldr	r3, [r7, #8]
 800cdc0:	79db      	ldrb	r3, [r3, #7]
 800cdc2:	2b03      	cmp	r3, #3
 800cdc4:	d830      	bhi.n	800ce28 <USB_HC_StartXfer+0x250>
 800cdc6:	a201      	add	r2, pc, #4	; (adr r2, 800cdcc <USB_HC_StartXfer+0x1f4>)
 800cdc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdcc:	0800cddd 	.word	0x0800cddd
 800cdd0:	0800ce01 	.word	0x0800ce01
 800cdd4:	0800cddd 	.word	0x0800cddd
 800cdd8:	0800ce01 	.word	0x0800ce01
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800cddc:	68bb      	ldr	r3, [r7, #8]
 800cdde:	691b      	ldr	r3, [r3, #16]
 800cde0:	3303      	adds	r3, #3
 800cde2:	089b      	lsrs	r3, r3, #2
 800cde4:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800cde6:	8afa      	ldrh	r2, [r7, #22]
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdec:	b29b      	uxth	r3, r3
 800cdee:	429a      	cmp	r2, r3
 800cdf0:	d91c      	bls.n	800ce2c <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	699b      	ldr	r3, [r3, #24]
 800cdf6:	f043 0220 	orr.w	r2, r3, #32
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	619a      	str	r2, [r3, #24]
          }
          break;
 800cdfe:	e015      	b.n	800ce2c <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800ce00:	68bb      	ldr	r3, [r7, #8]
 800ce02:	691b      	ldr	r3, [r3, #16]
 800ce04:	3303      	adds	r3, #3
 800ce06:	089b      	lsrs	r3, r3, #2
 800ce08:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800ce0a:	8afa      	ldrh	r2, [r7, #22]
 800ce0c:	6a3b      	ldr	r3, [r7, #32]
 800ce0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ce12:	691b      	ldr	r3, [r3, #16]
 800ce14:	b29b      	uxth	r3, r3
 800ce16:	429a      	cmp	r2, r3
 800ce18:	d90a      	bls.n	800ce30 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	699b      	ldr	r3, [r3, #24]
 800ce1e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	619a      	str	r2, [r3, #24]
          }
          break;
 800ce26:	e003      	b.n	800ce30 <USB_HC_StartXfer+0x258>

        default:
          break;
 800ce28:	bf00      	nop
 800ce2a:	e002      	b.n	800ce32 <USB_HC_StartXfer+0x25a>
          break;
 800ce2c:	bf00      	nop
 800ce2e:	e000      	b.n	800ce32 <USB_HC_StartXfer+0x25a>
          break;
 800ce30:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800ce32:	68bb      	ldr	r3, [r7, #8]
 800ce34:	68d9      	ldr	r1, [r3, #12]
 800ce36:	68bb      	ldr	r3, [r7, #8]
 800ce38:	785a      	ldrb	r2, [r3, #1]
 800ce3a:	68bb      	ldr	r3, [r7, #8]
 800ce3c:	691b      	ldr	r3, [r3, #16]
 800ce3e:	b298      	uxth	r0, r3
 800ce40:	2300      	movs	r3, #0
 800ce42:	9300      	str	r3, [sp, #0]
 800ce44:	4603      	mov	r3, r0
 800ce46:	68f8      	ldr	r0, [r7, #12]
 800ce48:	f7ff fb92 	bl	800c570 <USB_WritePacket>
    }
  }

  return HAL_OK;
 800ce4c:	2300      	movs	r3, #0
}
 800ce4e:	4618      	mov	r0, r3
 800ce50:	3728      	adds	r7, #40	; 0x28
 800ce52:	46bd      	mov	sp, r7
 800ce54:	bd80      	pop	{r7, pc}
 800ce56:	bf00      	nop
 800ce58:	1ff80000 	.word	0x1ff80000
 800ce5c:	20000314 	.word	0x20000314

0800ce60 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ce60:	b480      	push	{r7}
 800ce62:	b085      	sub	sp, #20
 800ce64:	af00      	add	r7, sp, #0
 800ce66:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ce72:	695b      	ldr	r3, [r3, #20]
 800ce74:	b29b      	uxth	r3, r3
}
 800ce76:	4618      	mov	r0, r3
 800ce78:	3714      	adds	r7, #20
 800ce7a:	46bd      	mov	sp, r7
 800ce7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce80:	4770      	bx	lr

0800ce82 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800ce82:	b480      	push	{r7}
 800ce84:	b087      	sub	sp, #28
 800ce86:	af00      	add	r7, sp, #0
 800ce88:	6078      	str	r0, [r7, #4]
 800ce8a:	460b      	mov	r3, r1
 800ce8c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800ce92:	78fb      	ldrb	r3, [r7, #3]
 800ce94:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800ce96:	2300      	movs	r3, #0
 800ce98:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	015a      	lsls	r2, r3, #5
 800ce9e:	693b      	ldr	r3, [r7, #16]
 800cea0:	4413      	add	r3, r2
 800cea2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	0c9b      	lsrs	r3, r3, #18
 800ceaa:	f003 0303 	and.w	r3, r3, #3
 800ceae:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800ceb0:	68bb      	ldr	r3, [r7, #8]
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d002      	beq.n	800cebc <USB_HC_Halt+0x3a>
 800ceb6:	68bb      	ldr	r3, [r7, #8]
 800ceb8:	2b02      	cmp	r3, #2
 800ceba:	d16c      	bne.n	800cf96 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	015a      	lsls	r2, r3, #5
 800cec0:	693b      	ldr	r3, [r7, #16]
 800cec2:	4413      	add	r3, r2
 800cec4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	68fa      	ldr	r2, [r7, #12]
 800cecc:	0151      	lsls	r1, r2, #5
 800cece:	693a      	ldr	r2, [r7, #16]
 800ced0:	440a      	add	r2, r1
 800ced2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ced6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ceda:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cee0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d143      	bne.n	800cf70 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	015a      	lsls	r2, r3, #5
 800ceec:	693b      	ldr	r3, [r7, #16]
 800ceee:	4413      	add	r3, r2
 800cef0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	68fa      	ldr	r2, [r7, #12]
 800cef8:	0151      	lsls	r1, r2, #5
 800cefa:	693a      	ldr	r2, [r7, #16]
 800cefc:	440a      	add	r2, r1
 800cefe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cf02:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cf06:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	015a      	lsls	r2, r3, #5
 800cf0c:	693b      	ldr	r3, [r7, #16]
 800cf0e:	4413      	add	r3, r2
 800cf10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	68fa      	ldr	r2, [r7, #12]
 800cf18:	0151      	lsls	r1, r2, #5
 800cf1a:	693a      	ldr	r2, [r7, #16]
 800cf1c:	440a      	add	r2, r1
 800cf1e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cf22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cf26:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	015a      	lsls	r2, r3, #5
 800cf2c:	693b      	ldr	r3, [r7, #16]
 800cf2e:	4413      	add	r3, r2
 800cf30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	68fa      	ldr	r2, [r7, #12]
 800cf38:	0151      	lsls	r1, r2, #5
 800cf3a:	693a      	ldr	r2, [r7, #16]
 800cf3c:	440a      	add	r2, r1
 800cf3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cf42:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800cf46:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800cf48:	697b      	ldr	r3, [r7, #20]
 800cf4a:	3301      	adds	r3, #1
 800cf4c:	617b      	str	r3, [r7, #20]
 800cf4e:	697b      	ldr	r3, [r7, #20]
 800cf50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cf54:	d81d      	bhi.n	800cf92 <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	015a      	lsls	r2, r3, #5
 800cf5a:	693b      	ldr	r3, [r7, #16]
 800cf5c:	4413      	add	r3, r2
 800cf5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cf68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cf6c:	d0ec      	beq.n	800cf48 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800cf6e:	e080      	b.n	800d072 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	015a      	lsls	r2, r3, #5
 800cf74:	693b      	ldr	r3, [r7, #16]
 800cf76:	4413      	add	r3, r2
 800cf78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	68fa      	ldr	r2, [r7, #12]
 800cf80:	0151      	lsls	r1, r2, #5
 800cf82:	693a      	ldr	r2, [r7, #16]
 800cf84:	440a      	add	r2, r1
 800cf86:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cf8a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cf8e:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800cf90:	e06f      	b.n	800d072 <USB_HC_Halt+0x1f0>
          break;
 800cf92:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800cf94:	e06d      	b.n	800d072 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	015a      	lsls	r2, r3, #5
 800cf9a:	693b      	ldr	r3, [r7, #16]
 800cf9c:	4413      	add	r3, r2
 800cf9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	68fa      	ldr	r2, [r7, #12]
 800cfa6:	0151      	lsls	r1, r2, #5
 800cfa8:	693a      	ldr	r2, [r7, #16]
 800cfaa:	440a      	add	r2, r1
 800cfac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cfb0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cfb4:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800cfb6:	693b      	ldr	r3, [r7, #16]
 800cfb8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cfbc:	691b      	ldr	r3, [r3, #16]
 800cfbe:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d143      	bne.n	800d04e <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	015a      	lsls	r2, r3, #5
 800cfca:	693b      	ldr	r3, [r7, #16]
 800cfcc:	4413      	add	r3, r2
 800cfce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	68fa      	ldr	r2, [r7, #12]
 800cfd6:	0151      	lsls	r1, r2, #5
 800cfd8:	693a      	ldr	r2, [r7, #16]
 800cfda:	440a      	add	r2, r1
 800cfdc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cfe0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cfe4:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	015a      	lsls	r2, r3, #5
 800cfea:	693b      	ldr	r3, [r7, #16]
 800cfec:	4413      	add	r3, r2
 800cfee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	68fa      	ldr	r2, [r7, #12]
 800cff6:	0151      	lsls	r1, r2, #5
 800cff8:	693a      	ldr	r2, [r7, #16]
 800cffa:	440a      	add	r2, r1
 800cffc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d000:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d004:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	015a      	lsls	r2, r3, #5
 800d00a:	693b      	ldr	r3, [r7, #16]
 800d00c:	4413      	add	r3, r2
 800d00e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	68fa      	ldr	r2, [r7, #12]
 800d016:	0151      	lsls	r1, r2, #5
 800d018:	693a      	ldr	r2, [r7, #16]
 800d01a:	440a      	add	r2, r1
 800d01c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d020:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d024:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800d026:	697b      	ldr	r3, [r7, #20]
 800d028:	3301      	adds	r3, #1
 800d02a:	617b      	str	r3, [r7, #20]
 800d02c:	697b      	ldr	r3, [r7, #20]
 800d02e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d032:	d81d      	bhi.n	800d070 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	015a      	lsls	r2, r3, #5
 800d038:	693b      	ldr	r3, [r7, #16]
 800d03a:	4413      	add	r3, r2
 800d03c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d046:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d04a:	d0ec      	beq.n	800d026 <USB_HC_Halt+0x1a4>
 800d04c:	e011      	b.n	800d072 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	015a      	lsls	r2, r3, #5
 800d052:	693b      	ldr	r3, [r7, #16]
 800d054:	4413      	add	r3, r2
 800d056:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	68fa      	ldr	r2, [r7, #12]
 800d05e:	0151      	lsls	r1, r2, #5
 800d060:	693a      	ldr	r2, [r7, #16]
 800d062:	440a      	add	r2, r1
 800d064:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d068:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d06c:	6013      	str	r3, [r2, #0]
 800d06e:	e000      	b.n	800d072 <USB_HC_Halt+0x1f0>
          break;
 800d070:	bf00      	nop
    }
  }

  return HAL_OK;
 800d072:	2300      	movs	r3, #0
}
 800d074:	4618      	mov	r0, r3
 800d076:	371c      	adds	r7, #28
 800d078:	46bd      	mov	sp, r7
 800d07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d07e:	4770      	bx	lr

0800d080 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800d080:	b480      	push	{r7}
 800d082:	b087      	sub	sp, #28
 800d084:	af00      	add	r7, sp, #0
 800d086:	6078      	str	r0, [r7, #4]
 800d088:	460b      	mov	r3, r1
 800d08a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800d090:	78fb      	ldrb	r3, [r7, #3]
 800d092:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800d094:	2301      	movs	r3, #1
 800d096:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	04da      	lsls	r2, r3, #19
 800d09c:	4b15      	ldr	r3, [pc, #84]	; (800d0f4 <USB_DoPing+0x74>)
 800d09e:	4013      	ands	r3, r2
 800d0a0:	693a      	ldr	r2, [r7, #16]
 800d0a2:	0151      	lsls	r1, r2, #5
 800d0a4:	697a      	ldr	r2, [r7, #20]
 800d0a6:	440a      	add	r2, r1
 800d0a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d0ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d0b0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800d0b2:	693b      	ldr	r3, [r7, #16]
 800d0b4:	015a      	lsls	r2, r3, #5
 800d0b6:	697b      	ldr	r3, [r7, #20]
 800d0b8:	4413      	add	r3, r2
 800d0ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800d0c2:	68bb      	ldr	r3, [r7, #8]
 800d0c4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d0c8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800d0ca:	68bb      	ldr	r3, [r7, #8]
 800d0cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d0d0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800d0d2:	693b      	ldr	r3, [r7, #16]
 800d0d4:	015a      	lsls	r2, r3, #5
 800d0d6:	697b      	ldr	r3, [r7, #20]
 800d0d8:	4413      	add	r3, r2
 800d0da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d0de:	461a      	mov	r2, r3
 800d0e0:	68bb      	ldr	r3, [r7, #8]
 800d0e2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800d0e4:	2300      	movs	r3, #0
}
 800d0e6:	4618      	mov	r0, r3
 800d0e8:	371c      	adds	r7, #28
 800d0ea:	46bd      	mov	sp, r7
 800d0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f0:	4770      	bx	lr
 800d0f2:	bf00      	nop
 800d0f4:	1ff80000 	.word	0x1ff80000

0800d0f8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800d0f8:	b580      	push	{r7, lr}
 800d0fa:	b086      	sub	sp, #24
 800d0fc:	af00      	add	r7, sp, #0
 800d0fe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800d104:	2300      	movs	r3, #0
 800d106:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800d108:	6878      	ldr	r0, [r7, #4]
 800d10a:	f7ff f9ae 	bl	800c46a <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800d10e:	2110      	movs	r1, #16
 800d110:	6878      	ldr	r0, [r7, #4]
 800d112:	f7ff f9e5 	bl	800c4e0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800d116:	6878      	ldr	r0, [r7, #4]
 800d118:	f7ff fa08 	bl	800c52c <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800d11c:	2300      	movs	r3, #0
 800d11e:	613b      	str	r3, [r7, #16]
 800d120:	e01f      	b.n	800d162 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800d122:	693b      	ldr	r3, [r7, #16]
 800d124:	015a      	lsls	r2, r3, #5
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	4413      	add	r3, r2
 800d12a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800d132:	68bb      	ldr	r3, [r7, #8]
 800d134:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d138:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800d13a:	68bb      	ldr	r3, [r7, #8]
 800d13c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d140:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800d142:	68bb      	ldr	r3, [r7, #8]
 800d144:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d148:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800d14a:	693b      	ldr	r3, [r7, #16]
 800d14c:	015a      	lsls	r2, r3, #5
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	4413      	add	r3, r2
 800d152:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d156:	461a      	mov	r2, r3
 800d158:	68bb      	ldr	r3, [r7, #8]
 800d15a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800d15c:	693b      	ldr	r3, [r7, #16]
 800d15e:	3301      	adds	r3, #1
 800d160:	613b      	str	r3, [r7, #16]
 800d162:	693b      	ldr	r3, [r7, #16]
 800d164:	2b0f      	cmp	r3, #15
 800d166:	d9dc      	bls.n	800d122 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800d168:	2300      	movs	r3, #0
 800d16a:	613b      	str	r3, [r7, #16]
 800d16c:	e034      	b.n	800d1d8 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800d16e:	693b      	ldr	r3, [r7, #16]
 800d170:	015a      	lsls	r2, r3, #5
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	4413      	add	r3, r2
 800d176:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800d17e:	68bb      	ldr	r3, [r7, #8]
 800d180:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d184:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800d186:	68bb      	ldr	r3, [r7, #8]
 800d188:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d18c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800d18e:	68bb      	ldr	r3, [r7, #8]
 800d190:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d194:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800d196:	693b      	ldr	r3, [r7, #16]
 800d198:	015a      	lsls	r2, r3, #5
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	4413      	add	r3, r2
 800d19e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d1a2:	461a      	mov	r2, r3
 800d1a4:	68bb      	ldr	r3, [r7, #8]
 800d1a6:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800d1a8:	697b      	ldr	r3, [r7, #20]
 800d1aa:	3301      	adds	r3, #1
 800d1ac:	617b      	str	r3, [r7, #20]
 800d1ae:	697b      	ldr	r3, [r7, #20]
 800d1b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d1b4:	d80c      	bhi.n	800d1d0 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800d1b6:	693b      	ldr	r3, [r7, #16]
 800d1b8:	015a      	lsls	r2, r3, #5
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	4413      	add	r3, r2
 800d1be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d1c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d1cc:	d0ec      	beq.n	800d1a8 <USB_StopHost+0xb0>
 800d1ce:	e000      	b.n	800d1d2 <USB_StopHost+0xda>
        break;
 800d1d0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800d1d2:	693b      	ldr	r3, [r7, #16]
 800d1d4:	3301      	adds	r3, #1
 800d1d6:	613b      	str	r3, [r7, #16]
 800d1d8:	693b      	ldr	r3, [r7, #16]
 800d1da:	2b0f      	cmp	r3, #15
 800d1dc:	d9c7      	bls.n	800d16e <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d1e4:	461a      	mov	r2, r3
 800d1e6:	f04f 33ff 	mov.w	r3, #4294967295
 800d1ea:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	f04f 32ff 	mov.w	r2, #4294967295
 800d1f2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800d1f4:	6878      	ldr	r0, [r7, #4]
 800d1f6:	f7ff f927 	bl	800c448 <USB_EnableGlobalInt>

  return HAL_OK;
 800d1fa:	2300      	movs	r3, #0
}
 800d1fc:	4618      	mov	r0, r3
 800d1fe:	3718      	adds	r7, #24
 800d200:	46bd      	mov	sp, r7
 800d202:	bd80      	pop	{r7, pc}

0800d204 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800d204:	b580      	push	{r7, lr}
 800d206:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800d208:	4904      	ldr	r1, [pc, #16]	; (800d21c <MX_FATFS_Init+0x18>)
 800d20a:	4805      	ldr	r0, [pc, #20]	; (800d220 <MX_FATFS_Init+0x1c>)
 800d20c:	f002 fbec 	bl	800f9e8 <FATFS_LinkDriver>
 800d210:	4603      	mov	r3, r0
 800d212:	461a      	mov	r2, r3
 800d214:	4b03      	ldr	r3, [pc, #12]	; (800d224 <MX_FATFS_Init+0x20>)
 800d216:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800d218:	bf00      	nop
 800d21a:	bd80      	pop	{r7, pc}
 800d21c:	20008cc8 	.word	0x20008cc8
 800d220:	0801286c 	.word	0x0801286c
 800d224:	20008cc4 	.word	0x20008cc4

0800d228 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800d228:	b580      	push	{r7, lr}
 800d22a:	b082      	sub	sp, #8
 800d22c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800d22e:	2300      	movs	r3, #0
 800d230:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800d232:	f000 f87b 	bl	800d32c <BSP_SD_IsDetected>
 800d236:	4603      	mov	r3, r0
 800d238:	2b01      	cmp	r3, #1
 800d23a:	d001      	beq.n	800d240 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800d23c:	2302      	movs	r3, #2
 800d23e:	e012      	b.n	800d266 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800d240:	480b      	ldr	r0, [pc, #44]	; (800d270 <BSP_SD_Init+0x48>)
 800d242:	f7fb fc33 	bl	8008aac <HAL_SD_Init>
 800d246:	4603      	mov	r3, r0
 800d248:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800d24a:	79fb      	ldrb	r3, [r7, #7]
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d109      	bne.n	800d264 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800d250:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800d254:	4806      	ldr	r0, [pc, #24]	; (800d270 <BSP_SD_Init+0x48>)
 800d256:	f7fc f875 	bl	8009344 <HAL_SD_ConfigWideBusOperation>
 800d25a:	4603      	mov	r3, r0
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d001      	beq.n	800d264 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800d260:	2301      	movs	r3, #1
 800d262:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800d264:	79fb      	ldrb	r3, [r7, #7]
}
 800d266:	4618      	mov	r0, r3
 800d268:	3708      	adds	r7, #8
 800d26a:	46bd      	mov	sp, r7
 800d26c:	bd80      	pop	{r7, pc}
 800d26e:	bf00      	nop
 800d270:	20008750 	.word	0x20008750

0800d274 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800d274:	b580      	push	{r7, lr}
 800d276:	b086      	sub	sp, #24
 800d278:	af00      	add	r7, sp, #0
 800d27a:	60f8      	str	r0, [r7, #12]
 800d27c:	60b9      	str	r1, [r7, #8]
 800d27e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800d280:	2300      	movs	r3, #0
 800d282:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	68ba      	ldr	r2, [r7, #8]
 800d288:	68f9      	ldr	r1, [r7, #12]
 800d28a:	4806      	ldr	r0, [pc, #24]	; (800d2a4 <BSP_SD_ReadBlocks_DMA+0x30>)
 800d28c:	f7fb fca6 	bl	8008bdc <HAL_SD_ReadBlocks_DMA>
 800d290:	4603      	mov	r3, r0
 800d292:	2b00      	cmp	r3, #0
 800d294:	d001      	beq.n	800d29a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800d296:	2301      	movs	r3, #1
 800d298:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d29a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d29c:	4618      	mov	r0, r3
 800d29e:	3718      	adds	r7, #24
 800d2a0:	46bd      	mov	sp, r7
 800d2a2:	bd80      	pop	{r7, pc}
 800d2a4:	20008750 	.word	0x20008750

0800d2a8 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800d2a8:	b580      	push	{r7, lr}
 800d2aa:	b086      	sub	sp, #24
 800d2ac:	af00      	add	r7, sp, #0
 800d2ae:	60f8      	str	r0, [r7, #12]
 800d2b0:	60b9      	str	r1, [r7, #8]
 800d2b2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800d2b4:	2300      	movs	r3, #0
 800d2b6:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	68ba      	ldr	r2, [r7, #8]
 800d2bc:	68f9      	ldr	r1, [r7, #12]
 800d2be:	4806      	ldr	r0, [pc, #24]	; (800d2d8 <BSP_SD_WriteBlocks_DMA+0x30>)
 800d2c0:	f7fb fd78 	bl	8008db4 <HAL_SD_WriteBlocks_DMA>
 800d2c4:	4603      	mov	r3, r0
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d001      	beq.n	800d2ce <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800d2ca:	2301      	movs	r3, #1
 800d2cc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d2ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	3718      	adds	r7, #24
 800d2d4:	46bd      	mov	sp, r7
 800d2d6:	bd80      	pop	{r7, pc}
 800d2d8:	20008750 	.word	0x20008750

0800d2dc <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800d2dc:	b580      	push	{r7, lr}
 800d2de:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800d2e0:	4805      	ldr	r0, [pc, #20]	; (800d2f8 <BSP_SD_GetCardState+0x1c>)
 800d2e2:	f7fc f8ab 	bl	800943c <HAL_SD_GetCardState>
 800d2e6:	4603      	mov	r3, r0
 800d2e8:	2b04      	cmp	r3, #4
 800d2ea:	bf14      	ite	ne
 800d2ec:	2301      	movne	r3, #1
 800d2ee:	2300      	moveq	r3, #0
 800d2f0:	b2db      	uxtb	r3, r3
}
 800d2f2:	4618      	mov	r0, r3
 800d2f4:	bd80      	pop	{r7, pc}
 800d2f6:	bf00      	nop
 800d2f8:	20008750 	.word	0x20008750

0800d2fc <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800d2fc:	b580      	push	{r7, lr}
 800d2fe:	b082      	sub	sp, #8
 800d300:	af00      	add	r7, sp, #0
 800d302:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800d304:	6879      	ldr	r1, [r7, #4]
 800d306:	4803      	ldr	r0, [pc, #12]	; (800d314 <BSP_SD_GetCardInfo+0x18>)
 800d308:	f7fb fff0 	bl	80092ec <HAL_SD_GetCardInfo>
}
 800d30c:	bf00      	nop
 800d30e:	3708      	adds	r7, #8
 800d310:	46bd      	mov	sp, r7
 800d312:	bd80      	pop	{r7, pc}
 800d314:	20008750 	.word	0x20008750

0800d318 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800d318:	b580      	push	{r7, lr}
 800d31a:	b082      	sub	sp, #8
 800d31c:	af00      	add	r7, sp, #0
 800d31e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800d320:	f000 f9b2 	bl	800d688 <BSP_SD_ReadCpltCallback>
}
 800d324:	bf00      	nop
 800d326:	3708      	adds	r7, #8
 800d328:	46bd      	mov	sp, r7
 800d32a:	bd80      	pop	{r7, pc}

0800d32c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800d32c:	b580      	push	{r7, lr}
 800d32e:	b082      	sub	sp, #8
 800d330:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800d332:	2301      	movs	r3, #1
 800d334:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800d336:	f000 f80b 	bl	800d350 <BSP_PlatformIsDetected>
 800d33a:	4603      	mov	r3, r0
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d101      	bne.n	800d344 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800d340:	2300      	movs	r3, #0
 800d342:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800d344:	79fb      	ldrb	r3, [r7, #7]
 800d346:	b2db      	uxtb	r3, r3
}
 800d348:	4618      	mov	r0, r3
 800d34a:	3708      	adds	r7, #8
 800d34c:	46bd      	mov	sp, r7
 800d34e:	bd80      	pop	{r7, pc}

0800d350 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800d350:	b580      	push	{r7, lr}
 800d352:	b082      	sub	sp, #8
 800d354:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800d356:	2301      	movs	r3, #1
 800d358:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800d35a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800d35e:	4806      	ldr	r0, [pc, #24]	; (800d378 <BSP_PlatformIsDetected+0x28>)
 800d360:	f7f7 fa3c 	bl	80047dc <HAL_GPIO_ReadPin>
 800d364:	4603      	mov	r3, r0
 800d366:	2b00      	cmp	r3, #0
 800d368:	d001      	beq.n	800d36e <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800d36a:	2300      	movs	r3, #0
 800d36c:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800d36e:	79fb      	ldrb	r3, [r7, #7]
}
 800d370:	4618      	mov	r0, r3
 800d372:	3708      	adds	r7, #8
 800d374:	46bd      	mov	sp, r7
 800d376:	bd80      	pop	{r7, pc}
 800d378:	40020800 	.word	0x40020800

0800d37c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800d37c:	b580      	push	{r7, lr}
 800d37e:	b084      	sub	sp, #16
 800d380:	af00      	add	r7, sp, #0
 800d382:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripherial is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800d384:	f002 fb7c 	bl	800fa80 <osKernelSysTick>
 800d388:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800d38a:	e006      	b.n	800d39a <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d38c:	f7ff ffa6 	bl	800d2dc <BSP_SD_GetCardState>
 800d390:	4603      	mov	r3, r0
 800d392:	2b00      	cmp	r3, #0
 800d394:	d101      	bne.n	800d39a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800d396:	2300      	movs	r3, #0
 800d398:	e009      	b.n	800d3ae <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800d39a:	f002 fb71 	bl	800fa80 <osKernelSysTick>
 800d39e:	4602      	mov	r2, r0
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	1ad3      	subs	r3, r2, r3
 800d3a4:	687a      	ldr	r2, [r7, #4]
 800d3a6:	429a      	cmp	r2, r3
 800d3a8:	d8f0      	bhi.n	800d38c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800d3aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d3ae:	4618      	mov	r0, r3
 800d3b0:	3710      	adds	r7, #16
 800d3b2:	46bd      	mov	sp, r7
 800d3b4:	bd80      	pop	{r7, pc}
	...

0800d3b8 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800d3b8:	b580      	push	{r7, lr}
 800d3ba:	b082      	sub	sp, #8
 800d3bc:	af00      	add	r7, sp, #0
 800d3be:	4603      	mov	r3, r0
 800d3c0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800d3c2:	4b0b      	ldr	r3, [pc, #44]	; (800d3f0 <SD_CheckStatus+0x38>)
 800d3c4:	2201      	movs	r2, #1
 800d3c6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d3c8:	f7ff ff88 	bl	800d2dc <BSP_SD_GetCardState>
 800d3cc:	4603      	mov	r3, r0
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d107      	bne.n	800d3e2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800d3d2:	4b07      	ldr	r3, [pc, #28]	; (800d3f0 <SD_CheckStatus+0x38>)
 800d3d4:	781b      	ldrb	r3, [r3, #0]
 800d3d6:	b2db      	uxtb	r3, r3
 800d3d8:	f023 0301 	bic.w	r3, r3, #1
 800d3dc:	b2da      	uxtb	r2, r3
 800d3de:	4b04      	ldr	r3, [pc, #16]	; (800d3f0 <SD_CheckStatus+0x38>)
 800d3e0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800d3e2:	4b03      	ldr	r3, [pc, #12]	; (800d3f0 <SD_CheckStatus+0x38>)
 800d3e4:	781b      	ldrb	r3, [r3, #0]
 800d3e6:	b2db      	uxtb	r3, r3
}
 800d3e8:	4618      	mov	r0, r3
 800d3ea:	3708      	adds	r7, #8
 800d3ec:	46bd      	mov	sp, r7
 800d3ee:	bd80      	pop	{r7, pc}
 800d3f0:	20000009 	.word	0x20000009

0800d3f4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800d3f4:	b590      	push	{r4, r7, lr}
 800d3f6:	b087      	sub	sp, #28
 800d3f8:	af00      	add	r7, sp, #0
 800d3fa:	4603      	mov	r3, r0
 800d3fc:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800d3fe:	4b20      	ldr	r3, [pc, #128]	; (800d480 <SD_initialize+0x8c>)
 800d400:	2201      	movs	r2, #1
 800d402:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 800d404:	f002 fb30 	bl	800fa68 <osKernelRunning>
 800d408:	4603      	mov	r3, r0
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d030      	beq.n	800d470 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800d40e:	f7ff ff0b 	bl	800d228 <BSP_SD_Init>
 800d412:	4603      	mov	r3, r0
 800d414:	2b00      	cmp	r3, #0
 800d416:	d107      	bne.n	800d428 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800d418:	79fb      	ldrb	r3, [r7, #7]
 800d41a:	4618      	mov	r0, r3
 800d41c:	f7ff ffcc 	bl	800d3b8 <SD_CheckStatus>
 800d420:	4603      	mov	r3, r0
 800d422:	461a      	mov	r2, r3
 800d424:	4b16      	ldr	r3, [pc, #88]	; (800d480 <SD_initialize+0x8c>)
 800d426:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800d428:	4b15      	ldr	r3, [pc, #84]	; (800d480 <SD_initialize+0x8c>)
 800d42a:	781b      	ldrb	r3, [r3, #0]
 800d42c:	b2db      	uxtb	r3, r3
 800d42e:	2b01      	cmp	r3, #1
 800d430:	d01e      	beq.n	800d470 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800d432:	4b14      	ldr	r3, [pc, #80]	; (800d484 <SD_initialize+0x90>)
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	2b00      	cmp	r3, #0
 800d438:	d10e      	bne.n	800d458 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800d43a:	4b13      	ldr	r3, [pc, #76]	; (800d488 <SD_initialize+0x94>)
 800d43c:	f107 0408 	add.w	r4, r7, #8
 800d440:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d442:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800d446:	f107 0308 	add.w	r3, r7, #8
 800d44a:	2100      	movs	r1, #0
 800d44c:	4618      	mov	r0, r3
 800d44e:	f002 fb87 	bl	800fb60 <osMessageCreate>
 800d452:	4602      	mov	r2, r0
 800d454:	4b0b      	ldr	r3, [pc, #44]	; (800d484 <SD_initialize+0x90>)
 800d456:	601a      	str	r2, [r3, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800d458:	4b0a      	ldr	r3, [pc, #40]	; (800d484 <SD_initialize+0x90>)
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d107      	bne.n	800d470 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 800d460:	4b07      	ldr	r3, [pc, #28]	; (800d480 <SD_initialize+0x8c>)
 800d462:	781b      	ldrb	r3, [r3, #0]
 800d464:	b2db      	uxtb	r3, r3
 800d466:	f043 0301 	orr.w	r3, r3, #1
 800d46a:	b2da      	uxtb	r2, r3
 800d46c:	4b04      	ldr	r3, [pc, #16]	; (800d480 <SD_initialize+0x8c>)
 800d46e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800d470:	4b03      	ldr	r3, [pc, #12]	; (800d480 <SD_initialize+0x8c>)
 800d472:	781b      	ldrb	r3, [r3, #0]
 800d474:	b2db      	uxtb	r3, r3
}
 800d476:	4618      	mov	r0, r3
 800d478:	371c      	adds	r7, #28
 800d47a:	46bd      	mov	sp, r7
 800d47c:	bd90      	pop	{r4, r7, pc}
 800d47e:	bf00      	nop
 800d480:	20000009 	.word	0x20000009
 800d484:	20000318 	.word	0x20000318
 800d488:	08012800 	.word	0x08012800

0800d48c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800d48c:	b580      	push	{r7, lr}
 800d48e:	b082      	sub	sp, #8
 800d490:	af00      	add	r7, sp, #0
 800d492:	4603      	mov	r3, r0
 800d494:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800d496:	79fb      	ldrb	r3, [r7, #7]
 800d498:	4618      	mov	r0, r3
 800d49a:	f7ff ff8d 	bl	800d3b8 <SD_CheckStatus>
 800d49e:	4603      	mov	r3, r0
}
 800d4a0:	4618      	mov	r0, r3
 800d4a2:	3708      	adds	r7, #8
 800d4a4:	46bd      	mov	sp, r7
 800d4a6:	bd80      	pop	{r7, pc}

0800d4a8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800d4a8:	b580      	push	{r7, lr}
 800d4aa:	b08a      	sub	sp, #40	; 0x28
 800d4ac:	af00      	add	r7, sp, #0
 800d4ae:	60b9      	str	r1, [r7, #8]
 800d4b0:	607a      	str	r2, [r7, #4]
 800d4b2:	603b      	str	r3, [r7, #0]
 800d4b4:	4603      	mov	r3, r0
 800d4b6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d4b8:	2301      	movs	r3, #1
 800d4ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800d4be:	f247 5030 	movw	r0, #30000	; 0x7530
 800d4c2:	f7ff ff5b 	bl	800d37c <SD_CheckStatusWithTimeout>
 800d4c6:	4603      	mov	r3, r0
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	da02      	bge.n	800d4d2 <SD_read+0x2a>
  {
    return res;
 800d4cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d4d0:	e032      	b.n	800d538 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800d4d2:	683a      	ldr	r2, [r7, #0]
 800d4d4:	6879      	ldr	r1, [r7, #4]
 800d4d6:	68b8      	ldr	r0, [r7, #8]
 800d4d8:	f7ff fecc 	bl	800d274 <BSP_SD_ReadBlocks_DMA>
 800d4dc:	4603      	mov	r3, r0
 800d4de:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (ret == MSD_OK) {
 800d4e2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d124      	bne.n	800d534 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800d4ea:	4b15      	ldr	r3, [pc, #84]	; (800d540 <SD_read+0x98>)
 800d4ec:	6819      	ldr	r1, [r3, #0]
 800d4ee:	f107 0314 	add.w	r3, r7, #20
 800d4f2:	f247 5230 	movw	r2, #30000	; 0x7530
 800d4f6:	4618      	mov	r0, r3
 800d4f8:	f002 fb9c 	bl	800fc34 <osMessageGet>

    if (event.status == osEventMessage)
 800d4fc:	697b      	ldr	r3, [r7, #20]
 800d4fe:	2b10      	cmp	r3, #16
 800d500:	d118      	bne.n	800d534 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 800d502:	69bb      	ldr	r3, [r7, #24]
 800d504:	2b01      	cmp	r3, #1
 800d506:	d115      	bne.n	800d534 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 800d508:	f002 faba 	bl	800fa80 <osKernelSysTick>
 800d50c:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800d50e:	e008      	b.n	800d522 <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d510:	f7ff fee4 	bl	800d2dc <BSP_SD_GetCardState>
 800d514:	4603      	mov	r3, r0
 800d516:	2b00      	cmp	r3, #0
 800d518:	d103      	bne.n	800d522 <SD_read+0x7a>
              {
                res = RES_OK;
 800d51a:	2300      	movs	r3, #0
 800d51c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800d520:	e008      	b.n	800d534 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800d522:	f002 faad 	bl	800fa80 <osKernelSysTick>
 800d526:	4602      	mov	r2, r0
 800d528:	6a3b      	ldr	r3, [r7, #32]
 800d52a:	1ad3      	subs	r3, r2, r3
 800d52c:	f247 522f 	movw	r2, #29999	; 0x752f
 800d530:	4293      	cmp	r3, r2
 800d532:	d9ed      	bls.n	800d510 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800d534:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800d538:	4618      	mov	r0, r3
 800d53a:	3728      	adds	r7, #40	; 0x28
 800d53c:	46bd      	mov	sp, r7
 800d53e:	bd80      	pop	{r7, pc}
 800d540:	20000318 	.word	0x20000318

0800d544 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800d544:	b580      	push	{r7, lr}
 800d546:	b08a      	sub	sp, #40	; 0x28
 800d548:	af00      	add	r7, sp, #0
 800d54a:	60b9      	str	r1, [r7, #8]
 800d54c:	607a      	str	r2, [r7, #4]
 800d54e:	603b      	str	r3, [r7, #0]
 800d550:	4603      	mov	r3, r0
 800d552:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d554:	2301      	movs	r3, #1
 800d556:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800d55a:	f247 5030 	movw	r0, #30000	; 0x7530
 800d55e:	f7ff ff0d 	bl	800d37c <SD_CheckStatusWithTimeout>
 800d562:	4603      	mov	r3, r0
 800d564:	2b00      	cmp	r3, #0
 800d566:	da02      	bge.n	800d56e <SD_write+0x2a>
  {
    return res;
 800d568:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d56c:	e02e      	b.n	800d5cc <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800d56e:	683a      	ldr	r2, [r7, #0]
 800d570:	6879      	ldr	r1, [r7, #4]
 800d572:	68b8      	ldr	r0, [r7, #8]
 800d574:	f7ff fe98 	bl	800d2a8 <BSP_SD_WriteBlocks_DMA>
 800d578:	4603      	mov	r3, r0
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d124      	bne.n	800d5c8 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800d57e:	4b15      	ldr	r3, [pc, #84]	; (800d5d4 <SD_write+0x90>)
 800d580:	6819      	ldr	r1, [r3, #0]
 800d582:	f107 0314 	add.w	r3, r7, #20
 800d586:	f247 5230 	movw	r2, #30000	; 0x7530
 800d58a:	4618      	mov	r0, r3
 800d58c:	f002 fb52 	bl	800fc34 <osMessageGet>

    if (event.status == osEventMessage)
 800d590:	697b      	ldr	r3, [r7, #20]
 800d592:	2b10      	cmp	r3, #16
 800d594:	d118      	bne.n	800d5c8 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800d596:	69bb      	ldr	r3, [r7, #24]
 800d598:	2b02      	cmp	r3, #2
 800d59a:	d115      	bne.n	800d5c8 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800d59c:	f002 fa70 	bl	800fa80 <osKernelSysTick>
 800d5a0:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800d5a2:	e008      	b.n	800d5b6 <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d5a4:	f7ff fe9a 	bl	800d2dc <BSP_SD_GetCardState>
 800d5a8:	4603      	mov	r3, r0
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d103      	bne.n	800d5b6 <SD_write+0x72>
          {
            res = RES_OK;
 800d5ae:	2300      	movs	r3, #0
 800d5b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800d5b4:	e008      	b.n	800d5c8 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800d5b6:	f002 fa63 	bl	800fa80 <osKernelSysTick>
 800d5ba:	4602      	mov	r2, r0
 800d5bc:	6a3b      	ldr	r3, [r7, #32]
 800d5be:	1ad3      	subs	r3, r2, r3
 800d5c0:	f247 522f 	movw	r2, #29999	; 0x752f
 800d5c4:	4293      	cmp	r3, r2
 800d5c6:	d9ed      	bls.n	800d5a4 <SD_write+0x60>
    }

  }
#endif

  return res;
 800d5c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800d5cc:	4618      	mov	r0, r3
 800d5ce:	3728      	adds	r7, #40	; 0x28
 800d5d0:	46bd      	mov	sp, r7
 800d5d2:	bd80      	pop	{r7, pc}
 800d5d4:	20000318 	.word	0x20000318

0800d5d8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800d5d8:	b580      	push	{r7, lr}
 800d5da:	b08c      	sub	sp, #48	; 0x30
 800d5dc:	af00      	add	r7, sp, #0
 800d5de:	4603      	mov	r3, r0
 800d5e0:	603a      	str	r2, [r7, #0]
 800d5e2:	71fb      	strb	r3, [r7, #7]
 800d5e4:	460b      	mov	r3, r1
 800d5e6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800d5e8:	2301      	movs	r3, #1
 800d5ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800d5ee:	4b25      	ldr	r3, [pc, #148]	; (800d684 <SD_ioctl+0xac>)
 800d5f0:	781b      	ldrb	r3, [r3, #0]
 800d5f2:	b2db      	uxtb	r3, r3
 800d5f4:	f003 0301 	and.w	r3, r3, #1
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d001      	beq.n	800d600 <SD_ioctl+0x28>
 800d5fc:	2303      	movs	r3, #3
 800d5fe:	e03c      	b.n	800d67a <SD_ioctl+0xa2>

  switch (cmd)
 800d600:	79bb      	ldrb	r3, [r7, #6]
 800d602:	2b03      	cmp	r3, #3
 800d604:	d834      	bhi.n	800d670 <SD_ioctl+0x98>
 800d606:	a201      	add	r2, pc, #4	; (adr r2, 800d60c <SD_ioctl+0x34>)
 800d608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d60c:	0800d61d 	.word	0x0800d61d
 800d610:	0800d625 	.word	0x0800d625
 800d614:	0800d63d 	.word	0x0800d63d
 800d618:	0800d657 	.word	0x0800d657
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800d61c:	2300      	movs	r3, #0
 800d61e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d622:	e028      	b.n	800d676 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800d624:	f107 030c 	add.w	r3, r7, #12
 800d628:	4618      	mov	r0, r3
 800d62a:	f7ff fe67 	bl	800d2fc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800d62e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d630:	683b      	ldr	r3, [r7, #0]
 800d632:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d634:	2300      	movs	r3, #0
 800d636:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d63a:	e01c      	b.n	800d676 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d63c:	f107 030c 	add.w	r3, r7, #12
 800d640:	4618      	mov	r0, r3
 800d642:	f7ff fe5b 	bl	800d2fc <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800d646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d648:	b29a      	uxth	r2, r3
 800d64a:	683b      	ldr	r3, [r7, #0]
 800d64c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800d64e:	2300      	movs	r3, #0
 800d650:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d654:	e00f      	b.n	800d676 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d656:	f107 030c 	add.w	r3, r7, #12
 800d65a:	4618      	mov	r0, r3
 800d65c:	f7ff fe4e 	bl	800d2fc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800d660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d662:	0a5a      	lsrs	r2, r3, #9
 800d664:	683b      	ldr	r3, [r7, #0]
 800d666:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d668:	2300      	movs	r3, #0
 800d66a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d66e:	e002      	b.n	800d676 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800d670:	2304      	movs	r3, #4
 800d672:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800d676:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800d67a:	4618      	mov	r0, r3
 800d67c:	3730      	adds	r7, #48	; 0x30
 800d67e:	46bd      	mov	sp, r7
 800d680:	bd80      	pop	{r7, pc}
 800d682:	bf00      	nop
 800d684:	20000009 	.word	0x20000009

0800d688 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800d688:	b580      	push	{r7, lr}
 800d68a:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 800d68c:	4b04      	ldr	r3, [pc, #16]	; (800d6a0 <BSP_SD_ReadCpltCallback+0x18>)
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	2200      	movs	r2, #0
 800d692:	2101      	movs	r1, #1
 800d694:	4618      	mov	r0, r3
 800d696:	f002 fa8d 	bl	800fbb4 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 800d69a:	bf00      	nop
 800d69c:	bd80      	pop	{r7, pc}
 800d69e:	bf00      	nop
 800d6a0:	20000318 	.word	0x20000318

0800d6a4 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800d6a4:	b590      	push	{r4, r7, lr}
 800d6a6:	b089      	sub	sp, #36	; 0x24
 800d6a8:	af04      	add	r7, sp, #16
 800d6aa:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800d6ac:	2301      	movs	r3, #1
 800d6ae:	2202      	movs	r2, #2
 800d6b0:	2102      	movs	r1, #2
 800d6b2:	6878      	ldr	r0, [r7, #4]
 800d6b4:	f000 fcba 	bl	800e02c <USBH_FindInterface>
 800d6b8:	4603      	mov	r3, r0
 800d6ba:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800d6bc:	7bfb      	ldrb	r3, [r7, #15]
 800d6be:	2bff      	cmp	r3, #255	; 0xff
 800d6c0:	d002      	beq.n	800d6c8 <USBH_CDC_InterfaceInit+0x24>
 800d6c2:	7bfb      	ldrb	r3, [r7, #15]
 800d6c4:	2b01      	cmp	r3, #1
 800d6c6:	d901      	bls.n	800d6cc <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800d6c8:	2302      	movs	r3, #2
 800d6ca:	e13d      	b.n	800d948 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800d6cc:	7bfb      	ldrb	r3, [r7, #15]
 800d6ce:	4619      	mov	r1, r3
 800d6d0:	6878      	ldr	r0, [r7, #4]
 800d6d2:	f000 fc8f 	bl	800dff4 <USBH_SelectInterface>
 800d6d6:	4603      	mov	r3, r0
 800d6d8:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800d6da:	7bbb      	ldrb	r3, [r7, #14]
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d001      	beq.n	800d6e4 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800d6e0:	2302      	movs	r3, #2
 800d6e2:	e131      	b.n	800d948 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800d6ea:	2050      	movs	r0, #80	; 0x50
 800d6ec:	f004 ff8a 	bl	8012604 <malloc>
 800d6f0:	4603      	mov	r3, r0
 800d6f2:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d6fa:	69db      	ldr	r3, [r3, #28]
 800d6fc:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800d6fe:	68bb      	ldr	r3, [r7, #8]
 800d700:	2b00      	cmp	r3, #0
 800d702:	d101      	bne.n	800d708 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800d704:	2302      	movs	r3, #2
 800d706:	e11f      	b.n	800d948 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800d708:	2250      	movs	r2, #80	; 0x50
 800d70a:	2100      	movs	r1, #0
 800d70c:	68b8      	ldr	r0, [r7, #8]
 800d70e:	f004 ff94 	bl	801263a <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800d712:	7bfb      	ldrb	r3, [r7, #15]
 800d714:	687a      	ldr	r2, [r7, #4]
 800d716:	211a      	movs	r1, #26
 800d718:	fb01 f303 	mul.w	r3, r1, r3
 800d71c:	4413      	add	r3, r2
 800d71e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800d722:	781b      	ldrb	r3, [r3, #0]
 800d724:	b25b      	sxtb	r3, r3
 800d726:	2b00      	cmp	r3, #0
 800d728:	da15      	bge.n	800d756 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800d72a:	7bfb      	ldrb	r3, [r7, #15]
 800d72c:	687a      	ldr	r2, [r7, #4]
 800d72e:	211a      	movs	r1, #26
 800d730:	fb01 f303 	mul.w	r3, r1, r3
 800d734:	4413      	add	r3, r2
 800d736:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800d73a:	781a      	ldrb	r2, [r3, #0]
 800d73c:	68bb      	ldr	r3, [r7, #8]
 800d73e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800d740:	7bfb      	ldrb	r3, [r7, #15]
 800d742:	687a      	ldr	r2, [r7, #4]
 800d744:	211a      	movs	r1, #26
 800d746:	fb01 f303 	mul.w	r3, r1, r3
 800d74a:	4413      	add	r3, r2
 800d74c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800d750:	881a      	ldrh	r2, [r3, #0]
 800d752:	68bb      	ldr	r3, [r7, #8]
 800d754:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800d756:	68bb      	ldr	r3, [r7, #8]
 800d758:	785b      	ldrb	r3, [r3, #1]
 800d75a:	4619      	mov	r1, r3
 800d75c:	6878      	ldr	r0, [r7, #4]
 800d75e:	f002 f894 	bl	800f88a <USBH_AllocPipe>
 800d762:	4603      	mov	r3, r0
 800d764:	461a      	mov	r2, r3
 800d766:	68bb      	ldr	r3, [r7, #8]
 800d768:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800d76a:	68bb      	ldr	r3, [r7, #8]
 800d76c:	7819      	ldrb	r1, [r3, #0]
 800d76e:	68bb      	ldr	r3, [r7, #8]
 800d770:	7858      	ldrb	r0, [r3, #1]
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d77e:	68ba      	ldr	r2, [r7, #8]
 800d780:	8952      	ldrh	r2, [r2, #10]
 800d782:	9202      	str	r2, [sp, #8]
 800d784:	2203      	movs	r2, #3
 800d786:	9201      	str	r2, [sp, #4]
 800d788:	9300      	str	r3, [sp, #0]
 800d78a:	4623      	mov	r3, r4
 800d78c:	4602      	mov	r2, r0
 800d78e:	6878      	ldr	r0, [r7, #4]
 800d790:	f002 f84c 	bl	800f82c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800d794:	68bb      	ldr	r3, [r7, #8]
 800d796:	781b      	ldrb	r3, [r3, #0]
 800d798:	2200      	movs	r2, #0
 800d79a:	4619      	mov	r1, r3
 800d79c:	6878      	ldr	r0, [r7, #4]
 800d79e:	f004 fe81 	bl	80124a4 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800d7a2:	2300      	movs	r3, #0
 800d7a4:	2200      	movs	r2, #0
 800d7a6:	210a      	movs	r1, #10
 800d7a8:	6878      	ldr	r0, [r7, #4]
 800d7aa:	f000 fc3f 	bl	800e02c <USBH_FindInterface>
 800d7ae:	4603      	mov	r3, r0
 800d7b0:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800d7b2:	7bfb      	ldrb	r3, [r7, #15]
 800d7b4:	2bff      	cmp	r3, #255	; 0xff
 800d7b6:	d002      	beq.n	800d7be <USBH_CDC_InterfaceInit+0x11a>
 800d7b8:	7bfb      	ldrb	r3, [r7, #15]
 800d7ba:	2b01      	cmp	r3, #1
 800d7bc:	d901      	bls.n	800d7c2 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800d7be:	2302      	movs	r3, #2
 800d7c0:	e0c2      	b.n	800d948 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800d7c2:	7bfb      	ldrb	r3, [r7, #15]
 800d7c4:	687a      	ldr	r2, [r7, #4]
 800d7c6:	211a      	movs	r1, #26
 800d7c8:	fb01 f303 	mul.w	r3, r1, r3
 800d7cc:	4413      	add	r3, r2
 800d7ce:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800d7d2:	781b      	ldrb	r3, [r3, #0]
 800d7d4:	b25b      	sxtb	r3, r3
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	da16      	bge.n	800d808 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800d7da:	7bfb      	ldrb	r3, [r7, #15]
 800d7dc:	687a      	ldr	r2, [r7, #4]
 800d7de:	211a      	movs	r1, #26
 800d7e0:	fb01 f303 	mul.w	r3, r1, r3
 800d7e4:	4413      	add	r3, r2
 800d7e6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800d7ea:	781a      	ldrb	r2, [r3, #0]
 800d7ec:	68bb      	ldr	r3, [r7, #8]
 800d7ee:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800d7f0:	7bfb      	ldrb	r3, [r7, #15]
 800d7f2:	687a      	ldr	r2, [r7, #4]
 800d7f4:	211a      	movs	r1, #26
 800d7f6:	fb01 f303 	mul.w	r3, r1, r3
 800d7fa:	4413      	add	r3, r2
 800d7fc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800d800:	881a      	ldrh	r2, [r3, #0]
 800d802:	68bb      	ldr	r3, [r7, #8]
 800d804:	835a      	strh	r2, [r3, #26]
 800d806:	e015      	b.n	800d834 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800d808:	7bfb      	ldrb	r3, [r7, #15]
 800d80a:	687a      	ldr	r2, [r7, #4]
 800d80c:	211a      	movs	r1, #26
 800d80e:	fb01 f303 	mul.w	r3, r1, r3
 800d812:	4413      	add	r3, r2
 800d814:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800d818:	781a      	ldrb	r2, [r3, #0]
 800d81a:	68bb      	ldr	r3, [r7, #8]
 800d81c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800d81e:	7bfb      	ldrb	r3, [r7, #15]
 800d820:	687a      	ldr	r2, [r7, #4]
 800d822:	211a      	movs	r1, #26
 800d824:	fb01 f303 	mul.w	r3, r1, r3
 800d828:	4413      	add	r3, r2
 800d82a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800d82e:	881a      	ldrh	r2, [r3, #0]
 800d830:	68bb      	ldr	r3, [r7, #8]
 800d832:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800d834:	7bfb      	ldrb	r3, [r7, #15]
 800d836:	687a      	ldr	r2, [r7, #4]
 800d838:	211a      	movs	r1, #26
 800d83a:	fb01 f303 	mul.w	r3, r1, r3
 800d83e:	4413      	add	r3, r2
 800d840:	f203 3356 	addw	r3, r3, #854	; 0x356
 800d844:	781b      	ldrb	r3, [r3, #0]
 800d846:	b25b      	sxtb	r3, r3
 800d848:	2b00      	cmp	r3, #0
 800d84a:	da16      	bge.n	800d87a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800d84c:	7bfb      	ldrb	r3, [r7, #15]
 800d84e:	687a      	ldr	r2, [r7, #4]
 800d850:	211a      	movs	r1, #26
 800d852:	fb01 f303 	mul.w	r3, r1, r3
 800d856:	4413      	add	r3, r2
 800d858:	f203 3356 	addw	r3, r3, #854	; 0x356
 800d85c:	781a      	ldrb	r2, [r3, #0]
 800d85e:	68bb      	ldr	r3, [r7, #8]
 800d860:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800d862:	7bfb      	ldrb	r3, [r7, #15]
 800d864:	687a      	ldr	r2, [r7, #4]
 800d866:	211a      	movs	r1, #26
 800d868:	fb01 f303 	mul.w	r3, r1, r3
 800d86c:	4413      	add	r3, r2
 800d86e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800d872:	881a      	ldrh	r2, [r3, #0]
 800d874:	68bb      	ldr	r3, [r7, #8]
 800d876:	835a      	strh	r2, [r3, #26]
 800d878:	e015      	b.n	800d8a6 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800d87a:	7bfb      	ldrb	r3, [r7, #15]
 800d87c:	687a      	ldr	r2, [r7, #4]
 800d87e:	211a      	movs	r1, #26
 800d880:	fb01 f303 	mul.w	r3, r1, r3
 800d884:	4413      	add	r3, r2
 800d886:	f203 3356 	addw	r3, r3, #854	; 0x356
 800d88a:	781a      	ldrb	r2, [r3, #0]
 800d88c:	68bb      	ldr	r3, [r7, #8]
 800d88e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800d890:	7bfb      	ldrb	r3, [r7, #15]
 800d892:	687a      	ldr	r2, [r7, #4]
 800d894:	211a      	movs	r1, #26
 800d896:	fb01 f303 	mul.w	r3, r1, r3
 800d89a:	4413      	add	r3, r2
 800d89c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800d8a0:	881a      	ldrh	r2, [r3, #0]
 800d8a2:	68bb      	ldr	r3, [r7, #8]
 800d8a4:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800d8a6:	68bb      	ldr	r3, [r7, #8]
 800d8a8:	7b9b      	ldrb	r3, [r3, #14]
 800d8aa:	4619      	mov	r1, r3
 800d8ac:	6878      	ldr	r0, [r7, #4]
 800d8ae:	f001 ffec 	bl	800f88a <USBH_AllocPipe>
 800d8b2:	4603      	mov	r3, r0
 800d8b4:	461a      	mov	r2, r3
 800d8b6:	68bb      	ldr	r3, [r7, #8]
 800d8b8:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800d8ba:	68bb      	ldr	r3, [r7, #8]
 800d8bc:	7bdb      	ldrb	r3, [r3, #15]
 800d8be:	4619      	mov	r1, r3
 800d8c0:	6878      	ldr	r0, [r7, #4]
 800d8c2:	f001 ffe2 	bl	800f88a <USBH_AllocPipe>
 800d8c6:	4603      	mov	r3, r0
 800d8c8:	461a      	mov	r2, r3
 800d8ca:	68bb      	ldr	r3, [r7, #8]
 800d8cc:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800d8ce:	68bb      	ldr	r3, [r7, #8]
 800d8d0:	7b59      	ldrb	r1, [r3, #13]
 800d8d2:	68bb      	ldr	r3, [r7, #8]
 800d8d4:	7b98      	ldrb	r0, [r3, #14]
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d8e2:	68ba      	ldr	r2, [r7, #8]
 800d8e4:	8b12      	ldrh	r2, [r2, #24]
 800d8e6:	9202      	str	r2, [sp, #8]
 800d8e8:	2202      	movs	r2, #2
 800d8ea:	9201      	str	r2, [sp, #4]
 800d8ec:	9300      	str	r3, [sp, #0]
 800d8ee:	4623      	mov	r3, r4
 800d8f0:	4602      	mov	r2, r0
 800d8f2:	6878      	ldr	r0, [r7, #4]
 800d8f4:	f001 ff9a 	bl	800f82c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800d8f8:	68bb      	ldr	r3, [r7, #8]
 800d8fa:	7b19      	ldrb	r1, [r3, #12]
 800d8fc:	68bb      	ldr	r3, [r7, #8]
 800d8fe:	7bd8      	ldrb	r0, [r3, #15]
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800d90c:	68ba      	ldr	r2, [r7, #8]
 800d90e:	8b52      	ldrh	r2, [r2, #26]
 800d910:	9202      	str	r2, [sp, #8]
 800d912:	2202      	movs	r2, #2
 800d914:	9201      	str	r2, [sp, #4]
 800d916:	9300      	str	r3, [sp, #0]
 800d918:	4623      	mov	r3, r4
 800d91a:	4602      	mov	r2, r0
 800d91c:	6878      	ldr	r0, [r7, #4]
 800d91e:	f001 ff85 	bl	800f82c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800d922:	68bb      	ldr	r3, [r7, #8]
 800d924:	2200      	movs	r2, #0
 800d926:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800d92a:	68bb      	ldr	r3, [r7, #8]
 800d92c:	7b5b      	ldrb	r3, [r3, #13]
 800d92e:	2200      	movs	r2, #0
 800d930:	4619      	mov	r1, r3
 800d932:	6878      	ldr	r0, [r7, #4]
 800d934:	f004 fdb6 	bl	80124a4 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800d938:	68bb      	ldr	r3, [r7, #8]
 800d93a:	7b1b      	ldrb	r3, [r3, #12]
 800d93c:	2200      	movs	r2, #0
 800d93e:	4619      	mov	r1, r3
 800d940:	6878      	ldr	r0, [r7, #4]
 800d942:	f004 fdaf 	bl	80124a4 <USBH_LL_SetToggle>

  return USBH_OK;
 800d946:	2300      	movs	r3, #0
}
 800d948:	4618      	mov	r0, r3
 800d94a:	3714      	adds	r7, #20
 800d94c:	46bd      	mov	sp, r7
 800d94e:	bd90      	pop	{r4, r7, pc}

0800d950 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800d950:	b580      	push	{r7, lr}
 800d952:	b084      	sub	sp, #16
 800d954:	af00      	add	r7, sp, #0
 800d956:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d95e:	69db      	ldr	r3, [r3, #28]
 800d960:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	781b      	ldrb	r3, [r3, #0]
 800d966:	2b00      	cmp	r3, #0
 800d968:	d00e      	beq.n	800d988 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	781b      	ldrb	r3, [r3, #0]
 800d96e:	4619      	mov	r1, r3
 800d970:	6878      	ldr	r0, [r7, #4]
 800d972:	f001 ff7a 	bl	800f86a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	781b      	ldrb	r3, [r3, #0]
 800d97a:	4619      	mov	r1, r3
 800d97c:	6878      	ldr	r0, [r7, #4]
 800d97e:	f001 ffa5 	bl	800f8cc <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	2200      	movs	r2, #0
 800d986:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	7b1b      	ldrb	r3, [r3, #12]
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d00e      	beq.n	800d9ae <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	7b1b      	ldrb	r3, [r3, #12]
 800d994:	4619      	mov	r1, r3
 800d996:	6878      	ldr	r0, [r7, #4]
 800d998:	f001 ff67 	bl	800f86a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	7b1b      	ldrb	r3, [r3, #12]
 800d9a0:	4619      	mov	r1, r3
 800d9a2:	6878      	ldr	r0, [r7, #4]
 800d9a4:	f001 ff92 	bl	800f8cc <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	2200      	movs	r2, #0
 800d9ac:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	7b5b      	ldrb	r3, [r3, #13]
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d00e      	beq.n	800d9d4 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	7b5b      	ldrb	r3, [r3, #13]
 800d9ba:	4619      	mov	r1, r3
 800d9bc:	6878      	ldr	r0, [r7, #4]
 800d9be:	f001 ff54 	bl	800f86a <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	7b5b      	ldrb	r3, [r3, #13]
 800d9c6:	4619      	mov	r1, r3
 800d9c8:	6878      	ldr	r0, [r7, #4]
 800d9ca:	f001 ff7f 	bl	800f8cc <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	2200      	movs	r2, #0
 800d9d2:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d9da:	69db      	ldr	r3, [r3, #28]
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d00b      	beq.n	800d9f8 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d9e6:	69db      	ldr	r3, [r3, #28]
 800d9e8:	4618      	mov	r0, r3
 800d9ea:	f004 fe13 	bl	8012614 <free>
    phost->pActiveClass->pData = 0U;
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d9f4:	2200      	movs	r2, #0
 800d9f6:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800d9f8:	2300      	movs	r3, #0
}
 800d9fa:	4618      	mov	r0, r3
 800d9fc:	3710      	adds	r7, #16
 800d9fe:	46bd      	mov	sp, r7
 800da00:	bd80      	pop	{r7, pc}

0800da02 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800da02:	b580      	push	{r7, lr}
 800da04:	b084      	sub	sp, #16
 800da06:	af00      	add	r7, sp, #0
 800da08:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800da10:	69db      	ldr	r3, [r3, #28]
 800da12:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	3340      	adds	r3, #64	; 0x40
 800da18:	4619      	mov	r1, r3
 800da1a:	6878      	ldr	r0, [r7, #4]
 800da1c:	f000 f8b1 	bl	800db82 <GetLineCoding>
 800da20:	4603      	mov	r3, r0
 800da22:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800da24:	7afb      	ldrb	r3, [r7, #11]
 800da26:	2b00      	cmp	r3, #0
 800da28:	d105      	bne.n	800da36 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800da30:	2102      	movs	r1, #2
 800da32:	6878      	ldr	r0, [r7, #4]
 800da34:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800da36:	7afb      	ldrb	r3, [r7, #11]
}
 800da38:	4618      	mov	r0, r3
 800da3a:	3710      	adds	r7, #16
 800da3c:	46bd      	mov	sp, r7
 800da3e:	bd80      	pop	{r7, pc}

0800da40 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800da40:	b580      	push	{r7, lr}
 800da42:	b084      	sub	sp, #16
 800da44:	af00      	add	r7, sp, #0
 800da46:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800da48:	2301      	movs	r3, #1
 800da4a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800da4c:	2300      	movs	r3, #0
 800da4e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800da56:	69db      	ldr	r3, [r3, #28]
 800da58:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800da5a:	68bb      	ldr	r3, [r7, #8]
 800da5c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800da60:	2b04      	cmp	r3, #4
 800da62:	d877      	bhi.n	800db54 <USBH_CDC_Process+0x114>
 800da64:	a201      	add	r2, pc, #4	; (adr r2, 800da6c <USBH_CDC_Process+0x2c>)
 800da66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da6a:	bf00      	nop
 800da6c:	0800da81 	.word	0x0800da81
 800da70:	0800da87 	.word	0x0800da87
 800da74:	0800dab7 	.word	0x0800dab7
 800da78:	0800db2b 	.word	0x0800db2b
 800da7c:	0800db39 	.word	0x0800db39
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800da80:	2300      	movs	r3, #0
 800da82:	73fb      	strb	r3, [r7, #15]
      break;
 800da84:	e06d      	b.n	800db62 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800da86:	68bb      	ldr	r3, [r7, #8]
 800da88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800da8a:	4619      	mov	r1, r3
 800da8c:	6878      	ldr	r0, [r7, #4]
 800da8e:	f000 f897 	bl	800dbc0 <SetLineCoding>
 800da92:	4603      	mov	r3, r0
 800da94:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800da96:	7bbb      	ldrb	r3, [r7, #14]
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d104      	bne.n	800daa6 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800da9c:	68bb      	ldr	r3, [r7, #8]
 800da9e:	2202      	movs	r2, #2
 800daa0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800daa4:	e058      	b.n	800db58 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800daa6:	7bbb      	ldrb	r3, [r7, #14]
 800daa8:	2b01      	cmp	r3, #1
 800daaa:	d055      	beq.n	800db58 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800daac:	68bb      	ldr	r3, [r7, #8]
 800daae:	2204      	movs	r2, #4
 800dab0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800dab4:	e050      	b.n	800db58 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800dab6:	68bb      	ldr	r3, [r7, #8]
 800dab8:	3340      	adds	r3, #64	; 0x40
 800daba:	4619      	mov	r1, r3
 800dabc:	6878      	ldr	r0, [r7, #4]
 800dabe:	f000 f860 	bl	800db82 <GetLineCoding>
 800dac2:	4603      	mov	r3, r0
 800dac4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800dac6:	7bbb      	ldrb	r3, [r7, #14]
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d126      	bne.n	800db1a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800dacc:	68bb      	ldr	r3, [r7, #8]
 800dace:	2200      	movs	r2, #0
 800dad0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800dad4:	68bb      	ldr	r3, [r7, #8]
 800dad6:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800dada:	68bb      	ldr	r3, [r7, #8]
 800dadc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dade:	791b      	ldrb	r3, [r3, #4]
 800dae0:	429a      	cmp	r2, r3
 800dae2:	d13b      	bne.n	800db5c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800dae4:	68bb      	ldr	r3, [r7, #8]
 800dae6:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800daea:	68bb      	ldr	r3, [r7, #8]
 800daec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800daee:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800daf0:	429a      	cmp	r2, r3
 800daf2:	d133      	bne.n	800db5c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800daf4:	68bb      	ldr	r3, [r7, #8]
 800daf6:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800dafa:	68bb      	ldr	r3, [r7, #8]
 800dafc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dafe:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800db00:	429a      	cmp	r2, r3
 800db02:	d12b      	bne.n	800db5c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800db04:	68bb      	ldr	r3, [r7, #8]
 800db06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800db08:	68bb      	ldr	r3, [r7, #8]
 800db0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800db0c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800db0e:	429a      	cmp	r2, r3
 800db10:	d124      	bne.n	800db5c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800db12:	6878      	ldr	r0, [r7, #4]
 800db14:	f000 f984 	bl	800de20 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800db18:	e020      	b.n	800db5c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800db1a:	7bbb      	ldrb	r3, [r7, #14]
 800db1c:	2b01      	cmp	r3, #1
 800db1e:	d01d      	beq.n	800db5c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800db20:	68bb      	ldr	r3, [r7, #8]
 800db22:	2204      	movs	r2, #4
 800db24:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800db28:	e018      	b.n	800db5c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800db2a:	6878      	ldr	r0, [r7, #4]
 800db2c:	f000 f867 	bl	800dbfe <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800db30:	6878      	ldr	r0, [r7, #4]
 800db32:	f000 f8f8 	bl	800dd26 <CDC_ProcessReception>
      break;
 800db36:	e014      	b.n	800db62 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800db38:	2100      	movs	r1, #0
 800db3a:	6878      	ldr	r0, [r7, #4]
 800db3c:	f001 f953 	bl	800ede6 <USBH_ClrFeature>
 800db40:	4603      	mov	r3, r0
 800db42:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800db44:	7bbb      	ldrb	r3, [r7, #14]
 800db46:	2b00      	cmp	r3, #0
 800db48:	d10a      	bne.n	800db60 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800db4a:	68bb      	ldr	r3, [r7, #8]
 800db4c:	2200      	movs	r2, #0
 800db4e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800db52:	e005      	b.n	800db60 <USBH_CDC_Process+0x120>

    default:
      break;
 800db54:	bf00      	nop
 800db56:	e004      	b.n	800db62 <USBH_CDC_Process+0x122>
      break;
 800db58:	bf00      	nop
 800db5a:	e002      	b.n	800db62 <USBH_CDC_Process+0x122>
      break;
 800db5c:	bf00      	nop
 800db5e:	e000      	b.n	800db62 <USBH_CDC_Process+0x122>
      break;
 800db60:	bf00      	nop

  }

  return status;
 800db62:	7bfb      	ldrb	r3, [r7, #15]
}
 800db64:	4618      	mov	r0, r3
 800db66:	3710      	adds	r7, #16
 800db68:	46bd      	mov	sp, r7
 800db6a:	bd80      	pop	{r7, pc}

0800db6c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800db6c:	b480      	push	{r7}
 800db6e:	b083      	sub	sp, #12
 800db70:	af00      	add	r7, sp, #0
 800db72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800db74:	2300      	movs	r3, #0
}
 800db76:	4618      	mov	r0, r3
 800db78:	370c      	adds	r7, #12
 800db7a:	46bd      	mov	sp, r7
 800db7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db80:	4770      	bx	lr

0800db82 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800db82:	b580      	push	{r7, lr}
 800db84:	b082      	sub	sp, #8
 800db86:	af00      	add	r7, sp, #0
 800db88:	6078      	str	r0, [r7, #4]
 800db8a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	22a1      	movs	r2, #161	; 0xa1
 800db90:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	2221      	movs	r2, #33	; 0x21
 800db96:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	2200      	movs	r2, #0
 800db9c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	2200      	movs	r2, #0
 800dba2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	2207      	movs	r2, #7
 800dba8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800dbaa:	683b      	ldr	r3, [r7, #0]
 800dbac:	2207      	movs	r2, #7
 800dbae:	4619      	mov	r1, r3
 800dbb0:	6878      	ldr	r0, [r7, #4]
 800dbb2:	f001 faf8 	bl	800f1a6 <USBH_CtlReq>
 800dbb6:	4603      	mov	r3, r0
}
 800dbb8:	4618      	mov	r0, r3
 800dbba:	3708      	adds	r7, #8
 800dbbc:	46bd      	mov	sp, r7
 800dbbe:	bd80      	pop	{r7, pc}

0800dbc0 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800dbc0:	b580      	push	{r7, lr}
 800dbc2:	b082      	sub	sp, #8
 800dbc4:	af00      	add	r7, sp, #0
 800dbc6:	6078      	str	r0, [r7, #4]
 800dbc8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	2221      	movs	r2, #33	; 0x21
 800dbce:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	2220      	movs	r2, #32
 800dbd4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	2200      	movs	r2, #0
 800dbda:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	2200      	movs	r2, #0
 800dbe0:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	2207      	movs	r2, #7
 800dbe6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800dbe8:	683b      	ldr	r3, [r7, #0]
 800dbea:	2207      	movs	r2, #7
 800dbec:	4619      	mov	r1, r3
 800dbee:	6878      	ldr	r0, [r7, #4]
 800dbf0:	f001 fad9 	bl	800f1a6 <USBH_CtlReq>
 800dbf4:	4603      	mov	r3, r0
}
 800dbf6:	4618      	mov	r0, r3
 800dbf8:	3708      	adds	r7, #8
 800dbfa:	46bd      	mov	sp, r7
 800dbfc:	bd80      	pop	{r7, pc}

0800dbfe <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800dbfe:	b580      	push	{r7, lr}
 800dc00:	b086      	sub	sp, #24
 800dc02:	af02      	add	r7, sp, #8
 800dc04:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800dc0c:	69db      	ldr	r3, [r3, #28]
 800dc0e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800dc10:	2300      	movs	r3, #0
 800dc12:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800dc1a:	2b01      	cmp	r3, #1
 800dc1c:	d002      	beq.n	800dc24 <CDC_ProcessTransmission+0x26>
 800dc1e:	2b02      	cmp	r3, #2
 800dc20:	d025      	beq.n	800dc6e <CDC_ProcessTransmission+0x70>
        }
      }
      break;

    default:
      break;
 800dc22:	e07c      	b.n	800dd1e <CDC_ProcessTransmission+0x120>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc28:	68fa      	ldr	r2, [r7, #12]
 800dc2a:	8b12      	ldrh	r2, [r2, #24]
 800dc2c:	4293      	cmp	r3, r2
 800dc2e:	d90c      	bls.n	800dc4a <CDC_ProcessTransmission+0x4c>
        USBH_BulkSendData(phost,
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	69d9      	ldr	r1, [r3, #28]
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	8b1a      	ldrh	r2, [r3, #24]
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	7b58      	ldrb	r0, [r3, #13]
 800dc3c:	2301      	movs	r3, #1
 800dc3e:	9300      	str	r3, [sp, #0]
 800dc40:	4603      	mov	r3, r0
 800dc42:	6878      	ldr	r0, [r7, #4]
 800dc44:	f001 fdaf 	bl	800f7a6 <USBH_BulkSendData>
 800dc48:	e00c      	b.n	800dc64 <CDC_ProcessTransmission+0x66>
        USBH_BulkSendData(phost,
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800dc52:	b29a      	uxth	r2, r3
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	7b58      	ldrb	r0, [r3, #13]
 800dc58:	2301      	movs	r3, #1
 800dc5a:	9300      	str	r3, [sp, #0]
 800dc5c:	4603      	mov	r3, r0
 800dc5e:	6878      	ldr	r0, [r7, #4]
 800dc60:	f001 fda1 	bl	800f7a6 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	2202      	movs	r2, #2
 800dc68:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800dc6c:	e057      	b.n	800dd1e <CDC_ProcessTransmission+0x120>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	7b5b      	ldrb	r3, [r3, #13]
 800dc72:	4619      	mov	r1, r3
 800dc74:	6878      	ldr	r0, [r7, #4]
 800dc76:	f004 fbeb 	bl	8012450 <USBH_LL_GetURBState>
 800dc7a:	4603      	mov	r3, r0
 800dc7c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800dc7e:	7afb      	ldrb	r3, [r7, #11]
 800dc80:	2b01      	cmp	r3, #1
 800dc82:	d136      	bne.n	800dcf2 <CDC_ProcessTransmission+0xf4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc88:	68fa      	ldr	r2, [r7, #12]
 800dc8a:	8b12      	ldrh	r2, [r2, #24]
 800dc8c:	4293      	cmp	r3, r2
 800dc8e:	d90e      	bls.n	800dcae <CDC_ProcessTransmission+0xb0>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc94:	68fa      	ldr	r2, [r7, #12]
 800dc96:	8b12      	ldrh	r2, [r2, #24]
 800dc98:	1a9a      	subs	r2, r3, r2
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	69db      	ldr	r3, [r3, #28]
 800dca2:	68fa      	ldr	r2, [r7, #12]
 800dca4:	8b12      	ldrh	r2, [r2, #24]
 800dca6:	441a      	add	r2, r3
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	61da      	str	r2, [r3, #28]
 800dcac:	e002      	b.n	800dcb4 <CDC_ProcessTransmission+0xb6>
          CDC_Handle->TxDataLength = 0U;
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	2200      	movs	r2, #0
 800dcb2:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d004      	beq.n	800dcc6 <CDC_ProcessTransmission+0xc8>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	2201      	movs	r2, #1
 800dcc0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800dcc4:	e006      	b.n	800dcd4 <CDC_ProcessTransmission+0xd6>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	2200      	movs	r2, #0
 800dcca:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800dcce:	6878      	ldr	r0, [r7, #4]
 800dcd0:	f000 f892 	bl	800ddf8 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	2204      	movs	r2, #4
 800dcd8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800dce8:	2200      	movs	r2, #0
 800dcea:	4619      	mov	r1, r3
 800dcec:	f001 ff62 	bl	800fbb4 <osMessagePut>
      break;
 800dcf0:	e014      	b.n	800dd1c <CDC_ProcessTransmission+0x11e>
        if (URB_Status == USBH_URB_NOTREADY)
 800dcf2:	7afb      	ldrb	r3, [r7, #11]
 800dcf4:	2b02      	cmp	r3, #2
 800dcf6:	d111      	bne.n	800dd1c <CDC_ProcessTransmission+0x11e>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	2201      	movs	r2, #1
 800dcfc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	2204      	movs	r2, #4
 800dd04:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800dd14:	2200      	movs	r2, #0
 800dd16:	4619      	mov	r1, r3
 800dd18:	f001 ff4c 	bl	800fbb4 <osMessagePut>
      break;
 800dd1c:	bf00      	nop
  }
}
 800dd1e:	bf00      	nop
 800dd20:	3710      	adds	r7, #16
 800dd22:	46bd      	mov	sp, r7
 800dd24:	bd80      	pop	{r7, pc}

0800dd26 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800dd26:	b580      	push	{r7, lr}
 800dd28:	b086      	sub	sp, #24
 800dd2a:	af00      	add	r7, sp, #0
 800dd2c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800dd34:	69db      	ldr	r3, [r3, #28]
 800dd36:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800dd38:	2300      	movs	r3, #0
 800dd3a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800dd3c:	697b      	ldr	r3, [r7, #20]
 800dd3e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800dd42:	2b03      	cmp	r3, #3
 800dd44:	d002      	beq.n	800dd4c <CDC_ProcessReception+0x26>
 800dd46:	2b04      	cmp	r3, #4
 800dd48:	d00e      	beq.n	800dd68 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800dd4a:	e051      	b.n	800ddf0 <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 800dd4c:	697b      	ldr	r3, [r7, #20]
 800dd4e:	6a19      	ldr	r1, [r3, #32]
 800dd50:	697b      	ldr	r3, [r7, #20]
 800dd52:	8b5a      	ldrh	r2, [r3, #26]
 800dd54:	697b      	ldr	r3, [r7, #20]
 800dd56:	7b1b      	ldrb	r3, [r3, #12]
 800dd58:	6878      	ldr	r0, [r7, #4]
 800dd5a:	f001 fd49 	bl	800f7f0 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800dd5e:	697b      	ldr	r3, [r7, #20]
 800dd60:	2204      	movs	r2, #4
 800dd62:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800dd66:	e043      	b.n	800ddf0 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800dd68:	697b      	ldr	r3, [r7, #20]
 800dd6a:	7b1b      	ldrb	r3, [r3, #12]
 800dd6c:	4619      	mov	r1, r3
 800dd6e:	6878      	ldr	r0, [r7, #4]
 800dd70:	f004 fb6e 	bl	8012450 <USBH_LL_GetURBState>
 800dd74:	4603      	mov	r3, r0
 800dd76:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800dd78:	7cfb      	ldrb	r3, [r7, #19]
 800dd7a:	2b01      	cmp	r3, #1
 800dd7c:	d137      	bne.n	800ddee <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800dd7e:	697b      	ldr	r3, [r7, #20]
 800dd80:	7b1b      	ldrb	r3, [r3, #12]
 800dd82:	4619      	mov	r1, r3
 800dd84:	6878      	ldr	r0, [r7, #4]
 800dd86:	f004 fad1 	bl	801232c <USBH_LL_GetLastXferSize>
 800dd8a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800dd8c:	697b      	ldr	r3, [r7, #20]
 800dd8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd90:	68fa      	ldr	r2, [r7, #12]
 800dd92:	429a      	cmp	r2, r3
 800dd94:	d016      	beq.n	800ddc4 <CDC_ProcessReception+0x9e>
 800dd96:	697b      	ldr	r3, [r7, #20]
 800dd98:	8b5b      	ldrh	r3, [r3, #26]
 800dd9a:	461a      	mov	r2, r3
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	4293      	cmp	r3, r2
 800dda0:	d910      	bls.n	800ddc4 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800dda2:	697b      	ldr	r3, [r7, #20]
 800dda4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	1ad2      	subs	r2, r2, r3
 800ddaa:	697b      	ldr	r3, [r7, #20]
 800ddac:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800ddae:	697b      	ldr	r3, [r7, #20]
 800ddb0:	6a1a      	ldr	r2, [r3, #32]
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	441a      	add	r2, r3
 800ddb6:	697b      	ldr	r3, [r7, #20]
 800ddb8:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800ddba:	697b      	ldr	r3, [r7, #20]
 800ddbc:	2203      	movs	r2, #3
 800ddbe:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800ddc2:	e006      	b.n	800ddd2 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800ddc4:	697b      	ldr	r3, [r7, #20]
 800ddc6:	2200      	movs	r2, #0
 800ddc8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800ddcc:	6878      	ldr	r0, [r7, #4]
 800ddce:	f000 f81d 	bl	800de0c <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	2204      	movs	r2, #4
 800ddd6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800dde6:	2200      	movs	r2, #0
 800dde8:	4619      	mov	r1, r3
 800ddea:	f001 fee3 	bl	800fbb4 <osMessagePut>
      break;
 800ddee:	bf00      	nop
  }
}
 800ddf0:	bf00      	nop
 800ddf2:	3718      	adds	r7, #24
 800ddf4:	46bd      	mov	sp, r7
 800ddf6:	bd80      	pop	{r7, pc}

0800ddf8 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800ddf8:	b480      	push	{r7}
 800ddfa:	b083      	sub	sp, #12
 800ddfc:	af00      	add	r7, sp, #0
 800ddfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800de00:	bf00      	nop
 800de02:	370c      	adds	r7, #12
 800de04:	46bd      	mov	sp, r7
 800de06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de0a:	4770      	bx	lr

0800de0c <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800de0c:	b480      	push	{r7}
 800de0e:	b083      	sub	sp, #12
 800de10:	af00      	add	r7, sp, #0
 800de12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800de14:	bf00      	nop
 800de16:	370c      	adds	r7, #12
 800de18:	46bd      	mov	sp, r7
 800de1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de1e:	4770      	bx	lr

0800de20 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800de20:	b480      	push	{r7}
 800de22:	b083      	sub	sp, #12
 800de24:	af00      	add	r7, sp, #0
 800de26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800de28:	bf00      	nop
 800de2a:	370c      	adds	r7, #12
 800de2c:	46bd      	mov	sp, r7
 800de2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de32:	4770      	bx	lr

0800de34 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800de34:	b5b0      	push	{r4, r5, r7, lr}
 800de36:	b090      	sub	sp, #64	; 0x40
 800de38:	af00      	add	r7, sp, #0
 800de3a:	60f8      	str	r0, [r7, #12]
 800de3c:	60b9      	str	r1, [r7, #8]
 800de3e:	4613      	mov	r3, r2
 800de40:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	2b00      	cmp	r3, #0
 800de46:	d101      	bne.n	800de4c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800de48:	2302      	movs	r3, #2
 800de4a:	e04d      	b.n	800dee8 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	79fa      	ldrb	r2, [r7, #7]
 800de50:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	2200      	movs	r2, #0
 800de58:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	2200      	movs	r2, #0
 800de60:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800de64:	68f8      	ldr	r0, [r7, #12]
 800de66:	f000 f847 	bl	800def8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	2200      	movs	r2, #0
 800de6e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	2200      	movs	r2, #0
 800de76:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	2200      	movs	r2, #0
 800de7e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	2200      	movs	r2, #0
 800de86:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800de8a:	68bb      	ldr	r3, [r7, #8]
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d003      	beq.n	800de98 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	68ba      	ldr	r2, [r7, #8]
 800de94:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 800de98:	4b15      	ldr	r3, [pc, #84]	; (800def0 <USBH_Init+0xbc>)
 800de9a:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800de9e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dea0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 800dea4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800dea8:	2100      	movs	r1, #0
 800deaa:	4618      	mov	r0, r3
 800deac:	f001 fe58 	bl	800fb60 <osMessageCreate>
 800deb0:	4602      	mov	r2, r0
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 800deb8:	4b0e      	ldr	r3, [pc, #56]	; (800def4 <USBH_Init+0xc0>)
 800deba:	f107 0414 	add.w	r4, r7, #20
 800debe:	461d      	mov	r5, r3
 800dec0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dec2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dec4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800dec8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 800decc:	f107 0314 	add.w	r3, r7, #20
 800ded0:	68f9      	ldr	r1, [r7, #12]
 800ded2:	4618      	mov	r0, r3
 800ded4:	f001 fde4 	bl	800faa0 <osThreadCreate>
 800ded8:	4602      	mov	r2, r0
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800dee0:	68f8      	ldr	r0, [r7, #12]
 800dee2:	f004 f971 	bl	80121c8 <USBH_LL_Init>

  return USBH_OK;
 800dee6:	2300      	movs	r3, #0
}
 800dee8:	4618      	mov	r0, r3
 800deea:	3740      	adds	r7, #64	; 0x40
 800deec:	46bd      	mov	sp, r7
 800deee:	bdb0      	pop	{r4, r5, r7, pc}
 800def0:	08012814 	.word	0x08012814
 800def4:	08012830 	.word	0x08012830

0800def8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800def8:	b480      	push	{r7}
 800defa:	b085      	sub	sp, #20
 800defc:	af00      	add	r7, sp, #0
 800defe:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800df00:	2300      	movs	r3, #0
 800df02:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800df04:	2300      	movs	r3, #0
 800df06:	60fb      	str	r3, [r7, #12]
 800df08:	e009      	b.n	800df1e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800df0a:	687a      	ldr	r2, [r7, #4]
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	33e0      	adds	r3, #224	; 0xe0
 800df10:	009b      	lsls	r3, r3, #2
 800df12:	4413      	add	r3, r2
 800df14:	2200      	movs	r2, #0
 800df16:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	3301      	adds	r3, #1
 800df1c:	60fb      	str	r3, [r7, #12]
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	2b0e      	cmp	r3, #14
 800df22:	d9f2      	bls.n	800df0a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800df24:	2300      	movs	r3, #0
 800df26:	60fb      	str	r3, [r7, #12]
 800df28:	e009      	b.n	800df3e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800df2a:	687a      	ldr	r2, [r7, #4]
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	4413      	add	r3, r2
 800df30:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800df34:	2200      	movs	r2, #0
 800df36:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	3301      	adds	r3, #1
 800df3c:	60fb      	str	r3, [r7, #12]
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800df44:	d3f1      	bcc.n	800df2a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	2200      	movs	r2, #0
 800df4a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	2200      	movs	r2, #0
 800df50:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	2201      	movs	r2, #1
 800df56:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	2200      	movs	r2, #0
 800df5c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	2201      	movs	r2, #1
 800df64:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	2240      	movs	r2, #64	; 0x40
 800df6a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	2200      	movs	r2, #0
 800df70:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	2200      	movs	r2, #0
 800df76:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	2201      	movs	r2, #1
 800df7e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	2200      	movs	r2, #0
 800df86:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	2200      	movs	r2, #0
 800df8e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800df92:	2300      	movs	r3, #0
}
 800df94:	4618      	mov	r0, r3
 800df96:	3714      	adds	r7, #20
 800df98:	46bd      	mov	sp, r7
 800df9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df9e:	4770      	bx	lr

0800dfa0 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800dfa0:	b480      	push	{r7}
 800dfa2:	b085      	sub	sp, #20
 800dfa4:	af00      	add	r7, sp, #0
 800dfa6:	6078      	str	r0, [r7, #4]
 800dfa8:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800dfaa:	2300      	movs	r3, #0
 800dfac:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800dfae:	683b      	ldr	r3, [r7, #0]
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d016      	beq.n	800dfe2 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d10e      	bne.n	800dfdc <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800dfc4:	1c59      	adds	r1, r3, #1
 800dfc6:	687a      	ldr	r2, [r7, #4]
 800dfc8:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800dfcc:	687a      	ldr	r2, [r7, #4]
 800dfce:	33de      	adds	r3, #222	; 0xde
 800dfd0:	6839      	ldr	r1, [r7, #0]
 800dfd2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800dfd6:	2300      	movs	r3, #0
 800dfd8:	73fb      	strb	r3, [r7, #15]
 800dfda:	e004      	b.n	800dfe6 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800dfdc:	2302      	movs	r3, #2
 800dfde:	73fb      	strb	r3, [r7, #15]
 800dfe0:	e001      	b.n	800dfe6 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800dfe2:	2302      	movs	r3, #2
 800dfe4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800dfe6:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfe8:	4618      	mov	r0, r3
 800dfea:	3714      	adds	r7, #20
 800dfec:	46bd      	mov	sp, r7
 800dfee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff2:	4770      	bx	lr

0800dff4 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800dff4:	b480      	push	{r7}
 800dff6:	b085      	sub	sp, #20
 800dff8:	af00      	add	r7, sp, #0
 800dffa:	6078      	str	r0, [r7, #4]
 800dffc:	460b      	mov	r3, r1
 800dffe:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800e000:	2300      	movs	r3, #0
 800e002:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800e00a:	78fa      	ldrb	r2, [r7, #3]
 800e00c:	429a      	cmp	r2, r3
 800e00e:	d204      	bcs.n	800e01a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	78fa      	ldrb	r2, [r7, #3]
 800e014:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800e018:	e001      	b.n	800e01e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800e01a:	2302      	movs	r3, #2
 800e01c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800e01e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e020:	4618      	mov	r0, r3
 800e022:	3714      	adds	r7, #20
 800e024:	46bd      	mov	sp, r7
 800e026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e02a:	4770      	bx	lr

0800e02c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800e02c:	b480      	push	{r7}
 800e02e:	b087      	sub	sp, #28
 800e030:	af00      	add	r7, sp, #0
 800e032:	6078      	str	r0, [r7, #4]
 800e034:	4608      	mov	r0, r1
 800e036:	4611      	mov	r1, r2
 800e038:	461a      	mov	r2, r3
 800e03a:	4603      	mov	r3, r0
 800e03c:	70fb      	strb	r3, [r7, #3]
 800e03e:	460b      	mov	r3, r1
 800e040:	70bb      	strb	r3, [r7, #2]
 800e042:	4613      	mov	r3, r2
 800e044:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800e046:	2300      	movs	r3, #0
 800e048:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800e04a:	2300      	movs	r3, #0
 800e04c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800e054:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800e056:	e025      	b.n	800e0a4 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800e058:	7dfb      	ldrb	r3, [r7, #23]
 800e05a:	221a      	movs	r2, #26
 800e05c:	fb02 f303 	mul.w	r3, r2, r3
 800e060:	3308      	adds	r3, #8
 800e062:	68fa      	ldr	r2, [r7, #12]
 800e064:	4413      	add	r3, r2
 800e066:	3302      	adds	r3, #2
 800e068:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800e06a:	693b      	ldr	r3, [r7, #16]
 800e06c:	795b      	ldrb	r3, [r3, #5]
 800e06e:	78fa      	ldrb	r2, [r7, #3]
 800e070:	429a      	cmp	r2, r3
 800e072:	d002      	beq.n	800e07a <USBH_FindInterface+0x4e>
 800e074:	78fb      	ldrb	r3, [r7, #3]
 800e076:	2bff      	cmp	r3, #255	; 0xff
 800e078:	d111      	bne.n	800e09e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800e07a:	693b      	ldr	r3, [r7, #16]
 800e07c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800e07e:	78ba      	ldrb	r2, [r7, #2]
 800e080:	429a      	cmp	r2, r3
 800e082:	d002      	beq.n	800e08a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800e084:	78bb      	ldrb	r3, [r7, #2]
 800e086:	2bff      	cmp	r3, #255	; 0xff
 800e088:	d109      	bne.n	800e09e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800e08a:	693b      	ldr	r3, [r7, #16]
 800e08c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800e08e:	787a      	ldrb	r2, [r7, #1]
 800e090:	429a      	cmp	r2, r3
 800e092:	d002      	beq.n	800e09a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800e094:	787b      	ldrb	r3, [r7, #1]
 800e096:	2bff      	cmp	r3, #255	; 0xff
 800e098:	d101      	bne.n	800e09e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800e09a:	7dfb      	ldrb	r3, [r7, #23]
 800e09c:	e006      	b.n	800e0ac <USBH_FindInterface+0x80>
    }
    if_ix++;
 800e09e:	7dfb      	ldrb	r3, [r7, #23]
 800e0a0:	3301      	adds	r3, #1
 800e0a2:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800e0a4:	7dfb      	ldrb	r3, [r7, #23]
 800e0a6:	2b01      	cmp	r3, #1
 800e0a8:	d9d6      	bls.n	800e058 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800e0aa:	23ff      	movs	r3, #255	; 0xff
}
 800e0ac:	4618      	mov	r0, r3
 800e0ae:	371c      	adds	r7, #28
 800e0b0:	46bd      	mov	sp, r7
 800e0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0b6:	4770      	bx	lr

0800e0b8 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800e0b8:	b580      	push	{r7, lr}
 800e0ba:	b082      	sub	sp, #8
 800e0bc:	af00      	add	r7, sp, #0
 800e0be:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800e0c0:	6878      	ldr	r0, [r7, #4]
 800e0c2:	f004 f8bd 	bl	8012240 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800e0c6:	2101      	movs	r1, #1
 800e0c8:	6878      	ldr	r0, [r7, #4]
 800e0ca:	f004 f9d4 	bl	8012476 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800e0ce:	2300      	movs	r3, #0
}
 800e0d0:	4618      	mov	r0, r3
 800e0d2:	3708      	adds	r7, #8
 800e0d4:	46bd      	mov	sp, r7
 800e0d6:	bd80      	pop	{r7, pc}

0800e0d8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800e0d8:	b580      	push	{r7, lr}
 800e0da:	b088      	sub	sp, #32
 800e0dc:	af04      	add	r7, sp, #16
 800e0de:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800e0e0:	2302      	movs	r3, #2
 800e0e2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800e0e4:	2300      	movs	r3, #0
 800e0e6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800e0ee:	b2db      	uxtb	r3, r3
 800e0f0:	2b01      	cmp	r3, #1
 800e0f2:	d102      	bne.n	800e0fa <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	2203      	movs	r2, #3
 800e0f8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	781b      	ldrb	r3, [r3, #0]
 800e0fe:	b2db      	uxtb	r3, r3
 800e100:	2b0b      	cmp	r3, #11
 800e102:	f200 823c 	bhi.w	800e57e <USBH_Process+0x4a6>
 800e106:	a201      	add	r2, pc, #4	; (adr r2, 800e10c <USBH_Process+0x34>)
 800e108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e10c:	0800e13d 	.word	0x0800e13d
 800e110:	0800e18b 	.word	0x0800e18b
 800e114:	0800e20f 	.word	0x0800e20f
 800e118:	0800e4fd 	.word	0x0800e4fd
 800e11c:	0800e57f 	.word	0x0800e57f
 800e120:	0800e2cf 	.word	0x0800e2cf
 800e124:	0800e487 	.word	0x0800e487
 800e128:	0800e321 	.word	0x0800e321
 800e12c:	0800e35d 	.word	0x0800e35d
 800e130:	0800e397 	.word	0x0800e397
 800e134:	0800e3df 	.word	0x0800e3df
 800e138:	0800e4e5 	.word	0x0800e4e5
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800e142:	b2db      	uxtb	r3, r3
 800e144:	2b00      	cmp	r3, #0
 800e146:	f000 821c 	beq.w	800e582 <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	2201      	movs	r2, #1
 800e14e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800e150:	20c8      	movs	r0, #200	; 0xc8
 800e152:	f004 f9da 	bl	801250a <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800e156:	6878      	ldr	r0, [r7, #4]
 800e158:	f004 f8cd 	bl	80122f6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	2200      	movs	r2, #0
 800e160:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	2200      	movs	r2, #0
 800e168:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	2201      	movs	r2, #1
 800e170:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e180:	2200      	movs	r2, #0
 800e182:	4619      	mov	r1, r3
 800e184:	f001 fd16 	bl	800fbb4 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800e188:	e1fb      	b.n	800e582 <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800e190:	2b01      	cmp	r3, #1
 800e192:	d107      	bne.n	800e1a4 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	2200      	movs	r2, #0
 800e198:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	2202      	movs	r2, #2
 800e1a0:	701a      	strb	r2, [r3, #0]
 800e1a2:	e025      	b.n	800e1f0 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800e1aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e1ae:	d914      	bls.n	800e1da <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800e1b6:	3301      	adds	r3, #1
 800e1b8:	b2da      	uxtb	r2, r3
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800e1c6:	2b03      	cmp	r3, #3
 800e1c8:	d903      	bls.n	800e1d2 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	220d      	movs	r2, #13
 800e1ce:	701a      	strb	r2, [r3, #0]
 800e1d0:	e00e      	b.n	800e1f0 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	2200      	movs	r2, #0
 800e1d6:	701a      	strb	r2, [r3, #0]
 800e1d8:	e00a      	b.n	800e1f0 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800e1e0:	f103 020a 	add.w	r2, r3, #10
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800e1ea:	200a      	movs	r0, #10
 800e1ec:	f004 f98d 	bl	801250a <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	2201      	movs	r2, #1
 800e1f4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e204:	2200      	movs	r2, #0
 800e206:	4619      	mov	r1, r3
 800e208:	f001 fcd4 	bl	800fbb4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800e20c:	e1c0      	b.n	800e590 <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e214:	2b00      	cmp	r3, #0
 800e216:	d005      	beq.n	800e224 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e21e:	2104      	movs	r1, #4
 800e220:	6878      	ldr	r0, [r7, #4]
 800e222:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800e224:	2064      	movs	r0, #100	; 0x64
 800e226:	f004 f970 	bl	801250a <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800e22a:	6878      	ldr	r0, [r7, #4]
 800e22c:	f004 f83e 	bl	80122ac <USBH_LL_GetSpeed>
 800e230:	4603      	mov	r3, r0
 800e232:	461a      	mov	r2, r3
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	2205      	movs	r2, #5
 800e23e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800e240:	2100      	movs	r1, #0
 800e242:	6878      	ldr	r0, [r7, #4]
 800e244:	f001 fb21 	bl	800f88a <USBH_AllocPipe>
 800e248:	4603      	mov	r3, r0
 800e24a:	461a      	mov	r2, r3
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800e250:	2180      	movs	r1, #128	; 0x80
 800e252:	6878      	ldr	r0, [r7, #4]
 800e254:	f001 fb19 	bl	800f88a <USBH_AllocPipe>
 800e258:	4603      	mov	r3, r0
 800e25a:	461a      	mov	r2, r3
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	7919      	ldrb	r1, [r3, #4]
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800e270:	687a      	ldr	r2, [r7, #4]
 800e272:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800e274:	b292      	uxth	r2, r2
 800e276:	9202      	str	r2, [sp, #8]
 800e278:	2200      	movs	r2, #0
 800e27a:	9201      	str	r2, [sp, #4]
 800e27c:	9300      	str	r3, [sp, #0]
 800e27e:	4603      	mov	r3, r0
 800e280:	2280      	movs	r2, #128	; 0x80
 800e282:	6878      	ldr	r0, [r7, #4]
 800e284:	f001 fad2 	bl	800f82c <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	7959      	ldrb	r1, [r3, #5]
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800e298:	687a      	ldr	r2, [r7, #4]
 800e29a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800e29c:	b292      	uxth	r2, r2
 800e29e:	9202      	str	r2, [sp, #8]
 800e2a0:	2200      	movs	r2, #0
 800e2a2:	9201      	str	r2, [sp, #4]
 800e2a4:	9300      	str	r3, [sp, #0]
 800e2a6:	4603      	mov	r3, r0
 800e2a8:	2200      	movs	r2, #0
 800e2aa:	6878      	ldr	r0, [r7, #4]
 800e2ac:	f001 fabe 	bl	800f82c <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	2201      	movs	r2, #1
 800e2b4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e2c4:	2200      	movs	r2, #0
 800e2c6:	4619      	mov	r1, r3
 800e2c8:	f001 fc74 	bl	800fbb4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800e2cc:	e160      	b.n	800e590 <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800e2ce:	6878      	ldr	r0, [r7, #4]
 800e2d0:	f000 f964 	bl	800e59c <USBH_HandleEnum>
 800e2d4:	4603      	mov	r3, r0
 800e2d6:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800e2d8:	7bbb      	ldrb	r3, [r7, #14]
 800e2da:	b2db      	uxtb	r3, r3
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	f040 8152 	bne.w	800e586 <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	2200      	movs	r2, #0
 800e2e6:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800e2f0:	2b01      	cmp	r3, #1
 800e2f2:	d103      	bne.n	800e2fc <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	2208      	movs	r2, #8
 800e2f8:	701a      	strb	r2, [r3, #0]
 800e2fa:	e002      	b.n	800e302 <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	2207      	movs	r2, #7
 800e300:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	2205      	movs	r2, #5
 800e306:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e316:	2200      	movs	r2, #0
 800e318:	4619      	mov	r1, r3
 800e31a:	f001 fc4b 	bl	800fbb4 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800e31e:	e132      	b.n	800e586 <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e326:	2b00      	cmp	r3, #0
 800e328:	f000 812f 	beq.w	800e58a <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e332:	2101      	movs	r1, #1
 800e334:	6878      	ldr	r0, [r7, #4]
 800e336:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	2208      	movs	r2, #8
 800e33c:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	2205      	movs	r2, #5
 800e342:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e352:	2200      	movs	r2, #0
 800e354:	4619      	mov	r1, r3
 800e356:	f001 fc2d 	bl	800fbb4 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800e35a:	e116      	b.n	800e58a <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800e362:	b29b      	uxth	r3, r3
 800e364:	4619      	mov	r1, r3
 800e366:	6878      	ldr	r0, [r7, #4]
 800e368:	f000 fcf6 	bl	800ed58 <USBH_SetCfg>
 800e36c:	4603      	mov	r3, r0
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d102      	bne.n	800e378 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	2209      	movs	r2, #9
 800e376:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	2201      	movs	r2, #1
 800e37c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e38c:	2200      	movs	r2, #0
 800e38e:	4619      	mov	r1, r3
 800e390:	f001 fc10 	bl	800fbb4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800e394:	e0fc      	b.n	800e590 <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800e39c:	f003 0320 	and.w	r3, r3, #32
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d00a      	beq.n	800e3ba <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800e3a4:	2101      	movs	r1, #1
 800e3a6:	6878      	ldr	r0, [r7, #4]
 800e3a8:	f000 fcf9 	bl	800ed9e <USBH_SetFeature>
 800e3ac:	4603      	mov	r3, r0
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d106      	bne.n	800e3c0 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	220a      	movs	r2, #10
 800e3b6:	701a      	strb	r2, [r3, #0]
 800e3b8:	e002      	b.n	800e3c0 <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	220a      	movs	r2, #10
 800e3be:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	2201      	movs	r2, #1
 800e3c4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e3d4:	2200      	movs	r2, #0
 800e3d6:	4619      	mov	r1, r3
 800e3d8:	f001 fbec 	bl	800fbb4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800e3dc:	e0d8      	b.n	800e590 <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d03f      	beq.n	800e468 <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	2200      	movs	r2, #0
 800e3ec:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800e3f0:	2300      	movs	r3, #0
 800e3f2:	73fb      	strb	r3, [r7, #15]
 800e3f4:	e016      	b.n	800e424 <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800e3f6:	7bfa      	ldrb	r2, [r7, #15]
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	32de      	adds	r2, #222	; 0xde
 800e3fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e400:	791a      	ldrb	r2, [r3, #4]
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800e408:	429a      	cmp	r2, r3
 800e40a:	d108      	bne.n	800e41e <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 800e40c:	7bfa      	ldrb	r2, [r7, #15]
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	32de      	adds	r2, #222	; 0xde
 800e412:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800e41c:	e005      	b.n	800e42a <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800e41e:	7bfb      	ldrb	r3, [r7, #15]
 800e420:	3301      	adds	r3, #1
 800e422:	73fb      	strb	r3, [r7, #15]
 800e424:	7bfb      	ldrb	r3, [r7, #15]
 800e426:	2b00      	cmp	r3, #0
 800e428:	d0e5      	beq.n	800e3f6 <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e430:	2b00      	cmp	r3, #0
 800e432:	d016      	beq.n	800e462 <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e43a:	689b      	ldr	r3, [r3, #8]
 800e43c:	6878      	ldr	r0, [r7, #4]
 800e43e:	4798      	blx	r3
 800e440:	4603      	mov	r3, r0
 800e442:	2b00      	cmp	r3, #0
 800e444:	d109      	bne.n	800e45a <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	2206      	movs	r2, #6
 800e44a:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e452:	2103      	movs	r1, #3
 800e454:	6878      	ldr	r0, [r7, #4]
 800e456:	4798      	blx	r3
 800e458:	e006      	b.n	800e468 <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	220d      	movs	r2, #13
 800e45e:	701a      	strb	r2, [r3, #0]
 800e460:	e002      	b.n	800e468 <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	220d      	movs	r2, #13
 800e466:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	2205      	movs	r2, #5
 800e46c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e47c:	2200      	movs	r2, #0
 800e47e:	4619      	mov	r1, r3
 800e480:	f001 fb98 	bl	800fbb4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800e484:	e084      	b.n	800e590 <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d017      	beq.n	800e4c0 <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e496:	691b      	ldr	r3, [r3, #16]
 800e498:	6878      	ldr	r0, [r7, #4]
 800e49a:	4798      	blx	r3
 800e49c:	4603      	mov	r3, r0
 800e49e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800e4a0:	7bbb      	ldrb	r3, [r7, #14]
 800e4a2:	b2db      	uxtb	r3, r3
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d103      	bne.n	800e4b0 <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	220b      	movs	r2, #11
 800e4ac:	701a      	strb	r2, [r3, #0]
 800e4ae:	e00a      	b.n	800e4c6 <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 800e4b0:	7bbb      	ldrb	r3, [r7, #14]
 800e4b2:	b2db      	uxtb	r3, r3
 800e4b4:	2b02      	cmp	r3, #2
 800e4b6:	d106      	bne.n	800e4c6 <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	220d      	movs	r2, #13
 800e4bc:	701a      	strb	r2, [r3, #0]
 800e4be:	e002      	b.n	800e4c6 <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	220d      	movs	r2, #13
 800e4c4:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	2205      	movs	r2, #5
 800e4ca:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e4da:	2200      	movs	r2, #0
 800e4dc:	4619      	mov	r1, r3
 800e4de:	f001 fb69 	bl	800fbb4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800e4e2:	e055      	b.n	800e590 <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d04f      	beq.n	800e58e <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e4f4:	695b      	ldr	r3, [r3, #20]
 800e4f6:	6878      	ldr	r0, [r7, #4]
 800e4f8:	4798      	blx	r3
      }
      break;
 800e4fa:	e048      	b.n	800e58e <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	2200      	movs	r2, #0
 800e500:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800e504:	6878      	ldr	r0, [r7, #4]
 800e506:	f7ff fcf7 	bl	800def8 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e510:	2b00      	cmp	r3, #0
 800e512:	d009      	beq.n	800e528 <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800e51a:	68db      	ldr	r3, [r3, #12]
 800e51c:	6878      	ldr	r0, [r7, #4]
 800e51e:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	2200      	movs	r2, #0
 800e524:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d005      	beq.n	800e53e <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e538:	2105      	movs	r1, #5
 800e53a:	6878      	ldr	r0, [r7, #4]
 800e53c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800e544:	b2db      	uxtb	r3, r3
 800e546:	2b01      	cmp	r3, #1
 800e548:	d107      	bne.n	800e55a <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	2200      	movs	r2, #0
 800e54e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800e552:	6878      	ldr	r0, [r7, #4]
 800e554:	f7ff fdb0 	bl	800e0b8 <USBH_Start>
 800e558:	e002      	b.n	800e560 <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 800e55a:	6878      	ldr	r0, [r7, #4]
 800e55c:	f003 fe70 	bl	8012240 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	2201      	movs	r2, #1
 800e564:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e574:	2200      	movs	r2, #0
 800e576:	4619      	mov	r1, r3
 800e578:	f001 fb1c 	bl	800fbb4 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800e57c:	e008      	b.n	800e590 <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 800e57e:	bf00      	nop
 800e580:	e006      	b.n	800e590 <USBH_Process+0x4b8>
      break;
 800e582:	bf00      	nop
 800e584:	e004      	b.n	800e590 <USBH_Process+0x4b8>
      break;
 800e586:	bf00      	nop
 800e588:	e002      	b.n	800e590 <USBH_Process+0x4b8>
    break;
 800e58a:	bf00      	nop
 800e58c:	e000      	b.n	800e590 <USBH_Process+0x4b8>
      break;
 800e58e:	bf00      	nop
  }
  return USBH_OK;
 800e590:	2300      	movs	r3, #0
}
 800e592:	4618      	mov	r0, r3
 800e594:	3710      	adds	r7, #16
 800e596:	46bd      	mov	sp, r7
 800e598:	bd80      	pop	{r7, pc}
 800e59a:	bf00      	nop

0800e59c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800e59c:	b580      	push	{r7, lr}
 800e59e:	b088      	sub	sp, #32
 800e5a0:	af04      	add	r7, sp, #16
 800e5a2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800e5a4:	2301      	movs	r3, #1
 800e5a6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800e5a8:	2301      	movs	r3, #1
 800e5aa:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	785b      	ldrb	r3, [r3, #1]
 800e5b0:	2b07      	cmp	r3, #7
 800e5b2:	f200 8208 	bhi.w	800e9c6 <USBH_HandleEnum+0x42a>
 800e5b6:	a201      	add	r2, pc, #4	; (adr r2, 800e5bc <USBH_HandleEnum+0x20>)
 800e5b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5bc:	0800e5dd 	.word	0x0800e5dd
 800e5c0:	0800e69b 	.word	0x0800e69b
 800e5c4:	0800e705 	.word	0x0800e705
 800e5c8:	0800e793 	.word	0x0800e793
 800e5cc:	0800e7fd 	.word	0x0800e7fd
 800e5d0:	0800e86d 	.word	0x0800e86d
 800e5d4:	0800e909 	.word	0x0800e909
 800e5d8:	0800e987 	.word	0x0800e987
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800e5dc:	2108      	movs	r1, #8
 800e5de:	6878      	ldr	r0, [r7, #4]
 800e5e0:	f000 faea 	bl	800ebb8 <USBH_Get_DevDesc>
 800e5e4:	4603      	mov	r3, r0
 800e5e6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800e5e8:	7bbb      	ldrb	r3, [r7, #14]
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d130      	bne.n	800e650 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	2201      	movs	r2, #1
 800e5fc:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	7919      	ldrb	r1, [r3, #4]
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800e60e:	687a      	ldr	r2, [r7, #4]
 800e610:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800e612:	b292      	uxth	r2, r2
 800e614:	9202      	str	r2, [sp, #8]
 800e616:	2200      	movs	r2, #0
 800e618:	9201      	str	r2, [sp, #4]
 800e61a:	9300      	str	r3, [sp, #0]
 800e61c:	4603      	mov	r3, r0
 800e61e:	2280      	movs	r2, #128	; 0x80
 800e620:	6878      	ldr	r0, [r7, #4]
 800e622:	f001 f903 	bl	800f82c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	7959      	ldrb	r1, [r3, #5]
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800e636:	687a      	ldr	r2, [r7, #4]
 800e638:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800e63a:	b292      	uxth	r2, r2
 800e63c:	9202      	str	r2, [sp, #8]
 800e63e:	2200      	movs	r2, #0
 800e640:	9201      	str	r2, [sp, #4]
 800e642:	9300      	str	r3, [sp, #0]
 800e644:	4603      	mov	r3, r0
 800e646:	2200      	movs	r2, #0
 800e648:	6878      	ldr	r0, [r7, #4]
 800e64a:	f001 f8ef 	bl	800f82c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800e64e:	e1bc      	b.n	800e9ca <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e650:	7bbb      	ldrb	r3, [r7, #14]
 800e652:	2b03      	cmp	r3, #3
 800e654:	f040 81b9 	bne.w	800e9ca <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e65e:	3301      	adds	r3, #1
 800e660:	b2da      	uxtb	r2, r3
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e66e:	2b03      	cmp	r3, #3
 800e670:	d903      	bls.n	800e67a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	220d      	movs	r2, #13
 800e676:	701a      	strb	r2, [r3, #0]
      break;
 800e678:	e1a7      	b.n	800e9ca <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	795b      	ldrb	r3, [r3, #5]
 800e67e:	4619      	mov	r1, r3
 800e680:	6878      	ldr	r0, [r7, #4]
 800e682:	f001 f923 	bl	800f8cc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	791b      	ldrb	r3, [r3, #4]
 800e68a:	4619      	mov	r1, r3
 800e68c:	6878      	ldr	r0, [r7, #4]
 800e68e:	f001 f91d 	bl	800f8cc <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	2200      	movs	r2, #0
 800e696:	701a      	strb	r2, [r3, #0]
      break;
 800e698:	e197      	b.n	800e9ca <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800e69a:	2112      	movs	r1, #18
 800e69c:	6878      	ldr	r0, [r7, #4]
 800e69e:	f000 fa8b 	bl	800ebb8 <USBH_Get_DevDesc>
 800e6a2:	4603      	mov	r3, r0
 800e6a4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800e6a6:	7bbb      	ldrb	r3, [r7, #14]
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d103      	bne.n	800e6b4 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	2202      	movs	r2, #2
 800e6b0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800e6b2:	e18c      	b.n	800e9ce <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e6b4:	7bbb      	ldrb	r3, [r7, #14]
 800e6b6:	2b03      	cmp	r3, #3
 800e6b8:	f040 8189 	bne.w	800e9ce <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e6c2:	3301      	adds	r3, #1
 800e6c4:	b2da      	uxtb	r2, r3
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e6d2:	2b03      	cmp	r3, #3
 800e6d4:	d903      	bls.n	800e6de <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	220d      	movs	r2, #13
 800e6da:	701a      	strb	r2, [r3, #0]
      break;
 800e6dc:	e177      	b.n	800e9ce <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	795b      	ldrb	r3, [r3, #5]
 800e6e2:	4619      	mov	r1, r3
 800e6e4:	6878      	ldr	r0, [r7, #4]
 800e6e6:	f001 f8f1 	bl	800f8cc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	791b      	ldrb	r3, [r3, #4]
 800e6ee:	4619      	mov	r1, r3
 800e6f0:	6878      	ldr	r0, [r7, #4]
 800e6f2:	f001 f8eb 	bl	800f8cc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	2200      	movs	r2, #0
 800e6fa:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	2200      	movs	r2, #0
 800e700:	701a      	strb	r2, [r3, #0]
      break;
 800e702:	e164      	b.n	800e9ce <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800e704:	2101      	movs	r1, #1
 800e706:	6878      	ldr	r0, [r7, #4]
 800e708:	f000 fb02 	bl	800ed10 <USBH_SetAddress>
 800e70c:	4603      	mov	r3, r0
 800e70e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800e710:	7bbb      	ldrb	r3, [r7, #14]
 800e712:	2b00      	cmp	r3, #0
 800e714:	d132      	bne.n	800e77c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800e716:	2002      	movs	r0, #2
 800e718:	f003 fef7 	bl	801250a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	2201      	movs	r2, #1
 800e720:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	2203      	movs	r2, #3
 800e728:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	7919      	ldrb	r1, [r3, #4]
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800e73a:	687a      	ldr	r2, [r7, #4]
 800e73c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800e73e:	b292      	uxth	r2, r2
 800e740:	9202      	str	r2, [sp, #8]
 800e742:	2200      	movs	r2, #0
 800e744:	9201      	str	r2, [sp, #4]
 800e746:	9300      	str	r3, [sp, #0]
 800e748:	4603      	mov	r3, r0
 800e74a:	2280      	movs	r2, #128	; 0x80
 800e74c:	6878      	ldr	r0, [r7, #4]
 800e74e:	f001 f86d 	bl	800f82c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	7959      	ldrb	r1, [r3, #5]
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800e762:	687a      	ldr	r2, [r7, #4]
 800e764:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800e766:	b292      	uxth	r2, r2
 800e768:	9202      	str	r2, [sp, #8]
 800e76a:	2200      	movs	r2, #0
 800e76c:	9201      	str	r2, [sp, #4]
 800e76e:	9300      	str	r3, [sp, #0]
 800e770:	4603      	mov	r3, r0
 800e772:	2200      	movs	r2, #0
 800e774:	6878      	ldr	r0, [r7, #4]
 800e776:	f001 f859 	bl	800f82c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800e77a:	e12a      	b.n	800e9d2 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e77c:	7bbb      	ldrb	r3, [r7, #14]
 800e77e:	2b03      	cmp	r3, #3
 800e780:	f040 8127 	bne.w	800e9d2 <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	220d      	movs	r2, #13
 800e788:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	2200      	movs	r2, #0
 800e78e:	705a      	strb	r2, [r3, #1]
      break;
 800e790:	e11f      	b.n	800e9d2 <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800e792:	2109      	movs	r1, #9
 800e794:	6878      	ldr	r0, [r7, #4]
 800e796:	f000 fa37 	bl	800ec08 <USBH_Get_CfgDesc>
 800e79a:	4603      	mov	r3, r0
 800e79c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800e79e:	7bbb      	ldrb	r3, [r7, #14]
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d103      	bne.n	800e7ac <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	2204      	movs	r2, #4
 800e7a8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800e7aa:	e114      	b.n	800e9d6 <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e7ac:	7bbb      	ldrb	r3, [r7, #14]
 800e7ae:	2b03      	cmp	r3, #3
 800e7b0:	f040 8111 	bne.w	800e9d6 <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e7ba:	3301      	adds	r3, #1
 800e7bc:	b2da      	uxtb	r2, r3
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e7ca:	2b03      	cmp	r3, #3
 800e7cc:	d903      	bls.n	800e7d6 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	220d      	movs	r2, #13
 800e7d2:	701a      	strb	r2, [r3, #0]
      break;
 800e7d4:	e0ff      	b.n	800e9d6 <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	795b      	ldrb	r3, [r3, #5]
 800e7da:	4619      	mov	r1, r3
 800e7dc:	6878      	ldr	r0, [r7, #4]
 800e7de:	f001 f875 	bl	800f8cc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	791b      	ldrb	r3, [r3, #4]
 800e7e6:	4619      	mov	r1, r3
 800e7e8:	6878      	ldr	r0, [r7, #4]
 800e7ea:	f001 f86f 	bl	800f8cc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	2200      	movs	r2, #0
 800e7f2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	2200      	movs	r2, #0
 800e7f8:	701a      	strb	r2, [r3, #0]
      break;
 800e7fa:	e0ec      	b.n	800e9d6 <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800e802:	4619      	mov	r1, r3
 800e804:	6878      	ldr	r0, [r7, #4]
 800e806:	f000 f9ff 	bl	800ec08 <USBH_Get_CfgDesc>
 800e80a:	4603      	mov	r3, r0
 800e80c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800e80e:	7bbb      	ldrb	r3, [r7, #14]
 800e810:	2b00      	cmp	r3, #0
 800e812:	d103      	bne.n	800e81c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	2205      	movs	r2, #5
 800e818:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800e81a:	e0de      	b.n	800e9da <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e81c:	7bbb      	ldrb	r3, [r7, #14]
 800e81e:	2b03      	cmp	r3, #3
 800e820:	f040 80db 	bne.w	800e9da <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e82a:	3301      	adds	r3, #1
 800e82c:	b2da      	uxtb	r2, r3
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800e83a:	2b03      	cmp	r3, #3
 800e83c:	d903      	bls.n	800e846 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	220d      	movs	r2, #13
 800e842:	701a      	strb	r2, [r3, #0]
      break;
 800e844:	e0c9      	b.n	800e9da <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	795b      	ldrb	r3, [r3, #5]
 800e84a:	4619      	mov	r1, r3
 800e84c:	6878      	ldr	r0, [r7, #4]
 800e84e:	f001 f83d 	bl	800f8cc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	791b      	ldrb	r3, [r3, #4]
 800e856:	4619      	mov	r1, r3
 800e858:	6878      	ldr	r0, [r7, #4]
 800e85a:	f001 f837 	bl	800f8cc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	2200      	movs	r2, #0
 800e862:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	2200      	movs	r2, #0
 800e868:	701a      	strb	r2, [r3, #0]
      break;
 800e86a:	e0b6      	b.n	800e9da <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800e872:	2b00      	cmp	r3, #0
 800e874:	d036      	beq.n	800e8e4 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800e882:	23ff      	movs	r3, #255	; 0xff
 800e884:	6878      	ldr	r0, [r7, #4]
 800e886:	f000 f9e3 	bl	800ec50 <USBH_Get_StringDesc>
 800e88a:	4603      	mov	r3, r0
 800e88c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800e88e:	7bbb      	ldrb	r3, [r7, #14]
 800e890:	2b00      	cmp	r3, #0
 800e892:	d111      	bne.n	800e8b8 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	2206      	movs	r2, #6
 800e898:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	2205      	movs	r2, #5
 800e89e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e8ae:	2200      	movs	r2, #0
 800e8b0:	4619      	mov	r1, r3
 800e8b2:	f001 f97f 	bl	800fbb4 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800e8b6:	e092      	b.n	800e9de <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e8b8:	7bbb      	ldrb	r3, [r7, #14]
 800e8ba:	2b03      	cmp	r3, #3
 800e8bc:	f040 808f 	bne.w	800e9de <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	2206      	movs	r2, #6
 800e8c4:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	2205      	movs	r2, #5
 800e8ca:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e8da:	2200      	movs	r2, #0
 800e8dc:	4619      	mov	r1, r3
 800e8de:	f001 f969 	bl	800fbb4 <osMessagePut>
      break;
 800e8e2:	e07c      	b.n	800e9de <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	2206      	movs	r2, #6
 800e8e8:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	2205      	movs	r2, #5
 800e8ee:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e8fe:	2200      	movs	r2, #0
 800e900:	4619      	mov	r1, r3
 800e902:	f001 f957 	bl	800fbb4 <osMessagePut>
      break;
 800e906:	e06a      	b.n	800e9de <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d027      	beq.n	800e962 <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800e91e:	23ff      	movs	r3, #255	; 0xff
 800e920:	6878      	ldr	r0, [r7, #4]
 800e922:	f000 f995 	bl	800ec50 <USBH_Get_StringDesc>
 800e926:	4603      	mov	r3, r0
 800e928:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800e92a:	7bbb      	ldrb	r3, [r7, #14]
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d103      	bne.n	800e938 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	2207      	movs	r2, #7
 800e934:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800e936:	e054      	b.n	800e9e2 <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e938:	7bbb      	ldrb	r3, [r7, #14]
 800e93a:	2b03      	cmp	r3, #3
 800e93c:	d151      	bne.n	800e9e2 <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	2207      	movs	r2, #7
 800e942:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	2205      	movs	r2, #5
 800e948:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e958:	2200      	movs	r2, #0
 800e95a:	4619      	mov	r1, r3
 800e95c:	f001 f92a 	bl	800fbb4 <osMessagePut>
      break;
 800e960:	e03f      	b.n	800e9e2 <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	2207      	movs	r2, #7
 800e966:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	2205      	movs	r2, #5
 800e96c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800e97c:	2200      	movs	r2, #0
 800e97e:	4619      	mov	r1, r3
 800e980:	f001 f918 	bl	800fbb4 <osMessagePut>
      break;
 800e984:	e02d      	b.n	800e9e2 <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d017      	beq.n	800e9c0 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800e99c:	23ff      	movs	r3, #255	; 0xff
 800e99e:	6878      	ldr	r0, [r7, #4]
 800e9a0:	f000 f956 	bl	800ec50 <USBH_Get_StringDesc>
 800e9a4:	4603      	mov	r3, r0
 800e9a6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800e9a8:	7bbb      	ldrb	r3, [r7, #14]
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d102      	bne.n	800e9b4 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800e9ae:	2300      	movs	r3, #0
 800e9b0:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800e9b2:	e018      	b.n	800e9e6 <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800e9b4:	7bbb      	ldrb	r3, [r7, #14]
 800e9b6:	2b03      	cmp	r3, #3
 800e9b8:	d115      	bne.n	800e9e6 <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 800e9ba:	2300      	movs	r3, #0
 800e9bc:	73fb      	strb	r3, [r7, #15]
      break;
 800e9be:	e012      	b.n	800e9e6 <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 800e9c0:	2300      	movs	r3, #0
 800e9c2:	73fb      	strb	r3, [r7, #15]
      break;
 800e9c4:	e00f      	b.n	800e9e6 <USBH_HandleEnum+0x44a>

    default:
      break;
 800e9c6:	bf00      	nop
 800e9c8:	e00e      	b.n	800e9e8 <USBH_HandleEnum+0x44c>
      break;
 800e9ca:	bf00      	nop
 800e9cc:	e00c      	b.n	800e9e8 <USBH_HandleEnum+0x44c>
      break;
 800e9ce:	bf00      	nop
 800e9d0:	e00a      	b.n	800e9e8 <USBH_HandleEnum+0x44c>
      break;
 800e9d2:	bf00      	nop
 800e9d4:	e008      	b.n	800e9e8 <USBH_HandleEnum+0x44c>
      break;
 800e9d6:	bf00      	nop
 800e9d8:	e006      	b.n	800e9e8 <USBH_HandleEnum+0x44c>
      break;
 800e9da:	bf00      	nop
 800e9dc:	e004      	b.n	800e9e8 <USBH_HandleEnum+0x44c>
      break;
 800e9de:	bf00      	nop
 800e9e0:	e002      	b.n	800e9e8 <USBH_HandleEnum+0x44c>
      break;
 800e9e2:	bf00      	nop
 800e9e4:	e000      	b.n	800e9e8 <USBH_HandleEnum+0x44c>
      break;
 800e9e6:	bf00      	nop
  }
  return Status;
 800e9e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e9ea:	4618      	mov	r0, r3
 800e9ec:	3710      	adds	r7, #16
 800e9ee:	46bd      	mov	sp, r7
 800e9f0:	bd80      	pop	{r7, pc}
 800e9f2:	bf00      	nop

0800e9f4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800e9f4:	b480      	push	{r7}
 800e9f6:	b083      	sub	sp, #12
 800e9f8:	af00      	add	r7, sp, #0
 800e9fa:	6078      	str	r0, [r7, #4]
 800e9fc:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	683a      	ldr	r2, [r7, #0]
 800ea02:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800ea06:	bf00      	nop
 800ea08:	370c      	adds	r7, #12
 800ea0a:	46bd      	mov	sp, r7
 800ea0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea10:	4770      	bx	lr

0800ea12 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800ea12:	b580      	push	{r7, lr}
 800ea14:	b082      	sub	sp, #8
 800ea16:	af00      	add	r7, sp, #0
 800ea18:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ea20:	1c5a      	adds	r2, r3, #1
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800ea28:	6878      	ldr	r0, [r7, #4]
 800ea2a:	f000 f804 	bl	800ea36 <USBH_HandleSof>
}
 800ea2e:	bf00      	nop
 800ea30:	3708      	adds	r7, #8
 800ea32:	46bd      	mov	sp, r7
 800ea34:	bd80      	pop	{r7, pc}

0800ea36 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800ea36:	b580      	push	{r7, lr}
 800ea38:	b082      	sub	sp, #8
 800ea3a:	af00      	add	r7, sp, #0
 800ea3c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	781b      	ldrb	r3, [r3, #0]
 800ea42:	b2db      	uxtb	r3, r3
 800ea44:	2b0b      	cmp	r3, #11
 800ea46:	d10a      	bne.n	800ea5e <USBH_HandleSof+0x28>
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d005      	beq.n	800ea5e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ea58:	699b      	ldr	r3, [r3, #24]
 800ea5a:	6878      	ldr	r0, [r7, #4]
 800ea5c:	4798      	blx	r3
  }
}
 800ea5e:	bf00      	nop
 800ea60:	3708      	adds	r7, #8
 800ea62:	46bd      	mov	sp, r7
 800ea64:	bd80      	pop	{r7, pc}

0800ea66 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800ea66:	b580      	push	{r7, lr}
 800ea68:	b082      	sub	sp, #8
 800ea6a:	af00      	add	r7, sp, #0
 800ea6c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	2201      	movs	r2, #1
 800ea72:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	2201      	movs	r2, #1
 800ea7a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ea8a:	2200      	movs	r2, #0
 800ea8c:	4619      	mov	r1, r3
 800ea8e:	f001 f891 	bl	800fbb4 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800ea92:	bf00      	nop
}
 800ea94:	3708      	adds	r7, #8
 800ea96:	46bd      	mov	sp, r7
 800ea98:	bd80      	pop	{r7, pc}

0800ea9a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800ea9a:	b480      	push	{r7}
 800ea9c:	b083      	sub	sp, #12
 800ea9e:	af00      	add	r7, sp, #0
 800eaa0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	2200      	movs	r2, #0
 800eaa6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800eaaa:	bf00      	nop
}
 800eaac:	370c      	adds	r7, #12
 800eaae:	46bd      	mov	sp, r7
 800eab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eab4:	4770      	bx	lr

0800eab6 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800eab6:	b580      	push	{r7, lr}
 800eab8:	b082      	sub	sp, #8
 800eaba:	af00      	add	r7, sp, #0
 800eabc:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	2201      	movs	r2, #1
 800eac2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	2200      	movs	r2, #0
 800eaca:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	2200      	movs	r2, #0
 800ead2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	2201      	movs	r2, #1
 800eada:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800eaea:	2200      	movs	r2, #0
 800eaec:	4619      	mov	r1, r3
 800eaee:	f001 f861 	bl	800fbb4 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800eaf2:	2300      	movs	r3, #0
}
 800eaf4:	4618      	mov	r0, r3
 800eaf6:	3708      	adds	r7, #8
 800eaf8:	46bd      	mov	sp, r7
 800eafa:	bd80      	pop	{r7, pc}

0800eafc <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800eafc:	b580      	push	{r7, lr}
 800eafe:	b082      	sub	sp, #8
 800eb00:	af00      	add	r7, sp, #0
 800eb02:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	2201      	movs	r2, #1
 800eb08:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	2200      	movs	r2, #0
 800eb10:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	2200      	movs	r2, #0
 800eb18:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800eb1c:	6878      	ldr	r0, [r7, #4]
 800eb1e:	f003 fbaa 	bl	8012276 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	791b      	ldrb	r3, [r3, #4]
 800eb26:	4619      	mov	r1, r3
 800eb28:	6878      	ldr	r0, [r7, #4]
 800eb2a:	f000 fecf 	bl	800f8cc <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	795b      	ldrb	r3, [r3, #5]
 800eb32:	4619      	mov	r1, r3
 800eb34:	6878      	ldr	r0, [r7, #4]
 800eb36:	f000 fec9 	bl	800f8cc <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	2201      	movs	r2, #1
 800eb3e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800eb4e:	2200      	movs	r2, #0
 800eb50:	4619      	mov	r1, r3
 800eb52:	f001 f82f 	bl	800fbb4 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800eb56:	2300      	movs	r3, #0
}
 800eb58:	4618      	mov	r0, r3
 800eb5a:	3708      	adds	r7, #8
 800eb5c:	46bd      	mov	sp, r7
 800eb5e:	bd80      	pop	{r7, pc}

0800eb60 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 800eb60:	b580      	push	{r7, lr}
 800eb62:	b086      	sub	sp, #24
 800eb64:	af00      	add	r7, sp, #0
 800eb66:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	f8d3 13d8 	ldr.w	r1, [r3, #984]	; 0x3d8
 800eb6e:	f107 030c 	add.w	r3, r7, #12
 800eb72:	f04f 32ff 	mov.w	r2, #4294967295
 800eb76:	4618      	mov	r0, r3
 800eb78:	f001 f85c 	bl	800fc34 <osMessageGet>
    if (event.status == osEventMessage)
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	2b10      	cmp	r3, #16
 800eb80:	d1f2      	bne.n	800eb68 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800eb82:	6878      	ldr	r0, [r7, #4]
 800eb84:	f7ff faa8 	bl	800e0d8 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800eb88:	e7ee      	b.n	800eb68 <USBH_Process_OS+0x8>

0800eb8a <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800eb8a:	b580      	push	{r7, lr}
 800eb8c:	b082      	sub	sp, #8
 800eb8e:	af00      	add	r7, sp, #0
 800eb90:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	2201      	movs	r2, #1
 800eb96:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800eba6:	2200      	movs	r2, #0
 800eba8:	4619      	mov	r1, r3
 800ebaa:	f001 f803 	bl	800fbb4 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 800ebae:	2300      	movs	r3, #0
}
 800ebb0:	4618      	mov	r0, r3
 800ebb2:	3708      	adds	r7, #8
 800ebb4:	46bd      	mov	sp, r7
 800ebb6:	bd80      	pop	{r7, pc}

0800ebb8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800ebb8:	b580      	push	{r7, lr}
 800ebba:	b086      	sub	sp, #24
 800ebbc:	af02      	add	r7, sp, #8
 800ebbe:	6078      	str	r0, [r7, #4]
 800ebc0:	460b      	mov	r3, r1
 800ebc2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800ebca:	78fb      	ldrb	r3, [r7, #3]
 800ebcc:	b29b      	uxth	r3, r3
 800ebce:	9300      	str	r3, [sp, #0]
 800ebd0:	4613      	mov	r3, r2
 800ebd2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ebd6:	2100      	movs	r1, #0
 800ebd8:	6878      	ldr	r0, [r7, #4]
 800ebda:	f000 f864 	bl	800eca6 <USBH_GetDescriptor>
 800ebde:	4603      	mov	r3, r0
 800ebe0:	73fb      	strb	r3, [r7, #15]
 800ebe2:	7bfb      	ldrb	r3, [r7, #15]
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d10a      	bne.n	800ebfe <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	f203 3026 	addw	r0, r3, #806	; 0x326
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800ebf4:	78fa      	ldrb	r2, [r7, #3]
 800ebf6:	b292      	uxth	r2, r2
 800ebf8:	4619      	mov	r1, r3
 800ebfa:	f000 f918 	bl	800ee2e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800ebfe:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec00:	4618      	mov	r0, r3
 800ec02:	3710      	adds	r7, #16
 800ec04:	46bd      	mov	sp, r7
 800ec06:	bd80      	pop	{r7, pc}

0800ec08 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800ec08:	b580      	push	{r7, lr}
 800ec0a:	b086      	sub	sp, #24
 800ec0c:	af02      	add	r7, sp, #8
 800ec0e:	6078      	str	r0, [r7, #4]
 800ec10:	460b      	mov	r3, r1
 800ec12:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	331c      	adds	r3, #28
 800ec18:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800ec1a:	887b      	ldrh	r3, [r7, #2]
 800ec1c:	9300      	str	r3, [sp, #0]
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ec24:	2100      	movs	r1, #0
 800ec26:	6878      	ldr	r0, [r7, #4]
 800ec28:	f000 f83d 	bl	800eca6 <USBH_GetDescriptor>
 800ec2c:	4603      	mov	r3, r0
 800ec2e:	72fb      	strb	r3, [r7, #11]
 800ec30:	7afb      	ldrb	r3, [r7, #11]
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d107      	bne.n	800ec46 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800ec3c:	887a      	ldrh	r2, [r7, #2]
 800ec3e:	68f9      	ldr	r1, [r7, #12]
 800ec40:	4618      	mov	r0, r3
 800ec42:	f000 f964 	bl	800ef0e <USBH_ParseCfgDesc>
  }

  return status;
 800ec46:	7afb      	ldrb	r3, [r7, #11]
}
 800ec48:	4618      	mov	r0, r3
 800ec4a:	3710      	adds	r7, #16
 800ec4c:	46bd      	mov	sp, r7
 800ec4e:	bd80      	pop	{r7, pc}

0800ec50 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800ec50:	b580      	push	{r7, lr}
 800ec52:	b088      	sub	sp, #32
 800ec54:	af02      	add	r7, sp, #8
 800ec56:	60f8      	str	r0, [r7, #12]
 800ec58:	607a      	str	r2, [r7, #4]
 800ec5a:	461a      	mov	r2, r3
 800ec5c:	460b      	mov	r3, r1
 800ec5e:	72fb      	strb	r3, [r7, #11]
 800ec60:	4613      	mov	r3, r2
 800ec62:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800ec64:	7afb      	ldrb	r3, [r7, #11]
 800ec66:	b29b      	uxth	r3, r3
 800ec68:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800ec6c:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800ec74:	893b      	ldrh	r3, [r7, #8]
 800ec76:	9300      	str	r3, [sp, #0]
 800ec78:	460b      	mov	r3, r1
 800ec7a:	2100      	movs	r1, #0
 800ec7c:	68f8      	ldr	r0, [r7, #12]
 800ec7e:	f000 f812 	bl	800eca6 <USBH_GetDescriptor>
 800ec82:	4603      	mov	r3, r0
 800ec84:	75fb      	strb	r3, [r7, #23]
 800ec86:	7dfb      	ldrb	r3, [r7, #23]
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d107      	bne.n	800ec9c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800ec92:	893a      	ldrh	r2, [r7, #8]
 800ec94:	6879      	ldr	r1, [r7, #4]
 800ec96:	4618      	mov	r0, r3
 800ec98:	f000 fa37 	bl	800f10a <USBH_ParseStringDesc>
  }

  return status;
 800ec9c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ec9e:	4618      	mov	r0, r3
 800eca0:	3718      	adds	r7, #24
 800eca2:	46bd      	mov	sp, r7
 800eca4:	bd80      	pop	{r7, pc}

0800eca6 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800eca6:	b580      	push	{r7, lr}
 800eca8:	b084      	sub	sp, #16
 800ecaa:	af00      	add	r7, sp, #0
 800ecac:	60f8      	str	r0, [r7, #12]
 800ecae:	607b      	str	r3, [r7, #4]
 800ecb0:	460b      	mov	r3, r1
 800ecb2:	72fb      	strb	r3, [r7, #11]
 800ecb4:	4613      	mov	r3, r2
 800ecb6:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	789b      	ldrb	r3, [r3, #2]
 800ecbc:	2b01      	cmp	r3, #1
 800ecbe:	d11c      	bne.n	800ecfa <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800ecc0:	7afb      	ldrb	r3, [r7, #11]
 800ecc2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ecc6:	b2da      	uxtb	r2, r3
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	2206      	movs	r2, #6
 800ecd0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	893a      	ldrh	r2, [r7, #8]
 800ecd6:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800ecd8:	893b      	ldrh	r3, [r7, #8]
 800ecda:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ecde:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ece2:	d104      	bne.n	800ecee <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	f240 4209 	movw	r2, #1033	; 0x409
 800ecea:	829a      	strh	r2, [r3, #20]
 800ecec:	e002      	b.n	800ecf4 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	2200      	movs	r2, #0
 800ecf2:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	8b3a      	ldrh	r2, [r7, #24]
 800ecf8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800ecfa:	8b3b      	ldrh	r3, [r7, #24]
 800ecfc:	461a      	mov	r2, r3
 800ecfe:	6879      	ldr	r1, [r7, #4]
 800ed00:	68f8      	ldr	r0, [r7, #12]
 800ed02:	f000 fa50 	bl	800f1a6 <USBH_CtlReq>
 800ed06:	4603      	mov	r3, r0
}
 800ed08:	4618      	mov	r0, r3
 800ed0a:	3710      	adds	r7, #16
 800ed0c:	46bd      	mov	sp, r7
 800ed0e:	bd80      	pop	{r7, pc}

0800ed10 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800ed10:	b580      	push	{r7, lr}
 800ed12:	b082      	sub	sp, #8
 800ed14:	af00      	add	r7, sp, #0
 800ed16:	6078      	str	r0, [r7, #4]
 800ed18:	460b      	mov	r3, r1
 800ed1a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	789b      	ldrb	r3, [r3, #2]
 800ed20:	2b01      	cmp	r3, #1
 800ed22:	d10f      	bne.n	800ed44 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	2200      	movs	r2, #0
 800ed28:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	2205      	movs	r2, #5
 800ed2e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800ed30:	78fb      	ldrb	r3, [r7, #3]
 800ed32:	b29a      	uxth	r2, r3
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	2200      	movs	r2, #0
 800ed3c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	2200      	movs	r2, #0
 800ed42:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800ed44:	2200      	movs	r2, #0
 800ed46:	2100      	movs	r1, #0
 800ed48:	6878      	ldr	r0, [r7, #4]
 800ed4a:	f000 fa2c 	bl	800f1a6 <USBH_CtlReq>
 800ed4e:	4603      	mov	r3, r0
}
 800ed50:	4618      	mov	r0, r3
 800ed52:	3708      	adds	r7, #8
 800ed54:	46bd      	mov	sp, r7
 800ed56:	bd80      	pop	{r7, pc}

0800ed58 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800ed58:	b580      	push	{r7, lr}
 800ed5a:	b082      	sub	sp, #8
 800ed5c:	af00      	add	r7, sp, #0
 800ed5e:	6078      	str	r0, [r7, #4]
 800ed60:	460b      	mov	r3, r1
 800ed62:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	789b      	ldrb	r3, [r3, #2]
 800ed68:	2b01      	cmp	r3, #1
 800ed6a:	d10e      	bne.n	800ed8a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	2200      	movs	r2, #0
 800ed70:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	2209      	movs	r2, #9
 800ed76:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	887a      	ldrh	r2, [r7, #2]
 800ed7c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	2200      	movs	r2, #0
 800ed82:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	2200      	movs	r2, #0
 800ed88:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800ed8a:	2200      	movs	r2, #0
 800ed8c:	2100      	movs	r1, #0
 800ed8e:	6878      	ldr	r0, [r7, #4]
 800ed90:	f000 fa09 	bl	800f1a6 <USBH_CtlReq>
 800ed94:	4603      	mov	r3, r0
}
 800ed96:	4618      	mov	r0, r3
 800ed98:	3708      	adds	r7, #8
 800ed9a:	46bd      	mov	sp, r7
 800ed9c:	bd80      	pop	{r7, pc}

0800ed9e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800ed9e:	b580      	push	{r7, lr}
 800eda0:	b082      	sub	sp, #8
 800eda2:	af00      	add	r7, sp, #0
 800eda4:	6078      	str	r0, [r7, #4]
 800eda6:	460b      	mov	r3, r1
 800eda8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	789b      	ldrb	r3, [r3, #2]
 800edae:	2b01      	cmp	r3, #1
 800edb0:	d10f      	bne.n	800edd2 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	2200      	movs	r2, #0
 800edb6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	2203      	movs	r2, #3
 800edbc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800edbe:	78fb      	ldrb	r3, [r7, #3]
 800edc0:	b29a      	uxth	r2, r3
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	2200      	movs	r2, #0
 800edca:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	2200      	movs	r2, #0
 800edd0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800edd2:	2200      	movs	r2, #0
 800edd4:	2100      	movs	r1, #0
 800edd6:	6878      	ldr	r0, [r7, #4]
 800edd8:	f000 f9e5 	bl	800f1a6 <USBH_CtlReq>
 800eddc:	4603      	mov	r3, r0
}
 800edde:	4618      	mov	r0, r3
 800ede0:	3708      	adds	r7, #8
 800ede2:	46bd      	mov	sp, r7
 800ede4:	bd80      	pop	{r7, pc}

0800ede6 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800ede6:	b580      	push	{r7, lr}
 800ede8:	b082      	sub	sp, #8
 800edea:	af00      	add	r7, sp, #0
 800edec:	6078      	str	r0, [r7, #4]
 800edee:	460b      	mov	r3, r1
 800edf0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	789b      	ldrb	r3, [r3, #2]
 800edf6:	2b01      	cmp	r3, #1
 800edf8:	d10f      	bne.n	800ee1a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	2202      	movs	r2, #2
 800edfe:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	2201      	movs	r2, #1
 800ee04:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	2200      	movs	r2, #0
 800ee0a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800ee0c:	78fb      	ldrb	r3, [r7, #3]
 800ee0e:	b29a      	uxth	r2, r3
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	2200      	movs	r2, #0
 800ee18:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800ee1a:	2200      	movs	r2, #0
 800ee1c:	2100      	movs	r1, #0
 800ee1e:	6878      	ldr	r0, [r7, #4]
 800ee20:	f000 f9c1 	bl	800f1a6 <USBH_CtlReq>
 800ee24:	4603      	mov	r3, r0
}
 800ee26:	4618      	mov	r0, r3
 800ee28:	3708      	adds	r7, #8
 800ee2a:	46bd      	mov	sp, r7
 800ee2c:	bd80      	pop	{r7, pc}

0800ee2e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800ee2e:	b480      	push	{r7}
 800ee30:	b085      	sub	sp, #20
 800ee32:	af00      	add	r7, sp, #0
 800ee34:	60f8      	str	r0, [r7, #12]
 800ee36:	60b9      	str	r1, [r7, #8]
 800ee38:	4613      	mov	r3, r2
 800ee3a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800ee3c:	68bb      	ldr	r3, [r7, #8]
 800ee3e:	781a      	ldrb	r2, [r3, #0]
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800ee44:	68bb      	ldr	r3, [r7, #8]
 800ee46:	785a      	ldrb	r2, [r3, #1]
 800ee48:	68fb      	ldr	r3, [r7, #12]
 800ee4a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800ee4c:	68bb      	ldr	r3, [r7, #8]
 800ee4e:	3302      	adds	r3, #2
 800ee50:	781b      	ldrb	r3, [r3, #0]
 800ee52:	b29a      	uxth	r2, r3
 800ee54:	68bb      	ldr	r3, [r7, #8]
 800ee56:	3303      	adds	r3, #3
 800ee58:	781b      	ldrb	r3, [r3, #0]
 800ee5a:	b29b      	uxth	r3, r3
 800ee5c:	021b      	lsls	r3, r3, #8
 800ee5e:	b29b      	uxth	r3, r3
 800ee60:	4313      	orrs	r3, r2
 800ee62:	b29a      	uxth	r2, r3
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800ee68:	68bb      	ldr	r3, [r7, #8]
 800ee6a:	791a      	ldrb	r2, [r3, #4]
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800ee70:	68bb      	ldr	r3, [r7, #8]
 800ee72:	795a      	ldrb	r2, [r3, #5]
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800ee78:	68bb      	ldr	r3, [r7, #8]
 800ee7a:	799a      	ldrb	r2, [r3, #6]
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800ee80:	68bb      	ldr	r3, [r7, #8]
 800ee82:	79da      	ldrb	r2, [r3, #7]
 800ee84:	68fb      	ldr	r3, [r7, #12]
 800ee86:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800ee88:	88fb      	ldrh	r3, [r7, #6]
 800ee8a:	2b08      	cmp	r3, #8
 800ee8c:	d939      	bls.n	800ef02 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800ee8e:	68bb      	ldr	r3, [r7, #8]
 800ee90:	3308      	adds	r3, #8
 800ee92:	781b      	ldrb	r3, [r3, #0]
 800ee94:	b29a      	uxth	r2, r3
 800ee96:	68bb      	ldr	r3, [r7, #8]
 800ee98:	3309      	adds	r3, #9
 800ee9a:	781b      	ldrb	r3, [r3, #0]
 800ee9c:	b29b      	uxth	r3, r3
 800ee9e:	021b      	lsls	r3, r3, #8
 800eea0:	b29b      	uxth	r3, r3
 800eea2:	4313      	orrs	r3, r2
 800eea4:	b29a      	uxth	r2, r3
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800eeaa:	68bb      	ldr	r3, [r7, #8]
 800eeac:	330a      	adds	r3, #10
 800eeae:	781b      	ldrb	r3, [r3, #0]
 800eeb0:	b29a      	uxth	r2, r3
 800eeb2:	68bb      	ldr	r3, [r7, #8]
 800eeb4:	330b      	adds	r3, #11
 800eeb6:	781b      	ldrb	r3, [r3, #0]
 800eeb8:	b29b      	uxth	r3, r3
 800eeba:	021b      	lsls	r3, r3, #8
 800eebc:	b29b      	uxth	r3, r3
 800eebe:	4313      	orrs	r3, r2
 800eec0:	b29a      	uxth	r2, r3
 800eec2:	68fb      	ldr	r3, [r7, #12]
 800eec4:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800eec6:	68bb      	ldr	r3, [r7, #8]
 800eec8:	330c      	adds	r3, #12
 800eeca:	781b      	ldrb	r3, [r3, #0]
 800eecc:	b29a      	uxth	r2, r3
 800eece:	68bb      	ldr	r3, [r7, #8]
 800eed0:	330d      	adds	r3, #13
 800eed2:	781b      	ldrb	r3, [r3, #0]
 800eed4:	b29b      	uxth	r3, r3
 800eed6:	021b      	lsls	r3, r3, #8
 800eed8:	b29b      	uxth	r3, r3
 800eeda:	4313      	orrs	r3, r2
 800eedc:	b29a      	uxth	r2, r3
 800eede:	68fb      	ldr	r3, [r7, #12]
 800eee0:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800eee2:	68bb      	ldr	r3, [r7, #8]
 800eee4:	7b9a      	ldrb	r2, [r3, #14]
 800eee6:	68fb      	ldr	r3, [r7, #12]
 800eee8:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800eeea:	68bb      	ldr	r3, [r7, #8]
 800eeec:	7bda      	ldrb	r2, [r3, #15]
 800eeee:	68fb      	ldr	r3, [r7, #12]
 800eef0:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800eef2:	68bb      	ldr	r3, [r7, #8]
 800eef4:	7c1a      	ldrb	r2, [r3, #16]
 800eef6:	68fb      	ldr	r3, [r7, #12]
 800eef8:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800eefa:	68bb      	ldr	r3, [r7, #8]
 800eefc:	7c5a      	ldrb	r2, [r3, #17]
 800eefe:	68fb      	ldr	r3, [r7, #12]
 800ef00:	745a      	strb	r2, [r3, #17]
  }
}
 800ef02:	bf00      	nop
 800ef04:	3714      	adds	r7, #20
 800ef06:	46bd      	mov	sp, r7
 800ef08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef0c:	4770      	bx	lr

0800ef0e <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800ef0e:	b580      	push	{r7, lr}
 800ef10:	b08a      	sub	sp, #40	; 0x28
 800ef12:	af00      	add	r7, sp, #0
 800ef14:	60f8      	str	r0, [r7, #12]
 800ef16:	60b9      	str	r1, [r7, #8]
 800ef18:	4613      	mov	r3, r2
 800ef1a:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800ef1c:	68bb      	ldr	r3, [r7, #8]
 800ef1e:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800ef20:	2300      	movs	r3, #0
 800ef22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800ef26:	2300      	movs	r3, #0
 800ef28:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800ef2c:	68bb      	ldr	r3, [r7, #8]
 800ef2e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800ef30:	68bb      	ldr	r3, [r7, #8]
 800ef32:	781a      	ldrb	r2, [r3, #0]
 800ef34:	68fb      	ldr	r3, [r7, #12]
 800ef36:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800ef38:	68bb      	ldr	r3, [r7, #8]
 800ef3a:	785a      	ldrb	r2, [r3, #1]
 800ef3c:	68fb      	ldr	r3, [r7, #12]
 800ef3e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800ef40:	68bb      	ldr	r3, [r7, #8]
 800ef42:	3302      	adds	r3, #2
 800ef44:	781b      	ldrb	r3, [r3, #0]
 800ef46:	b29a      	uxth	r2, r3
 800ef48:	68bb      	ldr	r3, [r7, #8]
 800ef4a:	3303      	adds	r3, #3
 800ef4c:	781b      	ldrb	r3, [r3, #0]
 800ef4e:	b29b      	uxth	r3, r3
 800ef50:	021b      	lsls	r3, r3, #8
 800ef52:	b29b      	uxth	r3, r3
 800ef54:	4313      	orrs	r3, r2
 800ef56:	b29a      	uxth	r2, r3
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800ef5c:	68bb      	ldr	r3, [r7, #8]
 800ef5e:	791a      	ldrb	r2, [r3, #4]
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800ef64:	68bb      	ldr	r3, [r7, #8]
 800ef66:	795a      	ldrb	r2, [r3, #5]
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800ef6c:	68bb      	ldr	r3, [r7, #8]
 800ef6e:	799a      	ldrb	r2, [r3, #6]
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800ef74:	68bb      	ldr	r3, [r7, #8]
 800ef76:	79da      	ldrb	r2, [r3, #7]
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800ef7c:	68bb      	ldr	r3, [r7, #8]
 800ef7e:	7a1a      	ldrb	r2, [r3, #8]
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800ef84:	88fb      	ldrh	r3, [r7, #6]
 800ef86:	2b09      	cmp	r3, #9
 800ef88:	d95f      	bls.n	800f04a <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800ef8a:	2309      	movs	r3, #9
 800ef8c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800ef8e:	2300      	movs	r3, #0
 800ef90:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800ef92:	e051      	b.n	800f038 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800ef94:	f107 0316 	add.w	r3, r7, #22
 800ef98:	4619      	mov	r1, r3
 800ef9a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ef9c:	f000 f8e8 	bl	800f170 <USBH_GetNextDesc>
 800efa0:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800efa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efa4:	785b      	ldrb	r3, [r3, #1]
 800efa6:	2b04      	cmp	r3, #4
 800efa8:	d146      	bne.n	800f038 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800efaa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800efae:	221a      	movs	r2, #26
 800efb0:	fb02 f303 	mul.w	r3, r2, r3
 800efb4:	3308      	adds	r3, #8
 800efb6:	68fa      	ldr	r2, [r7, #12]
 800efb8:	4413      	add	r3, r2
 800efba:	3302      	adds	r3, #2
 800efbc:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800efbe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800efc0:	69f8      	ldr	r0, [r7, #28]
 800efc2:	f000 f846 	bl	800f052 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800efc6:	2300      	movs	r3, #0
 800efc8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800efcc:	2300      	movs	r3, #0
 800efce:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800efd0:	e022      	b.n	800f018 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800efd2:	f107 0316 	add.w	r3, r7, #22
 800efd6:	4619      	mov	r1, r3
 800efd8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800efda:	f000 f8c9 	bl	800f170 <USBH_GetNextDesc>
 800efde:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800efe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efe2:	785b      	ldrb	r3, [r3, #1]
 800efe4:	2b05      	cmp	r3, #5
 800efe6:	d117      	bne.n	800f018 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800efe8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800efec:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800eff0:	3201      	adds	r2, #1
 800eff2:	00d2      	lsls	r2, r2, #3
 800eff4:	211a      	movs	r1, #26
 800eff6:	fb01 f303 	mul.w	r3, r1, r3
 800effa:	4413      	add	r3, r2
 800effc:	3308      	adds	r3, #8
 800effe:	68fa      	ldr	r2, [r7, #12]
 800f000:	4413      	add	r3, r2
 800f002:	3304      	adds	r3, #4
 800f004:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800f006:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f008:	69b8      	ldr	r0, [r7, #24]
 800f00a:	f000 f851 	bl	800f0b0 <USBH_ParseEPDesc>
            ep_ix++;
 800f00e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800f012:	3301      	adds	r3, #1
 800f014:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800f018:	69fb      	ldr	r3, [r7, #28]
 800f01a:	791b      	ldrb	r3, [r3, #4]
 800f01c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800f020:	429a      	cmp	r2, r3
 800f022:	d204      	bcs.n	800f02e <USBH_ParseCfgDesc+0x120>
 800f024:	68fb      	ldr	r3, [r7, #12]
 800f026:	885a      	ldrh	r2, [r3, #2]
 800f028:	8afb      	ldrh	r3, [r7, #22]
 800f02a:	429a      	cmp	r2, r3
 800f02c:	d8d1      	bhi.n	800efd2 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800f02e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f032:	3301      	adds	r3, #1
 800f034:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800f038:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f03c:	2b01      	cmp	r3, #1
 800f03e:	d804      	bhi.n	800f04a <USBH_ParseCfgDesc+0x13c>
 800f040:	68fb      	ldr	r3, [r7, #12]
 800f042:	885a      	ldrh	r2, [r3, #2]
 800f044:	8afb      	ldrh	r3, [r7, #22]
 800f046:	429a      	cmp	r2, r3
 800f048:	d8a4      	bhi.n	800ef94 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800f04a:	bf00      	nop
 800f04c:	3728      	adds	r7, #40	; 0x28
 800f04e:	46bd      	mov	sp, r7
 800f050:	bd80      	pop	{r7, pc}

0800f052 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800f052:	b480      	push	{r7}
 800f054:	b083      	sub	sp, #12
 800f056:	af00      	add	r7, sp, #0
 800f058:	6078      	str	r0, [r7, #4]
 800f05a:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800f05c:	683b      	ldr	r3, [r7, #0]
 800f05e:	781a      	ldrb	r2, [r3, #0]
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800f064:	683b      	ldr	r3, [r7, #0]
 800f066:	785a      	ldrb	r2, [r3, #1]
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800f06c:	683b      	ldr	r3, [r7, #0]
 800f06e:	789a      	ldrb	r2, [r3, #2]
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800f074:	683b      	ldr	r3, [r7, #0]
 800f076:	78da      	ldrb	r2, [r3, #3]
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800f07c:	683b      	ldr	r3, [r7, #0]
 800f07e:	791a      	ldrb	r2, [r3, #4]
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800f084:	683b      	ldr	r3, [r7, #0]
 800f086:	795a      	ldrb	r2, [r3, #5]
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800f08c:	683b      	ldr	r3, [r7, #0]
 800f08e:	799a      	ldrb	r2, [r3, #6]
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800f094:	683b      	ldr	r3, [r7, #0]
 800f096:	79da      	ldrb	r2, [r3, #7]
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800f09c:	683b      	ldr	r3, [r7, #0]
 800f09e:	7a1a      	ldrb	r2, [r3, #8]
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	721a      	strb	r2, [r3, #8]
}
 800f0a4:	bf00      	nop
 800f0a6:	370c      	adds	r7, #12
 800f0a8:	46bd      	mov	sp, r7
 800f0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ae:	4770      	bx	lr

0800f0b0 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800f0b0:	b480      	push	{r7}
 800f0b2:	b083      	sub	sp, #12
 800f0b4:	af00      	add	r7, sp, #0
 800f0b6:	6078      	str	r0, [r7, #4]
 800f0b8:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800f0ba:	683b      	ldr	r3, [r7, #0]
 800f0bc:	781a      	ldrb	r2, [r3, #0]
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800f0c2:	683b      	ldr	r3, [r7, #0]
 800f0c4:	785a      	ldrb	r2, [r3, #1]
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800f0ca:	683b      	ldr	r3, [r7, #0]
 800f0cc:	789a      	ldrb	r2, [r3, #2]
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800f0d2:	683b      	ldr	r3, [r7, #0]
 800f0d4:	78da      	ldrb	r2, [r3, #3]
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800f0da:	683b      	ldr	r3, [r7, #0]
 800f0dc:	3304      	adds	r3, #4
 800f0de:	781b      	ldrb	r3, [r3, #0]
 800f0e0:	b29a      	uxth	r2, r3
 800f0e2:	683b      	ldr	r3, [r7, #0]
 800f0e4:	3305      	adds	r3, #5
 800f0e6:	781b      	ldrb	r3, [r3, #0]
 800f0e8:	b29b      	uxth	r3, r3
 800f0ea:	021b      	lsls	r3, r3, #8
 800f0ec:	b29b      	uxth	r3, r3
 800f0ee:	4313      	orrs	r3, r2
 800f0f0:	b29a      	uxth	r2, r3
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800f0f6:	683b      	ldr	r3, [r7, #0]
 800f0f8:	799a      	ldrb	r2, [r3, #6]
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	719a      	strb	r2, [r3, #6]
}
 800f0fe:	bf00      	nop
 800f100:	370c      	adds	r7, #12
 800f102:	46bd      	mov	sp, r7
 800f104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f108:	4770      	bx	lr

0800f10a <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800f10a:	b480      	push	{r7}
 800f10c:	b087      	sub	sp, #28
 800f10e:	af00      	add	r7, sp, #0
 800f110:	60f8      	str	r0, [r7, #12]
 800f112:	60b9      	str	r1, [r7, #8]
 800f114:	4613      	mov	r3, r2
 800f116:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	3301      	adds	r3, #1
 800f11c:	781b      	ldrb	r3, [r3, #0]
 800f11e:	2b03      	cmp	r3, #3
 800f120:	d120      	bne.n	800f164 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800f122:	68fb      	ldr	r3, [r7, #12]
 800f124:	781b      	ldrb	r3, [r3, #0]
 800f126:	1e9a      	subs	r2, r3, #2
 800f128:	88fb      	ldrh	r3, [r7, #6]
 800f12a:	4293      	cmp	r3, r2
 800f12c:	bf28      	it	cs
 800f12e:	4613      	movcs	r3, r2
 800f130:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	3302      	adds	r3, #2
 800f136:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800f138:	2300      	movs	r3, #0
 800f13a:	82fb      	strh	r3, [r7, #22]
 800f13c:	e00b      	b.n	800f156 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800f13e:	8afb      	ldrh	r3, [r7, #22]
 800f140:	68fa      	ldr	r2, [r7, #12]
 800f142:	4413      	add	r3, r2
 800f144:	781a      	ldrb	r2, [r3, #0]
 800f146:	68bb      	ldr	r3, [r7, #8]
 800f148:	701a      	strb	r2, [r3, #0]
      pdest++;
 800f14a:	68bb      	ldr	r3, [r7, #8]
 800f14c:	3301      	adds	r3, #1
 800f14e:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800f150:	8afb      	ldrh	r3, [r7, #22]
 800f152:	3302      	adds	r3, #2
 800f154:	82fb      	strh	r3, [r7, #22]
 800f156:	8afa      	ldrh	r2, [r7, #22]
 800f158:	8abb      	ldrh	r3, [r7, #20]
 800f15a:	429a      	cmp	r2, r3
 800f15c:	d3ef      	bcc.n	800f13e <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800f15e:	68bb      	ldr	r3, [r7, #8]
 800f160:	2200      	movs	r2, #0
 800f162:	701a      	strb	r2, [r3, #0]
  }
}
 800f164:	bf00      	nop
 800f166:	371c      	adds	r7, #28
 800f168:	46bd      	mov	sp, r7
 800f16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f16e:	4770      	bx	lr

0800f170 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800f170:	b480      	push	{r7}
 800f172:	b085      	sub	sp, #20
 800f174:	af00      	add	r7, sp, #0
 800f176:	6078      	str	r0, [r7, #4]
 800f178:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800f17a:	683b      	ldr	r3, [r7, #0]
 800f17c:	881a      	ldrh	r2, [r3, #0]
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	781b      	ldrb	r3, [r3, #0]
 800f182:	b29b      	uxth	r3, r3
 800f184:	4413      	add	r3, r2
 800f186:	b29a      	uxth	r2, r3
 800f188:	683b      	ldr	r3, [r7, #0]
 800f18a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	781b      	ldrb	r3, [r3, #0]
 800f190:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	4413      	add	r3, r2
 800f196:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800f198:	68fb      	ldr	r3, [r7, #12]
}
 800f19a:	4618      	mov	r0, r3
 800f19c:	3714      	adds	r7, #20
 800f19e:	46bd      	mov	sp, r7
 800f1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1a4:	4770      	bx	lr

0800f1a6 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800f1a6:	b580      	push	{r7, lr}
 800f1a8:	b086      	sub	sp, #24
 800f1aa:	af00      	add	r7, sp, #0
 800f1ac:	60f8      	str	r0, [r7, #12]
 800f1ae:	60b9      	str	r1, [r7, #8]
 800f1b0:	4613      	mov	r3, r2
 800f1b2:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800f1b4:	2301      	movs	r3, #1
 800f1b6:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	789b      	ldrb	r3, [r3, #2]
 800f1bc:	2b01      	cmp	r3, #1
 800f1be:	d002      	beq.n	800f1c6 <USBH_CtlReq+0x20>
 800f1c0:	2b02      	cmp	r3, #2
 800f1c2:	d01d      	beq.n	800f200 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800f1c4:	e043      	b.n	800f24e <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	68ba      	ldr	r2, [r7, #8]
 800f1ca:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	88fa      	ldrh	r2, [r7, #6]
 800f1d0:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	2201      	movs	r2, #1
 800f1d6:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800f1d8:	68fb      	ldr	r3, [r7, #12]
 800f1da:	2202      	movs	r2, #2
 800f1dc:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800f1de:	2301      	movs	r3, #1
 800f1e0:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	2203      	movs	r2, #3
 800f1e6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f1f6:	2200      	movs	r2, #0
 800f1f8:	4619      	mov	r1, r3
 800f1fa:	f000 fcdb 	bl	800fbb4 <osMessagePut>
      break;
 800f1fe:	e026      	b.n	800f24e <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800f200:	68f8      	ldr	r0, [r7, #12]
 800f202:	f000 f829 	bl	800f258 <USBH_HandleControl>
 800f206:	4603      	mov	r3, r0
 800f208:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800f20a:	7dfb      	ldrb	r3, [r7, #23]
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d002      	beq.n	800f216 <USBH_CtlReq+0x70>
 800f210:	7dfb      	ldrb	r3, [r7, #23]
 800f212:	2b03      	cmp	r3, #3
 800f214:	d106      	bne.n	800f224 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800f216:	68fb      	ldr	r3, [r7, #12]
 800f218:	2201      	movs	r2, #1
 800f21a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	2200      	movs	r2, #0
 800f220:	761a      	strb	r2, [r3, #24]
 800f222:	e005      	b.n	800f230 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800f224:	7dfb      	ldrb	r3, [r7, #23]
 800f226:	2b02      	cmp	r3, #2
 800f228:	d102      	bne.n	800f230 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	2201      	movs	r2, #1
 800f22e:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f230:	68fb      	ldr	r3, [r7, #12]
 800f232:	2203      	movs	r2, #3
 800f234:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f244:	2200      	movs	r2, #0
 800f246:	4619      	mov	r1, r3
 800f248:	f000 fcb4 	bl	800fbb4 <osMessagePut>
      break;
 800f24c:	bf00      	nop
  }
  return status;
 800f24e:	7dfb      	ldrb	r3, [r7, #23]
}
 800f250:	4618      	mov	r0, r3
 800f252:	3718      	adds	r7, #24
 800f254:	46bd      	mov	sp, r7
 800f256:	bd80      	pop	{r7, pc}

0800f258 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800f258:	b580      	push	{r7, lr}
 800f25a:	b086      	sub	sp, #24
 800f25c:	af02      	add	r7, sp, #8
 800f25e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800f260:	2301      	movs	r3, #1
 800f262:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800f264:	2300      	movs	r3, #0
 800f266:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	7e1b      	ldrb	r3, [r3, #24]
 800f26c:	3b01      	subs	r3, #1
 800f26e:	2b0a      	cmp	r3, #10
 800f270:	f200 822b 	bhi.w	800f6ca <USBH_HandleControl+0x472>
 800f274:	a201      	add	r2, pc, #4	; (adr r2, 800f27c <USBH_HandleControl+0x24>)
 800f276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f27a:	bf00      	nop
 800f27c:	0800f2a9 	.word	0x0800f2a9
 800f280:	0800f2c3 	.word	0x0800f2c3
 800f284:	0800f365 	.word	0x0800f365
 800f288:	0800f38b 	.word	0x0800f38b
 800f28c:	0800f417 	.word	0x0800f417
 800f290:	0800f443 	.word	0x0800f443
 800f294:	0800f505 	.word	0x0800f505
 800f298:	0800f527 	.word	0x0800f527
 800f29c:	0800f5b9 	.word	0x0800f5b9
 800f2a0:	0800f5e1 	.word	0x0800f5e1
 800f2a4:	0800f673 	.word	0x0800f673
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	f103 0110 	add.w	r1, r3, #16
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	795b      	ldrb	r3, [r3, #5]
 800f2b2:	461a      	mov	r2, r3
 800f2b4:	6878      	ldr	r0, [r7, #4]
 800f2b6:	f000 fa19 	bl	800f6ec <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	2202      	movs	r2, #2
 800f2be:	761a      	strb	r2, [r3, #24]
      break;
 800f2c0:	e20e      	b.n	800f6e0 <USBH_HandleControl+0x488>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	795b      	ldrb	r3, [r3, #5]
 800f2c6:	4619      	mov	r1, r3
 800f2c8:	6878      	ldr	r0, [r7, #4]
 800f2ca:	f003 f8c1 	bl	8012450 <USBH_LL_GetURBState>
 800f2ce:	4603      	mov	r3, r0
 800f2d0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800f2d2:	7bbb      	ldrb	r3, [r7, #14]
 800f2d4:	2b01      	cmp	r3, #1
 800f2d6:	d12c      	bne.n	800f332 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	7c1b      	ldrb	r3, [r3, #16]
 800f2dc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800f2e0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	8adb      	ldrh	r3, [r3, #22]
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d00a      	beq.n	800f300 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800f2ea:	7b7b      	ldrb	r3, [r7, #13]
 800f2ec:	2b80      	cmp	r3, #128	; 0x80
 800f2ee:	d103      	bne.n	800f2f8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	2203      	movs	r2, #3
 800f2f4:	761a      	strb	r2, [r3, #24]
 800f2f6:	e00d      	b.n	800f314 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	2205      	movs	r2, #5
 800f2fc:	761a      	strb	r2, [r3, #24]
 800f2fe:	e009      	b.n	800f314 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800f300:	7b7b      	ldrb	r3, [r7, #13]
 800f302:	2b80      	cmp	r3, #128	; 0x80
 800f304:	d103      	bne.n	800f30e <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	2209      	movs	r2, #9
 800f30a:	761a      	strb	r2, [r3, #24]
 800f30c:	e002      	b.n	800f314 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	2207      	movs	r2, #7
 800f312:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	2203      	movs	r2, #3
 800f318:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f328:	2200      	movs	r2, #0
 800f32a:	4619      	mov	r1, r3
 800f32c:	f000 fc42 	bl	800fbb4 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800f330:	e1cd      	b.n	800f6ce <USBH_HandleControl+0x476>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800f332:	7bbb      	ldrb	r3, [r7, #14]
 800f334:	2b04      	cmp	r3, #4
 800f336:	d003      	beq.n	800f340 <USBH_HandleControl+0xe8>
 800f338:	7bbb      	ldrb	r3, [r7, #14]
 800f33a:	2b02      	cmp	r3, #2
 800f33c:	f040 81c7 	bne.w	800f6ce <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	220b      	movs	r2, #11
 800f344:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	2203      	movs	r2, #3
 800f34a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f35a:	2200      	movs	r2, #0
 800f35c:	4619      	mov	r1, r3
 800f35e:	f000 fc29 	bl	800fbb4 <osMessagePut>
      break;
 800f362:	e1b4      	b.n	800f6ce <USBH_HandleControl+0x476>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800f36a:	b29a      	uxth	r2, r3
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	6899      	ldr	r1, [r3, #8]
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	899a      	ldrh	r2, [r3, #12]
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	791b      	ldrb	r3, [r3, #4]
 800f37c:	6878      	ldr	r0, [r7, #4]
 800f37e:	f000 f9f4 	bl	800f76a <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	2204      	movs	r2, #4
 800f386:	761a      	strb	r2, [r3, #24]
      break;
 800f388:	e1aa      	b.n	800f6e0 <USBH_HandleControl+0x488>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	791b      	ldrb	r3, [r3, #4]
 800f38e:	4619      	mov	r1, r3
 800f390:	6878      	ldr	r0, [r7, #4]
 800f392:	f003 f85d 	bl	8012450 <USBH_LL_GetURBState>
 800f396:	4603      	mov	r3, r0
 800f398:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800f39a:	7bbb      	ldrb	r3, [r7, #14]
 800f39c:	2b01      	cmp	r3, #1
 800f39e:	d110      	bne.n	800f3c2 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	2209      	movs	r2, #9
 800f3a4:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	2203      	movs	r2, #3
 800f3aa:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f3ba:	2200      	movs	r2, #0
 800f3bc:	4619      	mov	r1, r3
 800f3be:	f000 fbf9 	bl	800fbb4 <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800f3c2:	7bbb      	ldrb	r3, [r7, #14]
 800f3c4:	2b05      	cmp	r3, #5
 800f3c6:	d110      	bne.n	800f3ea <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800f3c8:	2303      	movs	r3, #3
 800f3ca:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	2203      	movs	r2, #3
 800f3d0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f3e0:	2200      	movs	r2, #0
 800f3e2:	4619      	mov	r1, r3
 800f3e4:	f000 fbe6 	bl	800fbb4 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800f3e8:	e173      	b.n	800f6d2 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800f3ea:	7bbb      	ldrb	r3, [r7, #14]
 800f3ec:	2b04      	cmp	r3, #4
 800f3ee:	f040 8170 	bne.w	800f6d2 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	220b      	movs	r2, #11
 800f3f6:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	2203      	movs	r2, #3
 800f3fc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f40c:	2200      	movs	r2, #0
 800f40e:	4619      	mov	r1, r3
 800f410:	f000 fbd0 	bl	800fbb4 <osMessagePut>
      break;
 800f414:	e15d      	b.n	800f6d2 <USBH_HandleControl+0x47a>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	6899      	ldr	r1, [r3, #8]
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	899a      	ldrh	r2, [r3, #12]
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	7958      	ldrb	r0, [r3, #5]
 800f422:	2301      	movs	r3, #1
 800f424:	9300      	str	r3, [sp, #0]
 800f426:	4603      	mov	r3, r0
 800f428:	6878      	ldr	r0, [r7, #4]
 800f42a:	f000 f979 	bl	800f720 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800f434:	b29a      	uxth	r2, r3
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	2206      	movs	r2, #6
 800f43e:	761a      	strb	r2, [r3, #24]
      break;
 800f440:	e14e      	b.n	800f6e0 <USBH_HandleControl+0x488>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	795b      	ldrb	r3, [r3, #5]
 800f446:	4619      	mov	r1, r3
 800f448:	6878      	ldr	r0, [r7, #4]
 800f44a:	f003 f801 	bl	8012450 <USBH_LL_GetURBState>
 800f44e:	4603      	mov	r3, r0
 800f450:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800f452:	7bbb      	ldrb	r3, [r7, #14]
 800f454:	2b01      	cmp	r3, #1
 800f456:	d111      	bne.n	800f47c <USBH_HandleControl+0x224>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	2207      	movs	r2, #7
 800f45c:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	2203      	movs	r2, #3
 800f462:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f472:	2200      	movs	r2, #0
 800f474:	4619      	mov	r1, r3
 800f476:	f000 fb9d 	bl	800fbb4 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800f47a:	e12c      	b.n	800f6d6 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_STALL)
 800f47c:	7bbb      	ldrb	r3, [r7, #14]
 800f47e:	2b05      	cmp	r3, #5
 800f480:	d113      	bne.n	800f4aa <USBH_HandleControl+0x252>
        phost->Control.state = CTRL_STALLED;
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	220c      	movs	r2, #12
 800f486:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800f488:	2303      	movs	r3, #3
 800f48a:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	2203      	movs	r2, #3
 800f490:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f4a0:	2200      	movs	r2, #0
 800f4a2:	4619      	mov	r1, r3
 800f4a4:	f000 fb86 	bl	800fbb4 <osMessagePut>
      break;
 800f4a8:	e115      	b.n	800f6d6 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_NOTREADY)
 800f4aa:	7bbb      	ldrb	r3, [r7, #14]
 800f4ac:	2b02      	cmp	r3, #2
 800f4ae:	d111      	bne.n	800f4d4 <USBH_HandleControl+0x27c>
        phost->Control.state = CTRL_DATA_OUT;
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	2205      	movs	r2, #5
 800f4b4:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	2203      	movs	r2, #3
 800f4ba:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f4ca:	2200      	movs	r2, #0
 800f4cc:	4619      	mov	r1, r3
 800f4ce:	f000 fb71 	bl	800fbb4 <osMessagePut>
      break;
 800f4d2:	e100      	b.n	800f6d6 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_ERROR)
 800f4d4:	7bbb      	ldrb	r3, [r7, #14]
 800f4d6:	2b04      	cmp	r3, #4
 800f4d8:	f040 80fd 	bne.w	800f6d6 <USBH_HandleControl+0x47e>
          phost->Control.state = CTRL_ERROR;
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	220b      	movs	r2, #11
 800f4e0:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800f4e2:	2302      	movs	r3, #2
 800f4e4:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	2203      	movs	r2, #3
 800f4ea:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f4fa:	2200      	movs	r2, #0
 800f4fc:	4619      	mov	r1, r3
 800f4fe:	f000 fb59 	bl	800fbb4 <osMessagePut>
      break;
 800f502:	e0e8      	b.n	800f6d6 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	791b      	ldrb	r3, [r3, #4]
 800f508:	2200      	movs	r2, #0
 800f50a:	2100      	movs	r1, #0
 800f50c:	6878      	ldr	r0, [r7, #4]
 800f50e:	f000 f92c 	bl	800f76a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800f518:	b29a      	uxth	r2, r3
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	2208      	movs	r2, #8
 800f522:	761a      	strb	r2, [r3, #24]

      break;
 800f524:	e0dc      	b.n	800f6e0 <USBH_HandleControl+0x488>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	791b      	ldrb	r3, [r3, #4]
 800f52a:	4619      	mov	r1, r3
 800f52c:	6878      	ldr	r0, [r7, #4]
 800f52e:	f002 ff8f 	bl	8012450 <USBH_LL_GetURBState>
 800f532:	4603      	mov	r3, r0
 800f534:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800f536:	7bbb      	ldrb	r3, [r7, #14]
 800f538:	2b01      	cmp	r3, #1
 800f53a:	d113      	bne.n	800f564 <USBH_HandleControl+0x30c>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	220d      	movs	r2, #13
 800f540:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800f542:	2300      	movs	r3, #0
 800f544:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	2203      	movs	r2, #3
 800f54a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f55a:	2200      	movs	r2, #0
 800f55c:	4619      	mov	r1, r3
 800f55e:	f000 fb29 	bl	800fbb4 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800f562:	e0ba      	b.n	800f6da <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_ERROR)
 800f564:	7bbb      	ldrb	r3, [r7, #14]
 800f566:	2b04      	cmp	r3, #4
 800f568:	d111      	bne.n	800f58e <USBH_HandleControl+0x336>
        phost->Control.state = CTRL_ERROR;
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	220b      	movs	r2, #11
 800f56e:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	2203      	movs	r2, #3
 800f574:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f584:	2200      	movs	r2, #0
 800f586:	4619      	mov	r1, r3
 800f588:	f000 fb14 	bl	800fbb4 <osMessagePut>
      break;
 800f58c:	e0a5      	b.n	800f6da <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_STALL)
 800f58e:	7bbb      	ldrb	r3, [r7, #14]
 800f590:	2b05      	cmp	r3, #5
 800f592:	f040 80a2 	bne.w	800f6da <USBH_HandleControl+0x482>
          status = USBH_NOT_SUPPORTED;
 800f596:	2303      	movs	r3, #3
 800f598:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	2203      	movs	r2, #3
 800f59e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f5ae:	2200      	movs	r2, #0
 800f5b0:	4619      	mov	r1, r3
 800f5b2:	f000 faff 	bl	800fbb4 <osMessagePut>
      break;
 800f5b6:	e090      	b.n	800f6da <USBH_HandleControl+0x482>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	795a      	ldrb	r2, [r3, #5]
 800f5bc:	2301      	movs	r3, #1
 800f5be:	9300      	str	r3, [sp, #0]
 800f5c0:	4613      	mov	r3, r2
 800f5c2:	2200      	movs	r2, #0
 800f5c4:	2100      	movs	r1, #0
 800f5c6:	6878      	ldr	r0, [r7, #4]
 800f5c8:	f000 f8aa 	bl	800f720 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800f5d2:	b29a      	uxth	r2, r3
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	220a      	movs	r2, #10
 800f5dc:	761a      	strb	r2, [r3, #24]
      break;
 800f5de:	e07f      	b.n	800f6e0 <USBH_HandleControl+0x488>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	795b      	ldrb	r3, [r3, #5]
 800f5e4:	4619      	mov	r1, r3
 800f5e6:	6878      	ldr	r0, [r7, #4]
 800f5e8:	f002 ff32 	bl	8012450 <USBH_LL_GetURBState>
 800f5ec:	4603      	mov	r3, r0
 800f5ee:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800f5f0:	7bbb      	ldrb	r3, [r7, #14]
 800f5f2:	2b01      	cmp	r3, #1
 800f5f4:	d113      	bne.n	800f61e <USBH_HandleControl+0x3c6>
      {
        status = USBH_OK;
 800f5f6:	2300      	movs	r3, #0
 800f5f8:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	220d      	movs	r2, #13
 800f5fe:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	2203      	movs	r2, #3
 800f604:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f614:	2200      	movs	r2, #0
 800f616:	4619      	mov	r1, r3
 800f618:	f000 facc 	bl	800fbb4 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800f61c:	e05f      	b.n	800f6de <USBH_HandleControl+0x486>
      else if (URB_Status == USBH_URB_NOTREADY)
 800f61e:	7bbb      	ldrb	r3, [r7, #14]
 800f620:	2b02      	cmp	r3, #2
 800f622:	d111      	bne.n	800f648 <USBH_HandleControl+0x3f0>
        phost->Control.state = CTRL_STATUS_OUT;
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	2209      	movs	r2, #9
 800f628:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	2203      	movs	r2, #3
 800f62e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f63e:	2200      	movs	r2, #0
 800f640:	4619      	mov	r1, r3
 800f642:	f000 fab7 	bl	800fbb4 <osMessagePut>
      break;
 800f646:	e04a      	b.n	800f6de <USBH_HandleControl+0x486>
        if (URB_Status == USBH_URB_ERROR)
 800f648:	7bbb      	ldrb	r3, [r7, #14]
 800f64a:	2b04      	cmp	r3, #4
 800f64c:	d147      	bne.n	800f6de <USBH_HandleControl+0x486>
          phost->Control.state = CTRL_ERROR;
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	220b      	movs	r2, #11
 800f652:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	2203      	movs	r2, #3
 800f658:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800f668:	2200      	movs	r2, #0
 800f66a:	4619      	mov	r1, r3
 800f66c:	f000 faa2 	bl	800fbb4 <osMessagePut>
      break;
 800f670:	e035      	b.n	800f6de <USBH_HandleControl+0x486>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	7e5b      	ldrb	r3, [r3, #25]
 800f676:	3301      	adds	r3, #1
 800f678:	b2da      	uxtb	r2, r3
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	765a      	strb	r2, [r3, #25]
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	7e5b      	ldrb	r3, [r3, #25]
 800f682:	2b02      	cmp	r3, #2
 800f684:	d806      	bhi.n	800f694 <USBH_HandleControl+0x43c>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	2201      	movs	r2, #1
 800f68a:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	2201      	movs	r2, #1
 800f690:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800f692:	e025      	b.n	800f6e0 <USBH_HandleControl+0x488>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f69a:	2106      	movs	r1, #6
 800f69c:	6878      	ldr	r0, [r7, #4]
 800f69e:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	2200      	movs	r2, #0
 800f6a4:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	795b      	ldrb	r3, [r3, #5]
 800f6aa:	4619      	mov	r1, r3
 800f6ac:	6878      	ldr	r0, [r7, #4]
 800f6ae:	f000 f90d 	bl	800f8cc <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	791b      	ldrb	r3, [r3, #4]
 800f6b6:	4619      	mov	r1, r3
 800f6b8:	6878      	ldr	r0, [r7, #4]
 800f6ba:	f000 f907 	bl	800f8cc <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	2200      	movs	r2, #0
 800f6c2:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800f6c4:	2302      	movs	r3, #2
 800f6c6:	73fb      	strb	r3, [r7, #15]
      break;
 800f6c8:	e00a      	b.n	800f6e0 <USBH_HandleControl+0x488>

    default:
      break;
 800f6ca:	bf00      	nop
 800f6cc:	e008      	b.n	800f6e0 <USBH_HandleControl+0x488>
      break;
 800f6ce:	bf00      	nop
 800f6d0:	e006      	b.n	800f6e0 <USBH_HandleControl+0x488>
      break;
 800f6d2:	bf00      	nop
 800f6d4:	e004      	b.n	800f6e0 <USBH_HandleControl+0x488>
      break;
 800f6d6:	bf00      	nop
 800f6d8:	e002      	b.n	800f6e0 <USBH_HandleControl+0x488>
      break;
 800f6da:	bf00      	nop
 800f6dc:	e000      	b.n	800f6e0 <USBH_HandleControl+0x488>
      break;
 800f6de:	bf00      	nop
  }

  return status;
 800f6e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f6e2:	4618      	mov	r0, r3
 800f6e4:	3710      	adds	r7, #16
 800f6e6:	46bd      	mov	sp, r7
 800f6e8:	bd80      	pop	{r7, pc}
 800f6ea:	bf00      	nop

0800f6ec <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800f6ec:	b580      	push	{r7, lr}
 800f6ee:	b088      	sub	sp, #32
 800f6f0:	af04      	add	r7, sp, #16
 800f6f2:	60f8      	str	r0, [r7, #12]
 800f6f4:	60b9      	str	r1, [r7, #8]
 800f6f6:	4613      	mov	r3, r2
 800f6f8:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800f6fa:	79f9      	ldrb	r1, [r7, #7]
 800f6fc:	2300      	movs	r3, #0
 800f6fe:	9303      	str	r3, [sp, #12]
 800f700:	2308      	movs	r3, #8
 800f702:	9302      	str	r3, [sp, #8]
 800f704:	68bb      	ldr	r3, [r7, #8]
 800f706:	9301      	str	r3, [sp, #4]
 800f708:	2300      	movs	r3, #0
 800f70a:	9300      	str	r3, [sp, #0]
 800f70c:	2300      	movs	r3, #0
 800f70e:	2200      	movs	r2, #0
 800f710:	68f8      	ldr	r0, [r7, #12]
 800f712:	f002 fe6c 	bl	80123ee <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800f716:	2300      	movs	r3, #0
}
 800f718:	4618      	mov	r0, r3
 800f71a:	3710      	adds	r7, #16
 800f71c:	46bd      	mov	sp, r7
 800f71e:	bd80      	pop	{r7, pc}

0800f720 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800f720:	b580      	push	{r7, lr}
 800f722:	b088      	sub	sp, #32
 800f724:	af04      	add	r7, sp, #16
 800f726:	60f8      	str	r0, [r7, #12]
 800f728:	60b9      	str	r1, [r7, #8]
 800f72a:	4611      	mov	r1, r2
 800f72c:	461a      	mov	r2, r3
 800f72e:	460b      	mov	r3, r1
 800f730:	80fb      	strh	r3, [r7, #6]
 800f732:	4613      	mov	r3, r2
 800f734:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800f736:	68fb      	ldr	r3, [r7, #12]
 800f738:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	d001      	beq.n	800f744 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800f740:	2300      	movs	r3, #0
 800f742:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800f744:	7979      	ldrb	r1, [r7, #5]
 800f746:	7e3b      	ldrb	r3, [r7, #24]
 800f748:	9303      	str	r3, [sp, #12]
 800f74a:	88fb      	ldrh	r3, [r7, #6]
 800f74c:	9302      	str	r3, [sp, #8]
 800f74e:	68bb      	ldr	r3, [r7, #8]
 800f750:	9301      	str	r3, [sp, #4]
 800f752:	2301      	movs	r3, #1
 800f754:	9300      	str	r3, [sp, #0]
 800f756:	2300      	movs	r3, #0
 800f758:	2200      	movs	r2, #0
 800f75a:	68f8      	ldr	r0, [r7, #12]
 800f75c:	f002 fe47 	bl	80123ee <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800f760:	2300      	movs	r3, #0
}
 800f762:	4618      	mov	r0, r3
 800f764:	3710      	adds	r7, #16
 800f766:	46bd      	mov	sp, r7
 800f768:	bd80      	pop	{r7, pc}

0800f76a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800f76a:	b580      	push	{r7, lr}
 800f76c:	b088      	sub	sp, #32
 800f76e:	af04      	add	r7, sp, #16
 800f770:	60f8      	str	r0, [r7, #12]
 800f772:	60b9      	str	r1, [r7, #8]
 800f774:	4611      	mov	r1, r2
 800f776:	461a      	mov	r2, r3
 800f778:	460b      	mov	r3, r1
 800f77a:	80fb      	strh	r3, [r7, #6]
 800f77c:	4613      	mov	r3, r2
 800f77e:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800f780:	7979      	ldrb	r1, [r7, #5]
 800f782:	2300      	movs	r3, #0
 800f784:	9303      	str	r3, [sp, #12]
 800f786:	88fb      	ldrh	r3, [r7, #6]
 800f788:	9302      	str	r3, [sp, #8]
 800f78a:	68bb      	ldr	r3, [r7, #8]
 800f78c:	9301      	str	r3, [sp, #4]
 800f78e:	2301      	movs	r3, #1
 800f790:	9300      	str	r3, [sp, #0]
 800f792:	2300      	movs	r3, #0
 800f794:	2201      	movs	r2, #1
 800f796:	68f8      	ldr	r0, [r7, #12]
 800f798:	f002 fe29 	bl	80123ee <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800f79c:	2300      	movs	r3, #0

}
 800f79e:	4618      	mov	r0, r3
 800f7a0:	3710      	adds	r7, #16
 800f7a2:	46bd      	mov	sp, r7
 800f7a4:	bd80      	pop	{r7, pc}

0800f7a6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800f7a6:	b580      	push	{r7, lr}
 800f7a8:	b088      	sub	sp, #32
 800f7aa:	af04      	add	r7, sp, #16
 800f7ac:	60f8      	str	r0, [r7, #12]
 800f7ae:	60b9      	str	r1, [r7, #8]
 800f7b0:	4611      	mov	r1, r2
 800f7b2:	461a      	mov	r2, r3
 800f7b4:	460b      	mov	r3, r1
 800f7b6:	80fb      	strh	r3, [r7, #6]
 800f7b8:	4613      	mov	r3, r2
 800f7ba:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800f7bc:	68fb      	ldr	r3, [r7, #12]
 800f7be:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d001      	beq.n	800f7ca <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800f7c6:	2300      	movs	r3, #0
 800f7c8:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800f7ca:	7979      	ldrb	r1, [r7, #5]
 800f7cc:	7e3b      	ldrb	r3, [r7, #24]
 800f7ce:	9303      	str	r3, [sp, #12]
 800f7d0:	88fb      	ldrh	r3, [r7, #6]
 800f7d2:	9302      	str	r3, [sp, #8]
 800f7d4:	68bb      	ldr	r3, [r7, #8]
 800f7d6:	9301      	str	r3, [sp, #4]
 800f7d8:	2301      	movs	r3, #1
 800f7da:	9300      	str	r3, [sp, #0]
 800f7dc:	2302      	movs	r3, #2
 800f7de:	2200      	movs	r2, #0
 800f7e0:	68f8      	ldr	r0, [r7, #12]
 800f7e2:	f002 fe04 	bl	80123ee <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800f7e6:	2300      	movs	r3, #0
}
 800f7e8:	4618      	mov	r0, r3
 800f7ea:	3710      	adds	r7, #16
 800f7ec:	46bd      	mov	sp, r7
 800f7ee:	bd80      	pop	{r7, pc}

0800f7f0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800f7f0:	b580      	push	{r7, lr}
 800f7f2:	b088      	sub	sp, #32
 800f7f4:	af04      	add	r7, sp, #16
 800f7f6:	60f8      	str	r0, [r7, #12]
 800f7f8:	60b9      	str	r1, [r7, #8]
 800f7fa:	4611      	mov	r1, r2
 800f7fc:	461a      	mov	r2, r3
 800f7fe:	460b      	mov	r3, r1
 800f800:	80fb      	strh	r3, [r7, #6]
 800f802:	4613      	mov	r3, r2
 800f804:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800f806:	7979      	ldrb	r1, [r7, #5]
 800f808:	2300      	movs	r3, #0
 800f80a:	9303      	str	r3, [sp, #12]
 800f80c:	88fb      	ldrh	r3, [r7, #6]
 800f80e:	9302      	str	r3, [sp, #8]
 800f810:	68bb      	ldr	r3, [r7, #8]
 800f812:	9301      	str	r3, [sp, #4]
 800f814:	2301      	movs	r3, #1
 800f816:	9300      	str	r3, [sp, #0]
 800f818:	2302      	movs	r3, #2
 800f81a:	2201      	movs	r2, #1
 800f81c:	68f8      	ldr	r0, [r7, #12]
 800f81e:	f002 fde6 	bl	80123ee <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800f822:	2300      	movs	r3, #0
}
 800f824:	4618      	mov	r0, r3
 800f826:	3710      	adds	r7, #16
 800f828:	46bd      	mov	sp, r7
 800f82a:	bd80      	pop	{r7, pc}

0800f82c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800f82c:	b580      	push	{r7, lr}
 800f82e:	b086      	sub	sp, #24
 800f830:	af04      	add	r7, sp, #16
 800f832:	6078      	str	r0, [r7, #4]
 800f834:	4608      	mov	r0, r1
 800f836:	4611      	mov	r1, r2
 800f838:	461a      	mov	r2, r3
 800f83a:	4603      	mov	r3, r0
 800f83c:	70fb      	strb	r3, [r7, #3]
 800f83e:	460b      	mov	r3, r1
 800f840:	70bb      	strb	r3, [r7, #2]
 800f842:	4613      	mov	r3, r2
 800f844:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800f846:	7878      	ldrb	r0, [r7, #1]
 800f848:	78ba      	ldrb	r2, [r7, #2]
 800f84a:	78f9      	ldrb	r1, [r7, #3]
 800f84c:	8b3b      	ldrh	r3, [r7, #24]
 800f84e:	9302      	str	r3, [sp, #8]
 800f850:	7d3b      	ldrb	r3, [r7, #20]
 800f852:	9301      	str	r3, [sp, #4]
 800f854:	7c3b      	ldrb	r3, [r7, #16]
 800f856:	9300      	str	r3, [sp, #0]
 800f858:	4603      	mov	r3, r0
 800f85a:	6878      	ldr	r0, [r7, #4]
 800f85c:	f002 fd79 	bl	8012352 <USBH_LL_OpenPipe>

  return USBH_OK;
 800f860:	2300      	movs	r3, #0
}
 800f862:	4618      	mov	r0, r3
 800f864:	3708      	adds	r7, #8
 800f866:	46bd      	mov	sp, r7
 800f868:	bd80      	pop	{r7, pc}

0800f86a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800f86a:	b580      	push	{r7, lr}
 800f86c:	b082      	sub	sp, #8
 800f86e:	af00      	add	r7, sp, #0
 800f870:	6078      	str	r0, [r7, #4]
 800f872:	460b      	mov	r3, r1
 800f874:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800f876:	78fb      	ldrb	r3, [r7, #3]
 800f878:	4619      	mov	r1, r3
 800f87a:	6878      	ldr	r0, [r7, #4]
 800f87c:	f002 fd98 	bl	80123b0 <USBH_LL_ClosePipe>

  return USBH_OK;
 800f880:	2300      	movs	r3, #0
}
 800f882:	4618      	mov	r0, r3
 800f884:	3708      	adds	r7, #8
 800f886:	46bd      	mov	sp, r7
 800f888:	bd80      	pop	{r7, pc}

0800f88a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800f88a:	b580      	push	{r7, lr}
 800f88c:	b084      	sub	sp, #16
 800f88e:	af00      	add	r7, sp, #0
 800f890:	6078      	str	r0, [r7, #4]
 800f892:	460b      	mov	r3, r1
 800f894:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800f896:	6878      	ldr	r0, [r7, #4]
 800f898:	f000 f836 	bl	800f908 <USBH_GetFreePipe>
 800f89c:	4603      	mov	r3, r0
 800f89e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800f8a0:	89fb      	ldrh	r3, [r7, #14]
 800f8a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f8a6:	4293      	cmp	r3, r2
 800f8a8:	d00a      	beq.n	800f8c0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800f8aa:	78fa      	ldrb	r2, [r7, #3]
 800f8ac:	89fb      	ldrh	r3, [r7, #14]
 800f8ae:	f003 030f 	and.w	r3, r3, #15
 800f8b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f8b6:	6879      	ldr	r1, [r7, #4]
 800f8b8:	33e0      	adds	r3, #224	; 0xe0
 800f8ba:	009b      	lsls	r3, r3, #2
 800f8bc:	440b      	add	r3, r1
 800f8be:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800f8c0:	89fb      	ldrh	r3, [r7, #14]
 800f8c2:	b2db      	uxtb	r3, r3
}
 800f8c4:	4618      	mov	r0, r3
 800f8c6:	3710      	adds	r7, #16
 800f8c8:	46bd      	mov	sp, r7
 800f8ca:	bd80      	pop	{r7, pc}

0800f8cc <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800f8cc:	b480      	push	{r7}
 800f8ce:	b083      	sub	sp, #12
 800f8d0:	af00      	add	r7, sp, #0
 800f8d2:	6078      	str	r0, [r7, #4]
 800f8d4:	460b      	mov	r3, r1
 800f8d6:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800f8d8:	78fb      	ldrb	r3, [r7, #3]
 800f8da:	2b0a      	cmp	r3, #10
 800f8dc:	d80d      	bhi.n	800f8fa <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800f8de:	78fb      	ldrb	r3, [r7, #3]
 800f8e0:	687a      	ldr	r2, [r7, #4]
 800f8e2:	33e0      	adds	r3, #224	; 0xe0
 800f8e4:	009b      	lsls	r3, r3, #2
 800f8e6:	4413      	add	r3, r2
 800f8e8:	685a      	ldr	r2, [r3, #4]
 800f8ea:	78fb      	ldrb	r3, [r7, #3]
 800f8ec:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800f8f0:	6879      	ldr	r1, [r7, #4]
 800f8f2:	33e0      	adds	r3, #224	; 0xe0
 800f8f4:	009b      	lsls	r3, r3, #2
 800f8f6:	440b      	add	r3, r1
 800f8f8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800f8fa:	2300      	movs	r3, #0
}
 800f8fc:	4618      	mov	r0, r3
 800f8fe:	370c      	adds	r7, #12
 800f900:	46bd      	mov	sp, r7
 800f902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f906:	4770      	bx	lr

0800f908 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800f908:	b480      	push	{r7}
 800f90a:	b085      	sub	sp, #20
 800f90c:	af00      	add	r7, sp, #0
 800f90e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800f910:	2300      	movs	r3, #0
 800f912:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800f914:	2300      	movs	r3, #0
 800f916:	73fb      	strb	r3, [r7, #15]
 800f918:	e00f      	b.n	800f93a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800f91a:	7bfb      	ldrb	r3, [r7, #15]
 800f91c:	687a      	ldr	r2, [r7, #4]
 800f91e:	33e0      	adds	r3, #224	; 0xe0
 800f920:	009b      	lsls	r3, r3, #2
 800f922:	4413      	add	r3, r2
 800f924:	685b      	ldr	r3, [r3, #4]
 800f926:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	d102      	bne.n	800f934 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800f92e:	7bfb      	ldrb	r3, [r7, #15]
 800f930:	b29b      	uxth	r3, r3
 800f932:	e007      	b.n	800f944 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800f934:	7bfb      	ldrb	r3, [r7, #15]
 800f936:	3301      	adds	r3, #1
 800f938:	73fb      	strb	r3, [r7, #15]
 800f93a:	7bfb      	ldrb	r3, [r7, #15]
 800f93c:	2b0a      	cmp	r3, #10
 800f93e:	d9ec      	bls.n	800f91a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800f940:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800f944:	4618      	mov	r0, r3
 800f946:	3714      	adds	r7, #20
 800f948:	46bd      	mov	sp, r7
 800f94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f94e:	4770      	bx	lr

0800f950 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800f950:	b480      	push	{r7}
 800f952:	b087      	sub	sp, #28
 800f954:	af00      	add	r7, sp, #0
 800f956:	60f8      	str	r0, [r7, #12]
 800f958:	60b9      	str	r1, [r7, #8]
 800f95a:	4613      	mov	r3, r2
 800f95c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800f95e:	2301      	movs	r3, #1
 800f960:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800f962:	2300      	movs	r3, #0
 800f964:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800f966:	4b1f      	ldr	r3, [pc, #124]	; (800f9e4 <FATFS_LinkDriverEx+0x94>)
 800f968:	7a5b      	ldrb	r3, [r3, #9]
 800f96a:	b2db      	uxtb	r3, r3
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	d131      	bne.n	800f9d4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800f970:	4b1c      	ldr	r3, [pc, #112]	; (800f9e4 <FATFS_LinkDriverEx+0x94>)
 800f972:	7a5b      	ldrb	r3, [r3, #9]
 800f974:	b2db      	uxtb	r3, r3
 800f976:	461a      	mov	r2, r3
 800f978:	4b1a      	ldr	r3, [pc, #104]	; (800f9e4 <FATFS_LinkDriverEx+0x94>)
 800f97a:	2100      	movs	r1, #0
 800f97c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800f97e:	4b19      	ldr	r3, [pc, #100]	; (800f9e4 <FATFS_LinkDriverEx+0x94>)
 800f980:	7a5b      	ldrb	r3, [r3, #9]
 800f982:	b2db      	uxtb	r3, r3
 800f984:	4a17      	ldr	r2, [pc, #92]	; (800f9e4 <FATFS_LinkDriverEx+0x94>)
 800f986:	009b      	lsls	r3, r3, #2
 800f988:	4413      	add	r3, r2
 800f98a:	68fa      	ldr	r2, [r7, #12]
 800f98c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800f98e:	4b15      	ldr	r3, [pc, #84]	; (800f9e4 <FATFS_LinkDriverEx+0x94>)
 800f990:	7a5b      	ldrb	r3, [r3, #9]
 800f992:	b2db      	uxtb	r3, r3
 800f994:	461a      	mov	r2, r3
 800f996:	4b13      	ldr	r3, [pc, #76]	; (800f9e4 <FATFS_LinkDriverEx+0x94>)
 800f998:	4413      	add	r3, r2
 800f99a:	79fa      	ldrb	r2, [r7, #7]
 800f99c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800f99e:	4b11      	ldr	r3, [pc, #68]	; (800f9e4 <FATFS_LinkDriverEx+0x94>)
 800f9a0:	7a5b      	ldrb	r3, [r3, #9]
 800f9a2:	b2db      	uxtb	r3, r3
 800f9a4:	1c5a      	adds	r2, r3, #1
 800f9a6:	b2d1      	uxtb	r1, r2
 800f9a8:	4a0e      	ldr	r2, [pc, #56]	; (800f9e4 <FATFS_LinkDriverEx+0x94>)
 800f9aa:	7251      	strb	r1, [r2, #9]
 800f9ac:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800f9ae:	7dbb      	ldrb	r3, [r7, #22]
 800f9b0:	3330      	adds	r3, #48	; 0x30
 800f9b2:	b2da      	uxtb	r2, r3
 800f9b4:	68bb      	ldr	r3, [r7, #8]
 800f9b6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800f9b8:	68bb      	ldr	r3, [r7, #8]
 800f9ba:	3301      	adds	r3, #1
 800f9bc:	223a      	movs	r2, #58	; 0x3a
 800f9be:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800f9c0:	68bb      	ldr	r3, [r7, #8]
 800f9c2:	3302      	adds	r3, #2
 800f9c4:	222f      	movs	r2, #47	; 0x2f
 800f9c6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800f9c8:	68bb      	ldr	r3, [r7, #8]
 800f9ca:	3303      	adds	r3, #3
 800f9cc:	2200      	movs	r2, #0
 800f9ce:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800f9d0:	2300      	movs	r3, #0
 800f9d2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800f9d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800f9d6:	4618      	mov	r0, r3
 800f9d8:	371c      	adds	r7, #28
 800f9da:	46bd      	mov	sp, r7
 800f9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9e0:	4770      	bx	lr
 800f9e2:	bf00      	nop
 800f9e4:	2000031c 	.word	0x2000031c

0800f9e8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800f9e8:	b580      	push	{r7, lr}
 800f9ea:	b082      	sub	sp, #8
 800f9ec:	af00      	add	r7, sp, #0
 800f9ee:	6078      	str	r0, [r7, #4]
 800f9f0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800f9f2:	2200      	movs	r2, #0
 800f9f4:	6839      	ldr	r1, [r7, #0]
 800f9f6:	6878      	ldr	r0, [r7, #4]
 800f9f8:	f7ff ffaa 	bl	800f950 <FATFS_LinkDriverEx>
 800f9fc:	4603      	mov	r3, r0
}
 800f9fe:	4618      	mov	r0, r3
 800fa00:	3708      	adds	r7, #8
 800fa02:	46bd      	mov	sp, r7
 800fa04:	bd80      	pop	{r7, pc}

0800fa06 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800fa06:	b480      	push	{r7}
 800fa08:	b085      	sub	sp, #20
 800fa0a:	af00      	add	r7, sp, #0
 800fa0c:	4603      	mov	r3, r0
 800fa0e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800fa10:	2300      	movs	r3, #0
 800fa12:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800fa14:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800fa18:	2b84      	cmp	r3, #132	; 0x84
 800fa1a:	d005      	beq.n	800fa28 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800fa1c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800fa20:	68fb      	ldr	r3, [r7, #12]
 800fa22:	4413      	add	r3, r2
 800fa24:	3303      	adds	r3, #3
 800fa26:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800fa28:	68fb      	ldr	r3, [r7, #12]
}
 800fa2a:	4618      	mov	r0, r3
 800fa2c:	3714      	adds	r7, #20
 800fa2e:	46bd      	mov	sp, r7
 800fa30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa34:	4770      	bx	lr

0800fa36 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800fa36:	b480      	push	{r7}
 800fa38:	b083      	sub	sp, #12
 800fa3a:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fa3c:	f3ef 8305 	mrs	r3, IPSR
 800fa40:	607b      	str	r3, [r7, #4]
  return(result);
 800fa42:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	bf14      	ite	ne
 800fa48:	2301      	movne	r3, #1
 800fa4a:	2300      	moveq	r3, #0
 800fa4c:	b2db      	uxtb	r3, r3
}
 800fa4e:	4618      	mov	r0, r3
 800fa50:	370c      	adds	r7, #12
 800fa52:	46bd      	mov	sp, r7
 800fa54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa58:	4770      	bx	lr

0800fa5a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800fa5a:	b580      	push	{r7, lr}
 800fa5c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800fa5e:	f001 f945 	bl	8010cec <vTaskStartScheduler>
  
  return osOK;
 800fa62:	2300      	movs	r3, #0
}
 800fa64:	4618      	mov	r0, r3
 800fa66:	bd80      	pop	{r7, pc}

0800fa68 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 800fa68:	b580      	push	{r7, lr}
 800fa6a:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 800fa6c:	f001 fd90 	bl	8011590 <xTaskGetSchedulerState>
 800fa70:	4603      	mov	r3, r0
 800fa72:	2b01      	cmp	r3, #1
 800fa74:	d101      	bne.n	800fa7a <osKernelRunning+0x12>
    return 0;
 800fa76:	2300      	movs	r3, #0
 800fa78:	e000      	b.n	800fa7c <osKernelRunning+0x14>
  else
    return 1;
 800fa7a:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 800fa7c:	4618      	mov	r0, r3
 800fa7e:	bd80      	pop	{r7, pc}

0800fa80 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800fa80:	b580      	push	{r7, lr}
 800fa82:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800fa84:	f7ff ffd7 	bl	800fa36 <inHandlerMode>
 800fa88:	4603      	mov	r3, r0
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	d003      	beq.n	800fa96 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800fa8e:	f001 fa4b 	bl	8010f28 <xTaskGetTickCountFromISR>
 800fa92:	4603      	mov	r3, r0
 800fa94:	e002      	b.n	800fa9c <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800fa96:	f001 fa37 	bl	8010f08 <xTaskGetTickCount>
 800fa9a:	4603      	mov	r3, r0
  }
}
 800fa9c:	4618      	mov	r0, r3
 800fa9e:	bd80      	pop	{r7, pc}

0800faa0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800faa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800faa2:	b089      	sub	sp, #36	; 0x24
 800faa4:	af04      	add	r7, sp, #16
 800faa6:	6078      	str	r0, [r7, #4]
 800faa8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	695b      	ldr	r3, [r3, #20]
 800faae:	2b00      	cmp	r3, #0
 800fab0:	d020      	beq.n	800faf4 <osThreadCreate+0x54>
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	699b      	ldr	r3, [r3, #24]
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d01c      	beq.n	800faf4 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	685c      	ldr	r4, [r3, #4]
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	681d      	ldr	r5, [r3, #0]
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	691e      	ldr	r6, [r3, #16]
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800facc:	4618      	mov	r0, r3
 800face:	f7ff ff9a 	bl	800fa06 <makeFreeRtosPriority>
 800fad2:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	695b      	ldr	r3, [r3, #20]
 800fad8:	687a      	ldr	r2, [r7, #4]
 800fada:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800fadc:	9202      	str	r2, [sp, #8]
 800fade:	9301      	str	r3, [sp, #4]
 800fae0:	9100      	str	r1, [sp, #0]
 800fae2:	683b      	ldr	r3, [r7, #0]
 800fae4:	4632      	mov	r2, r6
 800fae6:	4629      	mov	r1, r5
 800fae8:	4620      	mov	r0, r4
 800faea:	f000 ff26 	bl	801093a <xTaskCreateStatic>
 800faee:	4603      	mov	r3, r0
 800faf0:	60fb      	str	r3, [r7, #12]
 800faf2:	e01c      	b.n	800fb2e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	685c      	ldr	r4, [r3, #4]
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800fb00:	b29e      	uxth	r6, r3
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800fb08:	4618      	mov	r0, r3
 800fb0a:	f7ff ff7c 	bl	800fa06 <makeFreeRtosPriority>
 800fb0e:	4602      	mov	r2, r0
 800fb10:	f107 030c 	add.w	r3, r7, #12
 800fb14:	9301      	str	r3, [sp, #4]
 800fb16:	9200      	str	r2, [sp, #0]
 800fb18:	683b      	ldr	r3, [r7, #0]
 800fb1a:	4632      	mov	r2, r6
 800fb1c:	4629      	mov	r1, r5
 800fb1e:	4620      	mov	r0, r4
 800fb20:	f000 ff6b 	bl	80109fa <xTaskCreate>
 800fb24:	4603      	mov	r3, r0
 800fb26:	2b01      	cmp	r3, #1
 800fb28:	d001      	beq.n	800fb2e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800fb2a:	2300      	movs	r3, #0
 800fb2c:	e000      	b.n	800fb30 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800fb2e:	68fb      	ldr	r3, [r7, #12]
}
 800fb30:	4618      	mov	r0, r3
 800fb32:	3714      	adds	r7, #20
 800fb34:	46bd      	mov	sp, r7
 800fb36:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fb38 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800fb38:	b580      	push	{r7, lr}
 800fb3a:	b084      	sub	sp, #16
 800fb3c:	af00      	add	r7, sp, #0
 800fb3e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800fb44:	68fb      	ldr	r3, [r7, #12]
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d001      	beq.n	800fb4e <osDelay+0x16>
 800fb4a:	68fb      	ldr	r3, [r7, #12]
 800fb4c:	e000      	b.n	800fb50 <osDelay+0x18>
 800fb4e:	2301      	movs	r3, #1
 800fb50:	4618      	mov	r0, r3
 800fb52:	f001 f895 	bl	8010c80 <vTaskDelay>
  
  return osOK;
 800fb56:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800fb58:	4618      	mov	r0, r3
 800fb5a:	3710      	adds	r7, #16
 800fb5c:	46bd      	mov	sp, r7
 800fb5e:	bd80      	pop	{r7, pc}

0800fb60 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800fb60:	b590      	push	{r4, r7, lr}
 800fb62:	b085      	sub	sp, #20
 800fb64:	af02      	add	r7, sp, #8
 800fb66:	6078      	str	r0, [r7, #4]
 800fb68:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	689b      	ldr	r3, [r3, #8]
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d012      	beq.n	800fb98 <osMessageCreate+0x38>
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	68db      	ldr	r3, [r3, #12]
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d00e      	beq.n	800fb98 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	6818      	ldr	r0, [r3, #0]
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	6859      	ldr	r1, [r3, #4]
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	689a      	ldr	r2, [r3, #8]
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	68dc      	ldr	r4, [r3, #12]
 800fb8a:	2300      	movs	r3, #0
 800fb8c:	9300      	str	r3, [sp, #0]
 800fb8e:	4623      	mov	r3, r4
 800fb90:	f000 f9e2 	bl	800ff58 <xQueueGenericCreateStatic>
 800fb94:	4603      	mov	r3, r0
 800fb96:	e008      	b.n	800fbaa <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	6818      	ldr	r0, [r3, #0]
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	685b      	ldr	r3, [r3, #4]
 800fba0:	2200      	movs	r2, #0
 800fba2:	4619      	mov	r1, r3
 800fba4:	f000 fa55 	bl	8010052 <xQueueGenericCreate>
 800fba8:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800fbaa:	4618      	mov	r0, r3
 800fbac:	370c      	adds	r7, #12
 800fbae:	46bd      	mov	sp, r7
 800fbb0:	bd90      	pop	{r4, r7, pc}
	...

0800fbb4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800fbb4:	b580      	push	{r7, lr}
 800fbb6:	b086      	sub	sp, #24
 800fbb8:	af00      	add	r7, sp, #0
 800fbba:	60f8      	str	r0, [r7, #12]
 800fbbc:	60b9      	str	r1, [r7, #8]
 800fbbe:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800fbc0:	2300      	movs	r3, #0
 800fbc2:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800fbc8:	697b      	ldr	r3, [r7, #20]
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d101      	bne.n	800fbd2 <osMessagePut+0x1e>
    ticks = 1;
 800fbce:	2301      	movs	r3, #1
 800fbd0:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800fbd2:	f7ff ff30 	bl	800fa36 <inHandlerMode>
 800fbd6:	4603      	mov	r3, r0
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	d018      	beq.n	800fc0e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800fbdc:	f107 0210 	add.w	r2, r7, #16
 800fbe0:	f107 0108 	add.w	r1, r7, #8
 800fbe4:	2300      	movs	r3, #0
 800fbe6:	68f8      	ldr	r0, [r7, #12]
 800fbe8:	f000 fb96 	bl	8010318 <xQueueGenericSendFromISR>
 800fbec:	4603      	mov	r3, r0
 800fbee:	2b01      	cmp	r3, #1
 800fbf0:	d001      	beq.n	800fbf6 <osMessagePut+0x42>
      return osErrorOS;
 800fbf2:	23ff      	movs	r3, #255	; 0xff
 800fbf4:	e018      	b.n	800fc28 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800fbf6:	693b      	ldr	r3, [r7, #16]
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	d014      	beq.n	800fc26 <osMessagePut+0x72>
 800fbfc:	4b0c      	ldr	r3, [pc, #48]	; (800fc30 <osMessagePut+0x7c>)
 800fbfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fc02:	601a      	str	r2, [r3, #0]
 800fc04:	f3bf 8f4f 	dsb	sy
 800fc08:	f3bf 8f6f 	isb	sy
 800fc0c:	e00b      	b.n	800fc26 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800fc0e:	f107 0108 	add.w	r1, r7, #8
 800fc12:	2300      	movs	r3, #0
 800fc14:	697a      	ldr	r2, [r7, #20]
 800fc16:	68f8      	ldr	r0, [r7, #12]
 800fc18:	f000 fa7c 	bl	8010114 <xQueueGenericSend>
 800fc1c:	4603      	mov	r3, r0
 800fc1e:	2b01      	cmp	r3, #1
 800fc20:	d001      	beq.n	800fc26 <osMessagePut+0x72>
      return osErrorOS;
 800fc22:	23ff      	movs	r3, #255	; 0xff
 800fc24:	e000      	b.n	800fc28 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800fc26:	2300      	movs	r3, #0
}
 800fc28:	4618      	mov	r0, r3
 800fc2a:	3718      	adds	r7, #24
 800fc2c:	46bd      	mov	sp, r7
 800fc2e:	bd80      	pop	{r7, pc}
 800fc30:	e000ed04 	.word	0xe000ed04

0800fc34 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800fc34:	b590      	push	{r4, r7, lr}
 800fc36:	b08b      	sub	sp, #44	; 0x2c
 800fc38:	af00      	add	r7, sp, #0
 800fc3a:	60f8      	str	r0, [r7, #12]
 800fc3c:	60b9      	str	r1, [r7, #8]
 800fc3e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800fc40:	68bb      	ldr	r3, [r7, #8]
 800fc42:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800fc44:	2300      	movs	r3, #0
 800fc46:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800fc48:	68bb      	ldr	r3, [r7, #8]
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	d10a      	bne.n	800fc64 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800fc4e:	2380      	movs	r3, #128	; 0x80
 800fc50:	617b      	str	r3, [r7, #20]
    return event;
 800fc52:	68fb      	ldr	r3, [r7, #12]
 800fc54:	461c      	mov	r4, r3
 800fc56:	f107 0314 	add.w	r3, r7, #20
 800fc5a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800fc5e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800fc62:	e054      	b.n	800fd0e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800fc64:	2300      	movs	r3, #0
 800fc66:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800fc68:	2300      	movs	r3, #0
 800fc6a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc72:	d103      	bne.n	800fc7c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800fc74:	f04f 33ff 	mov.w	r3, #4294967295
 800fc78:	627b      	str	r3, [r7, #36]	; 0x24
 800fc7a:	e009      	b.n	800fc90 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	d006      	beq.n	800fc90 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800fc86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d101      	bne.n	800fc90 <osMessageGet+0x5c>
      ticks = 1;
 800fc8c:	2301      	movs	r3, #1
 800fc8e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800fc90:	f7ff fed1 	bl	800fa36 <inHandlerMode>
 800fc94:	4603      	mov	r3, r0
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d01c      	beq.n	800fcd4 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800fc9a:	f107 0220 	add.w	r2, r7, #32
 800fc9e:	f107 0314 	add.w	r3, r7, #20
 800fca2:	3304      	adds	r3, #4
 800fca4:	4619      	mov	r1, r3
 800fca6:	68b8      	ldr	r0, [r7, #8]
 800fca8:	f000 fcb4 	bl	8010614 <xQueueReceiveFromISR>
 800fcac:	4603      	mov	r3, r0
 800fcae:	2b01      	cmp	r3, #1
 800fcb0:	d102      	bne.n	800fcb8 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800fcb2:	2310      	movs	r3, #16
 800fcb4:	617b      	str	r3, [r7, #20]
 800fcb6:	e001      	b.n	800fcbc <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800fcb8:	2300      	movs	r3, #0
 800fcba:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800fcbc:	6a3b      	ldr	r3, [r7, #32]
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d01d      	beq.n	800fcfe <osMessageGet+0xca>
 800fcc2:	4b15      	ldr	r3, [pc, #84]	; (800fd18 <osMessageGet+0xe4>)
 800fcc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fcc8:	601a      	str	r2, [r3, #0]
 800fcca:	f3bf 8f4f 	dsb	sy
 800fcce:	f3bf 8f6f 	isb	sy
 800fcd2:	e014      	b.n	800fcfe <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800fcd4:	f107 0314 	add.w	r3, r7, #20
 800fcd8:	3304      	adds	r3, #4
 800fcda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fcdc:	4619      	mov	r1, r3
 800fcde:	68b8      	ldr	r0, [r7, #8]
 800fce0:	f000 fbb6 	bl	8010450 <xQueueReceive>
 800fce4:	4603      	mov	r3, r0
 800fce6:	2b01      	cmp	r3, #1
 800fce8:	d102      	bne.n	800fcf0 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800fcea:	2310      	movs	r3, #16
 800fcec:	617b      	str	r3, [r7, #20]
 800fcee:	e006      	b.n	800fcfe <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800fcf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d101      	bne.n	800fcfa <osMessageGet+0xc6>
 800fcf6:	2300      	movs	r3, #0
 800fcf8:	e000      	b.n	800fcfc <osMessageGet+0xc8>
 800fcfa:	2340      	movs	r3, #64	; 0x40
 800fcfc:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800fcfe:	68fb      	ldr	r3, [r7, #12]
 800fd00:	461c      	mov	r4, r3
 800fd02:	f107 0314 	add.w	r3, r7, #20
 800fd06:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800fd0a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800fd0e:	68f8      	ldr	r0, [r7, #12]
 800fd10:	372c      	adds	r7, #44	; 0x2c
 800fd12:	46bd      	mov	sp, r7
 800fd14:	bd90      	pop	{r4, r7, pc}
 800fd16:	bf00      	nop
 800fd18:	e000ed04 	.word	0xe000ed04

0800fd1c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800fd1c:	b480      	push	{r7}
 800fd1e:	b083      	sub	sp, #12
 800fd20:	af00      	add	r7, sp, #0
 800fd22:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	f103 0208 	add.w	r2, r3, #8
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	f04f 32ff 	mov.w	r2, #4294967295
 800fd34:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	f103 0208 	add.w	r2, r3, #8
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	f103 0208 	add.w	r2, r3, #8
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	2200      	movs	r2, #0
 800fd4e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800fd50:	bf00      	nop
 800fd52:	370c      	adds	r7, #12
 800fd54:	46bd      	mov	sp, r7
 800fd56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd5a:	4770      	bx	lr

0800fd5c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800fd5c:	b480      	push	{r7}
 800fd5e:	b083      	sub	sp, #12
 800fd60:	af00      	add	r7, sp, #0
 800fd62:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	2200      	movs	r2, #0
 800fd68:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800fd6a:	bf00      	nop
 800fd6c:	370c      	adds	r7, #12
 800fd6e:	46bd      	mov	sp, r7
 800fd70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd74:	4770      	bx	lr

0800fd76 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800fd76:	b480      	push	{r7}
 800fd78:	b085      	sub	sp, #20
 800fd7a:	af00      	add	r7, sp, #0
 800fd7c:	6078      	str	r0, [r7, #4]
 800fd7e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	685b      	ldr	r3, [r3, #4]
 800fd84:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800fd86:	683b      	ldr	r3, [r7, #0]
 800fd88:	68fa      	ldr	r2, [r7, #12]
 800fd8a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800fd8c:	68fb      	ldr	r3, [r7, #12]
 800fd8e:	689a      	ldr	r2, [r3, #8]
 800fd90:	683b      	ldr	r3, [r7, #0]
 800fd92:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800fd94:	68fb      	ldr	r3, [r7, #12]
 800fd96:	689b      	ldr	r3, [r3, #8]
 800fd98:	683a      	ldr	r2, [r7, #0]
 800fd9a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800fd9c:	68fb      	ldr	r3, [r7, #12]
 800fd9e:	683a      	ldr	r2, [r7, #0]
 800fda0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800fda2:	683b      	ldr	r3, [r7, #0]
 800fda4:	687a      	ldr	r2, [r7, #4]
 800fda6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	681b      	ldr	r3, [r3, #0]
 800fdac:	1c5a      	adds	r2, r3, #1
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	601a      	str	r2, [r3, #0]
}
 800fdb2:	bf00      	nop
 800fdb4:	3714      	adds	r7, #20
 800fdb6:	46bd      	mov	sp, r7
 800fdb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdbc:	4770      	bx	lr

0800fdbe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800fdbe:	b480      	push	{r7}
 800fdc0:	b085      	sub	sp, #20
 800fdc2:	af00      	add	r7, sp, #0
 800fdc4:	6078      	str	r0, [r7, #4]
 800fdc6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800fdc8:	683b      	ldr	r3, [r7, #0]
 800fdca:	681b      	ldr	r3, [r3, #0]
 800fdcc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800fdce:	68bb      	ldr	r3, [r7, #8]
 800fdd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fdd4:	d103      	bne.n	800fdde <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	691b      	ldr	r3, [r3, #16]
 800fdda:	60fb      	str	r3, [r7, #12]
 800fddc:	e00c      	b.n	800fdf8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	3308      	adds	r3, #8
 800fde2:	60fb      	str	r3, [r7, #12]
 800fde4:	e002      	b.n	800fdec <vListInsert+0x2e>
 800fde6:	68fb      	ldr	r3, [r7, #12]
 800fde8:	685b      	ldr	r3, [r3, #4]
 800fdea:	60fb      	str	r3, [r7, #12]
 800fdec:	68fb      	ldr	r3, [r7, #12]
 800fdee:	685b      	ldr	r3, [r3, #4]
 800fdf0:	681b      	ldr	r3, [r3, #0]
 800fdf2:	68ba      	ldr	r2, [r7, #8]
 800fdf4:	429a      	cmp	r2, r3
 800fdf6:	d2f6      	bcs.n	800fde6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800fdf8:	68fb      	ldr	r3, [r7, #12]
 800fdfa:	685a      	ldr	r2, [r3, #4]
 800fdfc:	683b      	ldr	r3, [r7, #0]
 800fdfe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800fe00:	683b      	ldr	r3, [r7, #0]
 800fe02:	685b      	ldr	r3, [r3, #4]
 800fe04:	683a      	ldr	r2, [r7, #0]
 800fe06:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800fe08:	683b      	ldr	r3, [r7, #0]
 800fe0a:	68fa      	ldr	r2, [r7, #12]
 800fe0c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800fe0e:	68fb      	ldr	r3, [r7, #12]
 800fe10:	683a      	ldr	r2, [r7, #0]
 800fe12:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800fe14:	683b      	ldr	r3, [r7, #0]
 800fe16:	687a      	ldr	r2, [r7, #4]
 800fe18:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	681b      	ldr	r3, [r3, #0]
 800fe1e:	1c5a      	adds	r2, r3, #1
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	601a      	str	r2, [r3, #0]
}
 800fe24:	bf00      	nop
 800fe26:	3714      	adds	r7, #20
 800fe28:	46bd      	mov	sp, r7
 800fe2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe2e:	4770      	bx	lr

0800fe30 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800fe30:	b480      	push	{r7}
 800fe32:	b085      	sub	sp, #20
 800fe34:	af00      	add	r7, sp, #0
 800fe36:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	691b      	ldr	r3, [r3, #16]
 800fe3c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	685b      	ldr	r3, [r3, #4]
 800fe42:	687a      	ldr	r2, [r7, #4]
 800fe44:	6892      	ldr	r2, [r2, #8]
 800fe46:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	689b      	ldr	r3, [r3, #8]
 800fe4c:	687a      	ldr	r2, [r7, #4]
 800fe4e:	6852      	ldr	r2, [r2, #4]
 800fe50:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800fe52:	68fb      	ldr	r3, [r7, #12]
 800fe54:	685b      	ldr	r3, [r3, #4]
 800fe56:	687a      	ldr	r2, [r7, #4]
 800fe58:	429a      	cmp	r2, r3
 800fe5a:	d103      	bne.n	800fe64 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	689a      	ldr	r2, [r3, #8]
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	2200      	movs	r2, #0
 800fe68:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800fe6a:	68fb      	ldr	r3, [r7, #12]
 800fe6c:	681b      	ldr	r3, [r3, #0]
 800fe6e:	1e5a      	subs	r2, r3, #1
 800fe70:	68fb      	ldr	r3, [r7, #12]
 800fe72:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	681b      	ldr	r3, [r3, #0]
}
 800fe78:	4618      	mov	r0, r3
 800fe7a:	3714      	adds	r7, #20
 800fe7c:	46bd      	mov	sp, r7
 800fe7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe82:	4770      	bx	lr

0800fe84 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800fe84:	b580      	push	{r7, lr}
 800fe86:	b084      	sub	sp, #16
 800fe88:	af00      	add	r7, sp, #0
 800fe8a:	6078      	str	r0, [r7, #4]
 800fe8c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800fe92:	68fb      	ldr	r3, [r7, #12]
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	d10b      	bne.n	800feb0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800fe98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe9c:	b672      	cpsid	i
 800fe9e:	f383 8811 	msr	BASEPRI, r3
 800fea2:	f3bf 8f6f 	isb	sy
 800fea6:	f3bf 8f4f 	dsb	sy
 800feaa:	b662      	cpsie	i
 800feac:	60bb      	str	r3, [r7, #8]
 800feae:	e7fe      	b.n	800feae <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 800feb0:	f001 fd82 	bl	80119b8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800feb4:	68fb      	ldr	r3, [r7, #12]
 800feb6:	681a      	ldr	r2, [r3, #0]
 800feb8:	68fb      	ldr	r3, [r7, #12]
 800feba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800febc:	68f9      	ldr	r1, [r7, #12]
 800febe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800fec0:	fb01 f303 	mul.w	r3, r1, r3
 800fec4:	441a      	add	r2, r3
 800fec6:	68fb      	ldr	r3, [r7, #12]
 800fec8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800feca:	68fb      	ldr	r3, [r7, #12]
 800fecc:	2200      	movs	r2, #0
 800fece:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800fed0:	68fb      	ldr	r3, [r7, #12]
 800fed2:	681a      	ldr	r2, [r3, #0]
 800fed4:	68fb      	ldr	r3, [r7, #12]
 800fed6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fed8:	68fb      	ldr	r3, [r7, #12]
 800feda:	681a      	ldr	r2, [r3, #0]
 800fedc:	68fb      	ldr	r3, [r7, #12]
 800fede:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fee0:	3b01      	subs	r3, #1
 800fee2:	68f9      	ldr	r1, [r7, #12]
 800fee4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800fee6:	fb01 f303 	mul.w	r3, r1, r3
 800feea:	441a      	add	r2, r3
 800feec:	68fb      	ldr	r3, [r7, #12]
 800feee:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800fef0:	68fb      	ldr	r3, [r7, #12]
 800fef2:	22ff      	movs	r2, #255	; 0xff
 800fef4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800fef8:	68fb      	ldr	r3, [r7, #12]
 800fefa:	22ff      	movs	r2, #255	; 0xff
 800fefc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800ff00:	683b      	ldr	r3, [r7, #0]
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	d114      	bne.n	800ff30 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ff06:	68fb      	ldr	r3, [r7, #12]
 800ff08:	691b      	ldr	r3, [r3, #16]
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d01a      	beq.n	800ff44 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ff0e:	68fb      	ldr	r3, [r7, #12]
 800ff10:	3310      	adds	r3, #16
 800ff12:	4618      	mov	r0, r3
 800ff14:	f001 f97c 	bl	8011210 <xTaskRemoveFromEventList>
 800ff18:	4603      	mov	r3, r0
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d012      	beq.n	800ff44 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ff1e:	4b0d      	ldr	r3, [pc, #52]	; (800ff54 <xQueueGenericReset+0xd0>)
 800ff20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ff24:	601a      	str	r2, [r3, #0]
 800ff26:	f3bf 8f4f 	dsb	sy
 800ff2a:	f3bf 8f6f 	isb	sy
 800ff2e:	e009      	b.n	800ff44 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	3310      	adds	r3, #16
 800ff34:	4618      	mov	r0, r3
 800ff36:	f7ff fef1 	bl	800fd1c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ff3a:	68fb      	ldr	r3, [r7, #12]
 800ff3c:	3324      	adds	r3, #36	; 0x24
 800ff3e:	4618      	mov	r0, r3
 800ff40:	f7ff feec 	bl	800fd1c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ff44:	f001 fd6a 	bl	8011a1c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ff48:	2301      	movs	r3, #1
}
 800ff4a:	4618      	mov	r0, r3
 800ff4c:	3710      	adds	r7, #16
 800ff4e:	46bd      	mov	sp, r7
 800ff50:	bd80      	pop	{r7, pc}
 800ff52:	bf00      	nop
 800ff54:	e000ed04 	.word	0xe000ed04

0800ff58 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ff58:	b580      	push	{r7, lr}
 800ff5a:	b08e      	sub	sp, #56	; 0x38
 800ff5c:	af02      	add	r7, sp, #8
 800ff5e:	60f8      	str	r0, [r7, #12]
 800ff60:	60b9      	str	r1, [r7, #8]
 800ff62:	607a      	str	r2, [r7, #4]
 800ff64:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ff66:	68fb      	ldr	r3, [r7, #12]
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d10b      	bne.n	800ff84 <xQueueGenericCreateStatic+0x2c>
 800ff6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff70:	b672      	cpsid	i
 800ff72:	f383 8811 	msr	BASEPRI, r3
 800ff76:	f3bf 8f6f 	isb	sy
 800ff7a:	f3bf 8f4f 	dsb	sy
 800ff7e:	b662      	cpsie	i
 800ff80:	62bb      	str	r3, [r7, #40]	; 0x28
 800ff82:	e7fe      	b.n	800ff82 <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ff84:	683b      	ldr	r3, [r7, #0]
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d10b      	bne.n	800ffa2 <xQueueGenericCreateStatic+0x4a>
 800ff8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff8e:	b672      	cpsid	i
 800ff90:	f383 8811 	msr	BASEPRI, r3
 800ff94:	f3bf 8f6f 	isb	sy
 800ff98:	f3bf 8f4f 	dsb	sy
 800ff9c:	b662      	cpsie	i
 800ff9e:	627b      	str	r3, [r7, #36]	; 0x24
 800ffa0:	e7fe      	b.n	800ffa0 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d002      	beq.n	800ffae <xQueueGenericCreateStatic+0x56>
 800ffa8:	68bb      	ldr	r3, [r7, #8]
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	d001      	beq.n	800ffb2 <xQueueGenericCreateStatic+0x5a>
 800ffae:	2301      	movs	r3, #1
 800ffb0:	e000      	b.n	800ffb4 <xQueueGenericCreateStatic+0x5c>
 800ffb2:	2300      	movs	r3, #0
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	d10b      	bne.n	800ffd0 <xQueueGenericCreateStatic+0x78>
 800ffb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffbc:	b672      	cpsid	i
 800ffbe:	f383 8811 	msr	BASEPRI, r3
 800ffc2:	f3bf 8f6f 	isb	sy
 800ffc6:	f3bf 8f4f 	dsb	sy
 800ffca:	b662      	cpsie	i
 800ffcc:	623b      	str	r3, [r7, #32]
 800ffce:	e7fe      	b.n	800ffce <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	d102      	bne.n	800ffdc <xQueueGenericCreateStatic+0x84>
 800ffd6:	68bb      	ldr	r3, [r7, #8]
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	d101      	bne.n	800ffe0 <xQueueGenericCreateStatic+0x88>
 800ffdc:	2301      	movs	r3, #1
 800ffde:	e000      	b.n	800ffe2 <xQueueGenericCreateStatic+0x8a>
 800ffe0:	2300      	movs	r3, #0
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d10b      	bne.n	800fffe <xQueueGenericCreateStatic+0xa6>
 800ffe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffea:	b672      	cpsid	i
 800ffec:	f383 8811 	msr	BASEPRI, r3
 800fff0:	f3bf 8f6f 	isb	sy
 800fff4:	f3bf 8f4f 	dsb	sy
 800fff8:	b662      	cpsie	i
 800fffa:	61fb      	str	r3, [r7, #28]
 800fffc:	e7fe      	b.n	800fffc <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800fffe:	2348      	movs	r3, #72	; 0x48
 8010000:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8010002:	697b      	ldr	r3, [r7, #20]
 8010004:	2b48      	cmp	r3, #72	; 0x48
 8010006:	d00b      	beq.n	8010020 <xQueueGenericCreateStatic+0xc8>
 8010008:	f04f 0350 	mov.w	r3, #80	; 0x50
 801000c:	b672      	cpsid	i
 801000e:	f383 8811 	msr	BASEPRI, r3
 8010012:	f3bf 8f6f 	isb	sy
 8010016:	f3bf 8f4f 	dsb	sy
 801001a:	b662      	cpsie	i
 801001c:	61bb      	str	r3, [r7, #24]
 801001e:	e7fe      	b.n	801001e <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8010020:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010022:	683b      	ldr	r3, [r7, #0]
 8010024:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8010026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010028:	2b00      	cmp	r3, #0
 801002a:	d00d      	beq.n	8010048 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801002c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801002e:	2201      	movs	r2, #1
 8010030:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010034:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8010038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801003a:	9300      	str	r3, [sp, #0]
 801003c:	4613      	mov	r3, r2
 801003e:	687a      	ldr	r2, [r7, #4]
 8010040:	68b9      	ldr	r1, [r7, #8]
 8010042:	68f8      	ldr	r0, [r7, #12]
 8010044:	f000 f846 	bl	80100d4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8010048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 801004a:	4618      	mov	r0, r3
 801004c:	3730      	adds	r7, #48	; 0x30
 801004e:	46bd      	mov	sp, r7
 8010050:	bd80      	pop	{r7, pc}

08010052 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8010052:	b580      	push	{r7, lr}
 8010054:	b08a      	sub	sp, #40	; 0x28
 8010056:	af02      	add	r7, sp, #8
 8010058:	60f8      	str	r0, [r7, #12]
 801005a:	60b9      	str	r1, [r7, #8]
 801005c:	4613      	mov	r3, r2
 801005e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010060:	68fb      	ldr	r3, [r7, #12]
 8010062:	2b00      	cmp	r3, #0
 8010064:	d10b      	bne.n	801007e <xQueueGenericCreate+0x2c>
 8010066:	f04f 0350 	mov.w	r3, #80	; 0x50
 801006a:	b672      	cpsid	i
 801006c:	f383 8811 	msr	BASEPRI, r3
 8010070:	f3bf 8f6f 	isb	sy
 8010074:	f3bf 8f4f 	dsb	sy
 8010078:	b662      	cpsie	i
 801007a:	613b      	str	r3, [r7, #16]
 801007c:	e7fe      	b.n	801007c <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 801007e:	68bb      	ldr	r3, [r7, #8]
 8010080:	2b00      	cmp	r3, #0
 8010082:	d102      	bne.n	801008a <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8010084:	2300      	movs	r3, #0
 8010086:	61fb      	str	r3, [r7, #28]
 8010088:	e004      	b.n	8010094 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801008a:	68fb      	ldr	r3, [r7, #12]
 801008c:	68ba      	ldr	r2, [r7, #8]
 801008e:	fb02 f303 	mul.w	r3, r2, r3
 8010092:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8010094:	69fb      	ldr	r3, [r7, #28]
 8010096:	3348      	adds	r3, #72	; 0x48
 8010098:	4618      	mov	r0, r3
 801009a:	f001 fdaf 	bl	8011bfc <pvPortMalloc>
 801009e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80100a0:	69bb      	ldr	r3, [r7, #24]
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d011      	beq.n	80100ca <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80100a6:	69bb      	ldr	r3, [r7, #24]
 80100a8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80100aa:	697b      	ldr	r3, [r7, #20]
 80100ac:	3348      	adds	r3, #72	; 0x48
 80100ae:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80100b0:	69bb      	ldr	r3, [r7, #24]
 80100b2:	2200      	movs	r2, #0
 80100b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80100b8:	79fa      	ldrb	r2, [r7, #7]
 80100ba:	69bb      	ldr	r3, [r7, #24]
 80100bc:	9300      	str	r3, [sp, #0]
 80100be:	4613      	mov	r3, r2
 80100c0:	697a      	ldr	r2, [r7, #20]
 80100c2:	68b9      	ldr	r1, [r7, #8]
 80100c4:	68f8      	ldr	r0, [r7, #12]
 80100c6:	f000 f805 	bl	80100d4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80100ca:	69bb      	ldr	r3, [r7, #24]
	}
 80100cc:	4618      	mov	r0, r3
 80100ce:	3720      	adds	r7, #32
 80100d0:	46bd      	mov	sp, r7
 80100d2:	bd80      	pop	{r7, pc}

080100d4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80100d4:	b580      	push	{r7, lr}
 80100d6:	b084      	sub	sp, #16
 80100d8:	af00      	add	r7, sp, #0
 80100da:	60f8      	str	r0, [r7, #12]
 80100dc:	60b9      	str	r1, [r7, #8]
 80100de:	607a      	str	r2, [r7, #4]
 80100e0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80100e2:	68bb      	ldr	r3, [r7, #8]
 80100e4:	2b00      	cmp	r3, #0
 80100e6:	d103      	bne.n	80100f0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80100e8:	69bb      	ldr	r3, [r7, #24]
 80100ea:	69ba      	ldr	r2, [r7, #24]
 80100ec:	601a      	str	r2, [r3, #0]
 80100ee:	e002      	b.n	80100f6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80100f0:	69bb      	ldr	r3, [r7, #24]
 80100f2:	687a      	ldr	r2, [r7, #4]
 80100f4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80100f6:	69bb      	ldr	r3, [r7, #24]
 80100f8:	68fa      	ldr	r2, [r7, #12]
 80100fa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80100fc:	69bb      	ldr	r3, [r7, #24]
 80100fe:	68ba      	ldr	r2, [r7, #8]
 8010100:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8010102:	2101      	movs	r1, #1
 8010104:	69b8      	ldr	r0, [r7, #24]
 8010106:	f7ff febd 	bl	800fe84 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801010a:	bf00      	nop
 801010c:	3710      	adds	r7, #16
 801010e:	46bd      	mov	sp, r7
 8010110:	bd80      	pop	{r7, pc}
	...

08010114 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8010114:	b580      	push	{r7, lr}
 8010116:	b08e      	sub	sp, #56	; 0x38
 8010118:	af00      	add	r7, sp, #0
 801011a:	60f8      	str	r0, [r7, #12]
 801011c:	60b9      	str	r1, [r7, #8]
 801011e:	607a      	str	r2, [r7, #4]
 8010120:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8010122:	2300      	movs	r3, #0
 8010124:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010126:	68fb      	ldr	r3, [r7, #12]
 8010128:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801012a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801012c:	2b00      	cmp	r3, #0
 801012e:	d10b      	bne.n	8010148 <xQueueGenericSend+0x34>
 8010130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010134:	b672      	cpsid	i
 8010136:	f383 8811 	msr	BASEPRI, r3
 801013a:	f3bf 8f6f 	isb	sy
 801013e:	f3bf 8f4f 	dsb	sy
 8010142:	b662      	cpsie	i
 8010144:	62bb      	str	r3, [r7, #40]	; 0x28
 8010146:	e7fe      	b.n	8010146 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010148:	68bb      	ldr	r3, [r7, #8]
 801014a:	2b00      	cmp	r3, #0
 801014c:	d103      	bne.n	8010156 <xQueueGenericSend+0x42>
 801014e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010152:	2b00      	cmp	r3, #0
 8010154:	d101      	bne.n	801015a <xQueueGenericSend+0x46>
 8010156:	2301      	movs	r3, #1
 8010158:	e000      	b.n	801015c <xQueueGenericSend+0x48>
 801015a:	2300      	movs	r3, #0
 801015c:	2b00      	cmp	r3, #0
 801015e:	d10b      	bne.n	8010178 <xQueueGenericSend+0x64>
 8010160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010164:	b672      	cpsid	i
 8010166:	f383 8811 	msr	BASEPRI, r3
 801016a:	f3bf 8f6f 	isb	sy
 801016e:	f3bf 8f4f 	dsb	sy
 8010172:	b662      	cpsie	i
 8010174:	627b      	str	r3, [r7, #36]	; 0x24
 8010176:	e7fe      	b.n	8010176 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010178:	683b      	ldr	r3, [r7, #0]
 801017a:	2b02      	cmp	r3, #2
 801017c:	d103      	bne.n	8010186 <xQueueGenericSend+0x72>
 801017e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010182:	2b01      	cmp	r3, #1
 8010184:	d101      	bne.n	801018a <xQueueGenericSend+0x76>
 8010186:	2301      	movs	r3, #1
 8010188:	e000      	b.n	801018c <xQueueGenericSend+0x78>
 801018a:	2300      	movs	r3, #0
 801018c:	2b00      	cmp	r3, #0
 801018e:	d10b      	bne.n	80101a8 <xQueueGenericSend+0x94>
 8010190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010194:	b672      	cpsid	i
 8010196:	f383 8811 	msr	BASEPRI, r3
 801019a:	f3bf 8f6f 	isb	sy
 801019e:	f3bf 8f4f 	dsb	sy
 80101a2:	b662      	cpsie	i
 80101a4:	623b      	str	r3, [r7, #32]
 80101a6:	e7fe      	b.n	80101a6 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80101a8:	f001 f9f2 	bl	8011590 <xTaskGetSchedulerState>
 80101ac:	4603      	mov	r3, r0
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	d102      	bne.n	80101b8 <xQueueGenericSend+0xa4>
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	d101      	bne.n	80101bc <xQueueGenericSend+0xa8>
 80101b8:	2301      	movs	r3, #1
 80101ba:	e000      	b.n	80101be <xQueueGenericSend+0xaa>
 80101bc:	2300      	movs	r3, #0
 80101be:	2b00      	cmp	r3, #0
 80101c0:	d10b      	bne.n	80101da <xQueueGenericSend+0xc6>
 80101c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101c6:	b672      	cpsid	i
 80101c8:	f383 8811 	msr	BASEPRI, r3
 80101cc:	f3bf 8f6f 	isb	sy
 80101d0:	f3bf 8f4f 	dsb	sy
 80101d4:	b662      	cpsie	i
 80101d6:	61fb      	str	r3, [r7, #28]
 80101d8:	e7fe      	b.n	80101d8 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80101da:	f001 fbed 	bl	80119b8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80101de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80101e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80101e6:	429a      	cmp	r2, r3
 80101e8:	d302      	bcc.n	80101f0 <xQueueGenericSend+0xdc>
 80101ea:	683b      	ldr	r3, [r7, #0]
 80101ec:	2b02      	cmp	r3, #2
 80101ee:	d129      	bne.n	8010244 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80101f0:	683a      	ldr	r2, [r7, #0]
 80101f2:	68b9      	ldr	r1, [r7, #8]
 80101f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80101f6:	f000 fa90 	bl	801071a <prvCopyDataToQueue>
 80101fa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80101fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010200:	2b00      	cmp	r3, #0
 8010202:	d010      	beq.n	8010226 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010206:	3324      	adds	r3, #36	; 0x24
 8010208:	4618      	mov	r0, r3
 801020a:	f001 f801 	bl	8011210 <xTaskRemoveFromEventList>
 801020e:	4603      	mov	r3, r0
 8010210:	2b00      	cmp	r3, #0
 8010212:	d013      	beq.n	801023c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8010214:	4b3f      	ldr	r3, [pc, #252]	; (8010314 <xQueueGenericSend+0x200>)
 8010216:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801021a:	601a      	str	r2, [r3, #0]
 801021c:	f3bf 8f4f 	dsb	sy
 8010220:	f3bf 8f6f 	isb	sy
 8010224:	e00a      	b.n	801023c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8010226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010228:	2b00      	cmp	r3, #0
 801022a:	d007      	beq.n	801023c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 801022c:	4b39      	ldr	r3, [pc, #228]	; (8010314 <xQueueGenericSend+0x200>)
 801022e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010232:	601a      	str	r2, [r3, #0]
 8010234:	f3bf 8f4f 	dsb	sy
 8010238:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 801023c:	f001 fbee 	bl	8011a1c <vPortExitCritical>
				return pdPASS;
 8010240:	2301      	movs	r3, #1
 8010242:	e063      	b.n	801030c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	2b00      	cmp	r3, #0
 8010248:	d103      	bne.n	8010252 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801024a:	f001 fbe7 	bl	8011a1c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801024e:	2300      	movs	r3, #0
 8010250:	e05c      	b.n	801030c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010254:	2b00      	cmp	r3, #0
 8010256:	d106      	bne.n	8010266 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010258:	f107 0314 	add.w	r3, r7, #20
 801025c:	4618      	mov	r0, r3
 801025e:	f001 f83b 	bl	80112d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010262:	2301      	movs	r3, #1
 8010264:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010266:	f001 fbd9 	bl	8011a1c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801026a:	f000 fda1 	bl	8010db0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801026e:	f001 fba3 	bl	80119b8 <vPortEnterCritical>
 8010272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010274:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010278:	b25b      	sxtb	r3, r3
 801027a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801027e:	d103      	bne.n	8010288 <xQueueGenericSend+0x174>
 8010280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010282:	2200      	movs	r2, #0
 8010284:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801028a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801028e:	b25b      	sxtb	r3, r3
 8010290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010294:	d103      	bne.n	801029e <xQueueGenericSend+0x18a>
 8010296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010298:	2200      	movs	r2, #0
 801029a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801029e:	f001 fbbd 	bl	8011a1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80102a2:	1d3a      	adds	r2, r7, #4
 80102a4:	f107 0314 	add.w	r3, r7, #20
 80102a8:	4611      	mov	r1, r2
 80102aa:	4618      	mov	r0, r3
 80102ac:	f001 f82a 	bl	8011304 <xTaskCheckForTimeOut>
 80102b0:	4603      	mov	r3, r0
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	d124      	bne.n	8010300 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80102b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80102b8:	f000 fb27 	bl	801090a <prvIsQueueFull>
 80102bc:	4603      	mov	r3, r0
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d018      	beq.n	80102f4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80102c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102c4:	3310      	adds	r3, #16
 80102c6:	687a      	ldr	r2, [r7, #4]
 80102c8:	4611      	mov	r1, r2
 80102ca:	4618      	mov	r0, r3
 80102cc:	f000 ff7a 	bl	80111c4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80102d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80102d2:	f000 fab2 	bl	801083a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80102d6:	f000 fd79 	bl	8010dcc <xTaskResumeAll>
 80102da:	4603      	mov	r3, r0
 80102dc:	2b00      	cmp	r3, #0
 80102de:	f47f af7c 	bne.w	80101da <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80102e2:	4b0c      	ldr	r3, [pc, #48]	; (8010314 <xQueueGenericSend+0x200>)
 80102e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80102e8:	601a      	str	r2, [r3, #0]
 80102ea:	f3bf 8f4f 	dsb	sy
 80102ee:	f3bf 8f6f 	isb	sy
 80102f2:	e772      	b.n	80101da <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80102f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80102f6:	f000 faa0 	bl	801083a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80102fa:	f000 fd67 	bl	8010dcc <xTaskResumeAll>
 80102fe:	e76c      	b.n	80101da <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8010300:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010302:	f000 fa9a 	bl	801083a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010306:	f000 fd61 	bl	8010dcc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801030a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 801030c:	4618      	mov	r0, r3
 801030e:	3738      	adds	r7, #56	; 0x38
 8010310:	46bd      	mov	sp, r7
 8010312:	bd80      	pop	{r7, pc}
 8010314:	e000ed04 	.word	0xe000ed04

08010318 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8010318:	b580      	push	{r7, lr}
 801031a:	b08e      	sub	sp, #56	; 0x38
 801031c:	af00      	add	r7, sp, #0
 801031e:	60f8      	str	r0, [r7, #12]
 8010320:	60b9      	str	r1, [r7, #8]
 8010322:	607a      	str	r2, [r7, #4]
 8010324:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010326:	68fb      	ldr	r3, [r7, #12]
 8010328:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801032a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801032c:	2b00      	cmp	r3, #0
 801032e:	d10b      	bne.n	8010348 <xQueueGenericSendFromISR+0x30>
 8010330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010334:	b672      	cpsid	i
 8010336:	f383 8811 	msr	BASEPRI, r3
 801033a:	f3bf 8f6f 	isb	sy
 801033e:	f3bf 8f4f 	dsb	sy
 8010342:	b662      	cpsie	i
 8010344:	627b      	str	r3, [r7, #36]	; 0x24
 8010346:	e7fe      	b.n	8010346 <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010348:	68bb      	ldr	r3, [r7, #8]
 801034a:	2b00      	cmp	r3, #0
 801034c:	d103      	bne.n	8010356 <xQueueGenericSendFromISR+0x3e>
 801034e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010352:	2b00      	cmp	r3, #0
 8010354:	d101      	bne.n	801035a <xQueueGenericSendFromISR+0x42>
 8010356:	2301      	movs	r3, #1
 8010358:	e000      	b.n	801035c <xQueueGenericSendFromISR+0x44>
 801035a:	2300      	movs	r3, #0
 801035c:	2b00      	cmp	r3, #0
 801035e:	d10b      	bne.n	8010378 <xQueueGenericSendFromISR+0x60>
 8010360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010364:	b672      	cpsid	i
 8010366:	f383 8811 	msr	BASEPRI, r3
 801036a:	f3bf 8f6f 	isb	sy
 801036e:	f3bf 8f4f 	dsb	sy
 8010372:	b662      	cpsie	i
 8010374:	623b      	str	r3, [r7, #32]
 8010376:	e7fe      	b.n	8010376 <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010378:	683b      	ldr	r3, [r7, #0]
 801037a:	2b02      	cmp	r3, #2
 801037c:	d103      	bne.n	8010386 <xQueueGenericSendFromISR+0x6e>
 801037e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010382:	2b01      	cmp	r3, #1
 8010384:	d101      	bne.n	801038a <xQueueGenericSendFromISR+0x72>
 8010386:	2301      	movs	r3, #1
 8010388:	e000      	b.n	801038c <xQueueGenericSendFromISR+0x74>
 801038a:	2300      	movs	r3, #0
 801038c:	2b00      	cmp	r3, #0
 801038e:	d10b      	bne.n	80103a8 <xQueueGenericSendFromISR+0x90>
 8010390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010394:	b672      	cpsid	i
 8010396:	f383 8811 	msr	BASEPRI, r3
 801039a:	f3bf 8f6f 	isb	sy
 801039e:	f3bf 8f4f 	dsb	sy
 80103a2:	b662      	cpsie	i
 80103a4:	61fb      	str	r3, [r7, #28]
 80103a6:	e7fe      	b.n	80103a6 <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80103a8:	f001 fbe6 	bl	8011b78 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80103ac:	f3ef 8211 	mrs	r2, BASEPRI
 80103b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103b4:	b672      	cpsid	i
 80103b6:	f383 8811 	msr	BASEPRI, r3
 80103ba:	f3bf 8f6f 	isb	sy
 80103be:	f3bf 8f4f 	dsb	sy
 80103c2:	b662      	cpsie	i
 80103c4:	61ba      	str	r2, [r7, #24]
 80103c6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80103c8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80103ca:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80103cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80103d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80103d4:	429a      	cmp	r2, r3
 80103d6:	d302      	bcc.n	80103de <xQueueGenericSendFromISR+0xc6>
 80103d8:	683b      	ldr	r3, [r7, #0]
 80103da:	2b02      	cmp	r3, #2
 80103dc:	d12c      	bne.n	8010438 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80103de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80103e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80103e8:	683a      	ldr	r2, [r7, #0]
 80103ea:	68b9      	ldr	r1, [r7, #8]
 80103ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80103ee:	f000 f994 	bl	801071a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80103f2:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80103f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80103fa:	d112      	bne.n	8010422 <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80103fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010400:	2b00      	cmp	r3, #0
 8010402:	d016      	beq.n	8010432 <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010406:	3324      	adds	r3, #36	; 0x24
 8010408:	4618      	mov	r0, r3
 801040a:	f000 ff01 	bl	8011210 <xTaskRemoveFromEventList>
 801040e:	4603      	mov	r3, r0
 8010410:	2b00      	cmp	r3, #0
 8010412:	d00e      	beq.n	8010432 <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	2b00      	cmp	r3, #0
 8010418:	d00b      	beq.n	8010432 <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	2201      	movs	r2, #1
 801041e:	601a      	str	r2, [r3, #0]
 8010420:	e007      	b.n	8010432 <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010422:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8010426:	3301      	adds	r3, #1
 8010428:	b2db      	uxtb	r3, r3
 801042a:	b25a      	sxtb	r2, r3
 801042c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801042e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8010432:	2301      	movs	r3, #1
 8010434:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8010436:	e001      	b.n	801043c <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010438:	2300      	movs	r3, #0
 801043a:	637b      	str	r3, [r7, #52]	; 0x34
 801043c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801043e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8010440:	693b      	ldr	r3, [r7, #16]
 8010442:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010448:	4618      	mov	r0, r3
 801044a:	3738      	adds	r7, #56	; 0x38
 801044c:	46bd      	mov	sp, r7
 801044e:	bd80      	pop	{r7, pc}

08010450 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8010450:	b580      	push	{r7, lr}
 8010452:	b08c      	sub	sp, #48	; 0x30
 8010454:	af00      	add	r7, sp, #0
 8010456:	60f8      	str	r0, [r7, #12]
 8010458:	60b9      	str	r1, [r7, #8]
 801045a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 801045c:	2300      	movs	r3, #0
 801045e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010460:	68fb      	ldr	r3, [r7, #12]
 8010462:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010466:	2b00      	cmp	r3, #0
 8010468:	d10b      	bne.n	8010482 <xQueueReceive+0x32>
	__asm volatile
 801046a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801046e:	b672      	cpsid	i
 8010470:	f383 8811 	msr	BASEPRI, r3
 8010474:	f3bf 8f6f 	isb	sy
 8010478:	f3bf 8f4f 	dsb	sy
 801047c:	b662      	cpsie	i
 801047e:	623b      	str	r3, [r7, #32]
 8010480:	e7fe      	b.n	8010480 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010482:	68bb      	ldr	r3, [r7, #8]
 8010484:	2b00      	cmp	r3, #0
 8010486:	d103      	bne.n	8010490 <xQueueReceive+0x40>
 8010488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801048a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801048c:	2b00      	cmp	r3, #0
 801048e:	d101      	bne.n	8010494 <xQueueReceive+0x44>
 8010490:	2301      	movs	r3, #1
 8010492:	e000      	b.n	8010496 <xQueueReceive+0x46>
 8010494:	2300      	movs	r3, #0
 8010496:	2b00      	cmp	r3, #0
 8010498:	d10b      	bne.n	80104b2 <xQueueReceive+0x62>
 801049a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801049e:	b672      	cpsid	i
 80104a0:	f383 8811 	msr	BASEPRI, r3
 80104a4:	f3bf 8f6f 	isb	sy
 80104a8:	f3bf 8f4f 	dsb	sy
 80104ac:	b662      	cpsie	i
 80104ae:	61fb      	str	r3, [r7, #28]
 80104b0:	e7fe      	b.n	80104b0 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80104b2:	f001 f86d 	bl	8011590 <xTaskGetSchedulerState>
 80104b6:	4603      	mov	r3, r0
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	d102      	bne.n	80104c2 <xQueueReceive+0x72>
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	2b00      	cmp	r3, #0
 80104c0:	d101      	bne.n	80104c6 <xQueueReceive+0x76>
 80104c2:	2301      	movs	r3, #1
 80104c4:	e000      	b.n	80104c8 <xQueueReceive+0x78>
 80104c6:	2300      	movs	r3, #0
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	d10b      	bne.n	80104e4 <xQueueReceive+0x94>
 80104cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104d0:	b672      	cpsid	i
 80104d2:	f383 8811 	msr	BASEPRI, r3
 80104d6:	f3bf 8f6f 	isb	sy
 80104da:	f3bf 8f4f 	dsb	sy
 80104de:	b662      	cpsie	i
 80104e0:	61bb      	str	r3, [r7, #24]
 80104e2:	e7fe      	b.n	80104e2 <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80104e4:	f001 fa68 	bl	80119b8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80104e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80104ec:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80104ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	d01f      	beq.n	8010534 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80104f4:	68b9      	ldr	r1, [r7, #8]
 80104f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80104f8:	f000 f979 	bl	80107ee <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80104fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104fe:	1e5a      	subs	r2, r3, #1
 8010500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010502:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010506:	691b      	ldr	r3, [r3, #16]
 8010508:	2b00      	cmp	r3, #0
 801050a:	d00f      	beq.n	801052c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801050c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801050e:	3310      	adds	r3, #16
 8010510:	4618      	mov	r0, r3
 8010512:	f000 fe7d 	bl	8011210 <xTaskRemoveFromEventList>
 8010516:	4603      	mov	r3, r0
 8010518:	2b00      	cmp	r3, #0
 801051a:	d007      	beq.n	801052c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801051c:	4b3c      	ldr	r3, [pc, #240]	; (8010610 <xQueueReceive+0x1c0>)
 801051e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010522:	601a      	str	r2, [r3, #0]
 8010524:	f3bf 8f4f 	dsb	sy
 8010528:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801052c:	f001 fa76 	bl	8011a1c <vPortExitCritical>
				return pdPASS;
 8010530:	2301      	movs	r3, #1
 8010532:	e069      	b.n	8010608 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	2b00      	cmp	r3, #0
 8010538:	d103      	bne.n	8010542 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801053a:	f001 fa6f 	bl	8011a1c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801053e:	2300      	movs	r3, #0
 8010540:	e062      	b.n	8010608 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010544:	2b00      	cmp	r3, #0
 8010546:	d106      	bne.n	8010556 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010548:	f107 0310 	add.w	r3, r7, #16
 801054c:	4618      	mov	r0, r3
 801054e:	f000 fec3 	bl	80112d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010552:	2301      	movs	r3, #1
 8010554:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010556:	f001 fa61 	bl	8011a1c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801055a:	f000 fc29 	bl	8010db0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801055e:	f001 fa2b 	bl	80119b8 <vPortEnterCritical>
 8010562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010564:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010568:	b25b      	sxtb	r3, r3
 801056a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801056e:	d103      	bne.n	8010578 <xQueueReceive+0x128>
 8010570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010572:	2200      	movs	r2, #0
 8010574:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801057a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801057e:	b25b      	sxtb	r3, r3
 8010580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010584:	d103      	bne.n	801058e <xQueueReceive+0x13e>
 8010586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010588:	2200      	movs	r2, #0
 801058a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801058e:	f001 fa45 	bl	8011a1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010592:	1d3a      	adds	r2, r7, #4
 8010594:	f107 0310 	add.w	r3, r7, #16
 8010598:	4611      	mov	r1, r2
 801059a:	4618      	mov	r0, r3
 801059c:	f000 feb2 	bl	8011304 <xTaskCheckForTimeOut>
 80105a0:	4603      	mov	r3, r0
 80105a2:	2b00      	cmp	r3, #0
 80105a4:	d123      	bne.n	80105ee <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80105a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80105a8:	f000 f999 	bl	80108de <prvIsQueueEmpty>
 80105ac:	4603      	mov	r3, r0
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	d017      	beq.n	80105e2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80105b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105b4:	3324      	adds	r3, #36	; 0x24
 80105b6:	687a      	ldr	r2, [r7, #4]
 80105b8:	4611      	mov	r1, r2
 80105ba:	4618      	mov	r0, r3
 80105bc:	f000 fe02 	bl	80111c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80105c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80105c2:	f000 f93a 	bl	801083a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80105c6:	f000 fc01 	bl	8010dcc <xTaskResumeAll>
 80105ca:	4603      	mov	r3, r0
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d189      	bne.n	80104e4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80105d0:	4b0f      	ldr	r3, [pc, #60]	; (8010610 <xQueueReceive+0x1c0>)
 80105d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80105d6:	601a      	str	r2, [r3, #0]
 80105d8:	f3bf 8f4f 	dsb	sy
 80105dc:	f3bf 8f6f 	isb	sy
 80105e0:	e780      	b.n	80104e4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80105e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80105e4:	f000 f929 	bl	801083a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80105e8:	f000 fbf0 	bl	8010dcc <xTaskResumeAll>
 80105ec:	e77a      	b.n	80104e4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80105ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80105f0:	f000 f923 	bl	801083a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80105f4:	f000 fbea 	bl	8010dcc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80105f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80105fa:	f000 f970 	bl	80108de <prvIsQueueEmpty>
 80105fe:	4603      	mov	r3, r0
 8010600:	2b00      	cmp	r3, #0
 8010602:	f43f af6f 	beq.w	80104e4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010606:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010608:	4618      	mov	r0, r3
 801060a:	3730      	adds	r7, #48	; 0x30
 801060c:	46bd      	mov	sp, r7
 801060e:	bd80      	pop	{r7, pc}
 8010610:	e000ed04 	.word	0xe000ed04

08010614 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010614:	b580      	push	{r7, lr}
 8010616:	b08e      	sub	sp, #56	; 0x38
 8010618:	af00      	add	r7, sp, #0
 801061a:	60f8      	str	r0, [r7, #12]
 801061c:	60b9      	str	r1, [r7, #8]
 801061e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010620:	68fb      	ldr	r3, [r7, #12]
 8010622:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010626:	2b00      	cmp	r3, #0
 8010628:	d10b      	bne.n	8010642 <xQueueReceiveFromISR+0x2e>
 801062a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801062e:	b672      	cpsid	i
 8010630:	f383 8811 	msr	BASEPRI, r3
 8010634:	f3bf 8f6f 	isb	sy
 8010638:	f3bf 8f4f 	dsb	sy
 801063c:	b662      	cpsie	i
 801063e:	623b      	str	r3, [r7, #32]
 8010640:	e7fe      	b.n	8010640 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010642:	68bb      	ldr	r3, [r7, #8]
 8010644:	2b00      	cmp	r3, #0
 8010646:	d103      	bne.n	8010650 <xQueueReceiveFromISR+0x3c>
 8010648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801064a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801064c:	2b00      	cmp	r3, #0
 801064e:	d101      	bne.n	8010654 <xQueueReceiveFromISR+0x40>
 8010650:	2301      	movs	r3, #1
 8010652:	e000      	b.n	8010656 <xQueueReceiveFromISR+0x42>
 8010654:	2300      	movs	r3, #0
 8010656:	2b00      	cmp	r3, #0
 8010658:	d10b      	bne.n	8010672 <xQueueReceiveFromISR+0x5e>
 801065a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801065e:	b672      	cpsid	i
 8010660:	f383 8811 	msr	BASEPRI, r3
 8010664:	f3bf 8f6f 	isb	sy
 8010668:	f3bf 8f4f 	dsb	sy
 801066c:	b662      	cpsie	i
 801066e:	61fb      	str	r3, [r7, #28]
 8010670:	e7fe      	b.n	8010670 <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010672:	f001 fa81 	bl	8011b78 <vPortValidateInterruptPriority>
	__asm volatile
 8010676:	f3ef 8211 	mrs	r2, BASEPRI
 801067a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801067e:	b672      	cpsid	i
 8010680:	f383 8811 	msr	BASEPRI, r3
 8010684:	f3bf 8f6f 	isb	sy
 8010688:	f3bf 8f4f 	dsb	sy
 801068c:	b662      	cpsie	i
 801068e:	61ba      	str	r2, [r7, #24]
 8010690:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8010692:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010694:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801069a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801069c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d02f      	beq.n	8010702 <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80106a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80106a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80106ac:	68b9      	ldr	r1, [r7, #8]
 80106ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80106b0:	f000 f89d 	bl	80107ee <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80106b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106b6:	1e5a      	subs	r2, r3, #1
 80106b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106ba:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80106bc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80106c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80106c4:	d112      	bne.n	80106ec <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80106c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106c8:	691b      	ldr	r3, [r3, #16]
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	d016      	beq.n	80106fc <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80106ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106d0:	3310      	adds	r3, #16
 80106d2:	4618      	mov	r0, r3
 80106d4:	f000 fd9c 	bl	8011210 <xTaskRemoveFromEventList>
 80106d8:	4603      	mov	r3, r0
 80106da:	2b00      	cmp	r3, #0
 80106dc:	d00e      	beq.n	80106fc <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	d00b      	beq.n	80106fc <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	2201      	movs	r2, #1
 80106e8:	601a      	str	r2, [r3, #0]
 80106ea:	e007      	b.n	80106fc <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80106ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80106f0:	3301      	adds	r3, #1
 80106f2:	b2db      	uxtb	r3, r3
 80106f4:	b25a      	sxtb	r2, r3
 80106f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80106fc:	2301      	movs	r3, #1
 80106fe:	637b      	str	r3, [r7, #52]	; 0x34
 8010700:	e001      	b.n	8010706 <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 8010702:	2300      	movs	r3, #0
 8010704:	637b      	str	r3, [r7, #52]	; 0x34
 8010706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010708:	613b      	str	r3, [r7, #16]
	__asm volatile
 801070a:	693b      	ldr	r3, [r7, #16]
 801070c:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010712:	4618      	mov	r0, r3
 8010714:	3738      	adds	r7, #56	; 0x38
 8010716:	46bd      	mov	sp, r7
 8010718:	bd80      	pop	{r7, pc}

0801071a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801071a:	b580      	push	{r7, lr}
 801071c:	b086      	sub	sp, #24
 801071e:	af00      	add	r7, sp, #0
 8010720:	60f8      	str	r0, [r7, #12]
 8010722:	60b9      	str	r1, [r7, #8]
 8010724:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8010726:	2300      	movs	r3, #0
 8010728:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801072a:	68fb      	ldr	r3, [r7, #12]
 801072c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801072e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8010730:	68fb      	ldr	r3, [r7, #12]
 8010732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010734:	2b00      	cmp	r3, #0
 8010736:	d10d      	bne.n	8010754 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010738:	68fb      	ldr	r3, [r7, #12]
 801073a:	681b      	ldr	r3, [r3, #0]
 801073c:	2b00      	cmp	r3, #0
 801073e:	d14d      	bne.n	80107dc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010740:	68fb      	ldr	r3, [r7, #12]
 8010742:	689b      	ldr	r3, [r3, #8]
 8010744:	4618      	mov	r0, r3
 8010746:	f000 ff41 	bl	80115cc <xTaskPriorityDisinherit>
 801074a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801074c:	68fb      	ldr	r3, [r7, #12]
 801074e:	2200      	movs	r2, #0
 8010750:	609a      	str	r2, [r3, #8]
 8010752:	e043      	b.n	80107dc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	2b00      	cmp	r3, #0
 8010758:	d119      	bne.n	801078e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801075a:	68fb      	ldr	r3, [r7, #12]
 801075c:	6858      	ldr	r0, [r3, #4]
 801075e:	68fb      	ldr	r3, [r7, #12]
 8010760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010762:	461a      	mov	r2, r3
 8010764:	68b9      	ldr	r1, [r7, #8]
 8010766:	f001 ff5d 	bl	8012624 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801076a:	68fb      	ldr	r3, [r7, #12]
 801076c:	685a      	ldr	r2, [r3, #4]
 801076e:	68fb      	ldr	r3, [r7, #12]
 8010770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010772:	441a      	add	r2, r3
 8010774:	68fb      	ldr	r3, [r7, #12]
 8010776:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010778:	68fb      	ldr	r3, [r7, #12]
 801077a:	685a      	ldr	r2, [r3, #4]
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	689b      	ldr	r3, [r3, #8]
 8010780:	429a      	cmp	r2, r3
 8010782:	d32b      	bcc.n	80107dc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8010784:	68fb      	ldr	r3, [r7, #12]
 8010786:	681a      	ldr	r2, [r3, #0]
 8010788:	68fb      	ldr	r3, [r7, #12]
 801078a:	605a      	str	r2, [r3, #4]
 801078c:	e026      	b.n	80107dc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801078e:	68fb      	ldr	r3, [r7, #12]
 8010790:	68d8      	ldr	r0, [r3, #12]
 8010792:	68fb      	ldr	r3, [r7, #12]
 8010794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010796:	461a      	mov	r2, r3
 8010798:	68b9      	ldr	r1, [r7, #8]
 801079a:	f001 ff43 	bl	8012624 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801079e:	68fb      	ldr	r3, [r7, #12]
 80107a0:	68da      	ldr	r2, [r3, #12]
 80107a2:	68fb      	ldr	r3, [r7, #12]
 80107a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80107a6:	425b      	negs	r3, r3
 80107a8:	441a      	add	r2, r3
 80107aa:	68fb      	ldr	r3, [r7, #12]
 80107ac:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80107ae:	68fb      	ldr	r3, [r7, #12]
 80107b0:	68da      	ldr	r2, [r3, #12]
 80107b2:	68fb      	ldr	r3, [r7, #12]
 80107b4:	681b      	ldr	r3, [r3, #0]
 80107b6:	429a      	cmp	r2, r3
 80107b8:	d207      	bcs.n	80107ca <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80107ba:	68fb      	ldr	r3, [r7, #12]
 80107bc:	689a      	ldr	r2, [r3, #8]
 80107be:	68fb      	ldr	r3, [r7, #12]
 80107c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80107c2:	425b      	negs	r3, r3
 80107c4:	441a      	add	r2, r3
 80107c6:	68fb      	ldr	r3, [r7, #12]
 80107c8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	2b02      	cmp	r3, #2
 80107ce:	d105      	bne.n	80107dc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80107d0:	693b      	ldr	r3, [r7, #16]
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	d002      	beq.n	80107dc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80107d6:	693b      	ldr	r3, [r7, #16]
 80107d8:	3b01      	subs	r3, #1
 80107da:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80107dc:	693b      	ldr	r3, [r7, #16]
 80107de:	1c5a      	adds	r2, r3, #1
 80107e0:	68fb      	ldr	r3, [r7, #12]
 80107e2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80107e4:	697b      	ldr	r3, [r7, #20]
}
 80107e6:	4618      	mov	r0, r3
 80107e8:	3718      	adds	r7, #24
 80107ea:	46bd      	mov	sp, r7
 80107ec:	bd80      	pop	{r7, pc}

080107ee <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80107ee:	b580      	push	{r7, lr}
 80107f0:	b082      	sub	sp, #8
 80107f2:	af00      	add	r7, sp, #0
 80107f4:	6078      	str	r0, [r7, #4]
 80107f6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	d018      	beq.n	8010832 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	68da      	ldr	r2, [r3, #12]
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010808:	441a      	add	r2, r3
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	68da      	ldr	r2, [r3, #12]
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	689b      	ldr	r3, [r3, #8]
 8010816:	429a      	cmp	r2, r3
 8010818:	d303      	bcc.n	8010822 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	681a      	ldr	r2, [r3, #0]
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	68d9      	ldr	r1, [r3, #12]
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801082a:	461a      	mov	r2, r3
 801082c:	6838      	ldr	r0, [r7, #0]
 801082e:	f001 fef9 	bl	8012624 <memcpy>
	}
}
 8010832:	bf00      	nop
 8010834:	3708      	adds	r7, #8
 8010836:	46bd      	mov	sp, r7
 8010838:	bd80      	pop	{r7, pc}

0801083a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801083a:	b580      	push	{r7, lr}
 801083c:	b084      	sub	sp, #16
 801083e:	af00      	add	r7, sp, #0
 8010840:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8010842:	f001 f8b9 	bl	80119b8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801084c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801084e:	e011      	b.n	8010874 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010854:	2b00      	cmp	r3, #0
 8010856:	d012      	beq.n	801087e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	3324      	adds	r3, #36	; 0x24
 801085c:	4618      	mov	r0, r3
 801085e:	f000 fcd7 	bl	8011210 <xTaskRemoveFromEventList>
 8010862:	4603      	mov	r3, r0
 8010864:	2b00      	cmp	r3, #0
 8010866:	d001      	beq.n	801086c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8010868:	f000 fdb0 	bl	80113cc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801086c:	7bfb      	ldrb	r3, [r7, #15]
 801086e:	3b01      	subs	r3, #1
 8010870:	b2db      	uxtb	r3, r3
 8010872:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010874:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010878:	2b00      	cmp	r3, #0
 801087a:	dce9      	bgt.n	8010850 <prvUnlockQueue+0x16>
 801087c:	e000      	b.n	8010880 <prvUnlockQueue+0x46>
					break;
 801087e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	22ff      	movs	r2, #255	; 0xff
 8010884:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8010888:	f001 f8c8 	bl	8011a1c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801088c:	f001 f894 	bl	80119b8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010896:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010898:	e011      	b.n	80108be <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	691b      	ldr	r3, [r3, #16]
 801089e:	2b00      	cmp	r3, #0
 80108a0:	d012      	beq.n	80108c8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	3310      	adds	r3, #16
 80108a6:	4618      	mov	r0, r3
 80108a8:	f000 fcb2 	bl	8011210 <xTaskRemoveFromEventList>
 80108ac:	4603      	mov	r3, r0
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	d001      	beq.n	80108b6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80108b2:	f000 fd8b 	bl	80113cc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80108b6:	7bbb      	ldrb	r3, [r7, #14]
 80108b8:	3b01      	subs	r3, #1
 80108ba:	b2db      	uxtb	r3, r3
 80108bc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80108be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	dce9      	bgt.n	801089a <prvUnlockQueue+0x60>
 80108c6:	e000      	b.n	80108ca <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80108c8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	22ff      	movs	r2, #255	; 0xff
 80108ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80108d2:	f001 f8a3 	bl	8011a1c <vPortExitCritical>
}
 80108d6:	bf00      	nop
 80108d8:	3710      	adds	r7, #16
 80108da:	46bd      	mov	sp, r7
 80108dc:	bd80      	pop	{r7, pc}

080108de <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80108de:	b580      	push	{r7, lr}
 80108e0:	b084      	sub	sp, #16
 80108e2:	af00      	add	r7, sp, #0
 80108e4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80108e6:	f001 f867 	bl	80119b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	d102      	bne.n	80108f8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80108f2:	2301      	movs	r3, #1
 80108f4:	60fb      	str	r3, [r7, #12]
 80108f6:	e001      	b.n	80108fc <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80108f8:	2300      	movs	r3, #0
 80108fa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80108fc:	f001 f88e 	bl	8011a1c <vPortExitCritical>

	return xReturn;
 8010900:	68fb      	ldr	r3, [r7, #12]
}
 8010902:	4618      	mov	r0, r3
 8010904:	3710      	adds	r7, #16
 8010906:	46bd      	mov	sp, r7
 8010908:	bd80      	pop	{r7, pc}

0801090a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801090a:	b580      	push	{r7, lr}
 801090c:	b084      	sub	sp, #16
 801090e:	af00      	add	r7, sp, #0
 8010910:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010912:	f001 f851 	bl	80119b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801091e:	429a      	cmp	r2, r3
 8010920:	d102      	bne.n	8010928 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8010922:	2301      	movs	r3, #1
 8010924:	60fb      	str	r3, [r7, #12]
 8010926:	e001      	b.n	801092c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8010928:	2300      	movs	r3, #0
 801092a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801092c:	f001 f876 	bl	8011a1c <vPortExitCritical>

	return xReturn;
 8010930:	68fb      	ldr	r3, [r7, #12]
}
 8010932:	4618      	mov	r0, r3
 8010934:	3710      	adds	r7, #16
 8010936:	46bd      	mov	sp, r7
 8010938:	bd80      	pop	{r7, pc}

0801093a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801093a:	b580      	push	{r7, lr}
 801093c:	b08e      	sub	sp, #56	; 0x38
 801093e:	af04      	add	r7, sp, #16
 8010940:	60f8      	str	r0, [r7, #12]
 8010942:	60b9      	str	r1, [r7, #8]
 8010944:	607a      	str	r2, [r7, #4]
 8010946:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8010948:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801094a:	2b00      	cmp	r3, #0
 801094c:	d10b      	bne.n	8010966 <xTaskCreateStatic+0x2c>
	__asm volatile
 801094e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010952:	b672      	cpsid	i
 8010954:	f383 8811 	msr	BASEPRI, r3
 8010958:	f3bf 8f6f 	isb	sy
 801095c:	f3bf 8f4f 	dsb	sy
 8010960:	b662      	cpsie	i
 8010962:	623b      	str	r3, [r7, #32]
 8010964:	e7fe      	b.n	8010964 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 8010966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010968:	2b00      	cmp	r3, #0
 801096a:	d10b      	bne.n	8010984 <xTaskCreateStatic+0x4a>
 801096c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010970:	b672      	cpsid	i
 8010972:	f383 8811 	msr	BASEPRI, r3
 8010976:	f3bf 8f6f 	isb	sy
 801097a:	f3bf 8f4f 	dsb	sy
 801097e:	b662      	cpsie	i
 8010980:	61fb      	str	r3, [r7, #28]
 8010982:	e7fe      	b.n	8010982 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8010984:	2358      	movs	r3, #88	; 0x58
 8010986:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8010988:	693b      	ldr	r3, [r7, #16]
 801098a:	2b58      	cmp	r3, #88	; 0x58
 801098c:	d00b      	beq.n	80109a6 <xTaskCreateStatic+0x6c>
 801098e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010992:	b672      	cpsid	i
 8010994:	f383 8811 	msr	BASEPRI, r3
 8010998:	f3bf 8f6f 	isb	sy
 801099c:	f3bf 8f4f 	dsb	sy
 80109a0:	b662      	cpsie	i
 80109a2:	61bb      	str	r3, [r7, #24]
 80109a4:	e7fe      	b.n	80109a4 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80109a6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80109a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109aa:	2b00      	cmp	r3, #0
 80109ac:	d01e      	beq.n	80109ec <xTaskCreateStatic+0xb2>
 80109ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	d01b      	beq.n	80109ec <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80109b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109b6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80109b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80109bc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80109be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109c0:	2202      	movs	r2, #2
 80109c2:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80109c6:	2300      	movs	r3, #0
 80109c8:	9303      	str	r3, [sp, #12]
 80109ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109cc:	9302      	str	r3, [sp, #8]
 80109ce:	f107 0314 	add.w	r3, r7, #20
 80109d2:	9301      	str	r3, [sp, #4]
 80109d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109d6:	9300      	str	r3, [sp, #0]
 80109d8:	683b      	ldr	r3, [r7, #0]
 80109da:	687a      	ldr	r2, [r7, #4]
 80109dc:	68b9      	ldr	r1, [r7, #8]
 80109de:	68f8      	ldr	r0, [r7, #12]
 80109e0:	f000 f850 	bl	8010a84 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80109e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80109e6:	f000 f8e1 	bl	8010bac <prvAddNewTaskToReadyList>
 80109ea:	e001      	b.n	80109f0 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80109ec:	2300      	movs	r3, #0
 80109ee:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80109f0:	697b      	ldr	r3, [r7, #20]
	}
 80109f2:	4618      	mov	r0, r3
 80109f4:	3728      	adds	r7, #40	; 0x28
 80109f6:	46bd      	mov	sp, r7
 80109f8:	bd80      	pop	{r7, pc}

080109fa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80109fa:	b580      	push	{r7, lr}
 80109fc:	b08c      	sub	sp, #48	; 0x30
 80109fe:	af04      	add	r7, sp, #16
 8010a00:	60f8      	str	r0, [r7, #12]
 8010a02:	60b9      	str	r1, [r7, #8]
 8010a04:	603b      	str	r3, [r7, #0]
 8010a06:	4613      	mov	r3, r2
 8010a08:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8010a0a:	88fb      	ldrh	r3, [r7, #6]
 8010a0c:	009b      	lsls	r3, r3, #2
 8010a0e:	4618      	mov	r0, r3
 8010a10:	f001 f8f4 	bl	8011bfc <pvPortMalloc>
 8010a14:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8010a16:	697b      	ldr	r3, [r7, #20]
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d00e      	beq.n	8010a3a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8010a1c:	2058      	movs	r0, #88	; 0x58
 8010a1e:	f001 f8ed 	bl	8011bfc <pvPortMalloc>
 8010a22:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8010a24:	69fb      	ldr	r3, [r7, #28]
 8010a26:	2b00      	cmp	r3, #0
 8010a28:	d003      	beq.n	8010a32 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8010a2a:	69fb      	ldr	r3, [r7, #28]
 8010a2c:	697a      	ldr	r2, [r7, #20]
 8010a2e:	631a      	str	r2, [r3, #48]	; 0x30
 8010a30:	e005      	b.n	8010a3e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8010a32:	6978      	ldr	r0, [r7, #20]
 8010a34:	f001 f9ae 	bl	8011d94 <vPortFree>
 8010a38:	e001      	b.n	8010a3e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8010a3a:	2300      	movs	r3, #0
 8010a3c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8010a3e:	69fb      	ldr	r3, [r7, #28]
 8010a40:	2b00      	cmp	r3, #0
 8010a42:	d017      	beq.n	8010a74 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8010a44:	69fb      	ldr	r3, [r7, #28]
 8010a46:	2200      	movs	r2, #0
 8010a48:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8010a4c:	88fa      	ldrh	r2, [r7, #6]
 8010a4e:	2300      	movs	r3, #0
 8010a50:	9303      	str	r3, [sp, #12]
 8010a52:	69fb      	ldr	r3, [r7, #28]
 8010a54:	9302      	str	r3, [sp, #8]
 8010a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a58:	9301      	str	r3, [sp, #4]
 8010a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a5c:	9300      	str	r3, [sp, #0]
 8010a5e:	683b      	ldr	r3, [r7, #0]
 8010a60:	68b9      	ldr	r1, [r7, #8]
 8010a62:	68f8      	ldr	r0, [r7, #12]
 8010a64:	f000 f80e 	bl	8010a84 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010a68:	69f8      	ldr	r0, [r7, #28]
 8010a6a:	f000 f89f 	bl	8010bac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8010a6e:	2301      	movs	r3, #1
 8010a70:	61bb      	str	r3, [r7, #24]
 8010a72:	e002      	b.n	8010a7a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8010a74:	f04f 33ff 	mov.w	r3, #4294967295
 8010a78:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8010a7a:	69bb      	ldr	r3, [r7, #24]
	}
 8010a7c:	4618      	mov	r0, r3
 8010a7e:	3720      	adds	r7, #32
 8010a80:	46bd      	mov	sp, r7
 8010a82:	bd80      	pop	{r7, pc}

08010a84 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8010a84:	b580      	push	{r7, lr}
 8010a86:	b088      	sub	sp, #32
 8010a88:	af00      	add	r7, sp, #0
 8010a8a:	60f8      	str	r0, [r7, #12]
 8010a8c:	60b9      	str	r1, [r7, #8]
 8010a8e:	607a      	str	r2, [r7, #4]
 8010a90:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8010a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a94:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	009b      	lsls	r3, r3, #2
 8010a9a:	461a      	mov	r2, r3
 8010a9c:	21a5      	movs	r1, #165	; 0xa5
 8010a9e:	f001 fdcc 	bl	801263a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8010aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010aa4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010aa6:	6879      	ldr	r1, [r7, #4]
 8010aa8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8010aac:	440b      	add	r3, r1
 8010aae:	009b      	lsls	r3, r3, #2
 8010ab0:	4413      	add	r3, r2
 8010ab2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8010ab4:	69bb      	ldr	r3, [r7, #24]
 8010ab6:	f023 0307 	bic.w	r3, r3, #7
 8010aba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8010abc:	69bb      	ldr	r3, [r7, #24]
 8010abe:	f003 0307 	and.w	r3, r3, #7
 8010ac2:	2b00      	cmp	r3, #0
 8010ac4:	d00b      	beq.n	8010ade <prvInitialiseNewTask+0x5a>
 8010ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010aca:	b672      	cpsid	i
 8010acc:	f383 8811 	msr	BASEPRI, r3
 8010ad0:	f3bf 8f6f 	isb	sy
 8010ad4:	f3bf 8f4f 	dsb	sy
 8010ad8:	b662      	cpsie	i
 8010ada:	617b      	str	r3, [r7, #20]
 8010adc:	e7fe      	b.n	8010adc <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8010ade:	68bb      	ldr	r3, [r7, #8]
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	d01f      	beq.n	8010b24 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010ae4:	2300      	movs	r3, #0
 8010ae6:	61fb      	str	r3, [r7, #28]
 8010ae8:	e012      	b.n	8010b10 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010aea:	68ba      	ldr	r2, [r7, #8]
 8010aec:	69fb      	ldr	r3, [r7, #28]
 8010aee:	4413      	add	r3, r2
 8010af0:	7819      	ldrb	r1, [r3, #0]
 8010af2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010af4:	69fb      	ldr	r3, [r7, #28]
 8010af6:	4413      	add	r3, r2
 8010af8:	3334      	adds	r3, #52	; 0x34
 8010afa:	460a      	mov	r2, r1
 8010afc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8010afe:	68ba      	ldr	r2, [r7, #8]
 8010b00:	69fb      	ldr	r3, [r7, #28]
 8010b02:	4413      	add	r3, r2
 8010b04:	781b      	ldrb	r3, [r3, #0]
 8010b06:	2b00      	cmp	r3, #0
 8010b08:	d006      	beq.n	8010b18 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010b0a:	69fb      	ldr	r3, [r7, #28]
 8010b0c:	3301      	adds	r3, #1
 8010b0e:	61fb      	str	r3, [r7, #28]
 8010b10:	69fb      	ldr	r3, [r7, #28]
 8010b12:	2b0f      	cmp	r3, #15
 8010b14:	d9e9      	bls.n	8010aea <prvInitialiseNewTask+0x66>
 8010b16:	e000      	b.n	8010b1a <prvInitialiseNewTask+0x96>
			{
				break;
 8010b18:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8010b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b1c:	2200      	movs	r2, #0
 8010b1e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010b22:	e003      	b.n	8010b2c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8010b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b26:	2200      	movs	r2, #0
 8010b28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8010b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b2e:	2b06      	cmp	r3, #6
 8010b30:	d901      	bls.n	8010b36 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8010b32:	2306      	movs	r3, #6
 8010b34:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8010b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010b3a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8010b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010b40:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8010b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b44:	2200      	movs	r2, #0
 8010b46:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b4a:	3304      	adds	r3, #4
 8010b4c:	4618      	mov	r0, r3
 8010b4e:	f7ff f905 	bl	800fd5c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8010b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b54:	3318      	adds	r3, #24
 8010b56:	4618      	mov	r0, r3
 8010b58:	f7ff f900 	bl	800fd5c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8010b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010b60:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b64:	f1c3 0207 	rsb	r2, r3, #7
 8010b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b6a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8010b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010b70:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8010b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b74:	2200      	movs	r2, #0
 8010b76:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8010b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b7a:	2200      	movs	r2, #0
 8010b7c:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b80:	2200      	movs	r2, #0
 8010b82:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010b86:	683a      	ldr	r2, [r7, #0]
 8010b88:	68f9      	ldr	r1, [r7, #12]
 8010b8a:	69b8      	ldr	r0, [r7, #24]
 8010b8c:	f000 fe0c 	bl	80117a8 <pxPortInitialiseStack>
 8010b90:	4602      	mov	r2, r0
 8010b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b94:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8010b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	d002      	beq.n	8010ba2 <prvInitialiseNewTask+0x11e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8010b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010ba0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010ba2:	bf00      	nop
 8010ba4:	3720      	adds	r7, #32
 8010ba6:	46bd      	mov	sp, r7
 8010ba8:	bd80      	pop	{r7, pc}
	...

08010bac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8010bac:	b580      	push	{r7, lr}
 8010bae:	b082      	sub	sp, #8
 8010bb0:	af00      	add	r7, sp, #0
 8010bb2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8010bb4:	f000 ff00 	bl	80119b8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8010bb8:	4b2a      	ldr	r3, [pc, #168]	; (8010c64 <prvAddNewTaskToReadyList+0xb8>)
 8010bba:	681b      	ldr	r3, [r3, #0]
 8010bbc:	3301      	adds	r3, #1
 8010bbe:	4a29      	ldr	r2, [pc, #164]	; (8010c64 <prvAddNewTaskToReadyList+0xb8>)
 8010bc0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8010bc2:	4b29      	ldr	r3, [pc, #164]	; (8010c68 <prvAddNewTaskToReadyList+0xbc>)
 8010bc4:	681b      	ldr	r3, [r3, #0]
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	d109      	bne.n	8010bde <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8010bca:	4a27      	ldr	r2, [pc, #156]	; (8010c68 <prvAddNewTaskToReadyList+0xbc>)
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8010bd0:	4b24      	ldr	r3, [pc, #144]	; (8010c64 <prvAddNewTaskToReadyList+0xb8>)
 8010bd2:	681b      	ldr	r3, [r3, #0]
 8010bd4:	2b01      	cmp	r3, #1
 8010bd6:	d110      	bne.n	8010bfa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8010bd8:	f000 fc1e 	bl	8011418 <prvInitialiseTaskLists>
 8010bdc:	e00d      	b.n	8010bfa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8010bde:	4b23      	ldr	r3, [pc, #140]	; (8010c6c <prvAddNewTaskToReadyList+0xc0>)
 8010be0:	681b      	ldr	r3, [r3, #0]
 8010be2:	2b00      	cmp	r3, #0
 8010be4:	d109      	bne.n	8010bfa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8010be6:	4b20      	ldr	r3, [pc, #128]	; (8010c68 <prvAddNewTaskToReadyList+0xbc>)
 8010be8:	681b      	ldr	r3, [r3, #0]
 8010bea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010bf0:	429a      	cmp	r2, r3
 8010bf2:	d802      	bhi.n	8010bfa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8010bf4:	4a1c      	ldr	r2, [pc, #112]	; (8010c68 <prvAddNewTaskToReadyList+0xbc>)
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8010bfa:	4b1d      	ldr	r3, [pc, #116]	; (8010c70 <prvAddNewTaskToReadyList+0xc4>)
 8010bfc:	681b      	ldr	r3, [r3, #0]
 8010bfe:	3301      	adds	r3, #1
 8010c00:	4a1b      	ldr	r2, [pc, #108]	; (8010c70 <prvAddNewTaskToReadyList+0xc4>)
 8010c02:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c08:	2201      	movs	r2, #1
 8010c0a:	409a      	lsls	r2, r3
 8010c0c:	4b19      	ldr	r3, [pc, #100]	; (8010c74 <prvAddNewTaskToReadyList+0xc8>)
 8010c0e:	681b      	ldr	r3, [r3, #0]
 8010c10:	4313      	orrs	r3, r2
 8010c12:	4a18      	ldr	r2, [pc, #96]	; (8010c74 <prvAddNewTaskToReadyList+0xc8>)
 8010c14:	6013      	str	r3, [r2, #0]
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010c1a:	4613      	mov	r3, r2
 8010c1c:	009b      	lsls	r3, r3, #2
 8010c1e:	4413      	add	r3, r2
 8010c20:	009b      	lsls	r3, r3, #2
 8010c22:	4a15      	ldr	r2, [pc, #84]	; (8010c78 <prvAddNewTaskToReadyList+0xcc>)
 8010c24:	441a      	add	r2, r3
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	3304      	adds	r3, #4
 8010c2a:	4619      	mov	r1, r3
 8010c2c:	4610      	mov	r0, r2
 8010c2e:	f7ff f8a2 	bl	800fd76 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8010c32:	f000 fef3 	bl	8011a1c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8010c36:	4b0d      	ldr	r3, [pc, #52]	; (8010c6c <prvAddNewTaskToReadyList+0xc0>)
 8010c38:	681b      	ldr	r3, [r3, #0]
 8010c3a:	2b00      	cmp	r3, #0
 8010c3c:	d00e      	beq.n	8010c5c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8010c3e:	4b0a      	ldr	r3, [pc, #40]	; (8010c68 <prvAddNewTaskToReadyList+0xbc>)
 8010c40:	681b      	ldr	r3, [r3, #0]
 8010c42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c48:	429a      	cmp	r2, r3
 8010c4a:	d207      	bcs.n	8010c5c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8010c4c:	4b0b      	ldr	r3, [pc, #44]	; (8010c7c <prvAddNewTaskToReadyList+0xd0>)
 8010c4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010c52:	601a      	str	r2, [r3, #0]
 8010c54:	f3bf 8f4f 	dsb	sy
 8010c58:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010c5c:	bf00      	nop
 8010c5e:	3708      	adds	r7, #8
 8010c60:	46bd      	mov	sp, r7
 8010c62:	bd80      	pop	{r7, pc}
 8010c64:	20000428 	.word	0x20000428
 8010c68:	20000328 	.word	0x20000328
 8010c6c:	20000434 	.word	0x20000434
 8010c70:	20000444 	.word	0x20000444
 8010c74:	20000430 	.word	0x20000430
 8010c78:	2000032c 	.word	0x2000032c
 8010c7c:	e000ed04 	.word	0xe000ed04

08010c80 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8010c80:	b580      	push	{r7, lr}
 8010c82:	b084      	sub	sp, #16
 8010c84:	af00      	add	r7, sp, #0
 8010c86:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8010c88:	2300      	movs	r3, #0
 8010c8a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	d018      	beq.n	8010cc4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8010c92:	4b14      	ldr	r3, [pc, #80]	; (8010ce4 <vTaskDelay+0x64>)
 8010c94:	681b      	ldr	r3, [r3, #0]
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	d00b      	beq.n	8010cb2 <vTaskDelay+0x32>
 8010c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c9e:	b672      	cpsid	i
 8010ca0:	f383 8811 	msr	BASEPRI, r3
 8010ca4:	f3bf 8f6f 	isb	sy
 8010ca8:	f3bf 8f4f 	dsb	sy
 8010cac:	b662      	cpsie	i
 8010cae:	60bb      	str	r3, [r7, #8]
 8010cb0:	e7fe      	b.n	8010cb0 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8010cb2:	f000 f87d 	bl	8010db0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8010cb6:	2100      	movs	r1, #0
 8010cb8:	6878      	ldr	r0, [r7, #4]
 8010cba:	f000 fd0f 	bl	80116dc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8010cbe:	f000 f885 	bl	8010dcc <xTaskResumeAll>
 8010cc2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8010cc4:	68fb      	ldr	r3, [r7, #12]
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	d107      	bne.n	8010cda <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8010cca:	4b07      	ldr	r3, [pc, #28]	; (8010ce8 <vTaskDelay+0x68>)
 8010ccc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010cd0:	601a      	str	r2, [r3, #0]
 8010cd2:	f3bf 8f4f 	dsb	sy
 8010cd6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010cda:	bf00      	nop
 8010cdc:	3710      	adds	r7, #16
 8010cde:	46bd      	mov	sp, r7
 8010ce0:	bd80      	pop	{r7, pc}
 8010ce2:	bf00      	nop
 8010ce4:	20000450 	.word	0x20000450
 8010ce8:	e000ed04 	.word	0xe000ed04

08010cec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8010cec:	b580      	push	{r7, lr}
 8010cee:	b08a      	sub	sp, #40	; 0x28
 8010cf0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8010cf2:	2300      	movs	r3, #0
 8010cf4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8010cf6:	2300      	movs	r3, #0
 8010cf8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8010cfa:	463a      	mov	r2, r7
 8010cfc:	1d39      	adds	r1, r7, #4
 8010cfe:	f107 0308 	add.w	r3, r7, #8
 8010d02:	4618      	mov	r0, r3
 8010d04:	f7ef fc1e 	bl	8000544 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8010d08:	6839      	ldr	r1, [r7, #0]
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	68ba      	ldr	r2, [r7, #8]
 8010d0e:	9202      	str	r2, [sp, #8]
 8010d10:	9301      	str	r3, [sp, #4]
 8010d12:	2300      	movs	r3, #0
 8010d14:	9300      	str	r3, [sp, #0]
 8010d16:	2300      	movs	r3, #0
 8010d18:	460a      	mov	r2, r1
 8010d1a:	491f      	ldr	r1, [pc, #124]	; (8010d98 <vTaskStartScheduler+0xac>)
 8010d1c:	481f      	ldr	r0, [pc, #124]	; (8010d9c <vTaskStartScheduler+0xb0>)
 8010d1e:	f7ff fe0c 	bl	801093a <xTaskCreateStatic>
 8010d22:	4602      	mov	r2, r0
 8010d24:	4b1e      	ldr	r3, [pc, #120]	; (8010da0 <vTaskStartScheduler+0xb4>)
 8010d26:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8010d28:	4b1d      	ldr	r3, [pc, #116]	; (8010da0 <vTaskStartScheduler+0xb4>)
 8010d2a:	681b      	ldr	r3, [r3, #0]
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	d002      	beq.n	8010d36 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8010d30:	2301      	movs	r3, #1
 8010d32:	617b      	str	r3, [r7, #20]
 8010d34:	e001      	b.n	8010d3a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8010d36:	2300      	movs	r3, #0
 8010d38:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8010d3a:	697b      	ldr	r3, [r7, #20]
 8010d3c:	2b01      	cmp	r3, #1
 8010d3e:	d117      	bne.n	8010d70 <vTaskStartScheduler+0x84>
 8010d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d44:	b672      	cpsid	i
 8010d46:	f383 8811 	msr	BASEPRI, r3
 8010d4a:	f3bf 8f6f 	isb	sy
 8010d4e:	f3bf 8f4f 	dsb	sy
 8010d52:	b662      	cpsie	i
 8010d54:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8010d56:	4b13      	ldr	r3, [pc, #76]	; (8010da4 <vTaskStartScheduler+0xb8>)
 8010d58:	f04f 32ff 	mov.w	r2, #4294967295
 8010d5c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8010d5e:	4b12      	ldr	r3, [pc, #72]	; (8010da8 <vTaskStartScheduler+0xbc>)
 8010d60:	2201      	movs	r2, #1
 8010d62:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8010d64:	4b11      	ldr	r3, [pc, #68]	; (8010dac <vTaskStartScheduler+0xc0>)
 8010d66:	2200      	movs	r2, #0
 8010d68:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8010d6a:	f000 fda9 	bl	80118c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8010d6e:	e00f      	b.n	8010d90 <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8010d70:	697b      	ldr	r3, [r7, #20]
 8010d72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d76:	d10b      	bne.n	8010d90 <vTaskStartScheduler+0xa4>
 8010d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d7c:	b672      	cpsid	i
 8010d7e:	f383 8811 	msr	BASEPRI, r3
 8010d82:	f3bf 8f6f 	isb	sy
 8010d86:	f3bf 8f4f 	dsb	sy
 8010d8a:	b662      	cpsie	i
 8010d8c:	60fb      	str	r3, [r7, #12]
 8010d8e:	e7fe      	b.n	8010d8e <vTaskStartScheduler+0xa2>
}
 8010d90:	bf00      	nop
 8010d92:	3718      	adds	r7, #24
 8010d94:	46bd      	mov	sp, r7
 8010d96:	bd80      	pop	{r7, pc}
 8010d98:	0801284c 	.word	0x0801284c
 8010d9c:	080113e5 	.word	0x080113e5
 8010da0:	2000044c 	.word	0x2000044c
 8010da4:	20000448 	.word	0x20000448
 8010da8:	20000434 	.word	0x20000434
 8010dac:	2000042c 	.word	0x2000042c

08010db0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8010db0:	b480      	push	{r7}
 8010db2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8010db4:	4b04      	ldr	r3, [pc, #16]	; (8010dc8 <vTaskSuspendAll+0x18>)
 8010db6:	681b      	ldr	r3, [r3, #0]
 8010db8:	3301      	adds	r3, #1
 8010dba:	4a03      	ldr	r2, [pc, #12]	; (8010dc8 <vTaskSuspendAll+0x18>)
 8010dbc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8010dbe:	bf00      	nop
 8010dc0:	46bd      	mov	sp, r7
 8010dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dc6:	4770      	bx	lr
 8010dc8:	20000450 	.word	0x20000450

08010dcc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8010dcc:	b580      	push	{r7, lr}
 8010dce:	b084      	sub	sp, #16
 8010dd0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8010dd2:	2300      	movs	r3, #0
 8010dd4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8010dd6:	2300      	movs	r3, #0
 8010dd8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8010dda:	4b42      	ldr	r3, [pc, #264]	; (8010ee4 <xTaskResumeAll+0x118>)
 8010ddc:	681b      	ldr	r3, [r3, #0]
 8010dde:	2b00      	cmp	r3, #0
 8010de0:	d10b      	bne.n	8010dfa <xTaskResumeAll+0x2e>
 8010de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010de6:	b672      	cpsid	i
 8010de8:	f383 8811 	msr	BASEPRI, r3
 8010dec:	f3bf 8f6f 	isb	sy
 8010df0:	f3bf 8f4f 	dsb	sy
 8010df4:	b662      	cpsie	i
 8010df6:	603b      	str	r3, [r7, #0]
 8010df8:	e7fe      	b.n	8010df8 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8010dfa:	f000 fddd 	bl	80119b8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8010dfe:	4b39      	ldr	r3, [pc, #228]	; (8010ee4 <xTaskResumeAll+0x118>)
 8010e00:	681b      	ldr	r3, [r3, #0]
 8010e02:	3b01      	subs	r3, #1
 8010e04:	4a37      	ldr	r2, [pc, #220]	; (8010ee4 <xTaskResumeAll+0x118>)
 8010e06:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010e08:	4b36      	ldr	r3, [pc, #216]	; (8010ee4 <xTaskResumeAll+0x118>)
 8010e0a:	681b      	ldr	r3, [r3, #0]
 8010e0c:	2b00      	cmp	r3, #0
 8010e0e:	d161      	bne.n	8010ed4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8010e10:	4b35      	ldr	r3, [pc, #212]	; (8010ee8 <xTaskResumeAll+0x11c>)
 8010e12:	681b      	ldr	r3, [r3, #0]
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	d05d      	beq.n	8010ed4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010e18:	e02e      	b.n	8010e78 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010e1a:	4b34      	ldr	r3, [pc, #208]	; (8010eec <xTaskResumeAll+0x120>)
 8010e1c:	68db      	ldr	r3, [r3, #12]
 8010e1e:	68db      	ldr	r3, [r3, #12]
 8010e20:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010e22:	68fb      	ldr	r3, [r7, #12]
 8010e24:	3318      	adds	r3, #24
 8010e26:	4618      	mov	r0, r3
 8010e28:	f7ff f802 	bl	800fe30 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010e2c:	68fb      	ldr	r3, [r7, #12]
 8010e2e:	3304      	adds	r3, #4
 8010e30:	4618      	mov	r0, r3
 8010e32:	f7fe fffd 	bl	800fe30 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010e36:	68fb      	ldr	r3, [r7, #12]
 8010e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e3a:	2201      	movs	r2, #1
 8010e3c:	409a      	lsls	r2, r3
 8010e3e:	4b2c      	ldr	r3, [pc, #176]	; (8010ef0 <xTaskResumeAll+0x124>)
 8010e40:	681b      	ldr	r3, [r3, #0]
 8010e42:	4313      	orrs	r3, r2
 8010e44:	4a2a      	ldr	r2, [pc, #168]	; (8010ef0 <xTaskResumeAll+0x124>)
 8010e46:	6013      	str	r3, [r2, #0]
 8010e48:	68fb      	ldr	r3, [r7, #12]
 8010e4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010e4c:	4613      	mov	r3, r2
 8010e4e:	009b      	lsls	r3, r3, #2
 8010e50:	4413      	add	r3, r2
 8010e52:	009b      	lsls	r3, r3, #2
 8010e54:	4a27      	ldr	r2, [pc, #156]	; (8010ef4 <xTaskResumeAll+0x128>)
 8010e56:	441a      	add	r2, r3
 8010e58:	68fb      	ldr	r3, [r7, #12]
 8010e5a:	3304      	adds	r3, #4
 8010e5c:	4619      	mov	r1, r3
 8010e5e:	4610      	mov	r0, r2
 8010e60:	f7fe ff89 	bl	800fd76 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010e64:	68fb      	ldr	r3, [r7, #12]
 8010e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010e68:	4b23      	ldr	r3, [pc, #140]	; (8010ef8 <xTaskResumeAll+0x12c>)
 8010e6a:	681b      	ldr	r3, [r3, #0]
 8010e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e6e:	429a      	cmp	r2, r3
 8010e70:	d302      	bcc.n	8010e78 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8010e72:	4b22      	ldr	r3, [pc, #136]	; (8010efc <xTaskResumeAll+0x130>)
 8010e74:	2201      	movs	r2, #1
 8010e76:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010e78:	4b1c      	ldr	r3, [pc, #112]	; (8010eec <xTaskResumeAll+0x120>)
 8010e7a:	681b      	ldr	r3, [r3, #0]
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d1cc      	bne.n	8010e1a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8010e80:	68fb      	ldr	r3, [r7, #12]
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	d001      	beq.n	8010e8a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8010e86:	f000 fb63 	bl	8011550 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8010e8a:	4b1d      	ldr	r3, [pc, #116]	; (8010f00 <xTaskResumeAll+0x134>)
 8010e8c:	681b      	ldr	r3, [r3, #0]
 8010e8e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	2b00      	cmp	r3, #0
 8010e94:	d010      	beq.n	8010eb8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8010e96:	f000 f859 	bl	8010f4c <xTaskIncrementTick>
 8010e9a:	4603      	mov	r3, r0
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d002      	beq.n	8010ea6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8010ea0:	4b16      	ldr	r3, [pc, #88]	; (8010efc <xTaskResumeAll+0x130>)
 8010ea2:	2201      	movs	r2, #1
 8010ea4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	3b01      	subs	r3, #1
 8010eaa:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	d1f1      	bne.n	8010e96 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8010eb2:	4b13      	ldr	r3, [pc, #76]	; (8010f00 <xTaskResumeAll+0x134>)
 8010eb4:	2200      	movs	r2, #0
 8010eb6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8010eb8:	4b10      	ldr	r3, [pc, #64]	; (8010efc <xTaskResumeAll+0x130>)
 8010eba:	681b      	ldr	r3, [r3, #0]
 8010ebc:	2b00      	cmp	r3, #0
 8010ebe:	d009      	beq.n	8010ed4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8010ec0:	2301      	movs	r3, #1
 8010ec2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8010ec4:	4b0f      	ldr	r3, [pc, #60]	; (8010f04 <xTaskResumeAll+0x138>)
 8010ec6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010eca:	601a      	str	r2, [r3, #0]
 8010ecc:	f3bf 8f4f 	dsb	sy
 8010ed0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010ed4:	f000 fda2 	bl	8011a1c <vPortExitCritical>

	return xAlreadyYielded;
 8010ed8:	68bb      	ldr	r3, [r7, #8]
}
 8010eda:	4618      	mov	r0, r3
 8010edc:	3710      	adds	r7, #16
 8010ede:	46bd      	mov	sp, r7
 8010ee0:	bd80      	pop	{r7, pc}
 8010ee2:	bf00      	nop
 8010ee4:	20000450 	.word	0x20000450
 8010ee8:	20000428 	.word	0x20000428
 8010eec:	200003e8 	.word	0x200003e8
 8010ef0:	20000430 	.word	0x20000430
 8010ef4:	2000032c 	.word	0x2000032c
 8010ef8:	20000328 	.word	0x20000328
 8010efc:	2000043c 	.word	0x2000043c
 8010f00:	20000438 	.word	0x20000438
 8010f04:	e000ed04 	.word	0xe000ed04

08010f08 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8010f08:	b480      	push	{r7}
 8010f0a:	b083      	sub	sp, #12
 8010f0c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8010f0e:	4b05      	ldr	r3, [pc, #20]	; (8010f24 <xTaskGetTickCount+0x1c>)
 8010f10:	681b      	ldr	r3, [r3, #0]
 8010f12:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8010f14:	687b      	ldr	r3, [r7, #4]
}
 8010f16:	4618      	mov	r0, r3
 8010f18:	370c      	adds	r7, #12
 8010f1a:	46bd      	mov	sp, r7
 8010f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f20:	4770      	bx	lr
 8010f22:	bf00      	nop
 8010f24:	2000042c 	.word	0x2000042c

08010f28 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8010f28:	b580      	push	{r7, lr}
 8010f2a:	b082      	sub	sp, #8
 8010f2c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010f2e:	f000 fe23 	bl	8011b78 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8010f32:	2300      	movs	r3, #0
 8010f34:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8010f36:	4b04      	ldr	r3, [pc, #16]	; (8010f48 <xTaskGetTickCountFromISR+0x20>)
 8010f38:	681b      	ldr	r3, [r3, #0]
 8010f3a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010f3c:	683b      	ldr	r3, [r7, #0]
}
 8010f3e:	4618      	mov	r0, r3
 8010f40:	3708      	adds	r7, #8
 8010f42:	46bd      	mov	sp, r7
 8010f44:	bd80      	pop	{r7, pc}
 8010f46:	bf00      	nop
 8010f48:	2000042c 	.word	0x2000042c

08010f4c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8010f4c:	b580      	push	{r7, lr}
 8010f4e:	b086      	sub	sp, #24
 8010f50:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8010f52:	2300      	movs	r3, #0
 8010f54:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010f56:	4b4f      	ldr	r3, [pc, #316]	; (8011094 <xTaskIncrementTick+0x148>)
 8010f58:	681b      	ldr	r3, [r3, #0]
 8010f5a:	2b00      	cmp	r3, #0
 8010f5c:	f040 8089 	bne.w	8011072 <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8010f60:	4b4d      	ldr	r3, [pc, #308]	; (8011098 <xTaskIncrementTick+0x14c>)
 8010f62:	681b      	ldr	r3, [r3, #0]
 8010f64:	3301      	adds	r3, #1
 8010f66:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8010f68:	4a4b      	ldr	r2, [pc, #300]	; (8011098 <xTaskIncrementTick+0x14c>)
 8010f6a:	693b      	ldr	r3, [r7, #16]
 8010f6c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8010f6e:	693b      	ldr	r3, [r7, #16]
 8010f70:	2b00      	cmp	r3, #0
 8010f72:	d121      	bne.n	8010fb8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8010f74:	4b49      	ldr	r3, [pc, #292]	; (801109c <xTaskIncrementTick+0x150>)
 8010f76:	681b      	ldr	r3, [r3, #0]
 8010f78:	681b      	ldr	r3, [r3, #0]
 8010f7a:	2b00      	cmp	r3, #0
 8010f7c:	d00b      	beq.n	8010f96 <xTaskIncrementTick+0x4a>
 8010f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f82:	b672      	cpsid	i
 8010f84:	f383 8811 	msr	BASEPRI, r3
 8010f88:	f3bf 8f6f 	isb	sy
 8010f8c:	f3bf 8f4f 	dsb	sy
 8010f90:	b662      	cpsie	i
 8010f92:	603b      	str	r3, [r7, #0]
 8010f94:	e7fe      	b.n	8010f94 <xTaskIncrementTick+0x48>
 8010f96:	4b41      	ldr	r3, [pc, #260]	; (801109c <xTaskIncrementTick+0x150>)
 8010f98:	681b      	ldr	r3, [r3, #0]
 8010f9a:	60fb      	str	r3, [r7, #12]
 8010f9c:	4b40      	ldr	r3, [pc, #256]	; (80110a0 <xTaskIncrementTick+0x154>)
 8010f9e:	681b      	ldr	r3, [r3, #0]
 8010fa0:	4a3e      	ldr	r2, [pc, #248]	; (801109c <xTaskIncrementTick+0x150>)
 8010fa2:	6013      	str	r3, [r2, #0]
 8010fa4:	4a3e      	ldr	r2, [pc, #248]	; (80110a0 <xTaskIncrementTick+0x154>)
 8010fa6:	68fb      	ldr	r3, [r7, #12]
 8010fa8:	6013      	str	r3, [r2, #0]
 8010faa:	4b3e      	ldr	r3, [pc, #248]	; (80110a4 <xTaskIncrementTick+0x158>)
 8010fac:	681b      	ldr	r3, [r3, #0]
 8010fae:	3301      	adds	r3, #1
 8010fb0:	4a3c      	ldr	r2, [pc, #240]	; (80110a4 <xTaskIncrementTick+0x158>)
 8010fb2:	6013      	str	r3, [r2, #0]
 8010fb4:	f000 facc 	bl	8011550 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8010fb8:	4b3b      	ldr	r3, [pc, #236]	; (80110a8 <xTaskIncrementTick+0x15c>)
 8010fba:	681b      	ldr	r3, [r3, #0]
 8010fbc:	693a      	ldr	r2, [r7, #16]
 8010fbe:	429a      	cmp	r2, r3
 8010fc0:	d348      	bcc.n	8011054 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010fc2:	4b36      	ldr	r3, [pc, #216]	; (801109c <xTaskIncrementTick+0x150>)
 8010fc4:	681b      	ldr	r3, [r3, #0]
 8010fc6:	681b      	ldr	r3, [r3, #0]
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	d104      	bne.n	8010fd6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010fcc:	4b36      	ldr	r3, [pc, #216]	; (80110a8 <xTaskIncrementTick+0x15c>)
 8010fce:	f04f 32ff 	mov.w	r2, #4294967295
 8010fd2:	601a      	str	r2, [r3, #0]
					break;
 8010fd4:	e03e      	b.n	8011054 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010fd6:	4b31      	ldr	r3, [pc, #196]	; (801109c <xTaskIncrementTick+0x150>)
 8010fd8:	681b      	ldr	r3, [r3, #0]
 8010fda:	68db      	ldr	r3, [r3, #12]
 8010fdc:	68db      	ldr	r3, [r3, #12]
 8010fde:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8010fe0:	68bb      	ldr	r3, [r7, #8]
 8010fe2:	685b      	ldr	r3, [r3, #4]
 8010fe4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8010fe6:	693a      	ldr	r2, [r7, #16]
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	429a      	cmp	r2, r3
 8010fec:	d203      	bcs.n	8010ff6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8010fee:	4a2e      	ldr	r2, [pc, #184]	; (80110a8 <xTaskIncrementTick+0x15c>)
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8010ff4:	e02e      	b.n	8011054 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010ff6:	68bb      	ldr	r3, [r7, #8]
 8010ff8:	3304      	adds	r3, #4
 8010ffa:	4618      	mov	r0, r3
 8010ffc:	f7fe ff18 	bl	800fe30 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011000:	68bb      	ldr	r3, [r7, #8]
 8011002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011004:	2b00      	cmp	r3, #0
 8011006:	d004      	beq.n	8011012 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011008:	68bb      	ldr	r3, [r7, #8]
 801100a:	3318      	adds	r3, #24
 801100c:	4618      	mov	r0, r3
 801100e:	f7fe ff0f 	bl	800fe30 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8011012:	68bb      	ldr	r3, [r7, #8]
 8011014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011016:	2201      	movs	r2, #1
 8011018:	409a      	lsls	r2, r3
 801101a:	4b24      	ldr	r3, [pc, #144]	; (80110ac <xTaskIncrementTick+0x160>)
 801101c:	681b      	ldr	r3, [r3, #0]
 801101e:	4313      	orrs	r3, r2
 8011020:	4a22      	ldr	r2, [pc, #136]	; (80110ac <xTaskIncrementTick+0x160>)
 8011022:	6013      	str	r3, [r2, #0]
 8011024:	68bb      	ldr	r3, [r7, #8]
 8011026:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011028:	4613      	mov	r3, r2
 801102a:	009b      	lsls	r3, r3, #2
 801102c:	4413      	add	r3, r2
 801102e:	009b      	lsls	r3, r3, #2
 8011030:	4a1f      	ldr	r2, [pc, #124]	; (80110b0 <xTaskIncrementTick+0x164>)
 8011032:	441a      	add	r2, r3
 8011034:	68bb      	ldr	r3, [r7, #8]
 8011036:	3304      	adds	r3, #4
 8011038:	4619      	mov	r1, r3
 801103a:	4610      	mov	r0, r2
 801103c:	f7fe fe9b 	bl	800fd76 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011040:	68bb      	ldr	r3, [r7, #8]
 8011042:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011044:	4b1b      	ldr	r3, [pc, #108]	; (80110b4 <xTaskIncrementTick+0x168>)
 8011046:	681b      	ldr	r3, [r3, #0]
 8011048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801104a:	429a      	cmp	r2, r3
 801104c:	d3b9      	bcc.n	8010fc2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 801104e:	2301      	movs	r3, #1
 8011050:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011052:	e7b6      	b.n	8010fc2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8011054:	4b17      	ldr	r3, [pc, #92]	; (80110b4 <xTaskIncrementTick+0x168>)
 8011056:	681b      	ldr	r3, [r3, #0]
 8011058:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801105a:	4915      	ldr	r1, [pc, #84]	; (80110b0 <xTaskIncrementTick+0x164>)
 801105c:	4613      	mov	r3, r2
 801105e:	009b      	lsls	r3, r3, #2
 8011060:	4413      	add	r3, r2
 8011062:	009b      	lsls	r3, r3, #2
 8011064:	440b      	add	r3, r1
 8011066:	681b      	ldr	r3, [r3, #0]
 8011068:	2b01      	cmp	r3, #1
 801106a:	d907      	bls.n	801107c <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 801106c:	2301      	movs	r3, #1
 801106e:	617b      	str	r3, [r7, #20]
 8011070:	e004      	b.n	801107c <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8011072:	4b11      	ldr	r3, [pc, #68]	; (80110b8 <xTaskIncrementTick+0x16c>)
 8011074:	681b      	ldr	r3, [r3, #0]
 8011076:	3301      	adds	r3, #1
 8011078:	4a0f      	ldr	r2, [pc, #60]	; (80110b8 <xTaskIncrementTick+0x16c>)
 801107a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 801107c:	4b0f      	ldr	r3, [pc, #60]	; (80110bc <xTaskIncrementTick+0x170>)
 801107e:	681b      	ldr	r3, [r3, #0]
 8011080:	2b00      	cmp	r3, #0
 8011082:	d001      	beq.n	8011088 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 8011084:	2301      	movs	r3, #1
 8011086:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8011088:	697b      	ldr	r3, [r7, #20]
}
 801108a:	4618      	mov	r0, r3
 801108c:	3718      	adds	r7, #24
 801108e:	46bd      	mov	sp, r7
 8011090:	bd80      	pop	{r7, pc}
 8011092:	bf00      	nop
 8011094:	20000450 	.word	0x20000450
 8011098:	2000042c 	.word	0x2000042c
 801109c:	200003e0 	.word	0x200003e0
 80110a0:	200003e4 	.word	0x200003e4
 80110a4:	20000440 	.word	0x20000440
 80110a8:	20000448 	.word	0x20000448
 80110ac:	20000430 	.word	0x20000430
 80110b0:	2000032c 	.word	0x2000032c
 80110b4:	20000328 	.word	0x20000328
 80110b8:	20000438 	.word	0x20000438
 80110bc:	2000043c 	.word	0x2000043c

080110c0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80110c0:	b580      	push	{r7, lr}
 80110c2:	b088      	sub	sp, #32
 80110c4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80110c6:	4b3a      	ldr	r3, [pc, #232]	; (80111b0 <vTaskSwitchContext+0xf0>)
 80110c8:	681b      	ldr	r3, [r3, #0]
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	d003      	beq.n	80110d6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80110ce:	4b39      	ldr	r3, [pc, #228]	; (80111b4 <vTaskSwitchContext+0xf4>)
 80110d0:	2201      	movs	r2, #1
 80110d2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80110d4:	e067      	b.n	80111a6 <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
 80110d6:	4b37      	ldr	r3, [pc, #220]	; (80111b4 <vTaskSwitchContext+0xf4>)
 80110d8:	2200      	movs	r2, #0
 80110da:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80110dc:	4b36      	ldr	r3, [pc, #216]	; (80111b8 <vTaskSwitchContext+0xf8>)
 80110de:	681b      	ldr	r3, [r3, #0]
 80110e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80110e2:	61fb      	str	r3, [r7, #28]
 80110e4:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 80110e8:	61bb      	str	r3, [r7, #24]
 80110ea:	69fb      	ldr	r3, [r7, #28]
 80110ec:	681b      	ldr	r3, [r3, #0]
 80110ee:	69ba      	ldr	r2, [r7, #24]
 80110f0:	429a      	cmp	r2, r3
 80110f2:	d111      	bne.n	8011118 <vTaskSwitchContext+0x58>
 80110f4:	69fb      	ldr	r3, [r7, #28]
 80110f6:	3304      	adds	r3, #4
 80110f8:	681b      	ldr	r3, [r3, #0]
 80110fa:	69ba      	ldr	r2, [r7, #24]
 80110fc:	429a      	cmp	r2, r3
 80110fe:	d10b      	bne.n	8011118 <vTaskSwitchContext+0x58>
 8011100:	69fb      	ldr	r3, [r7, #28]
 8011102:	3308      	adds	r3, #8
 8011104:	681b      	ldr	r3, [r3, #0]
 8011106:	69ba      	ldr	r2, [r7, #24]
 8011108:	429a      	cmp	r2, r3
 801110a:	d105      	bne.n	8011118 <vTaskSwitchContext+0x58>
 801110c:	69fb      	ldr	r3, [r7, #28]
 801110e:	330c      	adds	r3, #12
 8011110:	681b      	ldr	r3, [r3, #0]
 8011112:	69ba      	ldr	r2, [r7, #24]
 8011114:	429a      	cmp	r2, r3
 8011116:	d008      	beq.n	801112a <vTaskSwitchContext+0x6a>
 8011118:	4b27      	ldr	r3, [pc, #156]	; (80111b8 <vTaskSwitchContext+0xf8>)
 801111a:	681a      	ldr	r2, [r3, #0]
 801111c:	4b26      	ldr	r3, [pc, #152]	; (80111b8 <vTaskSwitchContext+0xf8>)
 801111e:	681b      	ldr	r3, [r3, #0]
 8011120:	3334      	adds	r3, #52	; 0x34
 8011122:	4619      	mov	r1, r3
 8011124:	4610      	mov	r0, r2
 8011126:	f7ef f9fa 	bl	800051e <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801112a:	4b24      	ldr	r3, [pc, #144]	; (80111bc <vTaskSwitchContext+0xfc>)
 801112c:	681b      	ldr	r3, [r3, #0]
 801112e:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8011130:	68fb      	ldr	r3, [r7, #12]
 8011132:	fab3 f383 	clz	r3, r3
 8011136:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8011138:	7afb      	ldrb	r3, [r7, #11]
 801113a:	f1c3 031f 	rsb	r3, r3, #31
 801113e:	617b      	str	r3, [r7, #20]
 8011140:	491f      	ldr	r1, [pc, #124]	; (80111c0 <vTaskSwitchContext+0x100>)
 8011142:	697a      	ldr	r2, [r7, #20]
 8011144:	4613      	mov	r3, r2
 8011146:	009b      	lsls	r3, r3, #2
 8011148:	4413      	add	r3, r2
 801114a:	009b      	lsls	r3, r3, #2
 801114c:	440b      	add	r3, r1
 801114e:	681b      	ldr	r3, [r3, #0]
 8011150:	2b00      	cmp	r3, #0
 8011152:	d10b      	bne.n	801116c <vTaskSwitchContext+0xac>
	__asm volatile
 8011154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011158:	b672      	cpsid	i
 801115a:	f383 8811 	msr	BASEPRI, r3
 801115e:	f3bf 8f6f 	isb	sy
 8011162:	f3bf 8f4f 	dsb	sy
 8011166:	b662      	cpsie	i
 8011168:	607b      	str	r3, [r7, #4]
 801116a:	e7fe      	b.n	801116a <vTaskSwitchContext+0xaa>
 801116c:	697a      	ldr	r2, [r7, #20]
 801116e:	4613      	mov	r3, r2
 8011170:	009b      	lsls	r3, r3, #2
 8011172:	4413      	add	r3, r2
 8011174:	009b      	lsls	r3, r3, #2
 8011176:	4a12      	ldr	r2, [pc, #72]	; (80111c0 <vTaskSwitchContext+0x100>)
 8011178:	4413      	add	r3, r2
 801117a:	613b      	str	r3, [r7, #16]
 801117c:	693b      	ldr	r3, [r7, #16]
 801117e:	685b      	ldr	r3, [r3, #4]
 8011180:	685a      	ldr	r2, [r3, #4]
 8011182:	693b      	ldr	r3, [r7, #16]
 8011184:	605a      	str	r2, [r3, #4]
 8011186:	693b      	ldr	r3, [r7, #16]
 8011188:	685a      	ldr	r2, [r3, #4]
 801118a:	693b      	ldr	r3, [r7, #16]
 801118c:	3308      	adds	r3, #8
 801118e:	429a      	cmp	r2, r3
 8011190:	d104      	bne.n	801119c <vTaskSwitchContext+0xdc>
 8011192:	693b      	ldr	r3, [r7, #16]
 8011194:	685b      	ldr	r3, [r3, #4]
 8011196:	685a      	ldr	r2, [r3, #4]
 8011198:	693b      	ldr	r3, [r7, #16]
 801119a:	605a      	str	r2, [r3, #4]
 801119c:	693b      	ldr	r3, [r7, #16]
 801119e:	685b      	ldr	r3, [r3, #4]
 80111a0:	68db      	ldr	r3, [r3, #12]
 80111a2:	4a05      	ldr	r2, [pc, #20]	; (80111b8 <vTaskSwitchContext+0xf8>)
 80111a4:	6013      	str	r3, [r2, #0]
}
 80111a6:	bf00      	nop
 80111a8:	3720      	adds	r7, #32
 80111aa:	46bd      	mov	sp, r7
 80111ac:	bd80      	pop	{r7, pc}
 80111ae:	bf00      	nop
 80111b0:	20000450 	.word	0x20000450
 80111b4:	2000043c 	.word	0x2000043c
 80111b8:	20000328 	.word	0x20000328
 80111bc:	20000430 	.word	0x20000430
 80111c0:	2000032c 	.word	0x2000032c

080111c4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80111c4:	b580      	push	{r7, lr}
 80111c6:	b084      	sub	sp, #16
 80111c8:	af00      	add	r7, sp, #0
 80111ca:	6078      	str	r0, [r7, #4]
 80111cc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	d10b      	bne.n	80111ec <vTaskPlaceOnEventList+0x28>
 80111d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111d8:	b672      	cpsid	i
 80111da:	f383 8811 	msr	BASEPRI, r3
 80111de:	f3bf 8f6f 	isb	sy
 80111e2:	f3bf 8f4f 	dsb	sy
 80111e6:	b662      	cpsie	i
 80111e8:	60fb      	str	r3, [r7, #12]
 80111ea:	e7fe      	b.n	80111ea <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80111ec:	4b07      	ldr	r3, [pc, #28]	; (801120c <vTaskPlaceOnEventList+0x48>)
 80111ee:	681b      	ldr	r3, [r3, #0]
 80111f0:	3318      	adds	r3, #24
 80111f2:	4619      	mov	r1, r3
 80111f4:	6878      	ldr	r0, [r7, #4]
 80111f6:	f7fe fde2 	bl	800fdbe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80111fa:	2101      	movs	r1, #1
 80111fc:	6838      	ldr	r0, [r7, #0]
 80111fe:	f000 fa6d 	bl	80116dc <prvAddCurrentTaskToDelayedList>
}
 8011202:	bf00      	nop
 8011204:	3710      	adds	r7, #16
 8011206:	46bd      	mov	sp, r7
 8011208:	bd80      	pop	{r7, pc}
 801120a:	bf00      	nop
 801120c:	20000328 	.word	0x20000328

08011210 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8011210:	b580      	push	{r7, lr}
 8011212:	b086      	sub	sp, #24
 8011214:	af00      	add	r7, sp, #0
 8011216:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	68db      	ldr	r3, [r3, #12]
 801121c:	68db      	ldr	r3, [r3, #12]
 801121e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8011220:	693b      	ldr	r3, [r7, #16]
 8011222:	2b00      	cmp	r3, #0
 8011224:	d10b      	bne.n	801123e <xTaskRemoveFromEventList+0x2e>
 8011226:	f04f 0350 	mov.w	r3, #80	; 0x50
 801122a:	b672      	cpsid	i
 801122c:	f383 8811 	msr	BASEPRI, r3
 8011230:	f3bf 8f6f 	isb	sy
 8011234:	f3bf 8f4f 	dsb	sy
 8011238:	b662      	cpsie	i
 801123a:	60fb      	str	r3, [r7, #12]
 801123c:	e7fe      	b.n	801123c <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801123e:	693b      	ldr	r3, [r7, #16]
 8011240:	3318      	adds	r3, #24
 8011242:	4618      	mov	r0, r3
 8011244:	f7fe fdf4 	bl	800fe30 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011248:	4b1d      	ldr	r3, [pc, #116]	; (80112c0 <xTaskRemoveFromEventList+0xb0>)
 801124a:	681b      	ldr	r3, [r3, #0]
 801124c:	2b00      	cmp	r3, #0
 801124e:	d11c      	bne.n	801128a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011250:	693b      	ldr	r3, [r7, #16]
 8011252:	3304      	adds	r3, #4
 8011254:	4618      	mov	r0, r3
 8011256:	f7fe fdeb 	bl	800fe30 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801125a:	693b      	ldr	r3, [r7, #16]
 801125c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801125e:	2201      	movs	r2, #1
 8011260:	409a      	lsls	r2, r3
 8011262:	4b18      	ldr	r3, [pc, #96]	; (80112c4 <xTaskRemoveFromEventList+0xb4>)
 8011264:	681b      	ldr	r3, [r3, #0]
 8011266:	4313      	orrs	r3, r2
 8011268:	4a16      	ldr	r2, [pc, #88]	; (80112c4 <xTaskRemoveFromEventList+0xb4>)
 801126a:	6013      	str	r3, [r2, #0]
 801126c:	693b      	ldr	r3, [r7, #16]
 801126e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011270:	4613      	mov	r3, r2
 8011272:	009b      	lsls	r3, r3, #2
 8011274:	4413      	add	r3, r2
 8011276:	009b      	lsls	r3, r3, #2
 8011278:	4a13      	ldr	r2, [pc, #76]	; (80112c8 <xTaskRemoveFromEventList+0xb8>)
 801127a:	441a      	add	r2, r3
 801127c:	693b      	ldr	r3, [r7, #16]
 801127e:	3304      	adds	r3, #4
 8011280:	4619      	mov	r1, r3
 8011282:	4610      	mov	r0, r2
 8011284:	f7fe fd77 	bl	800fd76 <vListInsertEnd>
 8011288:	e005      	b.n	8011296 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801128a:	693b      	ldr	r3, [r7, #16]
 801128c:	3318      	adds	r3, #24
 801128e:	4619      	mov	r1, r3
 8011290:	480e      	ldr	r0, [pc, #56]	; (80112cc <xTaskRemoveFromEventList+0xbc>)
 8011292:	f7fe fd70 	bl	800fd76 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011296:	693b      	ldr	r3, [r7, #16]
 8011298:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801129a:	4b0d      	ldr	r3, [pc, #52]	; (80112d0 <xTaskRemoveFromEventList+0xc0>)
 801129c:	681b      	ldr	r3, [r3, #0]
 801129e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112a0:	429a      	cmp	r2, r3
 80112a2:	d905      	bls.n	80112b0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80112a4:	2301      	movs	r3, #1
 80112a6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80112a8:	4b0a      	ldr	r3, [pc, #40]	; (80112d4 <xTaskRemoveFromEventList+0xc4>)
 80112aa:	2201      	movs	r2, #1
 80112ac:	601a      	str	r2, [r3, #0]
 80112ae:	e001      	b.n	80112b4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80112b0:	2300      	movs	r3, #0
 80112b2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80112b4:	697b      	ldr	r3, [r7, #20]
}
 80112b6:	4618      	mov	r0, r3
 80112b8:	3718      	adds	r7, #24
 80112ba:	46bd      	mov	sp, r7
 80112bc:	bd80      	pop	{r7, pc}
 80112be:	bf00      	nop
 80112c0:	20000450 	.word	0x20000450
 80112c4:	20000430 	.word	0x20000430
 80112c8:	2000032c 	.word	0x2000032c
 80112cc:	200003e8 	.word	0x200003e8
 80112d0:	20000328 	.word	0x20000328
 80112d4:	2000043c 	.word	0x2000043c

080112d8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80112d8:	b480      	push	{r7}
 80112da:	b083      	sub	sp, #12
 80112dc:	af00      	add	r7, sp, #0
 80112de:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80112e0:	4b06      	ldr	r3, [pc, #24]	; (80112fc <vTaskInternalSetTimeOutState+0x24>)
 80112e2:	681a      	ldr	r2, [r3, #0]
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80112e8:	4b05      	ldr	r3, [pc, #20]	; (8011300 <vTaskInternalSetTimeOutState+0x28>)
 80112ea:	681a      	ldr	r2, [r3, #0]
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	605a      	str	r2, [r3, #4]
}
 80112f0:	bf00      	nop
 80112f2:	370c      	adds	r7, #12
 80112f4:	46bd      	mov	sp, r7
 80112f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112fa:	4770      	bx	lr
 80112fc:	20000440 	.word	0x20000440
 8011300:	2000042c 	.word	0x2000042c

08011304 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8011304:	b580      	push	{r7, lr}
 8011306:	b088      	sub	sp, #32
 8011308:	af00      	add	r7, sp, #0
 801130a:	6078      	str	r0, [r7, #4]
 801130c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	2b00      	cmp	r3, #0
 8011312:	d10b      	bne.n	801132c <xTaskCheckForTimeOut+0x28>
 8011314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011318:	b672      	cpsid	i
 801131a:	f383 8811 	msr	BASEPRI, r3
 801131e:	f3bf 8f6f 	isb	sy
 8011322:	f3bf 8f4f 	dsb	sy
 8011326:	b662      	cpsie	i
 8011328:	613b      	str	r3, [r7, #16]
 801132a:	e7fe      	b.n	801132a <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 801132c:	683b      	ldr	r3, [r7, #0]
 801132e:	2b00      	cmp	r3, #0
 8011330:	d10b      	bne.n	801134a <xTaskCheckForTimeOut+0x46>
 8011332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011336:	b672      	cpsid	i
 8011338:	f383 8811 	msr	BASEPRI, r3
 801133c:	f3bf 8f6f 	isb	sy
 8011340:	f3bf 8f4f 	dsb	sy
 8011344:	b662      	cpsie	i
 8011346:	60fb      	str	r3, [r7, #12]
 8011348:	e7fe      	b.n	8011348 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 801134a:	f000 fb35 	bl	80119b8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801134e:	4b1d      	ldr	r3, [pc, #116]	; (80113c4 <xTaskCheckForTimeOut+0xc0>)
 8011350:	681b      	ldr	r3, [r3, #0]
 8011352:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	685b      	ldr	r3, [r3, #4]
 8011358:	69ba      	ldr	r2, [r7, #24]
 801135a:	1ad3      	subs	r3, r2, r3
 801135c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801135e:	683b      	ldr	r3, [r7, #0]
 8011360:	681b      	ldr	r3, [r3, #0]
 8011362:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011366:	d102      	bne.n	801136e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8011368:	2300      	movs	r3, #0
 801136a:	61fb      	str	r3, [r7, #28]
 801136c:	e023      	b.n	80113b6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	681a      	ldr	r2, [r3, #0]
 8011372:	4b15      	ldr	r3, [pc, #84]	; (80113c8 <xTaskCheckForTimeOut+0xc4>)
 8011374:	681b      	ldr	r3, [r3, #0]
 8011376:	429a      	cmp	r2, r3
 8011378:	d007      	beq.n	801138a <xTaskCheckForTimeOut+0x86>
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	685b      	ldr	r3, [r3, #4]
 801137e:	69ba      	ldr	r2, [r7, #24]
 8011380:	429a      	cmp	r2, r3
 8011382:	d302      	bcc.n	801138a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8011384:	2301      	movs	r3, #1
 8011386:	61fb      	str	r3, [r7, #28]
 8011388:	e015      	b.n	80113b6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801138a:	683b      	ldr	r3, [r7, #0]
 801138c:	681b      	ldr	r3, [r3, #0]
 801138e:	697a      	ldr	r2, [r7, #20]
 8011390:	429a      	cmp	r2, r3
 8011392:	d20b      	bcs.n	80113ac <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8011394:	683b      	ldr	r3, [r7, #0]
 8011396:	681a      	ldr	r2, [r3, #0]
 8011398:	697b      	ldr	r3, [r7, #20]
 801139a:	1ad2      	subs	r2, r2, r3
 801139c:	683b      	ldr	r3, [r7, #0]
 801139e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80113a0:	6878      	ldr	r0, [r7, #4]
 80113a2:	f7ff ff99 	bl	80112d8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80113a6:	2300      	movs	r3, #0
 80113a8:	61fb      	str	r3, [r7, #28]
 80113aa:	e004      	b.n	80113b6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80113ac:	683b      	ldr	r3, [r7, #0]
 80113ae:	2200      	movs	r2, #0
 80113b0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80113b2:	2301      	movs	r3, #1
 80113b4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80113b6:	f000 fb31 	bl	8011a1c <vPortExitCritical>

	return xReturn;
 80113ba:	69fb      	ldr	r3, [r7, #28]
}
 80113bc:	4618      	mov	r0, r3
 80113be:	3720      	adds	r7, #32
 80113c0:	46bd      	mov	sp, r7
 80113c2:	bd80      	pop	{r7, pc}
 80113c4:	2000042c 	.word	0x2000042c
 80113c8:	20000440 	.word	0x20000440

080113cc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80113cc:	b480      	push	{r7}
 80113ce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80113d0:	4b03      	ldr	r3, [pc, #12]	; (80113e0 <vTaskMissedYield+0x14>)
 80113d2:	2201      	movs	r2, #1
 80113d4:	601a      	str	r2, [r3, #0]
}
 80113d6:	bf00      	nop
 80113d8:	46bd      	mov	sp, r7
 80113da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113de:	4770      	bx	lr
 80113e0:	2000043c 	.word	0x2000043c

080113e4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80113e4:	b580      	push	{r7, lr}
 80113e6:	b082      	sub	sp, #8
 80113e8:	af00      	add	r7, sp, #0
 80113ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80113ec:	f000 f854 	bl	8011498 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80113f0:	4b07      	ldr	r3, [pc, #28]	; (8011410 <prvIdleTask+0x2c>)
 80113f2:	681b      	ldr	r3, [r3, #0]
 80113f4:	2b01      	cmp	r3, #1
 80113f6:	d907      	bls.n	8011408 <prvIdleTask+0x24>
			{
				taskYIELD();
 80113f8:	4b06      	ldr	r3, [pc, #24]	; (8011414 <prvIdleTask+0x30>)
 80113fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80113fe:	601a      	str	r2, [r3, #0]
 8011400:	f3bf 8f4f 	dsb	sy
 8011404:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8011408:	f7ef f882 	bl	8000510 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 801140c:	e7ee      	b.n	80113ec <prvIdleTask+0x8>
 801140e:	bf00      	nop
 8011410:	2000032c 	.word	0x2000032c
 8011414:	e000ed04 	.word	0xe000ed04

08011418 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8011418:	b580      	push	{r7, lr}
 801141a:	b082      	sub	sp, #8
 801141c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801141e:	2300      	movs	r3, #0
 8011420:	607b      	str	r3, [r7, #4]
 8011422:	e00c      	b.n	801143e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011424:	687a      	ldr	r2, [r7, #4]
 8011426:	4613      	mov	r3, r2
 8011428:	009b      	lsls	r3, r3, #2
 801142a:	4413      	add	r3, r2
 801142c:	009b      	lsls	r3, r3, #2
 801142e:	4a12      	ldr	r2, [pc, #72]	; (8011478 <prvInitialiseTaskLists+0x60>)
 8011430:	4413      	add	r3, r2
 8011432:	4618      	mov	r0, r3
 8011434:	f7fe fc72 	bl	800fd1c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	3301      	adds	r3, #1
 801143c:	607b      	str	r3, [r7, #4]
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	2b06      	cmp	r3, #6
 8011442:	d9ef      	bls.n	8011424 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011444:	480d      	ldr	r0, [pc, #52]	; (801147c <prvInitialiseTaskLists+0x64>)
 8011446:	f7fe fc69 	bl	800fd1c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801144a:	480d      	ldr	r0, [pc, #52]	; (8011480 <prvInitialiseTaskLists+0x68>)
 801144c:	f7fe fc66 	bl	800fd1c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011450:	480c      	ldr	r0, [pc, #48]	; (8011484 <prvInitialiseTaskLists+0x6c>)
 8011452:	f7fe fc63 	bl	800fd1c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8011456:	480c      	ldr	r0, [pc, #48]	; (8011488 <prvInitialiseTaskLists+0x70>)
 8011458:	f7fe fc60 	bl	800fd1c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801145c:	480b      	ldr	r0, [pc, #44]	; (801148c <prvInitialiseTaskLists+0x74>)
 801145e:	f7fe fc5d 	bl	800fd1c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8011462:	4b0b      	ldr	r3, [pc, #44]	; (8011490 <prvInitialiseTaskLists+0x78>)
 8011464:	4a05      	ldr	r2, [pc, #20]	; (801147c <prvInitialiseTaskLists+0x64>)
 8011466:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011468:	4b0a      	ldr	r3, [pc, #40]	; (8011494 <prvInitialiseTaskLists+0x7c>)
 801146a:	4a05      	ldr	r2, [pc, #20]	; (8011480 <prvInitialiseTaskLists+0x68>)
 801146c:	601a      	str	r2, [r3, #0]
}
 801146e:	bf00      	nop
 8011470:	3708      	adds	r7, #8
 8011472:	46bd      	mov	sp, r7
 8011474:	bd80      	pop	{r7, pc}
 8011476:	bf00      	nop
 8011478:	2000032c 	.word	0x2000032c
 801147c:	200003b8 	.word	0x200003b8
 8011480:	200003cc 	.word	0x200003cc
 8011484:	200003e8 	.word	0x200003e8
 8011488:	200003fc 	.word	0x200003fc
 801148c:	20000414 	.word	0x20000414
 8011490:	200003e0 	.word	0x200003e0
 8011494:	200003e4 	.word	0x200003e4

08011498 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8011498:	b580      	push	{r7, lr}
 801149a:	b082      	sub	sp, #8
 801149c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801149e:	e019      	b.n	80114d4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80114a0:	f000 fa8a 	bl	80119b8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80114a4:	4b0f      	ldr	r3, [pc, #60]	; (80114e4 <prvCheckTasksWaitingTermination+0x4c>)
 80114a6:	68db      	ldr	r3, [r3, #12]
 80114a8:	68db      	ldr	r3, [r3, #12]
 80114aa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	3304      	adds	r3, #4
 80114b0:	4618      	mov	r0, r3
 80114b2:	f7fe fcbd 	bl	800fe30 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80114b6:	4b0c      	ldr	r3, [pc, #48]	; (80114e8 <prvCheckTasksWaitingTermination+0x50>)
 80114b8:	681b      	ldr	r3, [r3, #0]
 80114ba:	3b01      	subs	r3, #1
 80114bc:	4a0a      	ldr	r2, [pc, #40]	; (80114e8 <prvCheckTasksWaitingTermination+0x50>)
 80114be:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80114c0:	4b0a      	ldr	r3, [pc, #40]	; (80114ec <prvCheckTasksWaitingTermination+0x54>)
 80114c2:	681b      	ldr	r3, [r3, #0]
 80114c4:	3b01      	subs	r3, #1
 80114c6:	4a09      	ldr	r2, [pc, #36]	; (80114ec <prvCheckTasksWaitingTermination+0x54>)
 80114c8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80114ca:	f000 faa7 	bl	8011a1c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80114ce:	6878      	ldr	r0, [r7, #4]
 80114d0:	f000 f80e 	bl	80114f0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80114d4:	4b05      	ldr	r3, [pc, #20]	; (80114ec <prvCheckTasksWaitingTermination+0x54>)
 80114d6:	681b      	ldr	r3, [r3, #0]
 80114d8:	2b00      	cmp	r3, #0
 80114da:	d1e1      	bne.n	80114a0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80114dc:	bf00      	nop
 80114de:	3708      	adds	r7, #8
 80114e0:	46bd      	mov	sp, r7
 80114e2:	bd80      	pop	{r7, pc}
 80114e4:	200003fc 	.word	0x200003fc
 80114e8:	20000428 	.word	0x20000428
 80114ec:	20000410 	.word	0x20000410

080114f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80114f0:	b580      	push	{r7, lr}
 80114f2:	b084      	sub	sp, #16
 80114f4:	af00      	add	r7, sp, #0
 80114f6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80114fe:	2b00      	cmp	r3, #0
 8011500:	d108      	bne.n	8011514 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011506:	4618      	mov	r0, r3
 8011508:	f000 fc44 	bl	8011d94 <vPortFree>
				vPortFree( pxTCB );
 801150c:	6878      	ldr	r0, [r7, #4]
 801150e:	f000 fc41 	bl	8011d94 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8011512:	e019      	b.n	8011548 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 801151a:	2b01      	cmp	r3, #1
 801151c:	d103      	bne.n	8011526 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801151e:	6878      	ldr	r0, [r7, #4]
 8011520:	f000 fc38 	bl	8011d94 <vPortFree>
	}
 8011524:	e010      	b.n	8011548 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 801152c:	2b02      	cmp	r3, #2
 801152e:	d00b      	beq.n	8011548 <prvDeleteTCB+0x58>
 8011530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011534:	b672      	cpsid	i
 8011536:	f383 8811 	msr	BASEPRI, r3
 801153a:	f3bf 8f6f 	isb	sy
 801153e:	f3bf 8f4f 	dsb	sy
 8011542:	b662      	cpsie	i
 8011544:	60fb      	str	r3, [r7, #12]
 8011546:	e7fe      	b.n	8011546 <prvDeleteTCB+0x56>
	}
 8011548:	bf00      	nop
 801154a:	3710      	adds	r7, #16
 801154c:	46bd      	mov	sp, r7
 801154e:	bd80      	pop	{r7, pc}

08011550 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8011550:	b480      	push	{r7}
 8011552:	b083      	sub	sp, #12
 8011554:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011556:	4b0c      	ldr	r3, [pc, #48]	; (8011588 <prvResetNextTaskUnblockTime+0x38>)
 8011558:	681b      	ldr	r3, [r3, #0]
 801155a:	681b      	ldr	r3, [r3, #0]
 801155c:	2b00      	cmp	r3, #0
 801155e:	d104      	bne.n	801156a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8011560:	4b0a      	ldr	r3, [pc, #40]	; (801158c <prvResetNextTaskUnblockTime+0x3c>)
 8011562:	f04f 32ff 	mov.w	r2, #4294967295
 8011566:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8011568:	e008      	b.n	801157c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801156a:	4b07      	ldr	r3, [pc, #28]	; (8011588 <prvResetNextTaskUnblockTime+0x38>)
 801156c:	681b      	ldr	r3, [r3, #0]
 801156e:	68db      	ldr	r3, [r3, #12]
 8011570:	68db      	ldr	r3, [r3, #12]
 8011572:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	685b      	ldr	r3, [r3, #4]
 8011578:	4a04      	ldr	r2, [pc, #16]	; (801158c <prvResetNextTaskUnblockTime+0x3c>)
 801157a:	6013      	str	r3, [r2, #0]
}
 801157c:	bf00      	nop
 801157e:	370c      	adds	r7, #12
 8011580:	46bd      	mov	sp, r7
 8011582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011586:	4770      	bx	lr
 8011588:	200003e0 	.word	0x200003e0
 801158c:	20000448 	.word	0x20000448

08011590 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8011590:	b480      	push	{r7}
 8011592:	b083      	sub	sp, #12
 8011594:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8011596:	4b0b      	ldr	r3, [pc, #44]	; (80115c4 <xTaskGetSchedulerState+0x34>)
 8011598:	681b      	ldr	r3, [r3, #0]
 801159a:	2b00      	cmp	r3, #0
 801159c:	d102      	bne.n	80115a4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801159e:	2301      	movs	r3, #1
 80115a0:	607b      	str	r3, [r7, #4]
 80115a2:	e008      	b.n	80115b6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80115a4:	4b08      	ldr	r3, [pc, #32]	; (80115c8 <xTaskGetSchedulerState+0x38>)
 80115a6:	681b      	ldr	r3, [r3, #0]
 80115a8:	2b00      	cmp	r3, #0
 80115aa:	d102      	bne.n	80115b2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80115ac:	2302      	movs	r3, #2
 80115ae:	607b      	str	r3, [r7, #4]
 80115b0:	e001      	b.n	80115b6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80115b2:	2300      	movs	r3, #0
 80115b4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80115b6:	687b      	ldr	r3, [r7, #4]
	}
 80115b8:	4618      	mov	r0, r3
 80115ba:	370c      	adds	r7, #12
 80115bc:	46bd      	mov	sp, r7
 80115be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115c2:	4770      	bx	lr
 80115c4:	20000434 	.word	0x20000434
 80115c8:	20000450 	.word	0x20000450

080115cc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80115cc:	b580      	push	{r7, lr}
 80115ce:	b086      	sub	sp, #24
 80115d0:	af00      	add	r7, sp, #0
 80115d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80115d8:	2300      	movs	r3, #0
 80115da:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	2b00      	cmp	r3, #0
 80115e0:	d070      	beq.n	80116c4 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80115e2:	4b3b      	ldr	r3, [pc, #236]	; (80116d0 <xTaskPriorityDisinherit+0x104>)
 80115e4:	681b      	ldr	r3, [r3, #0]
 80115e6:	693a      	ldr	r2, [r7, #16]
 80115e8:	429a      	cmp	r2, r3
 80115ea:	d00b      	beq.n	8011604 <xTaskPriorityDisinherit+0x38>
 80115ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115f0:	b672      	cpsid	i
 80115f2:	f383 8811 	msr	BASEPRI, r3
 80115f6:	f3bf 8f6f 	isb	sy
 80115fa:	f3bf 8f4f 	dsb	sy
 80115fe:	b662      	cpsie	i
 8011600:	60fb      	str	r3, [r7, #12]
 8011602:	e7fe      	b.n	8011602 <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 8011604:	693b      	ldr	r3, [r7, #16]
 8011606:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011608:	2b00      	cmp	r3, #0
 801160a:	d10b      	bne.n	8011624 <xTaskPriorityDisinherit+0x58>
 801160c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011610:	b672      	cpsid	i
 8011612:	f383 8811 	msr	BASEPRI, r3
 8011616:	f3bf 8f6f 	isb	sy
 801161a:	f3bf 8f4f 	dsb	sy
 801161e:	b662      	cpsie	i
 8011620:	60bb      	str	r3, [r7, #8]
 8011622:	e7fe      	b.n	8011622 <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 8011624:	693b      	ldr	r3, [r7, #16]
 8011626:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011628:	1e5a      	subs	r2, r3, #1
 801162a:	693b      	ldr	r3, [r7, #16]
 801162c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801162e:	693b      	ldr	r3, [r7, #16]
 8011630:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011632:	693b      	ldr	r3, [r7, #16]
 8011634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011636:	429a      	cmp	r2, r3
 8011638:	d044      	beq.n	80116c4 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801163a:	693b      	ldr	r3, [r7, #16]
 801163c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801163e:	2b00      	cmp	r3, #0
 8011640:	d140      	bne.n	80116c4 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011642:	693b      	ldr	r3, [r7, #16]
 8011644:	3304      	adds	r3, #4
 8011646:	4618      	mov	r0, r3
 8011648:	f7fe fbf2 	bl	800fe30 <uxListRemove>
 801164c:	4603      	mov	r3, r0
 801164e:	2b00      	cmp	r3, #0
 8011650:	d115      	bne.n	801167e <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8011652:	693b      	ldr	r3, [r7, #16]
 8011654:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011656:	491f      	ldr	r1, [pc, #124]	; (80116d4 <xTaskPriorityDisinherit+0x108>)
 8011658:	4613      	mov	r3, r2
 801165a:	009b      	lsls	r3, r3, #2
 801165c:	4413      	add	r3, r2
 801165e:	009b      	lsls	r3, r3, #2
 8011660:	440b      	add	r3, r1
 8011662:	681b      	ldr	r3, [r3, #0]
 8011664:	2b00      	cmp	r3, #0
 8011666:	d10a      	bne.n	801167e <xTaskPriorityDisinherit+0xb2>
 8011668:	693b      	ldr	r3, [r7, #16]
 801166a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801166c:	2201      	movs	r2, #1
 801166e:	fa02 f303 	lsl.w	r3, r2, r3
 8011672:	43da      	mvns	r2, r3
 8011674:	4b18      	ldr	r3, [pc, #96]	; (80116d8 <xTaskPriorityDisinherit+0x10c>)
 8011676:	681b      	ldr	r3, [r3, #0]
 8011678:	4013      	ands	r3, r2
 801167a:	4a17      	ldr	r2, [pc, #92]	; (80116d8 <xTaskPriorityDisinherit+0x10c>)
 801167c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801167e:	693b      	ldr	r3, [r7, #16]
 8011680:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011682:	693b      	ldr	r3, [r7, #16]
 8011684:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011686:	693b      	ldr	r3, [r7, #16]
 8011688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801168a:	f1c3 0207 	rsb	r2, r3, #7
 801168e:	693b      	ldr	r3, [r7, #16]
 8011690:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8011692:	693b      	ldr	r3, [r7, #16]
 8011694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011696:	2201      	movs	r2, #1
 8011698:	409a      	lsls	r2, r3
 801169a:	4b0f      	ldr	r3, [pc, #60]	; (80116d8 <xTaskPriorityDisinherit+0x10c>)
 801169c:	681b      	ldr	r3, [r3, #0]
 801169e:	4313      	orrs	r3, r2
 80116a0:	4a0d      	ldr	r2, [pc, #52]	; (80116d8 <xTaskPriorityDisinherit+0x10c>)
 80116a2:	6013      	str	r3, [r2, #0]
 80116a4:	693b      	ldr	r3, [r7, #16]
 80116a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80116a8:	4613      	mov	r3, r2
 80116aa:	009b      	lsls	r3, r3, #2
 80116ac:	4413      	add	r3, r2
 80116ae:	009b      	lsls	r3, r3, #2
 80116b0:	4a08      	ldr	r2, [pc, #32]	; (80116d4 <xTaskPriorityDisinherit+0x108>)
 80116b2:	441a      	add	r2, r3
 80116b4:	693b      	ldr	r3, [r7, #16]
 80116b6:	3304      	adds	r3, #4
 80116b8:	4619      	mov	r1, r3
 80116ba:	4610      	mov	r0, r2
 80116bc:	f7fe fb5b 	bl	800fd76 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80116c0:	2301      	movs	r3, #1
 80116c2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80116c4:	697b      	ldr	r3, [r7, #20]
	}
 80116c6:	4618      	mov	r0, r3
 80116c8:	3718      	adds	r7, #24
 80116ca:	46bd      	mov	sp, r7
 80116cc:	bd80      	pop	{r7, pc}
 80116ce:	bf00      	nop
 80116d0:	20000328 	.word	0x20000328
 80116d4:	2000032c 	.word	0x2000032c
 80116d8:	20000430 	.word	0x20000430

080116dc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80116dc:	b580      	push	{r7, lr}
 80116de:	b084      	sub	sp, #16
 80116e0:	af00      	add	r7, sp, #0
 80116e2:	6078      	str	r0, [r7, #4]
 80116e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80116e6:	4b29      	ldr	r3, [pc, #164]	; (801178c <prvAddCurrentTaskToDelayedList+0xb0>)
 80116e8:	681b      	ldr	r3, [r3, #0]
 80116ea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80116ec:	4b28      	ldr	r3, [pc, #160]	; (8011790 <prvAddCurrentTaskToDelayedList+0xb4>)
 80116ee:	681b      	ldr	r3, [r3, #0]
 80116f0:	3304      	adds	r3, #4
 80116f2:	4618      	mov	r0, r3
 80116f4:	f7fe fb9c 	bl	800fe30 <uxListRemove>
 80116f8:	4603      	mov	r3, r0
 80116fa:	2b00      	cmp	r3, #0
 80116fc:	d10b      	bne.n	8011716 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80116fe:	4b24      	ldr	r3, [pc, #144]	; (8011790 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011700:	681b      	ldr	r3, [r3, #0]
 8011702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011704:	2201      	movs	r2, #1
 8011706:	fa02 f303 	lsl.w	r3, r2, r3
 801170a:	43da      	mvns	r2, r3
 801170c:	4b21      	ldr	r3, [pc, #132]	; (8011794 <prvAddCurrentTaskToDelayedList+0xb8>)
 801170e:	681b      	ldr	r3, [r3, #0]
 8011710:	4013      	ands	r3, r2
 8011712:	4a20      	ldr	r2, [pc, #128]	; (8011794 <prvAddCurrentTaskToDelayedList+0xb8>)
 8011714:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	f1b3 3fff 	cmp.w	r3, #4294967295
 801171c:	d10a      	bne.n	8011734 <prvAddCurrentTaskToDelayedList+0x58>
 801171e:	683b      	ldr	r3, [r7, #0]
 8011720:	2b00      	cmp	r3, #0
 8011722:	d007      	beq.n	8011734 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011724:	4b1a      	ldr	r3, [pc, #104]	; (8011790 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011726:	681b      	ldr	r3, [r3, #0]
 8011728:	3304      	adds	r3, #4
 801172a:	4619      	mov	r1, r3
 801172c:	481a      	ldr	r0, [pc, #104]	; (8011798 <prvAddCurrentTaskToDelayedList+0xbc>)
 801172e:	f7fe fb22 	bl	800fd76 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8011732:	e026      	b.n	8011782 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8011734:	68fa      	ldr	r2, [r7, #12]
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	4413      	add	r3, r2
 801173a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801173c:	4b14      	ldr	r3, [pc, #80]	; (8011790 <prvAddCurrentTaskToDelayedList+0xb4>)
 801173e:	681b      	ldr	r3, [r3, #0]
 8011740:	68ba      	ldr	r2, [r7, #8]
 8011742:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8011744:	68ba      	ldr	r2, [r7, #8]
 8011746:	68fb      	ldr	r3, [r7, #12]
 8011748:	429a      	cmp	r2, r3
 801174a:	d209      	bcs.n	8011760 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801174c:	4b13      	ldr	r3, [pc, #76]	; (801179c <prvAddCurrentTaskToDelayedList+0xc0>)
 801174e:	681a      	ldr	r2, [r3, #0]
 8011750:	4b0f      	ldr	r3, [pc, #60]	; (8011790 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011752:	681b      	ldr	r3, [r3, #0]
 8011754:	3304      	adds	r3, #4
 8011756:	4619      	mov	r1, r3
 8011758:	4610      	mov	r0, r2
 801175a:	f7fe fb30 	bl	800fdbe <vListInsert>
}
 801175e:	e010      	b.n	8011782 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011760:	4b0f      	ldr	r3, [pc, #60]	; (80117a0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8011762:	681a      	ldr	r2, [r3, #0]
 8011764:	4b0a      	ldr	r3, [pc, #40]	; (8011790 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011766:	681b      	ldr	r3, [r3, #0]
 8011768:	3304      	adds	r3, #4
 801176a:	4619      	mov	r1, r3
 801176c:	4610      	mov	r0, r2
 801176e:	f7fe fb26 	bl	800fdbe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8011772:	4b0c      	ldr	r3, [pc, #48]	; (80117a4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8011774:	681b      	ldr	r3, [r3, #0]
 8011776:	68ba      	ldr	r2, [r7, #8]
 8011778:	429a      	cmp	r2, r3
 801177a:	d202      	bcs.n	8011782 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 801177c:	4a09      	ldr	r2, [pc, #36]	; (80117a4 <prvAddCurrentTaskToDelayedList+0xc8>)
 801177e:	68bb      	ldr	r3, [r7, #8]
 8011780:	6013      	str	r3, [r2, #0]
}
 8011782:	bf00      	nop
 8011784:	3710      	adds	r7, #16
 8011786:	46bd      	mov	sp, r7
 8011788:	bd80      	pop	{r7, pc}
 801178a:	bf00      	nop
 801178c:	2000042c 	.word	0x2000042c
 8011790:	20000328 	.word	0x20000328
 8011794:	20000430 	.word	0x20000430
 8011798:	20000414 	.word	0x20000414
 801179c:	200003e4 	.word	0x200003e4
 80117a0:	200003e0 	.word	0x200003e0
 80117a4:	20000448 	.word	0x20000448

080117a8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80117a8:	b480      	push	{r7}
 80117aa:	b085      	sub	sp, #20
 80117ac:	af00      	add	r7, sp, #0
 80117ae:	60f8      	str	r0, [r7, #12]
 80117b0:	60b9      	str	r1, [r7, #8]
 80117b2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80117b4:	68fb      	ldr	r3, [r7, #12]
 80117b6:	3b04      	subs	r3, #4
 80117b8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80117ba:	68fb      	ldr	r3, [r7, #12]
 80117bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80117c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80117c2:	68fb      	ldr	r3, [r7, #12]
 80117c4:	3b04      	subs	r3, #4
 80117c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80117c8:	68bb      	ldr	r3, [r7, #8]
 80117ca:	f023 0201 	bic.w	r2, r3, #1
 80117ce:	68fb      	ldr	r3, [r7, #12]
 80117d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80117d2:	68fb      	ldr	r3, [r7, #12]
 80117d4:	3b04      	subs	r3, #4
 80117d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80117d8:	4a0c      	ldr	r2, [pc, #48]	; (801180c <pxPortInitialiseStack+0x64>)
 80117da:	68fb      	ldr	r3, [r7, #12]
 80117dc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80117de:	68fb      	ldr	r3, [r7, #12]
 80117e0:	3b14      	subs	r3, #20
 80117e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80117e4:	687a      	ldr	r2, [r7, #4]
 80117e6:	68fb      	ldr	r3, [r7, #12]
 80117e8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80117ea:	68fb      	ldr	r3, [r7, #12]
 80117ec:	3b04      	subs	r3, #4
 80117ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80117f0:	68fb      	ldr	r3, [r7, #12]
 80117f2:	f06f 0202 	mvn.w	r2, #2
 80117f6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80117f8:	68fb      	ldr	r3, [r7, #12]
 80117fa:	3b20      	subs	r3, #32
 80117fc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80117fe:	68fb      	ldr	r3, [r7, #12]
}
 8011800:	4618      	mov	r0, r3
 8011802:	3714      	adds	r7, #20
 8011804:	46bd      	mov	sp, r7
 8011806:	f85d 7b04 	ldr.w	r7, [sp], #4
 801180a:	4770      	bx	lr
 801180c:	08011811 	.word	0x08011811

08011810 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8011810:	b480      	push	{r7}
 8011812:	b085      	sub	sp, #20
 8011814:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8011816:	2300      	movs	r3, #0
 8011818:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801181a:	4b13      	ldr	r3, [pc, #76]	; (8011868 <prvTaskExitError+0x58>)
 801181c:	681b      	ldr	r3, [r3, #0]
 801181e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011822:	d00b      	beq.n	801183c <prvTaskExitError+0x2c>
 8011824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011828:	b672      	cpsid	i
 801182a:	f383 8811 	msr	BASEPRI, r3
 801182e:	f3bf 8f6f 	isb	sy
 8011832:	f3bf 8f4f 	dsb	sy
 8011836:	b662      	cpsie	i
 8011838:	60fb      	str	r3, [r7, #12]
 801183a:	e7fe      	b.n	801183a <prvTaskExitError+0x2a>
 801183c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011840:	b672      	cpsid	i
 8011842:	f383 8811 	msr	BASEPRI, r3
 8011846:	f3bf 8f6f 	isb	sy
 801184a:	f3bf 8f4f 	dsb	sy
 801184e:	b662      	cpsie	i
 8011850:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8011852:	bf00      	nop
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	2b00      	cmp	r3, #0
 8011858:	d0fc      	beq.n	8011854 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801185a:	bf00      	nop
 801185c:	3714      	adds	r7, #20
 801185e:	46bd      	mov	sp, r7
 8011860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011864:	4770      	bx	lr
 8011866:	bf00      	nop
 8011868:	2000002c 	.word	0x2000002c
 801186c:	00000000 	.word	0x00000000

08011870 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011870:	4b07      	ldr	r3, [pc, #28]	; (8011890 <pxCurrentTCBConst2>)
 8011872:	6819      	ldr	r1, [r3, #0]
 8011874:	6808      	ldr	r0, [r1, #0]
 8011876:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801187a:	f380 8809 	msr	PSP, r0
 801187e:	f3bf 8f6f 	isb	sy
 8011882:	f04f 0000 	mov.w	r0, #0
 8011886:	f380 8811 	msr	BASEPRI, r0
 801188a:	4770      	bx	lr
 801188c:	f3af 8000 	nop.w

08011890 <pxCurrentTCBConst2>:
 8011890:	20000328 	.word	0x20000328
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8011894:	bf00      	nop
 8011896:	bf00      	nop

08011898 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8011898:	4808      	ldr	r0, [pc, #32]	; (80118bc <prvPortStartFirstTask+0x24>)
 801189a:	6800      	ldr	r0, [r0, #0]
 801189c:	6800      	ldr	r0, [r0, #0]
 801189e:	f380 8808 	msr	MSP, r0
 80118a2:	f04f 0000 	mov.w	r0, #0
 80118a6:	f380 8814 	msr	CONTROL, r0
 80118aa:	b662      	cpsie	i
 80118ac:	b661      	cpsie	f
 80118ae:	f3bf 8f4f 	dsb	sy
 80118b2:	f3bf 8f6f 	isb	sy
 80118b6:	df00      	svc	0
 80118b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80118ba:	bf00      	nop
 80118bc:	e000ed08 	.word	0xe000ed08

080118c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80118c0:	b580      	push	{r7, lr}
 80118c2:	b084      	sub	sp, #16
 80118c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80118c6:	4b36      	ldr	r3, [pc, #216]	; (80119a0 <xPortStartScheduler+0xe0>)
 80118c8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80118ca:	68fb      	ldr	r3, [r7, #12]
 80118cc:	781b      	ldrb	r3, [r3, #0]
 80118ce:	b2db      	uxtb	r3, r3
 80118d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80118d2:	68fb      	ldr	r3, [r7, #12]
 80118d4:	22ff      	movs	r2, #255	; 0xff
 80118d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80118d8:	68fb      	ldr	r3, [r7, #12]
 80118da:	781b      	ldrb	r3, [r3, #0]
 80118dc:	b2db      	uxtb	r3, r3
 80118de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80118e0:	78fb      	ldrb	r3, [r7, #3]
 80118e2:	b2db      	uxtb	r3, r3
 80118e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80118e8:	b2da      	uxtb	r2, r3
 80118ea:	4b2e      	ldr	r3, [pc, #184]	; (80119a4 <xPortStartScheduler+0xe4>)
 80118ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80118ee:	4b2e      	ldr	r3, [pc, #184]	; (80119a8 <xPortStartScheduler+0xe8>)
 80118f0:	2207      	movs	r2, #7
 80118f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80118f4:	e009      	b.n	801190a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80118f6:	4b2c      	ldr	r3, [pc, #176]	; (80119a8 <xPortStartScheduler+0xe8>)
 80118f8:	681b      	ldr	r3, [r3, #0]
 80118fa:	3b01      	subs	r3, #1
 80118fc:	4a2a      	ldr	r2, [pc, #168]	; (80119a8 <xPortStartScheduler+0xe8>)
 80118fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8011900:	78fb      	ldrb	r3, [r7, #3]
 8011902:	b2db      	uxtb	r3, r3
 8011904:	005b      	lsls	r3, r3, #1
 8011906:	b2db      	uxtb	r3, r3
 8011908:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801190a:	78fb      	ldrb	r3, [r7, #3]
 801190c:	b2db      	uxtb	r3, r3
 801190e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011912:	2b80      	cmp	r3, #128	; 0x80
 8011914:	d0ef      	beq.n	80118f6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8011916:	4b24      	ldr	r3, [pc, #144]	; (80119a8 <xPortStartScheduler+0xe8>)
 8011918:	681b      	ldr	r3, [r3, #0]
 801191a:	f1c3 0307 	rsb	r3, r3, #7
 801191e:	2b04      	cmp	r3, #4
 8011920:	d00b      	beq.n	801193a <xPortStartScheduler+0x7a>
 8011922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011926:	b672      	cpsid	i
 8011928:	f383 8811 	msr	BASEPRI, r3
 801192c:	f3bf 8f6f 	isb	sy
 8011930:	f3bf 8f4f 	dsb	sy
 8011934:	b662      	cpsie	i
 8011936:	60bb      	str	r3, [r7, #8]
 8011938:	e7fe      	b.n	8011938 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801193a:	4b1b      	ldr	r3, [pc, #108]	; (80119a8 <xPortStartScheduler+0xe8>)
 801193c:	681b      	ldr	r3, [r3, #0]
 801193e:	021b      	lsls	r3, r3, #8
 8011940:	4a19      	ldr	r2, [pc, #100]	; (80119a8 <xPortStartScheduler+0xe8>)
 8011942:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8011944:	4b18      	ldr	r3, [pc, #96]	; (80119a8 <xPortStartScheduler+0xe8>)
 8011946:	681b      	ldr	r3, [r3, #0]
 8011948:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801194c:	4a16      	ldr	r2, [pc, #88]	; (80119a8 <xPortStartScheduler+0xe8>)
 801194e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	b2da      	uxtb	r2, r3
 8011954:	68fb      	ldr	r3, [r7, #12]
 8011956:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8011958:	4b14      	ldr	r3, [pc, #80]	; (80119ac <xPortStartScheduler+0xec>)
 801195a:	681b      	ldr	r3, [r3, #0]
 801195c:	4a13      	ldr	r2, [pc, #76]	; (80119ac <xPortStartScheduler+0xec>)
 801195e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8011962:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8011964:	4b11      	ldr	r3, [pc, #68]	; (80119ac <xPortStartScheduler+0xec>)
 8011966:	681b      	ldr	r3, [r3, #0]
 8011968:	4a10      	ldr	r2, [pc, #64]	; (80119ac <xPortStartScheduler+0xec>)
 801196a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801196e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8011970:	f000 f8d4 	bl	8011b1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8011974:	4b0e      	ldr	r3, [pc, #56]	; (80119b0 <xPortStartScheduler+0xf0>)
 8011976:	2200      	movs	r2, #0
 8011978:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801197a:	f000 f8f3 	bl	8011b64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801197e:	4b0d      	ldr	r3, [pc, #52]	; (80119b4 <xPortStartScheduler+0xf4>)
 8011980:	681b      	ldr	r3, [r3, #0]
 8011982:	4a0c      	ldr	r2, [pc, #48]	; (80119b4 <xPortStartScheduler+0xf4>)
 8011984:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8011988:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801198a:	f7ff ff85 	bl	8011898 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801198e:	f7ff fb97 	bl	80110c0 <vTaskSwitchContext>
	prvTaskExitError();
 8011992:	f7ff ff3d 	bl	8011810 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8011996:	2300      	movs	r3, #0
}
 8011998:	4618      	mov	r0, r3
 801199a:	3710      	adds	r7, #16
 801199c:	46bd      	mov	sp, r7
 801199e:	bd80      	pop	{r7, pc}
 80119a0:	e000e400 	.word	0xe000e400
 80119a4:	20000454 	.word	0x20000454
 80119a8:	20000458 	.word	0x20000458
 80119ac:	e000ed20 	.word	0xe000ed20
 80119b0:	2000002c 	.word	0x2000002c
 80119b4:	e000ef34 	.word	0xe000ef34

080119b8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80119b8:	b480      	push	{r7}
 80119ba:	b083      	sub	sp, #12
 80119bc:	af00      	add	r7, sp, #0
 80119be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119c2:	b672      	cpsid	i
 80119c4:	f383 8811 	msr	BASEPRI, r3
 80119c8:	f3bf 8f6f 	isb	sy
 80119cc:	f3bf 8f4f 	dsb	sy
 80119d0:	b662      	cpsie	i
 80119d2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80119d4:	4b0f      	ldr	r3, [pc, #60]	; (8011a14 <vPortEnterCritical+0x5c>)
 80119d6:	681b      	ldr	r3, [r3, #0]
 80119d8:	3301      	adds	r3, #1
 80119da:	4a0e      	ldr	r2, [pc, #56]	; (8011a14 <vPortEnterCritical+0x5c>)
 80119dc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80119de:	4b0d      	ldr	r3, [pc, #52]	; (8011a14 <vPortEnterCritical+0x5c>)
 80119e0:	681b      	ldr	r3, [r3, #0]
 80119e2:	2b01      	cmp	r3, #1
 80119e4:	d110      	bne.n	8011a08 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80119e6:	4b0c      	ldr	r3, [pc, #48]	; (8011a18 <vPortEnterCritical+0x60>)
 80119e8:	681b      	ldr	r3, [r3, #0]
 80119ea:	b2db      	uxtb	r3, r3
 80119ec:	2b00      	cmp	r3, #0
 80119ee:	d00b      	beq.n	8011a08 <vPortEnterCritical+0x50>
 80119f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119f4:	b672      	cpsid	i
 80119f6:	f383 8811 	msr	BASEPRI, r3
 80119fa:	f3bf 8f6f 	isb	sy
 80119fe:	f3bf 8f4f 	dsb	sy
 8011a02:	b662      	cpsie	i
 8011a04:	603b      	str	r3, [r7, #0]
 8011a06:	e7fe      	b.n	8011a06 <vPortEnterCritical+0x4e>
	}
}
 8011a08:	bf00      	nop
 8011a0a:	370c      	adds	r7, #12
 8011a0c:	46bd      	mov	sp, r7
 8011a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a12:	4770      	bx	lr
 8011a14:	2000002c 	.word	0x2000002c
 8011a18:	e000ed04 	.word	0xe000ed04

08011a1c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8011a1c:	b480      	push	{r7}
 8011a1e:	b083      	sub	sp, #12
 8011a20:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8011a22:	4b12      	ldr	r3, [pc, #72]	; (8011a6c <vPortExitCritical+0x50>)
 8011a24:	681b      	ldr	r3, [r3, #0]
 8011a26:	2b00      	cmp	r3, #0
 8011a28:	d10b      	bne.n	8011a42 <vPortExitCritical+0x26>
 8011a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a2e:	b672      	cpsid	i
 8011a30:	f383 8811 	msr	BASEPRI, r3
 8011a34:	f3bf 8f6f 	isb	sy
 8011a38:	f3bf 8f4f 	dsb	sy
 8011a3c:	b662      	cpsie	i
 8011a3e:	607b      	str	r3, [r7, #4]
 8011a40:	e7fe      	b.n	8011a40 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8011a42:	4b0a      	ldr	r3, [pc, #40]	; (8011a6c <vPortExitCritical+0x50>)
 8011a44:	681b      	ldr	r3, [r3, #0]
 8011a46:	3b01      	subs	r3, #1
 8011a48:	4a08      	ldr	r2, [pc, #32]	; (8011a6c <vPortExitCritical+0x50>)
 8011a4a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8011a4c:	4b07      	ldr	r3, [pc, #28]	; (8011a6c <vPortExitCritical+0x50>)
 8011a4e:	681b      	ldr	r3, [r3, #0]
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	d104      	bne.n	8011a5e <vPortExitCritical+0x42>
 8011a54:	2300      	movs	r3, #0
 8011a56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011a58:	683b      	ldr	r3, [r7, #0]
 8011a5a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8011a5e:	bf00      	nop
 8011a60:	370c      	adds	r7, #12
 8011a62:	46bd      	mov	sp, r7
 8011a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a68:	4770      	bx	lr
 8011a6a:	bf00      	nop
 8011a6c:	2000002c 	.word	0x2000002c

08011a70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8011a70:	f3ef 8009 	mrs	r0, PSP
 8011a74:	f3bf 8f6f 	isb	sy
 8011a78:	4b15      	ldr	r3, [pc, #84]	; (8011ad0 <pxCurrentTCBConst>)
 8011a7a:	681a      	ldr	r2, [r3, #0]
 8011a7c:	f01e 0f10 	tst.w	lr, #16
 8011a80:	bf08      	it	eq
 8011a82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8011a86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a8a:	6010      	str	r0, [r2, #0]
 8011a8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8011a90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8011a94:	b672      	cpsid	i
 8011a96:	f380 8811 	msr	BASEPRI, r0
 8011a9a:	f3bf 8f4f 	dsb	sy
 8011a9e:	f3bf 8f6f 	isb	sy
 8011aa2:	b662      	cpsie	i
 8011aa4:	f7ff fb0c 	bl	80110c0 <vTaskSwitchContext>
 8011aa8:	f04f 0000 	mov.w	r0, #0
 8011aac:	f380 8811 	msr	BASEPRI, r0
 8011ab0:	bc09      	pop	{r0, r3}
 8011ab2:	6819      	ldr	r1, [r3, #0]
 8011ab4:	6808      	ldr	r0, [r1, #0]
 8011ab6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011aba:	f01e 0f10 	tst.w	lr, #16
 8011abe:	bf08      	it	eq
 8011ac0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011ac4:	f380 8809 	msr	PSP, r0
 8011ac8:	f3bf 8f6f 	isb	sy
 8011acc:	4770      	bx	lr
 8011ace:	bf00      	nop

08011ad0 <pxCurrentTCBConst>:
 8011ad0:	20000328 	.word	0x20000328
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011ad4:	bf00      	nop
 8011ad6:	bf00      	nop

08011ad8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011ad8:	b580      	push	{r7, lr}
 8011ada:	b082      	sub	sp, #8
 8011adc:	af00      	add	r7, sp, #0
	__asm volatile
 8011ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ae2:	b672      	cpsid	i
 8011ae4:	f383 8811 	msr	BASEPRI, r3
 8011ae8:	f3bf 8f6f 	isb	sy
 8011aec:	f3bf 8f4f 	dsb	sy
 8011af0:	b662      	cpsie	i
 8011af2:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011af4:	f7ff fa2a 	bl	8010f4c <xTaskIncrementTick>
 8011af8:	4603      	mov	r3, r0
 8011afa:	2b00      	cmp	r3, #0
 8011afc:	d003      	beq.n	8011b06 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8011afe:	4b06      	ldr	r3, [pc, #24]	; (8011b18 <SysTick_Handler+0x40>)
 8011b00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011b04:	601a      	str	r2, [r3, #0]
 8011b06:	2300      	movs	r3, #0
 8011b08:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011b0a:	683b      	ldr	r3, [r7, #0]
 8011b0c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8011b10:	bf00      	nop
 8011b12:	3708      	adds	r7, #8
 8011b14:	46bd      	mov	sp, r7
 8011b16:	bd80      	pop	{r7, pc}
 8011b18:	e000ed04 	.word	0xe000ed04

08011b1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8011b1c:	b480      	push	{r7}
 8011b1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8011b20:	4b0b      	ldr	r3, [pc, #44]	; (8011b50 <vPortSetupTimerInterrupt+0x34>)
 8011b22:	2200      	movs	r2, #0
 8011b24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8011b26:	4b0b      	ldr	r3, [pc, #44]	; (8011b54 <vPortSetupTimerInterrupt+0x38>)
 8011b28:	2200      	movs	r2, #0
 8011b2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8011b2c:	4b0a      	ldr	r3, [pc, #40]	; (8011b58 <vPortSetupTimerInterrupt+0x3c>)
 8011b2e:	681b      	ldr	r3, [r3, #0]
 8011b30:	4a0a      	ldr	r2, [pc, #40]	; (8011b5c <vPortSetupTimerInterrupt+0x40>)
 8011b32:	fba2 2303 	umull	r2, r3, r2, r3
 8011b36:	099b      	lsrs	r3, r3, #6
 8011b38:	4a09      	ldr	r2, [pc, #36]	; (8011b60 <vPortSetupTimerInterrupt+0x44>)
 8011b3a:	3b01      	subs	r3, #1
 8011b3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8011b3e:	4b04      	ldr	r3, [pc, #16]	; (8011b50 <vPortSetupTimerInterrupt+0x34>)
 8011b40:	2207      	movs	r2, #7
 8011b42:	601a      	str	r2, [r3, #0]
}
 8011b44:	bf00      	nop
 8011b46:	46bd      	mov	sp, r7
 8011b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b4c:	4770      	bx	lr
 8011b4e:	bf00      	nop
 8011b50:	e000e010 	.word	0xe000e010
 8011b54:	e000e018 	.word	0xe000e018
 8011b58:	20000000 	.word	0x20000000
 8011b5c:	10624dd3 	.word	0x10624dd3
 8011b60:	e000e014 	.word	0xe000e014

08011b64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8011b64:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8011b74 <vPortEnableVFP+0x10>
 8011b68:	6801      	ldr	r1, [r0, #0]
 8011b6a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8011b6e:	6001      	str	r1, [r0, #0]
 8011b70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8011b72:	bf00      	nop
 8011b74:	e000ed88 	.word	0xe000ed88

08011b78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8011b78:	b480      	push	{r7}
 8011b7a:	b085      	sub	sp, #20
 8011b7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8011b7e:	f3ef 8305 	mrs	r3, IPSR
 8011b82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8011b84:	68fb      	ldr	r3, [r7, #12]
 8011b86:	2b0f      	cmp	r3, #15
 8011b88:	d915      	bls.n	8011bb6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8011b8a:	4a18      	ldr	r2, [pc, #96]	; (8011bec <vPortValidateInterruptPriority+0x74>)
 8011b8c:	68fb      	ldr	r3, [r7, #12]
 8011b8e:	4413      	add	r3, r2
 8011b90:	781b      	ldrb	r3, [r3, #0]
 8011b92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8011b94:	4b16      	ldr	r3, [pc, #88]	; (8011bf0 <vPortValidateInterruptPriority+0x78>)
 8011b96:	781b      	ldrb	r3, [r3, #0]
 8011b98:	7afa      	ldrb	r2, [r7, #11]
 8011b9a:	429a      	cmp	r2, r3
 8011b9c:	d20b      	bcs.n	8011bb6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8011b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ba2:	b672      	cpsid	i
 8011ba4:	f383 8811 	msr	BASEPRI, r3
 8011ba8:	f3bf 8f6f 	isb	sy
 8011bac:	f3bf 8f4f 	dsb	sy
 8011bb0:	b662      	cpsie	i
 8011bb2:	607b      	str	r3, [r7, #4]
 8011bb4:	e7fe      	b.n	8011bb4 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8011bb6:	4b0f      	ldr	r3, [pc, #60]	; (8011bf4 <vPortValidateInterruptPriority+0x7c>)
 8011bb8:	681b      	ldr	r3, [r3, #0]
 8011bba:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8011bbe:	4b0e      	ldr	r3, [pc, #56]	; (8011bf8 <vPortValidateInterruptPriority+0x80>)
 8011bc0:	681b      	ldr	r3, [r3, #0]
 8011bc2:	429a      	cmp	r2, r3
 8011bc4:	d90b      	bls.n	8011bde <vPortValidateInterruptPriority+0x66>
 8011bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011bca:	b672      	cpsid	i
 8011bcc:	f383 8811 	msr	BASEPRI, r3
 8011bd0:	f3bf 8f6f 	isb	sy
 8011bd4:	f3bf 8f4f 	dsb	sy
 8011bd8:	b662      	cpsie	i
 8011bda:	603b      	str	r3, [r7, #0]
 8011bdc:	e7fe      	b.n	8011bdc <vPortValidateInterruptPriority+0x64>
	}
 8011bde:	bf00      	nop
 8011be0:	3714      	adds	r7, #20
 8011be2:	46bd      	mov	sp, r7
 8011be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011be8:	4770      	bx	lr
 8011bea:	bf00      	nop
 8011bec:	e000e3f0 	.word	0xe000e3f0
 8011bf0:	20000454 	.word	0x20000454
 8011bf4:	e000ed0c 	.word	0xe000ed0c
 8011bf8:	20000458 	.word	0x20000458

08011bfc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8011bfc:	b580      	push	{r7, lr}
 8011bfe:	b08a      	sub	sp, #40	; 0x28
 8011c00:	af00      	add	r7, sp, #0
 8011c02:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8011c04:	2300      	movs	r3, #0
 8011c06:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8011c08:	f7ff f8d2 	bl	8010db0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8011c0c:	4b5c      	ldr	r3, [pc, #368]	; (8011d80 <pvPortMalloc+0x184>)
 8011c0e:	681b      	ldr	r3, [r3, #0]
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	d101      	bne.n	8011c18 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8011c14:	f000 f91a 	bl	8011e4c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8011c18:	4b5a      	ldr	r3, [pc, #360]	; (8011d84 <pvPortMalloc+0x188>)
 8011c1a:	681a      	ldr	r2, [r3, #0]
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	4013      	ands	r3, r2
 8011c20:	2b00      	cmp	r3, #0
 8011c22:	f040 8090 	bne.w	8011d46 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	2b00      	cmp	r3, #0
 8011c2a:	d01e      	beq.n	8011c6a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8011c2c:	2208      	movs	r2, #8
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	4413      	add	r3, r2
 8011c32:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	f003 0307 	and.w	r3, r3, #7
 8011c3a:	2b00      	cmp	r3, #0
 8011c3c:	d015      	beq.n	8011c6a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	f023 0307 	bic.w	r3, r3, #7
 8011c44:	3308      	adds	r3, #8
 8011c46:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	f003 0307 	and.w	r3, r3, #7
 8011c4e:	2b00      	cmp	r3, #0
 8011c50:	d00b      	beq.n	8011c6a <pvPortMalloc+0x6e>
 8011c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c56:	b672      	cpsid	i
 8011c58:	f383 8811 	msr	BASEPRI, r3
 8011c5c:	f3bf 8f6f 	isb	sy
 8011c60:	f3bf 8f4f 	dsb	sy
 8011c64:	b662      	cpsie	i
 8011c66:	617b      	str	r3, [r7, #20]
 8011c68:	e7fe      	b.n	8011c68 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	2b00      	cmp	r3, #0
 8011c6e:	d06a      	beq.n	8011d46 <pvPortMalloc+0x14a>
 8011c70:	4b45      	ldr	r3, [pc, #276]	; (8011d88 <pvPortMalloc+0x18c>)
 8011c72:	681b      	ldr	r3, [r3, #0]
 8011c74:	687a      	ldr	r2, [r7, #4]
 8011c76:	429a      	cmp	r2, r3
 8011c78:	d865      	bhi.n	8011d46 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8011c7a:	4b44      	ldr	r3, [pc, #272]	; (8011d8c <pvPortMalloc+0x190>)
 8011c7c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8011c7e:	4b43      	ldr	r3, [pc, #268]	; (8011d8c <pvPortMalloc+0x190>)
 8011c80:	681b      	ldr	r3, [r3, #0]
 8011c82:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011c84:	e004      	b.n	8011c90 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8011c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c88:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8011c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c8c:	681b      	ldr	r3, [r3, #0]
 8011c8e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c92:	685b      	ldr	r3, [r3, #4]
 8011c94:	687a      	ldr	r2, [r7, #4]
 8011c96:	429a      	cmp	r2, r3
 8011c98:	d903      	bls.n	8011ca2 <pvPortMalloc+0xa6>
 8011c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c9c:	681b      	ldr	r3, [r3, #0]
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	d1f1      	bne.n	8011c86 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8011ca2:	4b37      	ldr	r3, [pc, #220]	; (8011d80 <pvPortMalloc+0x184>)
 8011ca4:	681b      	ldr	r3, [r3, #0]
 8011ca6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011ca8:	429a      	cmp	r2, r3
 8011caa:	d04c      	beq.n	8011d46 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8011cac:	6a3b      	ldr	r3, [r7, #32]
 8011cae:	681b      	ldr	r3, [r3, #0]
 8011cb0:	2208      	movs	r2, #8
 8011cb2:	4413      	add	r3, r2
 8011cb4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cb8:	681a      	ldr	r2, [r3, #0]
 8011cba:	6a3b      	ldr	r3, [r7, #32]
 8011cbc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8011cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cc0:	685a      	ldr	r2, [r3, #4]
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	1ad2      	subs	r2, r2, r3
 8011cc6:	2308      	movs	r3, #8
 8011cc8:	005b      	lsls	r3, r3, #1
 8011cca:	429a      	cmp	r2, r3
 8011ccc:	d920      	bls.n	8011d10 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8011cce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011cd0:	687b      	ldr	r3, [r7, #4]
 8011cd2:	4413      	add	r3, r2
 8011cd4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011cd6:	69bb      	ldr	r3, [r7, #24]
 8011cd8:	f003 0307 	and.w	r3, r3, #7
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	d00b      	beq.n	8011cf8 <pvPortMalloc+0xfc>
 8011ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ce4:	b672      	cpsid	i
 8011ce6:	f383 8811 	msr	BASEPRI, r3
 8011cea:	f3bf 8f6f 	isb	sy
 8011cee:	f3bf 8f4f 	dsb	sy
 8011cf2:	b662      	cpsie	i
 8011cf4:	613b      	str	r3, [r7, #16]
 8011cf6:	e7fe      	b.n	8011cf6 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cfa:	685a      	ldr	r2, [r3, #4]
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	1ad2      	subs	r2, r2, r3
 8011d00:	69bb      	ldr	r3, [r7, #24]
 8011d02:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8011d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d06:	687a      	ldr	r2, [r7, #4]
 8011d08:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8011d0a:	69b8      	ldr	r0, [r7, #24]
 8011d0c:	f000 f900 	bl	8011f10 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011d10:	4b1d      	ldr	r3, [pc, #116]	; (8011d88 <pvPortMalloc+0x18c>)
 8011d12:	681a      	ldr	r2, [r3, #0]
 8011d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d16:	685b      	ldr	r3, [r3, #4]
 8011d18:	1ad3      	subs	r3, r2, r3
 8011d1a:	4a1b      	ldr	r2, [pc, #108]	; (8011d88 <pvPortMalloc+0x18c>)
 8011d1c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8011d1e:	4b1a      	ldr	r3, [pc, #104]	; (8011d88 <pvPortMalloc+0x18c>)
 8011d20:	681a      	ldr	r2, [r3, #0]
 8011d22:	4b1b      	ldr	r3, [pc, #108]	; (8011d90 <pvPortMalloc+0x194>)
 8011d24:	681b      	ldr	r3, [r3, #0]
 8011d26:	429a      	cmp	r2, r3
 8011d28:	d203      	bcs.n	8011d32 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8011d2a:	4b17      	ldr	r3, [pc, #92]	; (8011d88 <pvPortMalloc+0x18c>)
 8011d2c:	681b      	ldr	r3, [r3, #0]
 8011d2e:	4a18      	ldr	r2, [pc, #96]	; (8011d90 <pvPortMalloc+0x194>)
 8011d30:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8011d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d34:	685a      	ldr	r2, [r3, #4]
 8011d36:	4b13      	ldr	r3, [pc, #76]	; (8011d84 <pvPortMalloc+0x188>)
 8011d38:	681b      	ldr	r3, [r3, #0]
 8011d3a:	431a      	orrs	r2, r3
 8011d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d3e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d42:	2200      	movs	r2, #0
 8011d44:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011d46:	f7ff f841 	bl	8010dcc <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8011d4a:	69fb      	ldr	r3, [r7, #28]
 8011d4c:	2b00      	cmp	r3, #0
 8011d4e:	d101      	bne.n	8011d54 <pvPortMalloc+0x158>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8011d50:	f7ee fbf0 	bl	8000534 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8011d54:	69fb      	ldr	r3, [r7, #28]
 8011d56:	f003 0307 	and.w	r3, r3, #7
 8011d5a:	2b00      	cmp	r3, #0
 8011d5c:	d00b      	beq.n	8011d76 <pvPortMalloc+0x17a>
 8011d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d62:	b672      	cpsid	i
 8011d64:	f383 8811 	msr	BASEPRI, r3
 8011d68:	f3bf 8f6f 	isb	sy
 8011d6c:	f3bf 8f4f 	dsb	sy
 8011d70:	b662      	cpsie	i
 8011d72:	60fb      	str	r3, [r7, #12]
 8011d74:	e7fe      	b.n	8011d74 <pvPortMalloc+0x178>
	return pvReturn;
 8011d76:	69fb      	ldr	r3, [r7, #28]
}
 8011d78:	4618      	mov	r0, r3
 8011d7a:	3728      	adds	r7, #40	; 0x28
 8011d7c:	46bd      	mov	sp, r7
 8011d7e:	bd80      	pop	{r7, pc}
 8011d80:	20008464 	.word	0x20008464
 8011d84:	20008470 	.word	0x20008470
 8011d88:	20008468 	.word	0x20008468
 8011d8c:	2000845c 	.word	0x2000845c
 8011d90:	2000846c 	.word	0x2000846c

08011d94 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011d94:	b580      	push	{r7, lr}
 8011d96:	b086      	sub	sp, #24
 8011d98:	af00      	add	r7, sp, #0
 8011d9a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	2b00      	cmp	r3, #0
 8011da4:	d04a      	beq.n	8011e3c <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8011da6:	2308      	movs	r3, #8
 8011da8:	425b      	negs	r3, r3
 8011daa:	697a      	ldr	r2, [r7, #20]
 8011dac:	4413      	add	r3, r2
 8011dae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8011db0:	697b      	ldr	r3, [r7, #20]
 8011db2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011db4:	693b      	ldr	r3, [r7, #16]
 8011db6:	685a      	ldr	r2, [r3, #4]
 8011db8:	4b22      	ldr	r3, [pc, #136]	; (8011e44 <vPortFree+0xb0>)
 8011dba:	681b      	ldr	r3, [r3, #0]
 8011dbc:	4013      	ands	r3, r2
 8011dbe:	2b00      	cmp	r3, #0
 8011dc0:	d10b      	bne.n	8011dda <vPortFree+0x46>
 8011dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011dc6:	b672      	cpsid	i
 8011dc8:	f383 8811 	msr	BASEPRI, r3
 8011dcc:	f3bf 8f6f 	isb	sy
 8011dd0:	f3bf 8f4f 	dsb	sy
 8011dd4:	b662      	cpsie	i
 8011dd6:	60fb      	str	r3, [r7, #12]
 8011dd8:	e7fe      	b.n	8011dd8 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011dda:	693b      	ldr	r3, [r7, #16]
 8011ddc:	681b      	ldr	r3, [r3, #0]
 8011dde:	2b00      	cmp	r3, #0
 8011de0:	d00b      	beq.n	8011dfa <vPortFree+0x66>
 8011de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011de6:	b672      	cpsid	i
 8011de8:	f383 8811 	msr	BASEPRI, r3
 8011dec:	f3bf 8f6f 	isb	sy
 8011df0:	f3bf 8f4f 	dsb	sy
 8011df4:	b662      	cpsie	i
 8011df6:	60bb      	str	r3, [r7, #8]
 8011df8:	e7fe      	b.n	8011df8 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8011dfa:	693b      	ldr	r3, [r7, #16]
 8011dfc:	685a      	ldr	r2, [r3, #4]
 8011dfe:	4b11      	ldr	r3, [pc, #68]	; (8011e44 <vPortFree+0xb0>)
 8011e00:	681b      	ldr	r3, [r3, #0]
 8011e02:	4013      	ands	r3, r2
 8011e04:	2b00      	cmp	r3, #0
 8011e06:	d019      	beq.n	8011e3c <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011e08:	693b      	ldr	r3, [r7, #16]
 8011e0a:	681b      	ldr	r3, [r3, #0]
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	d115      	bne.n	8011e3c <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011e10:	693b      	ldr	r3, [r7, #16]
 8011e12:	685a      	ldr	r2, [r3, #4]
 8011e14:	4b0b      	ldr	r3, [pc, #44]	; (8011e44 <vPortFree+0xb0>)
 8011e16:	681b      	ldr	r3, [r3, #0]
 8011e18:	43db      	mvns	r3, r3
 8011e1a:	401a      	ands	r2, r3
 8011e1c:	693b      	ldr	r3, [r7, #16]
 8011e1e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011e20:	f7fe ffc6 	bl	8010db0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8011e24:	693b      	ldr	r3, [r7, #16]
 8011e26:	685a      	ldr	r2, [r3, #4]
 8011e28:	4b07      	ldr	r3, [pc, #28]	; (8011e48 <vPortFree+0xb4>)
 8011e2a:	681b      	ldr	r3, [r3, #0]
 8011e2c:	4413      	add	r3, r2
 8011e2e:	4a06      	ldr	r2, [pc, #24]	; (8011e48 <vPortFree+0xb4>)
 8011e30:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8011e32:	6938      	ldr	r0, [r7, #16]
 8011e34:	f000 f86c 	bl	8011f10 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8011e38:	f7fe ffc8 	bl	8010dcc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8011e3c:	bf00      	nop
 8011e3e:	3718      	adds	r7, #24
 8011e40:	46bd      	mov	sp, r7
 8011e42:	bd80      	pop	{r7, pc}
 8011e44:	20008470 	.word	0x20008470
 8011e48:	20008468 	.word	0x20008468

08011e4c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011e4c:	b480      	push	{r7}
 8011e4e:	b085      	sub	sp, #20
 8011e50:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8011e52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011e56:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011e58:	4b27      	ldr	r3, [pc, #156]	; (8011ef8 <prvHeapInit+0xac>)
 8011e5a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011e5c:	68fb      	ldr	r3, [r7, #12]
 8011e5e:	f003 0307 	and.w	r3, r3, #7
 8011e62:	2b00      	cmp	r3, #0
 8011e64:	d00c      	beq.n	8011e80 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8011e66:	68fb      	ldr	r3, [r7, #12]
 8011e68:	3307      	adds	r3, #7
 8011e6a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011e6c:	68fb      	ldr	r3, [r7, #12]
 8011e6e:	f023 0307 	bic.w	r3, r3, #7
 8011e72:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8011e74:	68ba      	ldr	r2, [r7, #8]
 8011e76:	68fb      	ldr	r3, [r7, #12]
 8011e78:	1ad3      	subs	r3, r2, r3
 8011e7a:	4a1f      	ldr	r2, [pc, #124]	; (8011ef8 <prvHeapInit+0xac>)
 8011e7c:	4413      	add	r3, r2
 8011e7e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011e80:	68fb      	ldr	r3, [r7, #12]
 8011e82:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8011e84:	4a1d      	ldr	r2, [pc, #116]	; (8011efc <prvHeapInit+0xb0>)
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011e8a:	4b1c      	ldr	r3, [pc, #112]	; (8011efc <prvHeapInit+0xb0>)
 8011e8c:	2200      	movs	r2, #0
 8011e8e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	68ba      	ldr	r2, [r7, #8]
 8011e94:	4413      	add	r3, r2
 8011e96:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8011e98:	2208      	movs	r2, #8
 8011e9a:	68fb      	ldr	r3, [r7, #12]
 8011e9c:	1a9b      	subs	r3, r3, r2
 8011e9e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011ea0:	68fb      	ldr	r3, [r7, #12]
 8011ea2:	f023 0307 	bic.w	r3, r3, #7
 8011ea6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8011ea8:	68fb      	ldr	r3, [r7, #12]
 8011eaa:	4a15      	ldr	r2, [pc, #84]	; (8011f00 <prvHeapInit+0xb4>)
 8011eac:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8011eae:	4b14      	ldr	r3, [pc, #80]	; (8011f00 <prvHeapInit+0xb4>)
 8011eb0:	681b      	ldr	r3, [r3, #0]
 8011eb2:	2200      	movs	r2, #0
 8011eb4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8011eb6:	4b12      	ldr	r3, [pc, #72]	; (8011f00 <prvHeapInit+0xb4>)
 8011eb8:	681b      	ldr	r3, [r3, #0]
 8011eba:	2200      	movs	r2, #0
 8011ebc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8011ec2:	683b      	ldr	r3, [r7, #0]
 8011ec4:	68fa      	ldr	r2, [r7, #12]
 8011ec6:	1ad2      	subs	r2, r2, r3
 8011ec8:	683b      	ldr	r3, [r7, #0]
 8011eca:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011ecc:	4b0c      	ldr	r3, [pc, #48]	; (8011f00 <prvHeapInit+0xb4>)
 8011ece:	681a      	ldr	r2, [r3, #0]
 8011ed0:	683b      	ldr	r3, [r7, #0]
 8011ed2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011ed4:	683b      	ldr	r3, [r7, #0]
 8011ed6:	685b      	ldr	r3, [r3, #4]
 8011ed8:	4a0a      	ldr	r2, [pc, #40]	; (8011f04 <prvHeapInit+0xb8>)
 8011eda:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011edc:	683b      	ldr	r3, [r7, #0]
 8011ede:	685b      	ldr	r3, [r3, #4]
 8011ee0:	4a09      	ldr	r2, [pc, #36]	; (8011f08 <prvHeapInit+0xbc>)
 8011ee2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8011ee4:	4b09      	ldr	r3, [pc, #36]	; (8011f0c <prvHeapInit+0xc0>)
 8011ee6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011eea:	601a      	str	r2, [r3, #0]
}
 8011eec:	bf00      	nop
 8011eee:	3714      	adds	r7, #20
 8011ef0:	46bd      	mov	sp, r7
 8011ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ef6:	4770      	bx	lr
 8011ef8:	2000045c 	.word	0x2000045c
 8011efc:	2000845c 	.word	0x2000845c
 8011f00:	20008464 	.word	0x20008464
 8011f04:	2000846c 	.word	0x2000846c
 8011f08:	20008468 	.word	0x20008468
 8011f0c:	20008470 	.word	0x20008470

08011f10 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011f10:	b480      	push	{r7}
 8011f12:	b085      	sub	sp, #20
 8011f14:	af00      	add	r7, sp, #0
 8011f16:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011f18:	4b28      	ldr	r3, [pc, #160]	; (8011fbc <prvInsertBlockIntoFreeList+0xac>)
 8011f1a:	60fb      	str	r3, [r7, #12]
 8011f1c:	e002      	b.n	8011f24 <prvInsertBlockIntoFreeList+0x14>
 8011f1e:	68fb      	ldr	r3, [r7, #12]
 8011f20:	681b      	ldr	r3, [r3, #0]
 8011f22:	60fb      	str	r3, [r7, #12]
 8011f24:	68fb      	ldr	r3, [r7, #12]
 8011f26:	681b      	ldr	r3, [r3, #0]
 8011f28:	687a      	ldr	r2, [r7, #4]
 8011f2a:	429a      	cmp	r2, r3
 8011f2c:	d8f7      	bhi.n	8011f1e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011f2e:	68fb      	ldr	r3, [r7, #12]
 8011f30:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8011f32:	68fb      	ldr	r3, [r7, #12]
 8011f34:	685b      	ldr	r3, [r3, #4]
 8011f36:	68ba      	ldr	r2, [r7, #8]
 8011f38:	4413      	add	r3, r2
 8011f3a:	687a      	ldr	r2, [r7, #4]
 8011f3c:	429a      	cmp	r2, r3
 8011f3e:	d108      	bne.n	8011f52 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011f40:	68fb      	ldr	r3, [r7, #12]
 8011f42:	685a      	ldr	r2, [r3, #4]
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	685b      	ldr	r3, [r3, #4]
 8011f48:	441a      	add	r2, r3
 8011f4a:	68fb      	ldr	r3, [r7, #12]
 8011f4c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011f4e:	68fb      	ldr	r3, [r7, #12]
 8011f50:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	685b      	ldr	r3, [r3, #4]
 8011f5a:	68ba      	ldr	r2, [r7, #8]
 8011f5c:	441a      	add	r2, r3
 8011f5e:	68fb      	ldr	r3, [r7, #12]
 8011f60:	681b      	ldr	r3, [r3, #0]
 8011f62:	429a      	cmp	r2, r3
 8011f64:	d118      	bne.n	8011f98 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8011f66:	68fb      	ldr	r3, [r7, #12]
 8011f68:	681a      	ldr	r2, [r3, #0]
 8011f6a:	4b15      	ldr	r3, [pc, #84]	; (8011fc0 <prvInsertBlockIntoFreeList+0xb0>)
 8011f6c:	681b      	ldr	r3, [r3, #0]
 8011f6e:	429a      	cmp	r2, r3
 8011f70:	d00d      	beq.n	8011f8e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	685a      	ldr	r2, [r3, #4]
 8011f76:	68fb      	ldr	r3, [r7, #12]
 8011f78:	681b      	ldr	r3, [r3, #0]
 8011f7a:	685b      	ldr	r3, [r3, #4]
 8011f7c:	441a      	add	r2, r3
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8011f82:	68fb      	ldr	r3, [r7, #12]
 8011f84:	681b      	ldr	r3, [r3, #0]
 8011f86:	681a      	ldr	r2, [r3, #0]
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	601a      	str	r2, [r3, #0]
 8011f8c:	e008      	b.n	8011fa0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011f8e:	4b0c      	ldr	r3, [pc, #48]	; (8011fc0 <prvInsertBlockIntoFreeList+0xb0>)
 8011f90:	681a      	ldr	r2, [r3, #0]
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	601a      	str	r2, [r3, #0]
 8011f96:	e003      	b.n	8011fa0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011f98:	68fb      	ldr	r3, [r7, #12]
 8011f9a:	681a      	ldr	r2, [r3, #0]
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011fa0:	68fa      	ldr	r2, [r7, #12]
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	429a      	cmp	r2, r3
 8011fa6:	d002      	beq.n	8011fae <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011fa8:	68fb      	ldr	r3, [r7, #12]
 8011faa:	687a      	ldr	r2, [r7, #4]
 8011fac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011fae:	bf00      	nop
 8011fb0:	3714      	adds	r7, #20
 8011fb2:	46bd      	mov	sp, r7
 8011fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fb8:	4770      	bx	lr
 8011fba:	bf00      	nop
 8011fbc:	2000845c 	.word	0x2000845c
 8011fc0:	20008464 	.word	0x20008464

08011fc4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8011fc4:	b580      	push	{r7, lr}
 8011fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8011fc8:	2201      	movs	r2, #1
 8011fca:	490e      	ldr	r1, [pc, #56]	; (8012004 <MX_USB_HOST_Init+0x40>)
 8011fcc:	480e      	ldr	r0, [pc, #56]	; (8012008 <MX_USB_HOST_Init+0x44>)
 8011fce:	f7fb ff31 	bl	800de34 <USBH_Init>
 8011fd2:	4603      	mov	r3, r0
 8011fd4:	2b00      	cmp	r3, #0
 8011fd6:	d001      	beq.n	8011fdc <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8011fd8:	f7ef fd2e 	bl	8001a38 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8011fdc:	490b      	ldr	r1, [pc, #44]	; (801200c <MX_USB_HOST_Init+0x48>)
 8011fde:	480a      	ldr	r0, [pc, #40]	; (8012008 <MX_USB_HOST_Init+0x44>)
 8011fe0:	f7fb ffde 	bl	800dfa0 <USBH_RegisterClass>
 8011fe4:	4603      	mov	r3, r0
 8011fe6:	2b00      	cmp	r3, #0
 8011fe8:	d001      	beq.n	8011fee <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8011fea:	f7ef fd25 	bl	8001a38 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8011fee:	4806      	ldr	r0, [pc, #24]	; (8012008 <MX_USB_HOST_Init+0x44>)
 8011ff0:	f7fc f862 	bl	800e0b8 <USBH_Start>
 8011ff4:	4603      	mov	r3, r0
 8011ff6:	2b00      	cmp	r3, #0
 8011ff8:	d001      	beq.n	8011ffe <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8011ffa:	f7ef fd1d 	bl	8001a38 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8011ffe:	bf00      	nop
 8012000:	bd80      	pop	{r7, pc}
 8012002:	bf00      	nop
 8012004:	08012011 	.word	0x08012011
 8012008:	20009130 	.word	0x20009130
 801200c:	2000000c 	.word	0x2000000c

08012010 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8012010:	b480      	push	{r7}
 8012012:	b083      	sub	sp, #12
 8012014:	af00      	add	r7, sp, #0
 8012016:	6078      	str	r0, [r7, #4]
 8012018:	460b      	mov	r3, r1
 801201a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 801201c:	78fb      	ldrb	r3, [r7, #3]
 801201e:	3b01      	subs	r3, #1
 8012020:	2b04      	cmp	r3, #4
 8012022:	d819      	bhi.n	8012058 <USBH_UserProcess+0x48>
 8012024:	a201      	add	r2, pc, #4	; (adr r2, 801202c <USBH_UserProcess+0x1c>)
 8012026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801202a:	bf00      	nop
 801202c:	08012059 	.word	0x08012059
 8012030:	08012049 	.word	0x08012049
 8012034:	08012059 	.word	0x08012059
 8012038:	08012051 	.word	0x08012051
 801203c:	08012041 	.word	0x08012041
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8012040:	4b09      	ldr	r3, [pc, #36]	; (8012068 <USBH_UserProcess+0x58>)
 8012042:	2203      	movs	r2, #3
 8012044:	701a      	strb	r2, [r3, #0]
  break;
 8012046:	e008      	b.n	801205a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8012048:	4b07      	ldr	r3, [pc, #28]	; (8012068 <USBH_UserProcess+0x58>)
 801204a:	2202      	movs	r2, #2
 801204c:	701a      	strb	r2, [r3, #0]
  break;
 801204e:	e004      	b.n	801205a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8012050:	4b05      	ldr	r3, [pc, #20]	; (8012068 <USBH_UserProcess+0x58>)
 8012052:	2201      	movs	r2, #1
 8012054:	701a      	strb	r2, [r3, #0]
  break;
 8012056:	e000      	b.n	801205a <USBH_UserProcess+0x4a>

  default:
  break;
 8012058:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 801205a:	bf00      	nop
 801205c:	370c      	adds	r7, #12
 801205e:	46bd      	mov	sp, r7
 8012060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012064:	4770      	bx	lr
 8012066:	bf00      	nop
 8012068:	20008474 	.word	0x20008474

0801206c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 801206c:	b580      	push	{r7, lr}
 801206e:	b08a      	sub	sp, #40	; 0x28
 8012070:	af00      	add	r7, sp, #0
 8012072:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012074:	f107 0314 	add.w	r3, r7, #20
 8012078:	2200      	movs	r2, #0
 801207a:	601a      	str	r2, [r3, #0]
 801207c:	605a      	str	r2, [r3, #4]
 801207e:	609a      	str	r2, [r3, #8]
 8012080:	60da      	str	r2, [r3, #12]
 8012082:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	681b      	ldr	r3, [r3, #0]
 8012088:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801208c:	d13c      	bne.n	8012108 <HAL_HCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801208e:	4b20      	ldr	r3, [pc, #128]	; (8012110 <HAL_HCD_MspInit+0xa4>)
 8012090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012092:	4a1f      	ldr	r2, [pc, #124]	; (8012110 <HAL_HCD_MspInit+0xa4>)
 8012094:	f043 0301 	orr.w	r3, r3, #1
 8012098:	6313      	str	r3, [r2, #48]	; 0x30
 801209a:	4b1d      	ldr	r3, [pc, #116]	; (8012110 <HAL_HCD_MspInit+0xa4>)
 801209c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801209e:	f003 0301 	and.w	r3, r3, #1
 80120a2:	613b      	str	r3, [r7, #16]
 80120a4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    */
    GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 80120a6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80120aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80120ac:	2302      	movs	r3, #2
 80120ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80120b0:	2300      	movs	r3, #0
 80120b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80120b4:	2303      	movs	r3, #3
 80120b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80120b8:	230a      	movs	r3, #10
 80120ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80120bc:	f107 0314 	add.w	r3, r7, #20
 80120c0:	4619      	mov	r1, r3
 80120c2:	4814      	ldr	r0, [pc, #80]	; (8012114 <HAL_HCD_MspInit+0xa8>)
 80120c4:	f7f2 f9e0 	bl	8004488 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80120c8:	4b11      	ldr	r3, [pc, #68]	; (8012110 <HAL_HCD_MspInit+0xa4>)
 80120ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80120cc:	4a10      	ldr	r2, [pc, #64]	; (8012110 <HAL_HCD_MspInit+0xa4>)
 80120ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80120d2:	6353      	str	r3, [r2, #52]	; 0x34
 80120d4:	4b0e      	ldr	r3, [pc, #56]	; (8012110 <HAL_HCD_MspInit+0xa4>)
 80120d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80120d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80120dc:	60fb      	str	r3, [r7, #12]
 80120de:	68fb      	ldr	r3, [r7, #12]
 80120e0:	4b0b      	ldr	r3, [pc, #44]	; (8012110 <HAL_HCD_MspInit+0xa4>)
 80120e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80120e4:	4a0a      	ldr	r2, [pc, #40]	; (8012110 <HAL_HCD_MspInit+0xa4>)
 80120e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80120ea:	6453      	str	r3, [r2, #68]	; 0x44
 80120ec:	4b08      	ldr	r3, [pc, #32]	; (8012110 <HAL_HCD_MspInit+0xa4>)
 80120ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80120f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80120f4:	60bb      	str	r3, [r7, #8]
 80120f6:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80120f8:	2200      	movs	r2, #0
 80120fa:	2100      	movs	r1, #0
 80120fc:	2043      	movs	r0, #67	; 0x43
 80120fe:	f7f1 f943 	bl	8003388 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8012102:	2043      	movs	r0, #67	; 0x43
 8012104:	f7f1 f95c 	bl	80033c0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8012108:	bf00      	nop
 801210a:	3728      	adds	r7, #40	; 0x28
 801210c:	46bd      	mov	sp, r7
 801210e:	bd80      	pop	{r7, pc}
 8012110:	40023800 	.word	0x40023800
 8012114:	40020000 	.word	0x40020000

08012118 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8012118:	b580      	push	{r7, lr}
 801211a:	b082      	sub	sp, #8
 801211c:	af00      	add	r7, sp, #0
 801211e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012126:	4618      	mov	r0, r3
 8012128:	f7fc fc73 	bl	800ea12 <USBH_LL_IncTimer>
}
 801212c:	bf00      	nop
 801212e:	3708      	adds	r7, #8
 8012130:	46bd      	mov	sp, r7
 8012132:	bd80      	pop	{r7, pc}

08012134 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8012134:	b580      	push	{r7, lr}
 8012136:	b082      	sub	sp, #8
 8012138:	af00      	add	r7, sp, #0
 801213a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012142:	4618      	mov	r0, r3
 8012144:	f7fc fcb7 	bl	800eab6 <USBH_LL_Connect>
}
 8012148:	bf00      	nop
 801214a:	3708      	adds	r7, #8
 801214c:	46bd      	mov	sp, r7
 801214e:	bd80      	pop	{r7, pc}

08012150 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8012150:	b580      	push	{r7, lr}
 8012152:	b082      	sub	sp, #8
 8012154:	af00      	add	r7, sp, #0
 8012156:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801215e:	4618      	mov	r0, r3
 8012160:	f7fc fccc 	bl	800eafc <USBH_LL_Disconnect>
}
 8012164:	bf00      	nop
 8012166:	3708      	adds	r7, #8
 8012168:	46bd      	mov	sp, r7
 801216a:	bd80      	pop	{r7, pc}

0801216c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 801216c:	b580      	push	{r7, lr}
 801216e:	b082      	sub	sp, #8
 8012170:	af00      	add	r7, sp, #0
 8012172:	6078      	str	r0, [r7, #4]
 8012174:	460b      	mov	r3, r1
 8012176:	70fb      	strb	r3, [r7, #3]
 8012178:	4613      	mov	r3, r2
 801217a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012182:	4618      	mov	r0, r3
 8012184:	f7fc fd01 	bl	800eb8a <USBH_LL_NotifyURBChange>
#endif
}
 8012188:	bf00      	nop
 801218a:	3708      	adds	r7, #8
 801218c:	46bd      	mov	sp, r7
 801218e:	bd80      	pop	{r7, pc}

08012190 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8012190:	b580      	push	{r7, lr}
 8012192:	b082      	sub	sp, #8
 8012194:	af00      	add	r7, sp, #0
 8012196:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801219e:	4618      	mov	r0, r3
 80121a0:	f7fc fc61 	bl	800ea66 <USBH_LL_PortEnabled>
}
 80121a4:	bf00      	nop
 80121a6:	3708      	adds	r7, #8
 80121a8:	46bd      	mov	sp, r7
 80121aa:	bd80      	pop	{r7, pc}

080121ac <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80121ac:	b580      	push	{r7, lr}
 80121ae:	b082      	sub	sp, #8
 80121b0:	af00      	add	r7, sp, #0
 80121b2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80121b4:	687b      	ldr	r3, [r7, #4]
 80121b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80121ba:	4618      	mov	r0, r3
 80121bc:	f7fc fc6d 	bl	800ea9a <USBH_LL_PortDisabled>
}
 80121c0:	bf00      	nop
 80121c2:	3708      	adds	r7, #8
 80121c4:	46bd      	mov	sp, r7
 80121c6:	bd80      	pop	{r7, pc}

080121c8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80121c8:	b580      	push	{r7, lr}
 80121ca:	b082      	sub	sp, #8
 80121cc:	af00      	add	r7, sp, #0
 80121ce:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80121d6:	2b01      	cmp	r3, #1
 80121d8:	d12a      	bne.n	8012230 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80121da:	4a18      	ldr	r2, [pc, #96]	; (801223c <USBH_LL_Init+0x74>)
 80121dc:	687b      	ldr	r3, [r7, #4]
 80121de:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	4a15      	ldr	r2, [pc, #84]	; (801223c <USBH_LL_Init+0x74>)
 80121e6:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80121ea:	4b14      	ldr	r3, [pc, #80]	; (801223c <USBH_LL_Init+0x74>)
 80121ec:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80121f0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80121f2:	4b12      	ldr	r3, [pc, #72]	; (801223c <USBH_LL_Init+0x74>)
 80121f4:	2208      	movs	r2, #8
 80121f6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80121f8:	4b10      	ldr	r3, [pc, #64]	; (801223c <USBH_LL_Init+0x74>)
 80121fa:	2201      	movs	r2, #1
 80121fc:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80121fe:	4b0f      	ldr	r3, [pc, #60]	; (801223c <USBH_LL_Init+0x74>)
 8012200:	2200      	movs	r2, #0
 8012202:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8012204:	4b0d      	ldr	r3, [pc, #52]	; (801223c <USBH_LL_Init+0x74>)
 8012206:	2202      	movs	r2, #2
 8012208:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801220a:	4b0c      	ldr	r3, [pc, #48]	; (801223c <USBH_LL_Init+0x74>)
 801220c:	2200      	movs	r2, #0
 801220e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8012210:	480a      	ldr	r0, [pc, #40]	; (801223c <USBH_LL_Init+0x74>)
 8012212:	f7f2 fb14 	bl	800483e <HAL_HCD_Init>
 8012216:	4603      	mov	r3, r0
 8012218:	2b00      	cmp	r3, #0
 801221a:	d001      	beq.n	8012220 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 801221c:	f7ef fc0c 	bl	8001a38 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8012220:	4806      	ldr	r0, [pc, #24]	; (801223c <USBH_LL_Init+0x74>)
 8012222:	f7f2 ff17 	bl	8005054 <HAL_HCD_GetCurrentFrame>
 8012226:	4603      	mov	r3, r0
 8012228:	4619      	mov	r1, r3
 801222a:	6878      	ldr	r0, [r7, #4]
 801222c:	f7fc fbe2 	bl	800e9f4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8012230:	2300      	movs	r3, #0
}
 8012232:	4618      	mov	r0, r3
 8012234:	3708      	adds	r7, #8
 8012236:	46bd      	mov	sp, r7
 8012238:	bd80      	pop	{r7, pc}
 801223a:	bf00      	nop
 801223c:	20009514 	.word	0x20009514

08012240 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8012240:	b580      	push	{r7, lr}
 8012242:	b084      	sub	sp, #16
 8012244:	af00      	add	r7, sp, #0
 8012246:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012248:	2300      	movs	r3, #0
 801224a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801224c:	2300      	movs	r3, #0
 801224e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8012256:	4618      	mov	r0, r3
 8012258:	f7f2 fe84 	bl	8004f64 <HAL_HCD_Start>
 801225c:	4603      	mov	r3, r0
 801225e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8012260:	7bfb      	ldrb	r3, [r7, #15]
 8012262:	4618      	mov	r0, r3
 8012264:	f000 f95c 	bl	8012520 <USBH_Get_USB_Status>
 8012268:	4603      	mov	r3, r0
 801226a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801226c:	7bbb      	ldrb	r3, [r7, #14]
}
 801226e:	4618      	mov	r0, r3
 8012270:	3710      	adds	r7, #16
 8012272:	46bd      	mov	sp, r7
 8012274:	bd80      	pop	{r7, pc}

08012276 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8012276:	b580      	push	{r7, lr}
 8012278:	b084      	sub	sp, #16
 801227a:	af00      	add	r7, sp, #0
 801227c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801227e:	2300      	movs	r3, #0
 8012280:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8012282:	2300      	movs	r3, #0
 8012284:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8012286:	687b      	ldr	r3, [r7, #4]
 8012288:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801228c:	4618      	mov	r0, r3
 801228e:	f7f2 fe8c 	bl	8004faa <HAL_HCD_Stop>
 8012292:	4603      	mov	r3, r0
 8012294:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8012296:	7bfb      	ldrb	r3, [r7, #15]
 8012298:	4618      	mov	r0, r3
 801229a:	f000 f941 	bl	8012520 <USBH_Get_USB_Status>
 801229e:	4603      	mov	r3, r0
 80122a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80122a2:	7bbb      	ldrb	r3, [r7, #14]
}
 80122a4:	4618      	mov	r0, r3
 80122a6:	3710      	adds	r7, #16
 80122a8:	46bd      	mov	sp, r7
 80122aa:	bd80      	pop	{r7, pc}

080122ac <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80122ac:	b580      	push	{r7, lr}
 80122ae:	b084      	sub	sp, #16
 80122b0:	af00      	add	r7, sp, #0
 80122b2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80122b4:	2301      	movs	r3, #1
 80122b6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80122be:	4618      	mov	r0, r3
 80122c0:	f7f2 fed6 	bl	8005070 <HAL_HCD_GetCurrentSpeed>
 80122c4:	4603      	mov	r3, r0
 80122c6:	2b01      	cmp	r3, #1
 80122c8:	d007      	beq.n	80122da <USBH_LL_GetSpeed+0x2e>
 80122ca:	2b01      	cmp	r3, #1
 80122cc:	d302      	bcc.n	80122d4 <USBH_LL_GetSpeed+0x28>
 80122ce:	2b02      	cmp	r3, #2
 80122d0:	d006      	beq.n	80122e0 <USBH_LL_GetSpeed+0x34>
 80122d2:	e008      	b.n	80122e6 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80122d4:	2300      	movs	r3, #0
 80122d6:	73fb      	strb	r3, [r7, #15]
    break;
 80122d8:	e008      	b.n	80122ec <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 80122da:	2301      	movs	r3, #1
 80122dc:	73fb      	strb	r3, [r7, #15]
    break;
 80122de:	e005      	b.n	80122ec <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 80122e0:	2302      	movs	r3, #2
 80122e2:	73fb      	strb	r3, [r7, #15]
    break;
 80122e4:	e002      	b.n	80122ec <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 80122e6:	2301      	movs	r3, #1
 80122e8:	73fb      	strb	r3, [r7, #15]
    break;
 80122ea:	bf00      	nop
  }
  return  speed;
 80122ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80122ee:	4618      	mov	r0, r3
 80122f0:	3710      	adds	r7, #16
 80122f2:	46bd      	mov	sp, r7
 80122f4:	bd80      	pop	{r7, pc}

080122f6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80122f6:	b580      	push	{r7, lr}
 80122f8:	b084      	sub	sp, #16
 80122fa:	af00      	add	r7, sp, #0
 80122fc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80122fe:	2300      	movs	r3, #0
 8012300:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8012302:	2300      	movs	r3, #0
 8012304:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801230c:	4618      	mov	r0, r3
 801230e:	f7f2 fe69 	bl	8004fe4 <HAL_HCD_ResetPort>
 8012312:	4603      	mov	r3, r0
 8012314:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8012316:	7bfb      	ldrb	r3, [r7, #15]
 8012318:	4618      	mov	r0, r3
 801231a:	f000 f901 	bl	8012520 <USBH_Get_USB_Status>
 801231e:	4603      	mov	r3, r0
 8012320:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012322:	7bbb      	ldrb	r3, [r7, #14]
}
 8012324:	4618      	mov	r0, r3
 8012326:	3710      	adds	r7, #16
 8012328:	46bd      	mov	sp, r7
 801232a:	bd80      	pop	{r7, pc}

0801232c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801232c:	b580      	push	{r7, lr}
 801232e:	b082      	sub	sp, #8
 8012330:	af00      	add	r7, sp, #0
 8012332:	6078      	str	r0, [r7, #4]
 8012334:	460b      	mov	r3, r1
 8012336:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801233e:	78fa      	ldrb	r2, [r7, #3]
 8012340:	4611      	mov	r1, r2
 8012342:	4618      	mov	r0, r3
 8012344:	f7f2 fe71 	bl	800502a <HAL_HCD_HC_GetXferCount>
 8012348:	4603      	mov	r3, r0
}
 801234a:	4618      	mov	r0, r3
 801234c:	3708      	adds	r7, #8
 801234e:	46bd      	mov	sp, r7
 8012350:	bd80      	pop	{r7, pc}

08012352 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8012352:	b590      	push	{r4, r7, lr}
 8012354:	b089      	sub	sp, #36	; 0x24
 8012356:	af04      	add	r7, sp, #16
 8012358:	6078      	str	r0, [r7, #4]
 801235a:	4608      	mov	r0, r1
 801235c:	4611      	mov	r1, r2
 801235e:	461a      	mov	r2, r3
 8012360:	4603      	mov	r3, r0
 8012362:	70fb      	strb	r3, [r7, #3]
 8012364:	460b      	mov	r3, r1
 8012366:	70bb      	strb	r3, [r7, #2]
 8012368:	4613      	mov	r3, r2
 801236a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801236c:	2300      	movs	r3, #0
 801236e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8012370:	2300      	movs	r3, #0
 8012372:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 801237a:	787c      	ldrb	r4, [r7, #1]
 801237c:	78ba      	ldrb	r2, [r7, #2]
 801237e:	78f9      	ldrb	r1, [r7, #3]
 8012380:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8012382:	9302      	str	r3, [sp, #8]
 8012384:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8012388:	9301      	str	r3, [sp, #4]
 801238a:	f897 3020 	ldrb.w	r3, [r7, #32]
 801238e:	9300      	str	r3, [sp, #0]
 8012390:	4623      	mov	r3, r4
 8012392:	f7f2 fab6 	bl	8004902 <HAL_HCD_HC_Init>
 8012396:	4603      	mov	r3, r0
 8012398:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 801239a:	7bfb      	ldrb	r3, [r7, #15]
 801239c:	4618      	mov	r0, r3
 801239e:	f000 f8bf 	bl	8012520 <USBH_Get_USB_Status>
 80123a2:	4603      	mov	r3, r0
 80123a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80123a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80123a8:	4618      	mov	r0, r3
 80123aa:	3714      	adds	r7, #20
 80123ac:	46bd      	mov	sp, r7
 80123ae:	bd90      	pop	{r4, r7, pc}

080123b0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80123b0:	b580      	push	{r7, lr}
 80123b2:	b084      	sub	sp, #16
 80123b4:	af00      	add	r7, sp, #0
 80123b6:	6078      	str	r0, [r7, #4]
 80123b8:	460b      	mov	r3, r1
 80123ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80123bc:	2300      	movs	r3, #0
 80123be:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80123c0:	2300      	movs	r3, #0
 80123c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80123ca:	78fa      	ldrb	r2, [r7, #3]
 80123cc:	4611      	mov	r1, r2
 80123ce:	4618      	mov	r0, r3
 80123d0:	f7f2 fb2f 	bl	8004a32 <HAL_HCD_HC_Halt>
 80123d4:	4603      	mov	r3, r0
 80123d6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80123d8:	7bfb      	ldrb	r3, [r7, #15]
 80123da:	4618      	mov	r0, r3
 80123dc:	f000 f8a0 	bl	8012520 <USBH_Get_USB_Status>
 80123e0:	4603      	mov	r3, r0
 80123e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80123e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80123e6:	4618      	mov	r0, r3
 80123e8:	3710      	adds	r7, #16
 80123ea:	46bd      	mov	sp, r7
 80123ec:	bd80      	pop	{r7, pc}

080123ee <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80123ee:	b590      	push	{r4, r7, lr}
 80123f0:	b089      	sub	sp, #36	; 0x24
 80123f2:	af04      	add	r7, sp, #16
 80123f4:	6078      	str	r0, [r7, #4]
 80123f6:	4608      	mov	r0, r1
 80123f8:	4611      	mov	r1, r2
 80123fa:	461a      	mov	r2, r3
 80123fc:	4603      	mov	r3, r0
 80123fe:	70fb      	strb	r3, [r7, #3]
 8012400:	460b      	mov	r3, r1
 8012402:	70bb      	strb	r3, [r7, #2]
 8012404:	4613      	mov	r3, r2
 8012406:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012408:	2300      	movs	r3, #0
 801240a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801240c:	2300      	movs	r3, #0
 801240e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8012416:	787c      	ldrb	r4, [r7, #1]
 8012418:	78ba      	ldrb	r2, [r7, #2]
 801241a:	78f9      	ldrb	r1, [r7, #3]
 801241c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8012420:	9303      	str	r3, [sp, #12]
 8012422:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8012424:	9302      	str	r3, [sp, #8]
 8012426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012428:	9301      	str	r3, [sp, #4]
 801242a:	f897 3020 	ldrb.w	r3, [r7, #32]
 801242e:	9300      	str	r3, [sp, #0]
 8012430:	4623      	mov	r3, r4
 8012432:	f7f2 fb21 	bl	8004a78 <HAL_HCD_HC_SubmitRequest>
 8012436:	4603      	mov	r3, r0
 8012438:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 801243a:	7bfb      	ldrb	r3, [r7, #15]
 801243c:	4618      	mov	r0, r3
 801243e:	f000 f86f 	bl	8012520 <USBH_Get_USB_Status>
 8012442:	4603      	mov	r3, r0
 8012444:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012446:	7bbb      	ldrb	r3, [r7, #14]
}
 8012448:	4618      	mov	r0, r3
 801244a:	3714      	adds	r7, #20
 801244c:	46bd      	mov	sp, r7
 801244e:	bd90      	pop	{r4, r7, pc}

08012450 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8012450:	b580      	push	{r7, lr}
 8012452:	b082      	sub	sp, #8
 8012454:	af00      	add	r7, sp, #0
 8012456:	6078      	str	r0, [r7, #4]
 8012458:	460b      	mov	r3, r1
 801245a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8012462:	78fa      	ldrb	r2, [r7, #3]
 8012464:	4611      	mov	r1, r2
 8012466:	4618      	mov	r0, r3
 8012468:	f7f2 fdca 	bl	8005000 <HAL_HCD_HC_GetURBState>
 801246c:	4603      	mov	r3, r0
}
 801246e:	4618      	mov	r0, r3
 8012470:	3708      	adds	r7, #8
 8012472:	46bd      	mov	sp, r7
 8012474:	bd80      	pop	{r7, pc}

08012476 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8012476:	b580      	push	{r7, lr}
 8012478:	b082      	sub	sp, #8
 801247a:	af00      	add	r7, sp, #0
 801247c:	6078      	str	r0, [r7, #4]
 801247e:	460b      	mov	r3, r1
 8012480:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8012482:	687b      	ldr	r3, [r7, #4]
 8012484:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8012488:	2b01      	cmp	r3, #1
 801248a:	d103      	bne.n	8012494 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 801248c:	78fb      	ldrb	r3, [r7, #3]
 801248e:	4618      	mov	r0, r3
 8012490:	f000 f872 	bl	8012578 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8012494:	20c8      	movs	r0, #200	; 0xc8
 8012496:	f7f0 fc15 	bl	8002cc4 <HAL_Delay>
  return USBH_OK;
 801249a:	2300      	movs	r3, #0
}
 801249c:	4618      	mov	r0, r3
 801249e:	3708      	adds	r7, #8
 80124a0:	46bd      	mov	sp, r7
 80124a2:	bd80      	pop	{r7, pc}

080124a4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80124a4:	b480      	push	{r7}
 80124a6:	b085      	sub	sp, #20
 80124a8:	af00      	add	r7, sp, #0
 80124aa:	6078      	str	r0, [r7, #4]
 80124ac:	460b      	mov	r3, r1
 80124ae:	70fb      	strb	r3, [r7, #3]
 80124b0:	4613      	mov	r3, r2
 80124b2:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80124ba:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80124bc:	78fa      	ldrb	r2, [r7, #3]
 80124be:	68f9      	ldr	r1, [r7, #12]
 80124c0:	4613      	mov	r3, r2
 80124c2:	009b      	lsls	r3, r3, #2
 80124c4:	4413      	add	r3, r2
 80124c6:	00db      	lsls	r3, r3, #3
 80124c8:	440b      	add	r3, r1
 80124ca:	333b      	adds	r3, #59	; 0x3b
 80124cc:	781b      	ldrb	r3, [r3, #0]
 80124ce:	2b00      	cmp	r3, #0
 80124d0:	d00a      	beq.n	80124e8 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80124d2:	78fa      	ldrb	r2, [r7, #3]
 80124d4:	68f9      	ldr	r1, [r7, #12]
 80124d6:	4613      	mov	r3, r2
 80124d8:	009b      	lsls	r3, r3, #2
 80124da:	4413      	add	r3, r2
 80124dc:	00db      	lsls	r3, r3, #3
 80124de:	440b      	add	r3, r1
 80124e0:	3350      	adds	r3, #80	; 0x50
 80124e2:	78ba      	ldrb	r2, [r7, #2]
 80124e4:	701a      	strb	r2, [r3, #0]
 80124e6:	e009      	b.n	80124fc <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80124e8:	78fa      	ldrb	r2, [r7, #3]
 80124ea:	68f9      	ldr	r1, [r7, #12]
 80124ec:	4613      	mov	r3, r2
 80124ee:	009b      	lsls	r3, r3, #2
 80124f0:	4413      	add	r3, r2
 80124f2:	00db      	lsls	r3, r3, #3
 80124f4:	440b      	add	r3, r1
 80124f6:	3351      	adds	r3, #81	; 0x51
 80124f8:	78ba      	ldrb	r2, [r7, #2]
 80124fa:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80124fc:	2300      	movs	r3, #0
}
 80124fe:	4618      	mov	r0, r3
 8012500:	3714      	adds	r7, #20
 8012502:	46bd      	mov	sp, r7
 8012504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012508:	4770      	bx	lr

0801250a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 801250a:	b580      	push	{r7, lr}
 801250c:	b082      	sub	sp, #8
 801250e:	af00      	add	r7, sp, #0
 8012510:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8012512:	6878      	ldr	r0, [r7, #4]
 8012514:	f7f0 fbd6 	bl	8002cc4 <HAL_Delay>
}
 8012518:	bf00      	nop
 801251a:	3708      	adds	r7, #8
 801251c:	46bd      	mov	sp, r7
 801251e:	bd80      	pop	{r7, pc}

08012520 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8012520:	b480      	push	{r7}
 8012522:	b085      	sub	sp, #20
 8012524:	af00      	add	r7, sp, #0
 8012526:	4603      	mov	r3, r0
 8012528:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801252a:	2300      	movs	r3, #0
 801252c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801252e:	79fb      	ldrb	r3, [r7, #7]
 8012530:	2b03      	cmp	r3, #3
 8012532:	d817      	bhi.n	8012564 <USBH_Get_USB_Status+0x44>
 8012534:	a201      	add	r2, pc, #4	; (adr r2, 801253c <USBH_Get_USB_Status+0x1c>)
 8012536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801253a:	bf00      	nop
 801253c:	0801254d 	.word	0x0801254d
 8012540:	08012553 	.word	0x08012553
 8012544:	08012559 	.word	0x08012559
 8012548:	0801255f 	.word	0x0801255f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 801254c:	2300      	movs	r3, #0
 801254e:	73fb      	strb	r3, [r7, #15]
    break;
 8012550:	e00b      	b.n	801256a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8012552:	2302      	movs	r3, #2
 8012554:	73fb      	strb	r3, [r7, #15]
    break;
 8012556:	e008      	b.n	801256a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8012558:	2301      	movs	r3, #1
 801255a:	73fb      	strb	r3, [r7, #15]
    break;
 801255c:	e005      	b.n	801256a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 801255e:	2302      	movs	r3, #2
 8012560:	73fb      	strb	r3, [r7, #15]
    break;
 8012562:	e002      	b.n	801256a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8012564:	2302      	movs	r3, #2
 8012566:	73fb      	strb	r3, [r7, #15]
    break;
 8012568:	bf00      	nop
  }
  return usb_status;
 801256a:	7bfb      	ldrb	r3, [r7, #15]
}
 801256c:	4618      	mov	r0, r3
 801256e:	3714      	adds	r7, #20
 8012570:	46bd      	mov	sp, r7
 8012572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012576:	4770      	bx	lr

08012578 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8012578:	b580      	push	{r7, lr}
 801257a:	b084      	sub	sp, #16
 801257c:	af00      	add	r7, sp, #0
 801257e:	4603      	mov	r3, r0
 8012580:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8012582:	79fb      	ldrb	r3, [r7, #7]
 8012584:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8012586:	79fb      	ldrb	r3, [r7, #7]
 8012588:	2b00      	cmp	r3, #0
 801258a:	d102      	bne.n	8012592 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 801258c:	2301      	movs	r3, #1
 801258e:	73fb      	strb	r3, [r7, #15]
 8012590:	e001      	b.n	8012596 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8012592:	2300      	movs	r3, #0
 8012594:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,(GPIO_PinState)data);
 8012596:	7bfb      	ldrb	r3, [r7, #15]
 8012598:	461a      	mov	r2, r3
 801259a:	2120      	movs	r1, #32
 801259c:	4803      	ldr	r0, [pc, #12]	; (80125ac <MX_DriverVbusFS+0x34>)
 801259e:	f7f2 f935 	bl	800480c <HAL_GPIO_WritePin>
}
 80125a2:	bf00      	nop
 80125a4:	3710      	adds	r7, #16
 80125a6:	46bd      	mov	sp, r7
 80125a8:	bd80      	pop	{r7, pc}
 80125aa:	bf00      	nop
 80125ac:	40020c00 	.word	0x40020c00

080125b0 <__errno>:
 80125b0:	4b01      	ldr	r3, [pc, #4]	; (80125b8 <__errno+0x8>)
 80125b2:	6818      	ldr	r0, [r3, #0]
 80125b4:	4770      	bx	lr
 80125b6:	bf00      	nop
 80125b8:	20000030 	.word	0x20000030

080125bc <__libc_init_array>:
 80125bc:	b570      	push	{r4, r5, r6, lr}
 80125be:	4e0d      	ldr	r6, [pc, #52]	; (80125f4 <__libc_init_array+0x38>)
 80125c0:	4c0d      	ldr	r4, [pc, #52]	; (80125f8 <__libc_init_array+0x3c>)
 80125c2:	1ba4      	subs	r4, r4, r6
 80125c4:	10a4      	asrs	r4, r4, #2
 80125c6:	2500      	movs	r5, #0
 80125c8:	42a5      	cmp	r5, r4
 80125ca:	d109      	bne.n	80125e0 <__libc_init_array+0x24>
 80125cc:	4e0b      	ldr	r6, [pc, #44]	; (80125fc <__libc_init_array+0x40>)
 80125ce:	4c0c      	ldr	r4, [pc, #48]	; (8012600 <__libc_init_array+0x44>)
 80125d0:	f000 f8f6 	bl	80127c0 <_init>
 80125d4:	1ba4      	subs	r4, r4, r6
 80125d6:	10a4      	asrs	r4, r4, #2
 80125d8:	2500      	movs	r5, #0
 80125da:	42a5      	cmp	r5, r4
 80125dc:	d105      	bne.n	80125ea <__libc_init_array+0x2e>
 80125de:	bd70      	pop	{r4, r5, r6, pc}
 80125e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80125e4:	4798      	blx	r3
 80125e6:	3501      	adds	r5, #1
 80125e8:	e7ee      	b.n	80125c8 <__libc_init_array+0xc>
 80125ea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80125ee:	4798      	blx	r3
 80125f0:	3501      	adds	r5, #1
 80125f2:	e7f2      	b.n	80125da <__libc_init_array+0x1e>
 80125f4:	08012888 	.word	0x08012888
 80125f8:	08012888 	.word	0x08012888
 80125fc:	08012888 	.word	0x08012888
 8012600:	0801288c 	.word	0x0801288c

08012604 <malloc>:
 8012604:	4b02      	ldr	r3, [pc, #8]	; (8012610 <malloc+0xc>)
 8012606:	4601      	mov	r1, r0
 8012608:	6818      	ldr	r0, [r3, #0]
 801260a:	f000 b86d 	b.w	80126e8 <_malloc_r>
 801260e:	bf00      	nop
 8012610:	20000030 	.word	0x20000030

08012614 <free>:
 8012614:	4b02      	ldr	r3, [pc, #8]	; (8012620 <free+0xc>)
 8012616:	4601      	mov	r1, r0
 8012618:	6818      	ldr	r0, [r3, #0]
 801261a:	f000 b817 	b.w	801264c <_free_r>
 801261e:	bf00      	nop
 8012620:	20000030 	.word	0x20000030

08012624 <memcpy>:
 8012624:	b510      	push	{r4, lr}
 8012626:	1e43      	subs	r3, r0, #1
 8012628:	440a      	add	r2, r1
 801262a:	4291      	cmp	r1, r2
 801262c:	d100      	bne.n	8012630 <memcpy+0xc>
 801262e:	bd10      	pop	{r4, pc}
 8012630:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012634:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012638:	e7f7      	b.n	801262a <memcpy+0x6>

0801263a <memset>:
 801263a:	4402      	add	r2, r0
 801263c:	4603      	mov	r3, r0
 801263e:	4293      	cmp	r3, r2
 8012640:	d100      	bne.n	8012644 <memset+0xa>
 8012642:	4770      	bx	lr
 8012644:	f803 1b01 	strb.w	r1, [r3], #1
 8012648:	e7f9      	b.n	801263e <memset+0x4>
	...

0801264c <_free_r>:
 801264c:	b538      	push	{r3, r4, r5, lr}
 801264e:	4605      	mov	r5, r0
 8012650:	2900      	cmp	r1, #0
 8012652:	d045      	beq.n	80126e0 <_free_r+0x94>
 8012654:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012658:	1f0c      	subs	r4, r1, #4
 801265a:	2b00      	cmp	r3, #0
 801265c:	bfb8      	it	lt
 801265e:	18e4      	addlt	r4, r4, r3
 8012660:	f000 f8ac 	bl	80127bc <__malloc_lock>
 8012664:	4a1f      	ldr	r2, [pc, #124]	; (80126e4 <_free_r+0x98>)
 8012666:	6813      	ldr	r3, [r2, #0]
 8012668:	4610      	mov	r0, r2
 801266a:	b933      	cbnz	r3, 801267a <_free_r+0x2e>
 801266c:	6063      	str	r3, [r4, #4]
 801266e:	6014      	str	r4, [r2, #0]
 8012670:	4628      	mov	r0, r5
 8012672:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012676:	f000 b8a2 	b.w	80127be <__malloc_unlock>
 801267a:	42a3      	cmp	r3, r4
 801267c:	d90c      	bls.n	8012698 <_free_r+0x4c>
 801267e:	6821      	ldr	r1, [r4, #0]
 8012680:	1862      	adds	r2, r4, r1
 8012682:	4293      	cmp	r3, r2
 8012684:	bf04      	itt	eq
 8012686:	681a      	ldreq	r2, [r3, #0]
 8012688:	685b      	ldreq	r3, [r3, #4]
 801268a:	6063      	str	r3, [r4, #4]
 801268c:	bf04      	itt	eq
 801268e:	1852      	addeq	r2, r2, r1
 8012690:	6022      	streq	r2, [r4, #0]
 8012692:	6004      	str	r4, [r0, #0]
 8012694:	e7ec      	b.n	8012670 <_free_r+0x24>
 8012696:	4613      	mov	r3, r2
 8012698:	685a      	ldr	r2, [r3, #4]
 801269a:	b10a      	cbz	r2, 80126a0 <_free_r+0x54>
 801269c:	42a2      	cmp	r2, r4
 801269e:	d9fa      	bls.n	8012696 <_free_r+0x4a>
 80126a0:	6819      	ldr	r1, [r3, #0]
 80126a2:	1858      	adds	r0, r3, r1
 80126a4:	42a0      	cmp	r0, r4
 80126a6:	d10b      	bne.n	80126c0 <_free_r+0x74>
 80126a8:	6820      	ldr	r0, [r4, #0]
 80126aa:	4401      	add	r1, r0
 80126ac:	1858      	adds	r0, r3, r1
 80126ae:	4282      	cmp	r2, r0
 80126b0:	6019      	str	r1, [r3, #0]
 80126b2:	d1dd      	bne.n	8012670 <_free_r+0x24>
 80126b4:	6810      	ldr	r0, [r2, #0]
 80126b6:	6852      	ldr	r2, [r2, #4]
 80126b8:	605a      	str	r2, [r3, #4]
 80126ba:	4401      	add	r1, r0
 80126bc:	6019      	str	r1, [r3, #0]
 80126be:	e7d7      	b.n	8012670 <_free_r+0x24>
 80126c0:	d902      	bls.n	80126c8 <_free_r+0x7c>
 80126c2:	230c      	movs	r3, #12
 80126c4:	602b      	str	r3, [r5, #0]
 80126c6:	e7d3      	b.n	8012670 <_free_r+0x24>
 80126c8:	6820      	ldr	r0, [r4, #0]
 80126ca:	1821      	adds	r1, r4, r0
 80126cc:	428a      	cmp	r2, r1
 80126ce:	bf04      	itt	eq
 80126d0:	6811      	ldreq	r1, [r2, #0]
 80126d2:	6852      	ldreq	r2, [r2, #4]
 80126d4:	6062      	str	r2, [r4, #4]
 80126d6:	bf04      	itt	eq
 80126d8:	1809      	addeq	r1, r1, r0
 80126da:	6021      	streq	r1, [r4, #0]
 80126dc:	605c      	str	r4, [r3, #4]
 80126de:	e7c7      	b.n	8012670 <_free_r+0x24>
 80126e0:	bd38      	pop	{r3, r4, r5, pc}
 80126e2:	bf00      	nop
 80126e4:	20008478 	.word	0x20008478

080126e8 <_malloc_r>:
 80126e8:	b570      	push	{r4, r5, r6, lr}
 80126ea:	1ccd      	adds	r5, r1, #3
 80126ec:	f025 0503 	bic.w	r5, r5, #3
 80126f0:	3508      	adds	r5, #8
 80126f2:	2d0c      	cmp	r5, #12
 80126f4:	bf38      	it	cc
 80126f6:	250c      	movcc	r5, #12
 80126f8:	2d00      	cmp	r5, #0
 80126fa:	4606      	mov	r6, r0
 80126fc:	db01      	blt.n	8012702 <_malloc_r+0x1a>
 80126fe:	42a9      	cmp	r1, r5
 8012700:	d903      	bls.n	801270a <_malloc_r+0x22>
 8012702:	230c      	movs	r3, #12
 8012704:	6033      	str	r3, [r6, #0]
 8012706:	2000      	movs	r0, #0
 8012708:	bd70      	pop	{r4, r5, r6, pc}
 801270a:	f000 f857 	bl	80127bc <__malloc_lock>
 801270e:	4a21      	ldr	r2, [pc, #132]	; (8012794 <_malloc_r+0xac>)
 8012710:	6814      	ldr	r4, [r2, #0]
 8012712:	4621      	mov	r1, r4
 8012714:	b991      	cbnz	r1, 801273c <_malloc_r+0x54>
 8012716:	4c20      	ldr	r4, [pc, #128]	; (8012798 <_malloc_r+0xb0>)
 8012718:	6823      	ldr	r3, [r4, #0]
 801271a:	b91b      	cbnz	r3, 8012724 <_malloc_r+0x3c>
 801271c:	4630      	mov	r0, r6
 801271e:	f000 f83d 	bl	801279c <_sbrk_r>
 8012722:	6020      	str	r0, [r4, #0]
 8012724:	4629      	mov	r1, r5
 8012726:	4630      	mov	r0, r6
 8012728:	f000 f838 	bl	801279c <_sbrk_r>
 801272c:	1c43      	adds	r3, r0, #1
 801272e:	d124      	bne.n	801277a <_malloc_r+0x92>
 8012730:	230c      	movs	r3, #12
 8012732:	6033      	str	r3, [r6, #0]
 8012734:	4630      	mov	r0, r6
 8012736:	f000 f842 	bl	80127be <__malloc_unlock>
 801273a:	e7e4      	b.n	8012706 <_malloc_r+0x1e>
 801273c:	680b      	ldr	r3, [r1, #0]
 801273e:	1b5b      	subs	r3, r3, r5
 8012740:	d418      	bmi.n	8012774 <_malloc_r+0x8c>
 8012742:	2b0b      	cmp	r3, #11
 8012744:	d90f      	bls.n	8012766 <_malloc_r+0x7e>
 8012746:	600b      	str	r3, [r1, #0]
 8012748:	50cd      	str	r5, [r1, r3]
 801274a:	18cc      	adds	r4, r1, r3
 801274c:	4630      	mov	r0, r6
 801274e:	f000 f836 	bl	80127be <__malloc_unlock>
 8012752:	f104 000b 	add.w	r0, r4, #11
 8012756:	1d23      	adds	r3, r4, #4
 8012758:	f020 0007 	bic.w	r0, r0, #7
 801275c:	1ac3      	subs	r3, r0, r3
 801275e:	d0d3      	beq.n	8012708 <_malloc_r+0x20>
 8012760:	425a      	negs	r2, r3
 8012762:	50e2      	str	r2, [r4, r3]
 8012764:	e7d0      	b.n	8012708 <_malloc_r+0x20>
 8012766:	428c      	cmp	r4, r1
 8012768:	684b      	ldr	r3, [r1, #4]
 801276a:	bf16      	itet	ne
 801276c:	6063      	strne	r3, [r4, #4]
 801276e:	6013      	streq	r3, [r2, #0]
 8012770:	460c      	movne	r4, r1
 8012772:	e7eb      	b.n	801274c <_malloc_r+0x64>
 8012774:	460c      	mov	r4, r1
 8012776:	6849      	ldr	r1, [r1, #4]
 8012778:	e7cc      	b.n	8012714 <_malloc_r+0x2c>
 801277a:	1cc4      	adds	r4, r0, #3
 801277c:	f024 0403 	bic.w	r4, r4, #3
 8012780:	42a0      	cmp	r0, r4
 8012782:	d005      	beq.n	8012790 <_malloc_r+0xa8>
 8012784:	1a21      	subs	r1, r4, r0
 8012786:	4630      	mov	r0, r6
 8012788:	f000 f808 	bl	801279c <_sbrk_r>
 801278c:	3001      	adds	r0, #1
 801278e:	d0cf      	beq.n	8012730 <_malloc_r+0x48>
 8012790:	6025      	str	r5, [r4, #0]
 8012792:	e7db      	b.n	801274c <_malloc_r+0x64>
 8012794:	20008478 	.word	0x20008478
 8012798:	2000847c 	.word	0x2000847c

0801279c <_sbrk_r>:
 801279c:	b538      	push	{r3, r4, r5, lr}
 801279e:	4c06      	ldr	r4, [pc, #24]	; (80127b8 <_sbrk_r+0x1c>)
 80127a0:	2300      	movs	r3, #0
 80127a2:	4605      	mov	r5, r0
 80127a4:	4608      	mov	r0, r1
 80127a6:	6023      	str	r3, [r4, #0]
 80127a8:	f7f0 f9ea 	bl	8002b80 <_sbrk>
 80127ac:	1c43      	adds	r3, r0, #1
 80127ae:	d102      	bne.n	80127b6 <_sbrk_r+0x1a>
 80127b0:	6823      	ldr	r3, [r4, #0]
 80127b2:	b103      	cbz	r3, 80127b6 <_sbrk_r+0x1a>
 80127b4:	602b      	str	r3, [r5, #0]
 80127b6:	bd38      	pop	{r3, r4, r5, pc}
 80127b8:	200097d8 	.word	0x200097d8

080127bc <__malloc_lock>:
 80127bc:	4770      	bx	lr

080127be <__malloc_unlock>:
 80127be:	4770      	bx	lr

080127c0 <_init>:
 80127c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80127c2:	bf00      	nop
 80127c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80127c6:	bc08      	pop	{r3}
 80127c8:	469e      	mov	lr, r3
 80127ca:	4770      	bx	lr

080127cc <_fini>:
 80127cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80127ce:	bf00      	nop
 80127d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80127d2:	bc08      	pop	{r3}
 80127d4:	469e      	mov	lr, r3
 80127d6:	4770      	bx	lr
